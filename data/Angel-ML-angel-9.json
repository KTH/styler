{
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/9/LongIntVector.java\nindex 482a1f1aa0..2744dd819f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/9/LongIntVector.java\n@@ -26,355 +26,359 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n import org.apache.commons.lang.ArrayUtils;\n \n public class LongIntVector extends IntVector implements LongKeyVector, SimpleVector {\n-  private long dim;\n-\n-  public LongIntVector() {\n-    super();\n-  }\n-\n-  public LongIntVector(int matrixId, int rowId, int clock, long dim, LongIntVectorStorage storage) {\n-    this.matrixId = matrixId;\n-    this.rowId = rowId;\n-    this.clock = clock;\n-    this.dim = dim;\n-    this.storage = storage;\n-  }\n-\n-  public LongIntVector(long dim, LongIntVectorStorage storage) {\n-    this(0, 0, 0, dim, storage);\n-  }\n-\n-  public long getDim() {\n-    return dim;\n-  }\n-\n-  public void setDim(long dim) {\n-    this.dim = dim;\n-  }\n-\n-  public long dim() {\n-    return (long) getDim();\n-  }\n-\n-  public int get(long idx) {\n-    return ((LongIntVectorStorage) storage).get(idx);\n-  }\n-\n-  public int[] get(long[] idxs) {\n-    return ((LongIntVectorStorage) storage).get(idxs);\n-  }\n-\n-  public void set(long idx, int value) {\n-    ((LongIntVectorStorage) storage).set(idx, value);\n-  }\n-\n-  public int max() {\n-    LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n-    int maxval = Integer.MIN_VALUE;\n-    if (idstorage.isSparse()) {\n-      IntIterator iter = idstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        int val = iter.nextInt();\n-        if (val > maxval) {\n-          maxval = val;\n-        }\n-      }\n-    } else {\n-      for (int val : idstorage.getValues()) {\n-        if (val > maxval) {\n-          maxval = val;\n-        }\n-      }\n+    private long dim;\n+\n+    public LongIntVector() {\n+        super();\n     }\n-    return maxval;\n-  }\n-\n-  public int min() {\n-    LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n-    int minval = Integer.MAX_VALUE;\n-    if (idstorage.isSparse()) {\n-      IntIterator iter = idstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        int val = iter.nextInt();\n-        if (val < minval) {\n-          minval = val;\n-        }\n-      }\n-    } else {\n-      for (int val : idstorage.getValues()) {\n-        if (val < minval) {\n-          minval = val;\n-        }\n-      }\n+\n+    public LongIntVector(int matrixId, int rowId, int clock, long dim,\n+                         LongIntVectorStorage storage) {\n+        this.matrixId = matrixId;\n+        this.rowId = rowId;\n+        this.clock = clock;\n+        this.dim = dim;\n+        this.storage = storage;\n     }\n-    return minval;\n-  }\n-\n-  public long argmax() {\n-    LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n-    int maxval = Integer.MIN_VALUE;\n-    long maxidx = -1;\n-    if (idstorage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        long idx = entry.getLongKey();\n-        int val = entry.getIntValue();\n-        if (val > maxval) {\n-          maxval = val;\n-          maxidx = idx;\n-        }\n-      }\n-    } else {\n-      long[] indices = idstorage.getIndices();\n-      int[] val = idstorage.getValues();\n-      long size = idstorage.size();\n-      for (int i = 0; i < size; i++) {\n-        long idx = indices[i];\n-        if (val[i] > maxval) {\n-          maxval = val[i];\n-          maxidx = idx;\n-        }\n-      }\n+\n+    public LongIntVector(long dim, LongIntVectorStorage storage) {\n+        this(0, 0, 0, dim, storage);\n     }\n-    return maxidx;\n-  }\n-\n-  public long argmin() {\n-    LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n-    int minval = Integer.MAX_VALUE;\n-    long minidx = -1;\n-    if (idstorage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        long idx = entry.getLongKey();\n-        int val = entry.getIntValue();\n-        if (val < minval) {\n-          minval = val;\n-          minidx = idx;\n-        }\n-      }\n-    } else {\n-      long[] indices = idstorage.getIndices();\n-      int[] val = idstorage.getValues();\n-      long size = idstorage.size();\n-      for (int i = 0; i < size; i++) {\n-        long idx = indices[i];\n-        if (val[i] < minval) {\n-          minval = val[i];\n-          minidx = idx;\n-        }\n-      }\n+\n+    public long getDim() {\n+        return dim;\n     }\n-    return minidx;\n-  }\n-\n-  public double std() {\n-    LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n-    double sumval = 0.0;\n-    double sumval2 = 0.0;\n-    if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        double val = iter.nextInt();\n-        sumval += val;\n-        sumval2 += val * val;\n-      }\n-    } else {\n-      for (double val : dstorage.getValues()) {\n-        sumval += val;\n-        sumval2 += val * val;\n-      }\n+\n+    public void setDim(long dim) {\n+        this.dim = dim;\n     }\n-    sumval /= getDim();\n-    sumval2 /= getDim();\n-    return Math.sqrt(sumval2 - sumval * sumval);\n-  }\n-\n-  public double average() {\n-    LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n-    double sumval = 0.0;\n-    if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        sumval += iter.nextInt();\n-      }\n-    } else {\n-      for (double val : dstorage.getValues()) {\n-        sumval += val;\n-      }\n+\n+    public long dim() {\n+        return (long) getDim();\n     }\n \n-    sumval /= getDim();\n-    return sumval;\n-  }\n-\n-  public long size() {\n-    return ((LongIntVectorStorage) storage).size();\n-  }\n-\n-  public long numZeros() {\n-    LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (long) dim;\n-    long numZero = 0;\n-    if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        if (iter.nextInt() != 0) {\n-          numZero += 1;\n-        }\n-      }\n-    } else {\n-      for (int val : dstorage.getValues()) {\n-        if (val != 0) {\n-          numZero += 1;\n-        }\n-      }\n+    public int get(long idx) {\n+        return ((LongIntVectorStorage) storage).get(idx);\n     }\n-    return (long) getDim() - numZero;\n-  }\n-\n-  public LongIntVector clone() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).clone());\n-  }\n-\n-  @Override\n-  public LongIntVector copy() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).copy());\n-  }\n-\n-  @Override\n-  public LongIntVector emptyLike() {\n-    if (storage.isSparse()) {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySparse());\n-    } else {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySorted());\n+\n+    public int[] get(long[] idxs) {\n+        return ((LongIntVectorStorage) storage).get(idxs);\n     }\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage getStorage() {\n-    return (LongIntVectorStorage) storage;\n-  }\n-\n-  @Override\n-  public boolean hasKey(long idx) {\n-    return getStorage().hasKey(idx);\n-  }\n-\n-  @Override\n-  public Vector filter(double threshold) {\n-    LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n-\n-    if (storage.isDense()) {\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (Math.abs(values[i]) >= threshold) {\n-          newStorage.set(i, values[i]);\n-        }\n-      }\n-    } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) >= threshold) {\n-          newStorage.set(entry.getLongKey(), value);\n+\n+    public void set(long idx, int value) {\n+        ((LongIntVectorStorage) storage).set(idx, value);\n+    }\n+\n+    public int max() {\n+        LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return 0;\n+        int maxval = Integer.MIN_VALUE;\n+        if (idstorage.isSparse()) {\n+            IntIterator iter = idstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                int val = iter.nextInt();\n+                if (val > maxval) {\n+                    maxval = val;\n+                }\n+            }\n+        } else {\n+            for (int val : idstorage.getValues()) {\n+                if (val > maxval) {\n+                    maxval = val;\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      long[] indices = ((LongIntVectorStorage) storage).getIndices();\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n-      long size = ((LongIntVectorStorage) storage).size();\n-      for (int k = 0; k < size; k++) {\n-        if (Math.abs(values[k]) >= threshold) {\n-          newStorage.set(indices[k], values[k]);\n+        return maxval;\n+    }\n+\n+    public int min() {\n+        LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return 0;\n+        int minval = Integer.MAX_VALUE;\n+        if (idstorage.isSparse()) {\n+            IntIterator iter = idstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                int val = iter.nextInt();\n+                if (val < minval) {\n+                    minval = val;\n+                }\n+            }\n+        } else {\n+            for (int val : idstorage.getValues()) {\n+                if (val < minval) {\n+                    minval = val;\n+                }\n+            }\n         }\n-      }\n+        return minval;\n     }\n \n-    return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n-  }\n+    public long argmax() {\n+        LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return -1;\n+        int maxval = Integer.MIN_VALUE;\n+        long maxidx = -1;\n+        if (idstorage.isSparse()) {\n+            ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n+            while (iter.hasNext()) {\n+                Long2IntMap.Entry entry = iter.next();\n+                long idx = entry.getLongKey();\n+                int val = entry.getIntValue();\n+                if (val > maxval) {\n+                    maxval = val;\n+                    maxidx = idx;\n+                }\n+            }\n+        } else {\n+            long[] indices = idstorage.getIndices();\n+            int[] val = idstorage.getValues();\n+            long size = idstorage.size();\n+            for (int i = 0; i < size; i++) {\n+                long idx = indices[i];\n+                if (val[i] > maxval) {\n+                    maxval = val[i];\n+                    maxidx = idx;\n+                }\n+            }\n+        }\n+        return maxidx;\n+    }\n \n-  @Override\n-  public Vector ifilter(double threshold) {\n+    public long argmin() {\n+        LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return -1;\n+        int minval = Integer.MAX_VALUE;\n+        long minidx = -1;\n+        if (idstorage.isSparse()) {\n+            ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n+            while (iter.hasNext()) {\n+                Long2IntMap.Entry entry = iter.next();\n+                long idx = entry.getLongKey();\n+                int val = entry.getIntValue();\n+                if (val < minval) {\n+                    minval = val;\n+                    minidx = idx;\n+                }\n+            }\n+        } else {\n+            long[] indices = idstorage.getIndices();\n+            int[] val = idstorage.getValues();\n+            long size = idstorage.size();\n+            for (int i = 0; i < size; i++) {\n+                long idx = indices[i];\n+                if (val[i] < minval) {\n+                    minval = val[i];\n+                    minidx = idx;\n+                }\n+            }\n+        }\n+        return minidx;\n+    }\n \n-    if (storage.isDense()) {\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (Math.abs(values[i]) <= threshold) {\n-          values[i] = 0;\n+    public double std() {\n+        LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n+        if (dstorage.size() == 0) return 0;\n+        double sumval = 0.0;\n+        double sumval2 = 0.0;\n+        if (dstorage.isSparse()) {\n+            IntIterator iter = dstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                double val = iter.nextInt();\n+                sumval += val;\n+                sumval2 += val * val;\n+            }\n+        } else {\n+            for (double val : dstorage.getValues()) {\n+                sumval += val;\n+                sumval2 += val * val;\n+            }\n         }\n-      }\n-    } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) <= threshold) {\n-          iter.remove();\n+        sumval /= getDim();\n+        sumval2 /= getDim();\n+        return Math.sqrt(sumval2 - sumval * sumval);\n+    }\n+\n+    public double average() {\n+        LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n+        if (dstorage.size() == 0) return 0;\n+        double sumval = 0.0;\n+        if (dstorage.isSparse()) {\n+            IntIterator iter = dstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                sumval += iter.nextInt();\n+            }\n+        } else {\n+            for (double val : dstorage.getValues()) {\n+                sumval += val;\n+            }\n         }\n-      }\n-    } else {\n-      long[] indices = ((LongIntVectorStorage) storage).getIndices();\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n-      long size = ((LongIntVectorStorage) storage).size();\n-      for (int k = 0; k < size; k++) {\n-        if (Math.abs(values[k]) <= threshold) {\n-          values = ArrayUtils.remove(values, k);\n-          indices = ArrayUtils.remove(indices, k);\n+\n+        sumval /= getDim();\n+        return sumval;\n+    }\n+\n+    public long size() {\n+        return ((LongIntVectorStorage) storage).size();\n+    }\n+\n+    public long numZeros() {\n+        LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n+        if (dstorage.size() == 0) return (long) dim;\n+        long numZero = 0;\n+        if (dstorage.isSparse()) {\n+            IntIterator iter = dstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                if (iter.nextInt() != 0) {\n+                    numZero += 1;\n+                }\n+            }\n+        } else {\n+            for (int val : dstorage.getValues()) {\n+                if (val != 0) {\n+                    numZero += 1;\n+                }\n+            }\n         }\n-      }\n+        return (long) getDim() - numZero;\n     }\n \n-    return new LongIntVector(matrixId, rowId, clock, getDim(), (LongIntVectorStorage) storage);\n-  }\n+    public LongIntVector clone() {\n+        return new LongIntVector(matrixId, rowId, clock, dim,\n+                ((LongIntVectorStorage) storage).clone());\n+    }\n \n-  @Override\n-  public Vector filterUp(double threshold) {\n-    LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n+    @Override\n+    public LongIntVector copy() {\n+        return new LongIntVector(matrixId, rowId, clock, dim,\n+                ((LongIntVectorStorage) storage).copy());\n+    }\n \n-    if (storage.isDense()) {\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (values[i] >= threshold) {\n-          newStorage.set(i, values[i]);\n+    @Override\n+    public LongIntVector emptyLike() {\n+        if (storage.isSparse()) {\n+            return new LongIntVector(matrixId, rowId, clock, dim,\n+                    ((LongIntVectorStorage) storage).emptySparse());\n+        } else {\n+            return new LongIntVector(matrixId, rowId, clock, dim,\n+                    ((LongIntVectorStorage) storage).emptySorted());\n         }\n-      }\n-    } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (value >= threshold) {\n-          newStorage.set(entry.getLongKey(), value);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage getStorage() {\n+        return (LongIntVectorStorage) storage;\n+    }\n+\n+    @Override\n+    public boolean hasKey(long idx) {\n+        return getStorage().hasKey(idx);\n+    }\n+\n+    @Override\n+    public Vector filter(double threshold) {\n+        LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n+\n+        if (storage.isDense()) {\n+            int[] values = ((LongIntVectorStorage) storage).getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                if (Math.abs(values[i]) >= threshold) {\n+                    newStorage.set(i, values[i]);\n+                }\n+            }\n+        } else if (storage.isSparse()) {\n+            ObjectIterator<Long2IntMap.Entry> iter =\n+                    ((LongIntVectorStorage) storage).entryIterator();\n+            while (iter.hasNext()) {\n+                Long2IntMap.Entry entry = iter.next();\n+                int value = entry.getIntValue();\n+                if (Math.abs(value) >= threshold) {\n+                    newStorage.set(entry.getLongKey(), value);\n+                }\n+            }\n+        } else {\n+            long[] indices = ((LongIntVectorStorage) storage).getIndices();\n+            int[] values = ((LongIntVectorStorage) storage).getValues();\n+\n+            long size = ((LongIntVectorStorage) storage).size();\n+            for (int k = 0; k < size; k++) {\n+                if (Math.abs(values[k]) >= threshold) {\n+                    newStorage.set(indices[k], values[k]);\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      long[] indices = ((LongIntVectorStorage) storage).getIndices();\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n-      long size = ((LongIntVectorStorage) storage).size();\n-      for (int k = 0; k < size; k++) {\n-        if (values[k] >= threshold) {\n-          newStorage.set(indices[k], values[k]);\n+\n+        return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n+    }\n+\n+    @Override\n+    public Vector ifilter(double threshold) {\n+\n+        if (storage.isDense()) {\n+            int[] values = ((LongIntVectorStorage) storage).getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                if (Math.abs(values[i]) <= threshold) {\n+                    values[i] = 0;\n+                }\n+            }\n+        } else if (storage.isSparse()) {\n+            ObjectIterator<Long2IntMap.Entry> iter =\n+                    ((LongIntVectorStorage) storage).entryIterator();\n+            while (iter.hasNext()) {\n+                Long2IntMap.Entry entry = iter.next();\n+                int value = entry.getIntValue();\n+                if (Math.abs(value) <= threshold) {\n+                    iter.remove();\n+                }\n+            }\n+        } else {\n+            long[] indices = ((LongIntVectorStorage) storage).getIndices();\n+            int[] values = ((LongIntVectorStorage) storage).getValues();\n+\n+            long size = ((LongIntVectorStorage) storage).size();\n+            for (int k = 0; k < size; k++) {\n+                if (Math.abs(values[k]) <= threshold) {\n+                    values = ArrayUtils.remove(values, k);\n+                    indices = ArrayUtils.remove(indices, k);\n+                }\n+            }\n         }\n-      }\n+\n+        return new LongIntVector(matrixId, rowId, clock, getDim(), (LongIntVectorStorage) storage);\n     }\n \n-    return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n-  }\n+    @Override\n+    public Vector filterUp(double threshold) {\n+        LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n+\n+        if (storage.isDense()) {\n+            int[] values = ((LongIntVectorStorage) storage).getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                if (values[i] >= threshold) {\n+                    newStorage.set(i, values[i]);\n+                }\n+            }\n+        } else if (storage.isSparse()) {\n+            ObjectIterator<Long2IntMap.Entry> iter =\n+                    ((LongIntVectorStorage) storage).entryIterator();\n+            while (iter.hasNext()) {\n+                Long2IntMap.Entry entry = iter.next();\n+                int value = entry.getIntValue();\n+                if (value >= threshold) {\n+                    newStorage.set(entry.getLongKey(), value);\n+                }\n+            }\n+        } else {\n+            long[] indices = ((LongIntVectorStorage) storage).getIndices();\n+            int[] values = ((LongIntVectorStorage) storage).getValues();\n+\n+            long size = ((LongIntVectorStorage) storage).size();\n+            for (int k = 0; k < size; k++) {\n+                if (values[k] >= threshold) {\n+                    newStorage.set(indices[k], values[k]);\n+                }\n+            }\n+        }\n+\n+        return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n+    }\n }\n",
            "diff_size": 532
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "264",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/9/LongIntVector.java\nindex 482a1f1aa0..0f3e2cd89e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/9/LongIntVector.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.vector;\n \n import com.tencent.angel.ml.math2.storage.LongIntSparseVectorStorage;\n@@ -70,7 +69,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public int max() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+  return 0;\n     int maxval = Integer.MIN_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -92,7 +92,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public int min() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+  return 0;\n     int minval = Integer.MAX_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -114,7 +115,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long argmax() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+  return -1;\n     int maxval = Integer.MIN_VALUE;\n     long maxidx = -1;\n     if (idstorage.isSparse()) {\n@@ -145,7 +147,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long argmin() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+  return -1;\n     int minval = Integer.MAX_VALUE;\n     long minidx = -1;\n     if (idstorage.isSparse()) {\n@@ -176,7 +179,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public double std() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+  return 0;\n     double sumval = 0.0;\n     double sumval2 = 0.0;\n     if (dstorage.isSparse()) {\n@@ -199,7 +203,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public double average() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+  return 0;\n     double sumval = 0.0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -222,7 +227,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long numZeros() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (long) dim;\n+    if (dstorage.size() == 0)\n+  return (long) dim;\n     long numZero = 0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -242,24 +248,20 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n   }\n \n   public LongIntVector clone() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).clone());\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).clone());\n   }\n \n   @Override\n   public LongIntVector copy() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).copy());\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).copy());\n   }\n \n   @Override\n   public LongIntVector emptyLike() {\n     if (storage.isSparse()) {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySparse());\n-    } else {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySorted());\n+      return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySparse());\n+  } else {\n+      return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySorted());\n     }\n   }\n \n@@ -310,8 +312,7 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   @Override\n   public Vector ifilter(double threshold) {\n-\n-    if (storage.isDense()) {\n+  if (storage.isDense()) {\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n         if (Math.abs(values[i]) <= threshold) {\n@@ -377,4 +378,4 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n     return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "266",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "293",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "324",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "357",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/9/LongIntVector.java\nindex 482a1f1aa0..4afadcf1c3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/9/LongIntVector.java\n@@ -26,355 +26,353 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n import org.apache.commons.lang.ArrayUtils;\n \n public class LongIntVector extends IntVector implements LongKeyVector, SimpleVector {\n-  private long dim;\n+    private long dim;\n \n-  public LongIntVector() {\n+    public LongIntVector() {\n     super();\n-  }\n+    }\n \n-  public LongIntVector(int matrixId, int rowId, int clock, long dim, LongIntVectorStorage storage) {\n+    public LongIntVector(int matrixId, int rowId, int clock, long dim, LongIntVectorStorage storage) {\n     this.matrixId = matrixId;\n     this.rowId = rowId;\n     this.clock = clock;\n     this.dim = dim;\n     this.storage = storage;\n-  }\n+    }\n \n-  public LongIntVector(long dim, LongIntVectorStorage storage) {\n+    public LongIntVector(long dim, LongIntVectorStorage storage) {\n     this(0, 0, 0, dim, storage);\n-  }\n+    }\n \n-  public long getDim() {\n+    public long getDim() {\n     return dim;\n-  }\n+    }\n \n-  public void setDim(long dim) {\n+    public void setDim(long dim) {\n     this.dim = dim;\n-  }\n+    }\n \n-  public long dim() {\n+    public long dim() {\n     return (long) getDim();\n-  }\n+    }\n \n-  public int get(long idx) {\n+    public int get(long idx) {\n     return ((LongIntVectorStorage) storage).get(idx);\n-  }\n+    }\n \n-  public int[] get(long[] idxs) {\n+    public int[] get(long[] idxs) {\n     return ((LongIntVectorStorage) storage).get(idxs);\n-  }\n+    }\n \n-  public void set(long idx, int value) {\n+    public void set(long idx, int value) {\n     ((LongIntVectorStorage) storage).set(idx, value);\n-  }\n+    }\n \n-  public int max() {\n+    public int max() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+        return 0;\n+\n     int maxval = Integer.MIN_VALUE;\n     if (idstorage.isSparse()) {\n-      IntIterator iter = idstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        int val = iter.nextInt();\n-        if (val > maxval) {\n-          maxval = val;\n+        IntIterator iter = idstorage.valueIterator();\n+        while (iter.hasNext()) {\n+                                  int val = iter.nextInt();\n+                                  if (val > maxval) {\n+            maxval = val;\n+                                  }\n         }\n-      }\n     } else {\n       for (int val : idstorage.getValues()) {\n-        if (val > maxval) {\n+               if (val > maxval) {\n           maxval = val;\n-        }\n+               }\n       }\n     }\n     return maxval;\n-  }\n+    }\n \n-  public int min() {\n+    public int min() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+        return 0;\n+\n     int minval = Integer.MAX_VALUE;\n     if (idstorage.isSparse()) {\n-      IntIterator iter = idstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        int val = iter.nextInt();\n-        if (val < minval) {\n-          minval = val;\n+        IntIterator iter = idstorage.valueIterator();\n+        while (iter.hasNext()) {\n+                                  int val = iter.nextInt();\n+                                  if (val < minval) {\n+            minval = val;\n+                                  }\n         }\n-      }\n     } else {\n       for (int val : idstorage.getValues()) {\n-        if (val < minval) {\n+               if (val < minval) {\n           minval = val;\n-        }\n+               }\n       }\n     }\n     return minval;\n-  }\n+    }\n \n-  public long argmax() {\n+    public long argmax() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+        return -1;\n+\n     int maxval = Integer.MIN_VALUE;\n     long maxidx = -1;\n     if (idstorage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        long idx = entry.getLongKey();\n-        int val = entry.getIntValue();\n-        if (val > maxval) {\n-          maxval = val;\n-          maxidx = idx;\n+        ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n+        while (iter.hasNext()) {\n+                                  Long2IntMap.Entry entry = iter.next();\n+                                  long idx = entry.getLongKey();\n+                                  int val = entry.getIntValue();\n+                                  if (val > maxval) {\n+            maxval = val;\n+            maxidx = idx;\n+                                  }\n         }\n-      }\n     } else {\n       long[] indices = idstorage.getIndices();\n       int[] val = idstorage.getValues();\n       long size = idstorage.size();\n       for (int i = 0; i < size; i++) {\n-        long idx = indices[i];\n-        if (val[i] > maxval) {\n+               long idx = indices[i];\n+               if (val[i] > maxval) {\n           maxval = val[i];\n           maxidx = idx;\n-        }\n+               }\n       }\n     }\n     return maxidx;\n-  }\n+    }\n \n-  public long argmin() {\n+    public long argmin() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+        return -1;\n+\n     int minval = Integer.MAX_VALUE;\n     long minidx = -1;\n     if (idstorage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        long idx = entry.getLongKey();\n-        int val = entry.getIntValue();\n-        if (val < minval) {\n-          minval = val;\n-          minidx = idx;\n+        ObjectIterator<Long2IntMap.Entry> iter = idstorage.entryIterator();\n+        while (iter.hasNext()) {\n+                                  Long2IntMap.Entry entry = iter.next();\n+                                  long idx = entry.getLongKey();\n+                                  int val = entry.getIntValue();\n+                                  if (val < minval) {\n+            minval = val;\n+            minidx = idx;\n+                                  }\n         }\n-      }\n     } else {\n       long[] indices = idstorage.getIndices();\n       int[] val = idstorage.getValues();\n       long size = idstorage.size();\n       for (int i = 0; i < size; i++) {\n-        long idx = indices[i];\n-        if (val[i] < minval) {\n+               long idx = indices[i];\n+               if (val[i] < minval) {\n           minval = val[i];\n           minidx = idx;\n-        }\n+               }\n       }\n     }\n     return minidx;\n-  }\n+    }\n \n-  public double std() {\n+    public double std() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+        return 0;\n     double sumval = 0.0;\n     double sumval2 = 0.0;\n     if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        double val = iter.nextInt();\n-        sumval += val;\n-        sumval2 += val * val;\n-      }\n+        IntIterator iter = dstorage.valueIterator();\n+        while (iter.hasNext()) {\n+                                 double val = iter.nextInt();\n+                                 sumval += val;\n+                                 sumval2 += val * val;\n+        }\n     } else {\n       for (double val : dstorage.getValues()) {\n-        sumval += val;\n-        sumval2 += val * val;\n+               sumval += val;\n+               sumval2 += val * val;\n       }\n     }\n     sumval /= getDim();\n     sumval2 /= getDim();\n     return Math.sqrt(sumval2 - sumval * sumval);\n-  }\n+    }\n \n-  public double average() {\n+    public double average() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+        return 0;\n     double sumval = 0.0;\n     if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        sumval += iter.nextInt();\n-      }\n+        IntIterator iter = dstorage.valueIterator();\n+        while (iter.hasNext()) {\n+                                 sumval += iter.nextInt();\n+        }\n     } else {\n       for (double val : dstorage.getValues()) {\n-        sumval += val;\n+               sumval += val;\n       }\n     }\n-\n     sumval /= getDim();\n     return sumval;\n-  }\n+    }\n \n-  public long size() {\n+    public long size() {\n     return ((LongIntVectorStorage) storage).size();\n-  }\n+    }\n \n-  public long numZeros() {\n+    public long numZeros() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (long) dim;\n+    if (dstorage.size() == 0)\n+        return (long) dim;\n     long numZero = 0;\n     if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        if (iter.nextInt() != 0) {\n-          numZero += 1;\n+        IntIterator iter = dstorage.valueIterator();\n+        while (iter.hasNext()) {\n+                                 if (iter.nextInt() != 0) {\n+            numZero += 1;\n+                                 }\n         }\n-      }\n     } else {\n       for (int val : dstorage.getValues()) {\n-        if (val != 0) {\n+               if (val != 0) {\n           numZero += 1;\n-        }\n+               }\n       }\n     }\n     return (long) getDim() - numZero;\n-  }\n+    }\n \n-  public LongIntVector clone() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).clone());\n-  }\n+    public LongIntVector clone() {\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).clone());\n+    }\n \n-  @Override\n-  public LongIntVector copy() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).copy());\n-  }\n+    @Override\n+    public LongIntVector copy() {\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).copy());\n+    }\n \n-  @Override\n-  public LongIntVector emptyLike() {\n+    @Override\n+    public LongIntVector emptyLike() {\n     if (storage.isSparse()) {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySparse());\n+        return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySparse());\n     } else {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySorted());\n+      return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySorted());\n+    }\n     }\n-  }\n \n-  @Override\n-  public LongIntVectorStorage getStorage() {\n+    @Override\n+    public LongIntVectorStorage getStorage() {\n     return (LongIntVectorStorage) storage;\n-  }\n+    }\n \n-  @Override\n-  public boolean hasKey(long idx) {\n+    @Override\n+    public boolean hasKey(long idx) {\n     return getStorage().hasKey(idx);\n-  }\n+    }\n \n-  @Override\n-  public Vector filter(double threshold) {\n+    @Override\n+    public Vector filter(double threshold) {\n     LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n-\n     if (storage.isDense()) {\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (Math.abs(values[i]) >= threshold) {\n-          newStorage.set(i, values[i]);\n+        int[] values = ((LongIntVectorStorage) storage).getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                               if (Math.abs(values[i]) >= threshold) {\n+            newStorage.set(i, values[i]);\n+                               }\n         }\n-      }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) >= threshold) {\n-          newStorage.set(entry.getLongKey(), value);\n-        }\n-      }\n+                                               ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n+                                               while (iter.hasNext()) {\n+                                       Long2IntMap.Entry entry = iter.next();\n+                                       int value = entry.getIntValue();\n+                                       if (Math.abs(value) >= threshold) {\n+                                                   newStorage.set(entry.getLongKey(), value);\n+                                       }\n+                                               }\n     } else {\n       long[] indices = ((LongIntVectorStorage) storage).getIndices();\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n       long size = ((LongIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n-        if (Math.abs(values[k]) >= threshold) {\n+               if (Math.abs(values[k]) >= threshold) {\n           newStorage.set(indices[k], values[k]);\n-        }\n+               }\n       }\n     }\n-\n     return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n-  }\n-\n-  @Override\n-  public Vector ifilter(double threshold) {\n+    }\n \n+    @Override\n+    public Vector ifilter(double threshold) {\n     if (storage.isDense()) {\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (Math.abs(values[i]) <= threshold) {\n-          values[i] = 0;\n+        int[] values = ((LongIntVectorStorage) storage).getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                               if (Math.abs(values[i]) <= threshold) {\n+            values[i] = 0;\n+                               }\n         }\n-      }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) <= threshold) {\n-          iter.remove();\n-        }\n-      }\n+                                                ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n+                                                while (iter.hasNext()) {\n+                                       Long2IntMap.Entry entry = iter.next();\n+                                       int value = entry.getIntValue();\n+                                       if (Math.abs(value) <= threshold) {\n+                                                    iter.remove();\n+                                       }\n+                                                }\n     } else {\n       long[] indices = ((LongIntVectorStorage) storage).getIndices();\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n       long size = ((LongIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n-        if (Math.abs(values[k]) <= threshold) {\n+               if (Math.abs(values[k]) <= threshold) {\n           values = ArrayUtils.remove(values, k);\n           indices = ArrayUtils.remove(indices, k);\n-        }\n+               }\n       }\n     }\n-\n     return new LongIntVector(matrixId, rowId, clock, getDim(), (LongIntVectorStorage) storage);\n-  }\n+    }\n \n-  @Override\n-  public Vector filterUp(double threshold) {\n+    @Override\n+    public Vector filterUp(double threshold) {\n     LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n-\n     if (storage.isDense()) {\n-      int[] values = ((LongIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (values[i] >= threshold) {\n-          newStorage.set(i, values[i]);\n+        int[] values = ((LongIntVectorStorage) storage).getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                               if (values[i] >= threshold) {\n+            newStorage.set(i, values[i]);\n+                               }\n         }\n-      }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (value >= threshold) {\n-          newStorage.set(entry.getLongKey(), value);\n-        }\n-      }\n+                                                 ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n+                                                 while (iter.hasNext()) {\n+                                       Long2IntMap.Entry entry = iter.next();\n+                                       int value = entry.getIntValue();\n+                                       if (value >= threshold) {\n+                                                     newStorage.set(entry.getLongKey(), value);\n+                                       }\n+                                                 }\n     } else {\n       long[] indices = ((LongIntVectorStorage) storage).getIndices();\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n       long size = ((LongIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n-        if (values[k] >= threshold) {\n+               if (values[k] >= threshold) {\n           newStorage.set(indices[k], values[k]);\n-        }\n+               }\n       }\n     }\n-\n     return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 211
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/9/LongIntVector.java\nindex 482a1f1aa0..e8e6a44f8d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/9/LongIntVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/9/LongIntVector.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.vector;\n \n import com.tencent.angel.ml.math2.storage.LongIntSparseVectorStorage;\n",
            "diff_size": 1
        }
    ]
}