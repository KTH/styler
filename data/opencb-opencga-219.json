{
    "error_id": "219",
    "information": {
        "errors": [
            {
                "line": "82",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n                if (numIndexedFiles > 0) {\n                    DataStore dataStore = VariantStorageManager.getDataStore(catalogManager, study.getFqn(), File.Bioformat.VARIANT, sessionId);\n                    // Check only once per datastore\n                    if (dataStores.add(dataStore)) {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler/219/NewProjectMetadataMigration.java\nindex 831eb0af58..069252afae 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler/219/NewProjectMetadataMigration.java\n@@ -79,7 +79,7 @@ public class NewProjectMetadataMigration {\n                         .getNumTotalResults();\n \n                 if (numIndexedFiles > 0) {\n-                    DataStore dataStore = VariantStorageManager.getDataStore(catalogManager, study.getFqn(), File.Bioformat.VARIANT, sessionId);\n+                DataStore dataStore = VariantStorageManager.getDataStore(catalogManager, study.getFqn(), File.Bioformat.VARIANT, sessionId);\n                     // Check only once per datastore\n                     if (dataStores.add(dataStore)) {\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/219/NewProjectMetadataMigration.java\nindex 831eb0af58..041f893eef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/219/NewProjectMetadataMigration.java\n@@ -36,109 +36,109 @@ import static org.opencb.opencga.storage.core.variant.annotation.annotators.Abst\n  */\n public class NewProjectMetadataMigration {\n \n-    private final StorageConfiguration storageConfiguration;\n-    private final CatalogManager catalogManager;\n-    private final ObjectMapper objectMapper;\n-    private final Logger logger = LoggerFactory.getLogger(NewProjectMetadataMigration.class);\n-\n-    public NewProjectMetadataMigration(StorageConfiguration storageConfiguration, CatalogManager catalogManager,\n-                                       MigrationCommandOptions.MigrateV1_4_0CommandOptions options) {\n-        this.storageConfiguration = storageConfiguration;\n-        this.catalogManager = catalogManager;\n-        objectMapper = new ObjectMapper()\n-                .addMixIn(GenericRecord.class, GenericRecordAvroJsonMixin.class);\n-    }\n+  private final StorageConfiguration storageConfiguration;\n+  private final CatalogManager catalogManager;\n+  private final ObjectMapper objectMapper;\n+  private final Logger logger = LoggerFactory.getLogger(NewProjectMetadataMigration.class);\n+\n+  public NewProjectMetadataMigration(StorageConfiguration storageConfiguration, CatalogManager catalogManager,\n+                                     MigrationCommandOptions.MigrateV1_4_0CommandOptions options) {\n+    this.storageConfiguration = storageConfiguration;\n+    this.catalogManager = catalogManager;\n+    objectMapper = new ObjectMapper()\n+        .addMixIn(GenericRecord.class, GenericRecordAvroJsonMixin.class);\n+  }\n+\n+  public void migrate(String sessionId) throws Exception {\n+    StorageEngineFactory storageEngineFactory = StorageEngineFactory.get(storageConfiguration);\n+\n+    List<Project> projects = catalogManager.getProjectManager().get(new Query(), new QueryOptions(\n+        QueryOptions.INCLUDE, Arrays.asList(\n+        ProjectDBAdaptor.QueryParams.NAME.key(),\n+        ProjectDBAdaptor.QueryParams.ID.key(),\n+        ProjectDBAdaptor.QueryParams.FQN.key(),\n+        ProjectDBAdaptor.QueryParams.ORGANISM.key(),\n+        ProjectDBAdaptor.QueryParams.STUDY.key()\n+    )), sessionId).getResults();\n+\n+    Set<DataStore> dataStores = new HashSet<>();\n+    for (Project project : projects) {\n+      logger.info(\"Migrating project \" + project.getName());\n+\n+      for (Study study : project.getStudies()) {\n+        logger.info(\"Migrating study \" + study.getName());\n+\n+        long numIndexedFiles = catalogManager.getFileManager()\n+            .count(study.getFqn(), new Query(FileDBAdaptor.QueryParams.INTERNAL_INDEX_STATUS_NAME.key(), Arrays.asList(\n+                FileIndex.IndexStatus.TRANSFORMED,\n+                FileIndex.IndexStatus.TRANSFORMING,\n+                FileIndex.IndexStatus.LOADING,\n+                FileIndex.IndexStatus.INDEXING,\n+                FileIndex.IndexStatus.READY\n+            )), sessionId)\n+            .getNumTotalResults();\n+\n+        if (numIndexedFiles > 0) {\n+          DataStore dataStore = VariantStorageManager.getDataStore(catalogManager, study.getFqn(), File.Bioformat.VARIANT, sessionId);\n+          // Check only once per datastore\n+          if (dataStores.add(dataStore)) {\n+\n+            VariantStorageEngine variantStorageEngine = storageEngineFactory\n+                .getVariantStorageEngine(dataStore.getStorageEngine(), dataStore.getDbName());\n+            VariantStorageMetadataManager scm = variantStorageEngine.getMetadataManager();\n+\n+            Map<String, Integer> currentCounters = scm.updateProjectMetadata(projectMetadata -> {\n+              if (projectMetadata == null || StringUtils.isEmpty(projectMetadata.getSpecies())) {\n+                logger.info(\"Create ProjectMetadata for project \" + project.getFqn());\n+\n+                String scientificName = toCellBaseSpeciesName(project.getOrganism().getScientificName());\n+                projectMetadata = new ProjectMetadata(\n+                    scientificName,\n+                    project.getOrganism().getAssembly(),\n+                    project.getCurrentRelease());\n+\n+              } else {\n+                logger.info(\"ProjectMetadata already exists for project \" + project.getFqn() + \". Nothing to do!\");\n+              }\n+              return projectMetadata;\n+            }).getCounters();\n+            // Update counters\n+            if (currentCounters.isEmpty()) {\n+              logger.info(\" * Update internal id counters for project \" + project.getFqn());\n+\n+              Map<String, Integer> counters = new HashMap<>();\n+\n+              for (String studyName : scm.getStudyNames()) {\n+                StudyConfiguration studyConfiguration = scm.getStudyConfiguration(studyName, null).first();\n+                int studyId = studyConfiguration.getId();\n+\n+                updateMaxCounter(counters, \"file\", studyConfiguration.getFileIds().values());\n+                updateMaxCounter(counters, \"file_\" + studyId, studyConfiguration.getFileIds().values());\n+                updateMaxCounter(counters, \"sample\", studyConfiguration.getSampleIds().values());\n+                updateMaxCounter(counters, \"sample_\" + studyId, studyConfiguration.getSampleIds().values());\n+                updateMaxCounter(counters, \"cohort\", studyConfiguration.getCohortIds().values());\n+                updateMaxCounter(counters, \"cohort_\" + studyId, studyConfiguration.getCohortIds().values());\n+                updateMaxCounter(counters, \"study\", Collections.singleton(studyId));\n+              }\n+\n+              scm.updateProjectMetadata(projectMetadata -> {\n+                projectMetadata.setCounters(counters);\n+                return projectMetadata;\n+              });\n \n-    public void migrate(String sessionId) throws Exception {\n-        StorageEngineFactory storageEngineFactory = StorageEngineFactory.get(storageConfiguration);\n-\n-        List<Project> projects = catalogManager.getProjectManager().get(new Query(), new QueryOptions(\n-                QueryOptions.INCLUDE, Arrays.asList(\n-                ProjectDBAdaptor.QueryParams.NAME.key(),\n-                ProjectDBAdaptor.QueryParams.ID.key(),\n-                ProjectDBAdaptor.QueryParams.FQN.key(),\n-                ProjectDBAdaptor.QueryParams.ORGANISM.key(),\n-                ProjectDBAdaptor.QueryParams.STUDY.key()\n-        )), sessionId).getResults();\n-\n-        Set<DataStore> dataStores = new HashSet<>();\n-        for (Project project : projects) {\n-            logger.info(\"Migrating project \" + project.getName());\n-\n-            for (Study study : project.getStudies()) {\n-                logger.info(\"Migrating study \" + study.getName());\n-\n-                long numIndexedFiles = catalogManager.getFileManager()\n-                        .count(study.getFqn(), new Query(FileDBAdaptor.QueryParams.INTERNAL_INDEX_STATUS_NAME.key(), Arrays.asList(\n-                                FileIndex.IndexStatus.TRANSFORMED,\n-                                FileIndex.IndexStatus.TRANSFORMING,\n-                                FileIndex.IndexStatus.LOADING,\n-                                FileIndex.IndexStatus.INDEXING,\n-                                FileIndex.IndexStatus.READY\n-                                )), sessionId)\n-                        .getNumTotalResults();\n-\n-                if (numIndexedFiles > 0) {\n-                    DataStore dataStore = VariantStorageManager.getDataStore(catalogManager, study.getFqn(), File.Bioformat.VARIANT, sessionId);\n-                    // Check only once per datastore\n-                    if (dataStores.add(dataStore)) {\n-\n-                        VariantStorageEngine variantStorageEngine = storageEngineFactory\n-                                .getVariantStorageEngine(dataStore.getStorageEngine(), dataStore.getDbName());\n-                        VariantStorageMetadataManager scm = variantStorageEngine.getMetadataManager();\n-\n-                        Map<String, Integer> currentCounters = scm.updateProjectMetadata(projectMetadata -> {\n-                            if (projectMetadata == null || StringUtils.isEmpty(projectMetadata.getSpecies())) {\n-                                logger.info(\"Create ProjectMetadata for project \" + project.getFqn());\n-\n-                                String scientificName = toCellBaseSpeciesName(project.getOrganism().getScientificName());\n-                                projectMetadata = new ProjectMetadata(\n-                                        scientificName,\n-                                        project.getOrganism().getAssembly(),\n-                                        project.getCurrentRelease());\n-\n-                            } else {\n-                                logger.info(\"ProjectMetadata already exists for project \" + project.getFqn() + \". Nothing to do!\");\n-                            }\n-                            return projectMetadata;\n-                        }).getCounters();\n-                        // Update counters\n-                        if (currentCounters.isEmpty()) {\n-                            logger.info(\" * Update internal id counters for project \" + project.getFqn());\n-\n-                            Map<String, Integer> counters = new HashMap<>();\n-\n-                            for (String studyName : scm.getStudyNames()) {\n-                                StudyConfiguration studyConfiguration = scm.getStudyConfiguration(studyName, null).first();\n-                                int studyId = studyConfiguration.getId();\n-\n-                                updateMaxCounter(counters, \"file\", studyConfiguration.getFileIds().values());\n-                                updateMaxCounter(counters, \"file_\" + studyId, studyConfiguration.getFileIds().values());\n-                                updateMaxCounter(counters, \"sample\", studyConfiguration.getSampleIds().values());\n-                                updateMaxCounter(counters, \"sample_\" + studyId, studyConfiguration.getSampleIds().values());\n-                                updateMaxCounter(counters, \"cohort\", studyConfiguration.getCohortIds().values());\n-                                updateMaxCounter(counters, \"cohort_\" + studyId, studyConfiguration.getCohortIds().values());\n-                                updateMaxCounter(counters, \"study\", Collections.singleton(studyId));\n-                            }\n-\n-                            scm.updateProjectMetadata(projectMetadata -> {\n-                                projectMetadata.setCounters(counters);\n-                                return projectMetadata;\n-                            });\n-\n-                        }\n-\n-                    }\n-                } else {\n-                    logger.info(\"Nothing to migrate!\");\n-                }\n             }\n+\n+          }\n+        } else {\n+          logger.info(\"Nothing to migrate!\");\n         }\n+      }\n     }\n+  }\n \n-    protected void updateMaxCounter(Map<String, Integer> counters, String idType, Collection<Integer> ids) {\n-        Integer maxId = ids.stream().max(Integer::compareTo).orElse(0);\n-        counters.compute(idType, (k, value) -> value == null ? maxId : Math.max(maxId, value));\n-    }\n+  protected void updateMaxCounter(Map<String, Integer> counters, String idType, Collection<Integer> ids) {\n+    Integer maxId = ids.stream().max(Integer::compareTo).orElse(0);\n+    counters.compute(idType, (k, value) -> value == null ? maxId : Math.max(maxId, value));\n+  }\n \n }\n",
            "diff_size": 182
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/219/NewProjectMetadataMigration.java\nindex 831eb0af58..47a17639c4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/219/NewProjectMetadataMigration.java\n@@ -53,8 +53,7 @@ public class NewProjectMetadataMigration {\n         StorageEngineFactory storageEngineFactory = StorageEngineFactory.get(storageConfiguration);\n \n         List<Project> projects = catalogManager.getProjectManager().get(new Query(), new QueryOptions(\n-                QueryOptions.INCLUDE, Arrays.asList(\n-                ProjectDBAdaptor.QueryParams.NAME.key(),\n+                QueryOptions.INCLUDE, Arrays.asList(ProjectDBAdaptor.QueryParams.NAME.key(),\n                 ProjectDBAdaptor.QueryParams.ID.key(),\n                 ProjectDBAdaptor.QueryParams.FQN.key(),\n                 ProjectDBAdaptor.QueryParams.ORGANISM.key(),\n@@ -141,4 +140,4 @@ public class NewProjectMetadataMigration {\n         counters.compute(idType, (k, value) -> value == null ? maxId : Math.max(maxId, value));\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_three_grams/219/NewProjectMetadataMigration.java\nindex 831eb0af58..069252afae 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/219/NewProjectMetadataMigration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_three_grams/219/NewProjectMetadataMigration.java\n@@ -79,7 +79,7 @@ public class NewProjectMetadataMigration {\n                         .getNumTotalResults();\n \n                 if (numIndexedFiles > 0) {\n-                    DataStore dataStore = VariantStorageManager.getDataStore(catalogManager, study.getFqn(), File.Bioformat.VARIANT, sessionId);\n+                DataStore dataStore = VariantStorageManager.getDataStore(catalogManager, study.getFqn(), File.Bioformat.VARIANT, sessionId);\n                     // Check only once per datastore\n                     if (dataStores.add(dataStore)) {\n \n",
            "diff_size": 1
        }
    ]
}