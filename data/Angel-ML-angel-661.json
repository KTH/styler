{
    "error_id": "661",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/661/PositiveAtomicCounter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/661/PositiveAtomicCounter.java\nindex 50df51a72b..cfa91902d8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/661/PositiveAtomicCounter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/661/PositiveAtomicCounter.java\n@@ -22,19 +22,19 @@ import java.util.concurrent.atomic.AtomicInteger;\n  * A simple atomic counter.\n  */\n public class PositiveAtomicCounter {\n-  private final AtomicInteger atom;\n-  private static final int mask = 0x7FFFFFFF;\n+    private final AtomicInteger atom;\n+    private static final int mask = 0x7FFFFFFF;\n \n-  public PositiveAtomicCounter() {\n-    atom = new AtomicInteger(0);\n-  }\n+    public PositiveAtomicCounter() {\n+        atom = new AtomicInteger(0);\n+    }\n \n-  public final int incrementAndGet() {\n-    final int rt = atom.incrementAndGet();\n-    return rt & mask;\n-  }\n+    public final int incrementAndGet() {\n+        final int rt = atom.incrementAndGet();\n+        return rt & mask;\n+    }\n \n-  public int intValue() {\n-    return atom.intValue();\n-  }\n+    public int intValue() {\n+        return atom.intValue();\n+    }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/661/PositiveAtomicCounter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/661/PositiveAtomicCounter.java\nindex 50df51a72b..f6ff7b9246 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/661/PositiveAtomicCounter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/661/PositiveAtomicCounter.java\n@@ -37,4 +37,4 @@ public class PositiveAtomicCounter {\n   public int intValue() {\n     return atom.intValue();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/661/PositiveAtomicCounter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/661/PositiveAtomicCounter.java\nindex 50df51a72b..308565abac 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/661/PositiveAtomicCounter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/661/PositiveAtomicCounter.java\n@@ -21,20 +21,22 @@ import java.util.concurrent.atomic.AtomicInteger;\n /**\n  * A simple atomic counter.\n  */\n+\n public class PositiveAtomicCounter {\n-  private final AtomicInteger atom;\n-  private static final int mask = 0x7FFFFFFF;\n+    private final AtomicInteger atom;\n+    private static final int mask = 0x7FFFFFFF;\n \n-  public PositiveAtomicCounter() {\n+    public PositiveAtomicCounter() {\n     atom = new AtomicInteger(0);\n-  }\n+    }\n \n-  public final int incrementAndGet() {\n+    public final int incrementAndGet() {\n     final int rt = atom.incrementAndGet();\n     return rt & mask;\n-  }\n+    }\n \n-  public int intValue() {\n+    public int intValue() {\n     return atom.intValue();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}