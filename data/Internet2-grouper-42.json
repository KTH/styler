{
    "error_id": "42",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 26. September 2003 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/42/StringConverter.java\nindex 8277a57d1a..aefa21bc94 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/42/StringConverter.java\n@@ -1,80 +1,79 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Copyright (C) 2003, 2004, 2005 Joe Walnes.\r\n- * Copyright (C) 2006, 2007 XStream Committers.\r\n- * All rights reserved.\r\n- *\r\n- * The software in this package is published under the terms of the BSD\r\n- * style license a copy of which has been included with this distribution in\r\n- * the LICENSE.txt file.\r\n- * \r\n- * Created on 26. September 2003 by Joe Walnes\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;\r\n-\r\n-import java.lang.ref.WeakReference;\r\n-import java.util.Collections;\r\n-import java.util.Map;\r\n-import java.util.WeakHashMap;\r\n-\r\n-\r\n-/**\r\n- * Converts a String to a String ;).\r\n- * <p>\r\n- * Well ok, it doesn't <i>actually</i> do any conversion. The converter uses a map to reuse instances. This map is by\r\n- * default a synchronized {@link WeakHashMap}.\r\n- * </p>\r\n- *\r\n- * @author Joe Walnes\r\n- * @author Rene Schwietzke\r\n- * @author J&ouml;rg Schaible\r\n- * @see String#intern()\r\n- */\r\n-public class StringConverter extends AbstractSingleValueConverter {\r\n-\r\n-    /**\r\n-     * A Map to store strings as long as needed to map similar strings onto the same instance and conserve memory. The\r\n-     * map can be set from the outside during construction, so it can be a LRU map or a weak map, synchronised or not.\r\n-     */\r\n-    private final Map cache;\r\n-\r\n-    public StringConverter(final Map map) {\r\n-        cache = map;\r\n-    }\r\n-\r\n-    public StringConverter() {\r\n-        this(Collections.synchronizedMap(new WeakHashMap()));\r\n-    }\r\n-\r\n-    public boolean canConvert(final Class type) {\r\n-        return type.equals(String.class);\r\n-    }\r\n-\r\n-    public Object fromString(final String str) {\r\n-        final WeakReference ref = (WeakReference)cache.get(str);\r\n-        String s = (String)(ref == null ? null : ref.get());\r\n-\r\n-        if (s == null) {\r\n-            // fill cache\r\n-            cache.put(str, new WeakReference(str));\r\n-\r\n-            s = str;\r\n-        }\r\n-\r\n-        return s;\r\n-    }\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Copyright (C) 2003, 2004, 2005 Joe Walnes.\n+ * Copyright (C) 2006, 2007 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 26. September 2003 by Joe Walnes\n+ */ package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+\n+/**\n+ * Converts a String to a String ;).\n+ * <p>\n+ * Well ok, it doesn't <i>actually</i> do any conversion. The converter uses a map to reuse instances. This map is by\n+ * default a synchronized {@link WeakHashMap}.\n+ * </p>\n+ *\n+ * @author Joe Walnes\n+ * @author Rene Schwietzke\n+ * @author J&ouml;rg Schaible\n+ * @see String#intern()\n+ */\n+public class StringConverter extends AbstractSingleValueConverter {\n+\n+    /**\n+     * A Map to store strings as long as needed to map similar strings onto the same instance and conserve memory. The\n+     * map can be set from the outside during construction, so it can be a LRU map or a weak map, synchronised or not.\n+     */\n+    private final Map cache;\n+\n+    public StringConverter(final Map map) {\n+        cache = map;\n+    }\n+\n+    public StringConverter() {\n+        this(Collections.synchronizedMap(new WeakHashMap()));\n+    }\n+\n+    public boolean canConvert(final Class type) {\n+        return type.equals(String.class);\n+    }\n+\n+    public Object fromString(final String str) {\n+        final WeakReference ref = (WeakReference)cache.get(str);\n+        String s = (String)(ref == null ? null : ref.get());\n+\n+        if (s == null) {\n+            // fill cache\n+            cache.put(str, new WeakReference(str));\n+\n+            s = str;\n+        }\n+\n+        return s;\n+    }\n+}\n",
            "diff_size": 80
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/42/StringConverter.java\nindex 8277a57d1a..ecf636cb90 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/42/StringConverter.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 26. September 2003 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;\r\n \r\n import java.lang.ref.WeakReference;\r\n@@ -46,35 +47,35 @@ import java.util.WeakHashMap;\n  */\r\n public class StringConverter extends AbstractSingleValueConverter {\r\n \r\n-    /**\r\n-     * A Map to store strings as long as needed to map similar strings onto the same instance and conserve memory. The\r\n-     * map can be set from the outside during construction, so it can be a LRU map or a weak map, synchronised or not.\r\n-     */\r\n-    private final Map cache;\r\n-\r\n-    public StringConverter(final Map map) {\r\n-        cache = map;\r\n-    }\r\n+  /**\r\n+   * A Map to store strings as long as needed to map similar strings onto the same instance and conserve memory. The\r\n+   * map can be set from the outside during construction, so it can be a LRU map or a weak map, synchronised or not.\r\n+   */\r\n+  private final Map cache;\r\n \r\n-    public StringConverter() {\r\n-        this(Collections.synchronizedMap(new WeakHashMap()));\r\n-    }\r\n+  public StringConverter(final Map map) {\r\n+    cache = map;\r\n+  }\r\n \r\n-    public boolean canConvert(final Class type) {\r\n-        return type.equals(String.class);\r\n-    }\r\n+  public StringConverter() {\r\n+    this(Collections.synchronizedMap(new WeakHashMap()));\r\n+  }\r\n \r\n-    public Object fromString(final String str) {\r\n-        final WeakReference ref = (WeakReference)cache.get(str);\r\n-        String s = (String)(ref == null ? null : ref.get());\r\n+  public boolean canConvert(final Class type) {\r\n+    return type.equals(String.class);\r\n+  }\r\n \r\n-        if (s == null) {\r\n-            // fill cache\r\n-            cache.put(str, new WeakReference(str));\r\n+  public Object fromString(final String str) {\r\n+    final WeakReference ref = (WeakReference) cache.get(str);\r\n+    String s = (String) (ref == null ? null : ref.get());\r\n \r\n-            s = str;\r\n-        }\r\n+    if (s == null) {\r\n+      // fill cache\r\n+      cache.put(str, new WeakReference(str));\r\n \r\n-        return s;\r\n+      s = str;\r\n     }\r\n+\r\n+    return s;\r\n+  }\r\n }\r\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/42/StringConverter.java\nindex 8277a57d1a..04f7eb989d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/42/StringConverter.java\n@@ -77,4 +77,4 @@ public class StringConverter extends AbstractSingleValueConverter {\n \r\n         return s;\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/42/StringConverter.java\nindex 8277a57d1a..f80d1250b0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/42/StringConverter.java\n@@ -24,11 +24,11 @@\n  * \r\n  * Created on 26. September 2003 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;\r\n-\r\n-import java.lang.ref.WeakReference;\r\n-import java.util.Collections;\r\n-import java.util.Map;\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Collections;\n+import java.util.Map;\n import java.util.WeakHashMap;\r\n \r\n \r\n@@ -43,38 +43,41 @@ import java.util.WeakHashMap;\n  * @author Rene Schwietzke\r\n  * @author J&ouml;rg Schaible\r\n  * @see String#intern()\r\n- */\r\n+ */\n+\n+\n public class StringConverter extends AbstractSingleValueConverter {\r\n \r\n     /**\r\n      * A Map to store strings as long as needed to map similar strings onto the same instance and conserve memory. The\r\n      * map can be set from the outside during construction, so it can be a LRU map or a weak map, synchronised or not.\r\n-     */\r\n-    private final Map cache;\r\n-\r\n-    public StringConverter(final Map map) {\r\n-        cache = map;\r\n-    }\r\n-\r\n-    public StringConverter() {\r\n-        this(Collections.synchronizedMap(new WeakHashMap()));\r\n-    }\r\n-\r\n-    public boolean canConvert(final Class type) {\r\n-        return type.equals(String.class);\r\n-    }\r\n-\r\n-    public Object fromString(final String str) {\r\n-        final WeakReference ref = (WeakReference)cache.get(str);\r\n-        String s = (String)(ref == null ? null : ref.get());\r\n-\r\n+     */\n+\n+    private final Map cache;\n+\n+\n+    public StringConverter(final Map map) {\n+        cache = map;\n+    }\n+\n+    public StringConverter() {\n+        this(Collections.synchronizedMap(new WeakHashMap()));\n+    }\n+\n+\n+    public boolean canConvert(final Class type) {\n+    return type.equals(String.class);\n+    }\n+\n+\n+    public Object fromString(final String str) {\n+        final WeakReference ref = (WeakReference) cache.get(str);\n+        String s = (String) (ref == null ? null : ref.get());\n         if (s == null) {\r\n-            // fill cache\r\n-            cache.put(str, new WeakReference(str));\r\n-\r\n-            s = str;\r\n-        }\r\n-\r\n-        return s;\r\n-    }\r\n-}\r\n+            // fill cache\n+            cache.put(str, new WeakReference(str));\n+            s = str;\n+        }\n+        return s;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/42/StringConverter.java\nindex 8277a57d1a..aefa21bc94 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/42/StringConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/42/StringConverter.java\n@@ -1,80 +1,79 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Copyright (C) 2003, 2004, 2005 Joe Walnes.\r\n- * Copyright (C) 2006, 2007 XStream Committers.\r\n- * All rights reserved.\r\n- *\r\n- * The software in this package is published under the terms of the BSD\r\n- * style license a copy of which has been included with this distribution in\r\n- * the LICENSE.txt file.\r\n- * \r\n- * Created on 26. September 2003 by Joe Walnes\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;\r\n-\r\n-import java.lang.ref.WeakReference;\r\n-import java.util.Collections;\r\n-import java.util.Map;\r\n-import java.util.WeakHashMap;\r\n-\r\n-\r\n-/**\r\n- * Converts a String to a String ;).\r\n- * <p>\r\n- * Well ok, it doesn't <i>actually</i> do any conversion. The converter uses a map to reuse instances. This map is by\r\n- * default a synchronized {@link WeakHashMap}.\r\n- * </p>\r\n- *\r\n- * @author Joe Walnes\r\n- * @author Rene Schwietzke\r\n- * @author J&ouml;rg Schaible\r\n- * @see String#intern()\r\n- */\r\n-public class StringConverter extends AbstractSingleValueConverter {\r\n-\r\n-    /**\r\n-     * A Map to store strings as long as needed to map similar strings onto the same instance and conserve memory. The\r\n-     * map can be set from the outside during construction, so it can be a LRU map or a weak map, synchronised or not.\r\n-     */\r\n-    private final Map cache;\r\n-\r\n-    public StringConverter(final Map map) {\r\n-        cache = map;\r\n-    }\r\n-\r\n-    public StringConverter() {\r\n-        this(Collections.synchronizedMap(new WeakHashMap()));\r\n-    }\r\n-\r\n-    public boolean canConvert(final Class type) {\r\n-        return type.equals(String.class);\r\n-    }\r\n-\r\n-    public Object fromString(final String str) {\r\n-        final WeakReference ref = (WeakReference)cache.get(str);\r\n-        String s = (String)(ref == null ? null : ref.get());\r\n-\r\n-        if (s == null) {\r\n-            // fill cache\r\n-            cache.put(str, new WeakReference(str));\r\n-\r\n-            s = str;\r\n-        }\r\n-\r\n-        return s;\r\n-    }\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Copyright (C) 2003, 2004, 2005 Joe Walnes.\n+ * Copyright (C) 2006, 2007 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 26. September 2003 by Joe Walnes\n+ */ package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.basic;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+\n+/**\n+ * Converts a String to a String ;).\n+ * <p>\n+ * Well ok, it doesn't <i>actually</i> do any conversion. The converter uses a map to reuse instances. This map is by\n+ * default a synchronized {@link WeakHashMap}.\n+ * </p>\n+ *\n+ * @author Joe Walnes\n+ * @author Rene Schwietzke\n+ * @author J&ouml;rg Schaible\n+ * @see String#intern()\n+ */\n+public class StringConverter extends AbstractSingleValueConverter {\n+\n+    /**\n+     * A Map to store strings as long as needed to map similar strings onto the same instance and conserve memory. The\n+     * map can be set from the outside during construction, so it can be a LRU map or a weak map, synchronised or not.\n+     */\n+    private final Map cache;\n+\n+    public StringConverter(final Map map) {\n+        cache = map;\n+    }\n+\n+    public StringConverter() {\n+        this(Collections.synchronizedMap(new WeakHashMap()));\n+    }\n+\n+    public boolean canConvert(final Class type) {\n+        return type.equals(String.class);\n+    }\n+\n+    public Object fromString(final String str) {\n+        final WeakReference ref = (WeakReference)cache.get(str);\n+        String s = (String)(ref == null ? null : ref.get());\n+\n+        if (s == null) {\n+            // fill cache\n+            cache.put(str, new WeakReference(str));\n+\n+            s = str;\n+        }\n+\n+        return s;\n+    }\n+}\n",
            "diff_size": 80
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}