{
    "error_id": "143",
    "information": {
        "errors": [
            {
                "line": "878",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     *\n     */\n    @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n    public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n        checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/143/GivenGSpec.java\nindex e970ed6c83..a1d0a6695d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/143/GivenGSpec.java\n@@ -875,6 +875,7 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      *\n      */\n+\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n     public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/143/GivenGSpec.java\nindex e970ed6c83..526cd6e096 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/143/GivenGSpec.java\n@@ -42,6 +42,7 @@ import static com.stratio.qa.assertions.Assertions.assertThat;\n \n /**\n  * Generic Given Specs.\n+ *\n  * @see <a href=\"GivenGSpec-annotations.html\">Given Steps &amp; Matching Regex</a>\n  */\n public class GivenGSpec extends BaseGSpec {\n@@ -70,8 +71,12 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception exception\n      */\n     @Given(\"^I create a Cassandra index named '(.+?)' in table '(.+?)' using magic_column '(.+?)' using keyspace '(.+?)'$\")\n-    public void createBasicMapping(String index_name, String table, String column, String keyspace) throws Exception {\n-        String query = \"CREATE INDEX \" + index_name + \" ON \" + table + \" (\" + column + \");\";\n+    public void createBasicMapping(String index_name, String table,\n+                                   String column, String keyspace)\n+        throws Exception {\n+        String query =\n+            \"CREATE INDEX \" + index_name + \" ON \" + table + \" (\" + column +\n+                \");\";\n         commonspec.getCassandraClient().executeQuery(query);\n     }\n \n@@ -92,7 +97,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param url         url where is started Cassandra cluster\n      */\n     @Given(\"^I connect to '(Cassandra|Mongo|Elasticsearch)' cluster at '(.+)'$\")\n-    public void connect(String clusterType, String url) throws DBException, UnknownHostException {\n+    public void connect(String clusterType, String url)\n+        throws DBException, UnknownHostException {\n         switch (clusterType) {\n             case \"Cassandra\":\n                 commonspec.getCassandraClient().setHost(url);\n@@ -103,8 +109,10 @@ public class GivenGSpec extends BaseGSpec {\n                 commonspec.getMongoDBClient().connect();\n                 break;\n             case \"Elasticsearch\":\n-                LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n-                settings_map.put(\"cluster.name\", System.getProperty(\"ES_CLUSTER\", ES_DEFAULT_CLUSTER_NAME));\n+                LinkedHashMap<String, Object> settings_map =\n+                    new LinkedHashMap<String, Object>();\n+                settings_map.put(\"cluster.name\",\n+                    System.getProperty(\"ES_CLUSTER\", ES_DEFAULT_CLUSTER_NAME));\n                 commonspec.getElasticSearchClient().setSettings(settings_map);\n                 commonspec.getElasticSearchClient().connect();\n                 break;\n@@ -116,18 +124,22 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Connect to ElasticSearch using custom parameters\n      *\n-     * @param host ES host\n-     * @param foo regex needed to match method\n-     * @param nativePort ES port\n-     * @param bar regex needed to match method\n+     * @param host        ES host\n+     * @param foo         regex needed to match method\n+     * @param nativePort  ES port\n+     * @param bar         regex needed to match method\n      * @param clusterName ES clustername\n-     * @throws DBException exception\n-     * @throws UnknownHostException exception\n+     * @throws DBException           exception\n+     * @throws UnknownHostException  exception\n      * @throws NumberFormatException exception\n      */\n     @Given(\"^I connect to Elasticsearch cluster at host '(.+?)'( using native port '(.+?)')?( using cluster name '(.+?)')?$\")\n-    public void connectToElasticSearch(String host, String foo, String nativePort, String bar, String clusterName) throws DBException, UnknownHostException, NumberFormatException {\n-        LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n+    public void connectToElasticSearch(String host, String foo,\n+                                       String nativePort, String bar,\n+                                       String clusterName)\n+        throws DBException, UnknownHostException, NumberFormatException {\n+        LinkedHashMap<String, Object> settings_map =\n+            new LinkedHashMap<String, Object>();\n         if (clusterName != null) {\n             settings_map.put(\"cluster.name\", clusterName);\n         } else {\n@@ -135,9 +147,11 @@ public class GivenGSpec extends BaseGSpec {\n         }\n         commonspec.getElasticSearchClient().setSettings(settings_map);\n         if (nativePort != null) {\n-            commonspec.getElasticSearchClient().setNativePort(Integer.valueOf(nativePort));\n+            commonspec.getElasticSearchClient()\n+                .setNativePort(Integer.valueOf(nativePort));\n         } else {\n-            commonspec.getElasticSearchClient().setNativePort(ES_DEFAULT_NATIVE_PORT);\n+            commonspec.getElasticSearchClient()\n+                .setNativePort(ES_DEFAULT_NATIVE_PORT);\n         }\n         commonspec.getElasticSearchClient().setHost(host);\n         commonspec.getElasticSearchClient().connect();\n@@ -146,29 +160,34 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Create table\n      *\n-     * @param table Cassandra table\n+     * @param table     Cassandra table\n      * @param datatable datatable used for parsing elements\n-     * @param keyspace Cassandra keyspace\n+     * @param keyspace  Cassandra keyspace\n      */\n     @Given(\"^I create a Cassandra table named '(.+?)' using keyspace '(.+?)' with:$\")\n-    public void createTableWithData(String table, String keyspace, DataTable datatable) {\n+    public void createTableWithData(String table, String keyspace,\n+                                    DataTable datatable) {\n         try {\n             commonspec.getCassandraClient().useKeyspace(keyspace);\n-            int attrLength = datatable.getGherkinRows().get(0).getCells().size();\n+            int attrLength =\n+                datatable.getGherkinRows().get(0).getCells().size();\n             Map<String, String> columns = new HashMap<String, String>();\n             ArrayList<String> pk = new ArrayList<String>();\n \n             for (int i = 0; i < attrLength; i++) {\n                 columns.put(datatable.getGherkinRows().get(0).getCells().get(i),\n-                        datatable.getGherkinRows().get(1).getCells().get(i));\n-                if ((datatable.getGherkinRows().size() == 3) && datatable.getGherkinRows().get(2).getCells().get(i).equalsIgnoreCase(\"PK\")) {\n+                    datatable.getGherkinRows().get(1).getCells().get(i));\n+                if ((datatable.getGherkinRows().size() == 3) &&\n+                    datatable.getGherkinRows().get(2).getCells().get(i)\n+                        .equalsIgnoreCase(\"PK\")) {\n                     pk.add(datatable.getGherkinRows().get(0).getCells().get(i));\n                 }\n             }\n             if (pk.isEmpty()) {\n                 throw new Exception(\"A PK is needed\");\n             }\n-            commonspec.getCassandraClient().createTableWithData(table, columns, pk);\n+            commonspec.getCassandraClient()\n+                .createTableWithData(table, columns, pk);\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n             commonspec.getLogger().debug(e.toString());\n@@ -179,22 +198,26 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Insert Data\n      *\n-     * @param table Cassandra table\n+     * @param table     Cassandra table\n      * @param datatable datatable used for parsing elements\n-     * @param keyspace Cassandra keyspace\n+     * @param keyspace  Cassandra keyspace\n      */\n     @Given(\"^I insert in keyspace '(.+?)' and table '(.+?)' with:$\")\n     public void insertData(String keyspace, String table, DataTable datatable) {\n         try {\n             commonspec.getCassandraClient().useKeyspace(keyspace);\n-            int attrLength = datatable.getGherkinRows().get(0).getCells().size();\n+            int attrLength =\n+                datatable.getGherkinRows().get(0).getCells().size();\n             Map<String, Object> fields = new HashMap<String, Object>();\n             for (int e = 1; e < datatable.getGherkinRows().size(); e++) {\n                 for (int i = 0; i < attrLength; i++) {\n-                    fields.put(datatable.getGherkinRows().get(0).getCells().get(i), datatable.getGherkinRows().get(e).getCells().get(i));\n+                    fields.put(\n+                        datatable.getGherkinRows().get(0).getCells().get(i),\n+                        datatable.getGherkinRows().get(e).getCells().get(i));\n \n                 }\n-                commonspec.getCassandraClient().insertData(keyspace + \".\" + table, fields);\n+                commonspec.getCassandraClient()\n+                    .insertData(keyspace + \".\" + table, fields);\n \n             }\n         } catch (Exception e) {\n@@ -219,17 +242,19 @@ public class GivenGSpec extends BaseGSpec {\n      * @param position position from a search result\n      * @param element  key in the json response to be saved\n      * @param envVar   thread environment variable where to store the value\n-     * @throws IllegalAccessException exception\n-     * @throws IllegalArgumentException exception\n-     * @throws SecurityException exception\n-     * @throws NoSuchFieldException exception\n-     * @throws ClassNotFoundException exception\n-     * @throws InstantiationException exception\n+     * @throws IllegalAccessException    exception\n+     * @throws IllegalArgumentException  exception\n+     * @throws SecurityException         exception\n+     * @throws NoSuchFieldException      exception\n+     * @throws ClassNotFoundException    exception\n+     * @throws InstantiationException    exception\n      * @throws InvocationTargetException exception\n-     * @throws NoSuchMethodException exception\n+     * @throws NoSuchMethodException     exception\n      */\n     @Given(\"^I save element (in position \\'(.+?)\\' in )?\\'(.+?)\\' in environment variable \\'(.+?)\\'$\")\n-    public void saveElementEnvironment(String foo, String position, String element, String envVar) throws Exception {\n+    public void saveElementEnvironment(String foo, String position,\n+                                       String element, String envVar)\n+        throws Exception {\n \n         Pattern pattern = Pattern.compile(\"^((.*)(\\\\.)+)(\\\\$.*)$\");\n         Matcher matcher = pattern.matcher(element);\n@@ -244,7 +269,8 @@ public class GivenGSpec extends BaseGSpec {\n             parsedElement = element;\n         }\n \n-        String value = commonspec.getJSONPathString(json, parsedElement, position);\n+        String value =\n+            commonspec.getJSONPathString(json, parsedElement, position);\n \n         ThreadProperty.set(envVar, value.replaceAll(\"\\n\", \"\"));\n     }\n@@ -268,23 +294,25 @@ public class GivenGSpec extends BaseGSpec {\n      * @param host   elasticsearch connection\n      * @param port   elasticsearch port\n      * @param envVar thread variable where to store the value\n-     * @throws IllegalAccessException exception\n-     * @throws IllegalArgumentException exception\n-     * @throws SecurityException exception\n-     * @throws NoSuchFieldException exception\n-     * @throws ClassNotFoundException exception\n-     * @throws InstantiationException exception\n+     * @throws IllegalAccessException    exception\n+     * @throws IllegalArgumentException  exception\n+     * @throws SecurityException         exception\n+     * @throws NoSuchFieldException      exception\n+     * @throws ClassNotFoundException    exception\n+     * @throws InstantiationException    exception\n      * @throws InvocationTargetException exception\n-     * @throws NoSuchMethodException exception\n+     * @throws NoSuchMethodException     exception\n      */\n     @Given(\"^I obtain elasticsearch cluster name in '([^:]+?)(:.+?)?' and save it in variable '(.+?)'?$\")\n-    public void saveElasticCluster(String host, String port, String envVar) throws Exception {\n+    public void saveElasticCluster(String host, String port, String envVar)\n+        throws Exception {\n \n         setupRestClient(null, host, port);\n \n         Future<Response> response;\n \n-        response = commonspec.generateRequest(\"GET\", false, null, null, \"/\", \"\", \"json\", \"\");\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, \"/\", \"\", \"json\", \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         String json;\n@@ -356,20 +384,22 @@ public class GivenGSpec extends BaseGSpec {\n      * Insert data in a MongoDB table.\n      *\n      * @param dataBase Mongo database\n-     * @param tabName Mongo table\n-     * @param table Datatable used for insert elements\n+     * @param tabName  Mongo table\n+     * @param table    Datatable used for insert elements\n      */\n     @Given(\"^I insert into a MongoDB database '(.+?)' and table '(.+?)' this values:$\")\n-    public void insertOnMongoTable(String dataBase, String tabName, DataTable table) {\n+    public void insertOnMongoTable(String dataBase, String tabName,\n+                                   DataTable table) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(dataBase);\n-        commonspec.getMongoDBClient().insertIntoMongoDBCollection(tabName, table);\n+        commonspec.getMongoDBClient()\n+            .insertIntoMongoDBCollection(tabName, table);\n     }\n \n     /**\n      * Truncate table in MongoDB.\n      *\n      * @param database Mongo database\n-     * @param table Mongo table\n+     * @param table    Mongo table\n      */\n     @Given(\"^I drop every document at a MongoDB database '(.+?)' and table '(.+?)'\")\n     public void truncateTableInMongo(String database, String table) {\n@@ -399,7 +429,8 @@ public class GivenGSpec extends BaseGSpec {\n             protocol = \"https://\";\n         }\n \n-        String webURL = protocol + commonspec.getWebHost() + commonspec.getWebPort();\n+        String webURL =\n+            protocol + commonspec.getWebHost() + commonspec.getWebPort();\n \n         commonspec.getDriver().get(webURL + path);\n         commonspec.setParentWindow(commonspec.getDriver().getWindowHandle());\n@@ -432,7 +463,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param restPort port where api is running\n      */\n     @Given(\"^I( securely)? send requests to '([^:]+?)(:.+?)?'$\")\n-    public void setupRestClient(String isSecured, String restHost, String restPort) {\n+    public void setupRestClient(String isSecured, String restHost,\n+                                String restPort) {\n         String restProtocol = \"http://\";\n \n         if (isSecured != null) {\n@@ -445,7 +477,7 @@ public class GivenGSpec extends BaseGSpec {\n         }\n \n         if (restPort == null) {\n-            if (isSecured == null)  {\n+            if (isSecured == null) {\n                 restPort = \":80\";\n             } else {\n                 restPort = \":443\";\n@@ -471,10 +503,13 @@ public class GivenGSpec extends BaseGSpec {\n     @Given(\"^I switch to the iframe on index '(\\\\d+?)'$\")\n     public void seleniumSwitchFrame(Integer index) {\n \n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n-        WebElement elem = commonspec.getPreviousWebElements().getPreviousWebElements().get(index);\n+        WebElement elem =\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index);\n         commonspec.getDriver().switchTo().frame(elem);\n     }\n \n@@ -483,17 +518,20 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param idframe iframe to swith to\n      * @throws IllegalAccessException exception\n-     * @throws NoSuchFieldException exception\n+     * @throws NoSuchFieldException   exception\n      * @throws ClassNotFoundException exception\n      */\n     @Given(\"^I switch to iframe with '([^:]*?):(.+?)'$\")\n-    public void seleniumIdFrame(String method, String idframe) throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n+    public void seleniumIdFrame(String method, String idframe)\n+        throws IllegalAccessException, NoSuchFieldException,\n+        ClassNotFoundException {\n         assertThat(commonspec.locateElement(method, idframe, 1));\n \n         if (method.equals(\"id\") || method.equals(\"name\")) {\n             commonspec.getDriver().switchTo().frame(idframe);\n         } else {\n-            throw new ClassNotFoundException(\"Can not use this method to switch iframe\");\n+            throw new ClassNotFoundException(\n+                \"Can not use this method to switch iframe\");\n         }\n     }\n \n@@ -518,62 +556,79 @@ public class GivenGSpec extends BaseGSpec {\n      * Opens a ssh connection to remote host\n      *\n      * @param remoteHost remote host\n-     * @param user remote user\n-     * @param password (required if pemFile null)\n-     * @param pemFile (required if password null)\n+     * @param user       remote user\n+     * @param password   (required if pemFile null)\n+     * @param pemFile    (required if password null)\n      * @throws Exception exception\n-     *\n      */\n     @Given(\"^I open a ssh connection to '(.+?)'( in port '(.+?)')? with user '(.+?)'( and password '(.+?)')?( using pem file '(.+?)')?$\")\n-    public void openSSHConnection(String remoteHost, String tmp, String remotePort, String user, String foo, String password, String bar, String pemFile) throws Exception {\n+    public void openSSHConnection(String remoteHost, String tmp,\n+                                  String remotePort, String user, String foo,\n+                                  String password, String bar, String pemFile)\n+        throws Exception {\n         if ((pemFile == null) || (pemFile.equals(\"none\"))) {\n             if (password == null) {\n-                throw new Exception(\"You have to provide a password or a pem file to be used for connection\");\n+                throw new Exception(\n+                    \"You have to provide a password or a pem file to be used for connection\");\n             }\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(user, password, remoteHost, remotePort, null));\n-            commonspec.getLogger().debug(\"Opening ssh connection with password: { \" + password + \"}\", commonspec.getRemoteSSHConnection());\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(user, password, remoteHost, remotePort,\n+                    null));\n+            commonspec.getLogger().debug(\n+                \"Opening ssh connection with password: { \" + password + \"}\",\n+                commonspec.getRemoteSSHConnection());\n         } else {\n             File pem = new File(pemFile);\n             if (!pem.exists()) {\n                 throw new Exception(\"Pem file: \" + pemFile + \" does not exist\");\n             }\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(user, null, remoteHost, remotePort, pemFile));\n-            commonspec.getLogger().debug(\"Opening ssh connection with pemFile: {}\", commonspec.getRemoteSSHConnection());\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(user, null, remoteHost, remotePort,\n+                    pemFile));\n+            commonspec.getLogger()\n+                .debug(\"Opening ssh connection with pemFile: {}\",\n+                    commonspec.getRemoteSSHConnection());\n         }\n     }\n \n \n     /**\n-    * Authenticate in a DCOS cluster\n-    *\n-    * @param remoteHost remote host\n-    * @param email email for JWT singing\n-    * @param user remote user\n-    * @param password (required if pemFile null)\n-    * @param pemFile (required if password null)\n-    * @throws Exception exception\n-    *\n-    *\n-    */\n+     * Authenticate in a DCOS cluster\n+     *\n+     * @param remoteHost remote host\n+     * @param email      email for JWT singing\n+     * @param user       remote user\n+     * @param password   (required if pemFile null)\n+     * @param pemFile    (required if password null)\n+     * @throws Exception exception\n+     */\n     @Given(\"^I authenticate to DCOS cluster '(.+?)' using email '(.+?)'( with user '(.+?)'( and password '(.+?)'| and pem file '(.+?)'))?$\")\n-    public void authenticateDCOSpem(String remoteHost, String email, String foo, String user, String bar, String password, String pemFile) throws Exception {\n+    public void authenticateDCOSpem(String remoteHost, String email, String foo,\n+                                    String user, String bar, String password,\n+                                    String pemFile) throws Exception {\n         String DCOSsecret;\n         if (foo == null) {\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(\"root\", \"stratio\", remoteHost, null));\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(\"root\", \"stratio\", remoteHost, null));\n         } else {\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(user, password, remoteHost, pemFile));\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(user, password, remoteHost, pemFile));\n         }\n-        commonspec.getRemoteSSHConnection().runCommand(\"sudo cat /var/lib/dcos/dcos-oauth/auth-token-secret\");\n+        commonspec.getRemoteSSHConnection()\n+            .runCommand(\"sudo cat /var/lib/dcos/dcos-oauth/auth-token-secret\");\n         DCOSsecret = commonspec.getRemoteSSHConnection().getResult().trim();\n         setDCOSCookie(DCOSsecret, email);\n     }\n \n-    public void setDCOSCookie(String DCOSsecret, String email) throws Exception {\n+    public void setDCOSCookie(String DCOSsecret, String email)\n+        throws Exception {\n         final JWTSigner signer = new JWTSigner(DCOSsecret);\n         final HashMap<String, Object> claims = new HashMap();\n         claims.put(\"uid\", email);\n         final String jwt = signer.sign(claims);\n-        Cookie cookie = new Cookie(\"dcos-acs-auth-cookie\", jwt, false, \"\", \"\", 99999, false, false);\n+        Cookie cookie =\n+            new Cookie(\"dcos-acs-auth-cookie\", jwt, false, \"\", \"\", 99999, false,\n+                false);\n         List<Cookie> cookieList = new ArrayList<Cookie>();\n         cookieList.add(cookie);\n         commonspec.setCookies(cookieList);\n@@ -581,15 +636,19 @@ public class GivenGSpec extends BaseGSpec {\n \n     /**\n      * Generate token to authenticate in gosec SSO\n-     * @param ssoHost current sso host\n+     *\n+     * @param ssoHost  current sso host\n      * @param userName username\n      * @param passWord password\n      * @throws Exception exception\n      */\n     @Given(\"^I( do not)? set sso token using host '(.+?)' with user '(.+?)' and password '(.+?)'$\")\n-    public void setGoSecSSOCookie(String set, String ssoHost, String userName, String passWord) throws Exception {\n+    public void setGoSecSSOCookie(String set, String ssoHost, String userName,\n+                                  String passWord) throws Exception {\n         if (set == null) {\n-            HashMap<String, String> ssoCookies = new GosecSSOUtils(ssoHost, userName, passWord).ssoTokenGenerator();\n+            HashMap<String, String> ssoCookies =\n+                new GosecSSOUtils(ssoHost, userName, passWord)\n+                    .ssoTokenGenerator();\n             String[] tokenList = {\"user\", \"dcos-acs-auth-cookie\"};\n             List<Cookie> cookiesAtributes = addSsoToken(ssoCookies, tokenList);\n \n@@ -597,13 +656,14 @@ public class GivenGSpec extends BaseGSpec {\n         }\n     }\n \n-    public List<Cookie> addSsoToken(HashMap<String, String> ssoCookies, String[] tokenList) {\n+    public List<Cookie> addSsoToken(HashMap<String, String> ssoCookies,\n+                                    String[] tokenList) {\n         List<Cookie> cookiesAttributes = new ArrayList<>();\n \n         for (String tokenKey : tokenList) {\n             cookiesAttributes.add(new Cookie(tokenKey, ssoCookies.get(tokenKey),\n-                    false, null,\n-                    null, 999999, false, false));\n+                false, null,\n+                null, 999999, false, false));\n         }\n         return cookiesAttributes;\n     }\n@@ -618,7 +678,8 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      */\n     @Given(\"^I inbound copy '(.+?)' through a ssh connection to '(.+?)'$\")\n-    public void copyFromRemoteFile(String remotePath, String localPath) throws Exception {\n+    public void copyFromRemoteFile(String remotePath, String localPath)\n+        throws Exception {\n         commonspec.getRemoteSSHConnection().copyFrom(remotePath, localPath);\n     }\n \n@@ -627,11 +688,12 @@ public class GivenGSpec extends BaseGSpec {\n      * Copies file/s from local system to remote system\n      *\n      * @param remotePath path where file is going to be copy\n-     * @param localPath path where file is located\n+     * @param localPath  path where file is located\n      * @throws Exception exception\n      */\n     @Given(\"^I outbound copy '(.+?)' through a ssh connection to '(.+?)'$\")\n-    public void copyToRemoteFile(String localPath, String remotePath) throws Exception {\n+    public void copyToRemoteFile(String localPath, String remotePath)\n+        throws Exception {\n         commonspec.getRemoteSSHConnection().copyTo(localPath, remotePath);\n     }\n \n@@ -639,15 +701,17 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Executes the command specified in local system\n      *\n-     * @param command command to be run locally\n-     * @param foo regex needed to match method\n+     * @param command    command to be run locally\n+     * @param foo        regex needed to match method\n      * @param exitStatus command exit status\n-     * @param bar regex needed to match method\n-     * @param envVar environment variable name\n+     * @param bar        regex needed to match method\n+     * @param envVar     environment variable name\n      * @throws Exception exception\n      **/\n     @Given(\"^I run '(.+?)' locally( with exit status '(.+?)')?( and save the value in environment variable '(.+?)')?$\")\n-    public void executeLocalCommand(String command, String foo, Integer exitStatus, String bar, String envVar) throws Exception {\n+    public void executeLocalCommand(String command, String foo,\n+                                    Integer exitStatus, String bar,\n+                                    String envVar) throws Exception {\n         if (exitStatus == null) {\n             exitStatus = 0;\n         }\n@@ -655,47 +719,56 @@ public class GivenGSpec extends BaseGSpec {\n         commonspec.runLocalCommand(command);\n         commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.TRUE);\n \n-        Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(exitStatus);\n+        Assertions.assertThat(commonspec.getCommandExitStatus())\n+            .isEqualTo(exitStatus);\n     }\n \n     /**\n      * Executes the command specified in remote system\n      *\n-     * @param command command to be run locally\n-     * @param foo regex needed to match method\n+     * @param command    command to be run locally\n+     * @param foo        regex needed to match method\n      * @param exitStatus command exit status\n-     * @param bar regex needed to match method\n-     * @param envVar environment variable name\n+     * @param bar        regex needed to match method\n+     * @param envVar     environment variable name\n      * @throws Exception exception\n      **/\n     @Given(\"^I run '(.+?)' in the ssh connection( with exit status '(.+?)')?( and save the value in environment variable '(.+?)')?$\")\n-    public void executeCommand(String command, String foo, Integer exitStatus, String bar, String envVar) throws Exception {\n+    public void executeCommand(String command, String foo, Integer exitStatus,\n+                               String bar, String envVar) throws Exception {\n         if (exitStatus == null) {\n             exitStatus = 0;\n         }\n \n-        command = \"set -o pipefail && alias grep='grep --color=never' && \" + command;\n+        command =\n+            \"set -o pipefail && alias grep='grep --color=never' && \" + command;\n         commonspec.getRemoteSSHConnection().runCommand(command);\n-        commonspec.setCommandResult(commonspec.getRemoteSSHConnection().getResult());\n-        commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n+        commonspec\n+            .setCommandResult(commonspec.getRemoteSSHConnection().getResult());\n+        commonspec.setCommandExitStatus(\n+            commonspec.getRemoteSSHConnection().getExitStatus());\n         commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.FALSE);\n \n-        Assertions.assertThat(commonspec.getRemoteSSHConnection().getExitStatus()).isEqualTo(exitStatus);\n+        Assertions\n+            .assertThat(commonspec.getRemoteSSHConnection().getExitStatus())\n+            .isEqualTo(exitStatus);\n     }\n \n \n     /**\n      * Insert document in a MongoDB table.\n      *\n-     * @param dataBase Mongo database\n+     * @param dataBase   Mongo database\n      * @param collection Mongo collection\n-     * @param document document used for schema\n+     * @param document   document used for schema\n      */\n     @Given(\"^I insert into MongoDB database '(.+?)' and collection '(.+?)' the document from schema '(.+?)'$\")\n-    public void insertOnMongoTable(String dataBase, String collection, String document) throws Exception {\n+    public void insertOnMongoTable(String dataBase, String collection,\n+                                   String document) throws Exception {\n         String retrievedDoc = commonspec.retrieveData(document, \"json\");\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(dataBase);\n-        commonspec.getMongoDBClient().insertDocIntoMongoDBCollection(collection, retrievedDoc);\n+        commonspec.getMongoDBClient()\n+            .insertDocIntoMongoDBCollection(collection, retrievedDoc);\n     }\n \n \n@@ -718,14 +791,14 @@ public class GivenGSpec extends BaseGSpec {\n      */\n     @Given(\"^I connect to Zookeeper at '(.+)'$\")\n     public void connectToZk(String zookeeperHosts) throws InterruptedException {\n-        commonspec.getZookeeperSecClient().setZookeeperSecConnection(zookeeperHosts, 3000);\n+        commonspec.getZookeeperSecClient()\n+            .setZookeeperSecConnection(zookeeperHosts, 3000);\n         commonspec.getZookeeperSecClient().connectZk();\n     }\n \n \n     /**\n      * Disconnect from zookeeper.\n-     *\n      */\n     @Given(\"^I disconnect from Zookeeper$\")\n     public void disconnectFromZk() throws InterruptedException {\n@@ -741,7 +814,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws UnknownHostException exception\n      */\n     @Given(\"^I connect to kafka at '(.+)' using path '(.+)'$\")\n-    public void connectKafka(String zkHost, String zkPath) throws UnknownHostException {\n+    public void connectKafka(String zkHost, String zkPath)\n+        throws UnknownHostException {\n         String zkPort = zkHost.split(\":\")[1];\n         zkHost = zkHost.split(\":\")[0];\n         commonspec.getKafkaUtils().setZkHost(zkHost, zkPort, zkPath);\n@@ -750,8 +824,6 @@ public class GivenGSpec extends BaseGSpec {\n \n     /**\n      * Connect to LDAP.\n-     *\n-     *\n      */\n     @Given(\"^I connect to LDAP$\")\n     public void connectLDAP() {\n@@ -787,14 +859,23 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string)')? with:$\")\n-    public void sendRequestDataTableTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String contains, String responseVal, String baseData, String baz, String type, DataTable modifications) throws Exception {\n+    public void sendRequestDataTableTimeout(Integer timeout, Integer wait,\n+                                            String requestType, String endPoint,\n+                                            String contains, String responseVal,\n+                                            String baseData, String baz,\n+                                            String type,\n+                                            DataTable modifications)\n+        throws Exception {\n \n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n-        commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n-        String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n+        commonspec.getLogger()\n+            .debug(\"Modifying data {} as {}\", retrievedData, type);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, type, modifications)\n+                .toString();\n \n         Boolean searchUntilContains;\n         if (contains == null || contains.isEmpty()) {\n@@ -813,26 +894,34 @@ public class GivenGSpec extends BaseGSpec {\n             if (found && searchUntilContains) {\n                 break;\n             }\n-            commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-            response = commonspec.generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n+            commonspec.getLogger()\n+                .debug(\"Generating request {} to {} with data {} as {}\",\n+                    requestType, endPoint, modifiedData, type);\n+            response = commonspec\n+                .generateRequest(requestType, false, null, null, endPoint,\n+                    modifiedData, type);\n             commonspec.getLogger().debug(\"Saving response\");\n             commonspec.setResponse(requestType, response.get());\n             commonspec.getLogger().debug(\"Checking response value\");\n             try {\n                 if (searchUntilContains) {\n-                    assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n+                    assertThat(commonspec.getResponse().getResponse())\n+                        .containsPattern(pattern);\n                     found = true;\n                     timeout = i;\n                 } else {\n-                    assertThat(commonspec.getResponse().getResponse()).doesNotContain(responseVal);\n+                    assertThat(commonspec.getResponse().getResponse())\n+                        .doesNotContain(responseVal);\n                     found = false;\n                     timeout = i;\n                 }\n             } catch (AssertionError e) {\n                 if (!found) {\n-                    commonspec.getLogger().info(\"Response value not found after \" + i + \" seconds\");\n+                    commonspec.getLogger().info(\n+                        \"Response value not found after \" + i + \" seconds\");\n                 } else {\n-                    commonspec.getLogger().info(\"Response value found after \" + i + \" seconds\");\n+                    commonspec.getLogger()\n+                        .info(\"Response value found after \" + i + \" seconds\");\n                 }\n                 Thread.sleep(wait * 1000);\n                 ex = e;\n@@ -841,13 +930,17 @@ public class GivenGSpec extends BaseGSpec {\n                 break;\n             }\n         }\n-        if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n+        if ((!found && searchUntilContains) ||\n+            (found && !searchUntilContains)) {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger().info(\n+                \"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger().info(\n+                \"Success! Response value not found after \" + timeout +\n+                    \" seconds\");\n         }\n     }\n \n@@ -856,31 +949,38 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param serviceList all task deployed in the cluster separated by a semicolumn.\n      * @throws Exception\n-     *\n      */\n     @Given(\"^services '(.*?)' are splitted correctly in datacenters$\")\n-    public void checkServicesDistributionMultiDataCenter(String serviceList) throws Exception {\n+    public void checkServicesDistributionMultiDataCenter(String serviceList)\n+        throws Exception {\n         executeCommand(\"dcos node --json >> aux.txt\", \"foo\", 0, \"bar\", null);\n         executeCommand(\"cat aux.txt\", \"foo\", 0, \"bar\", null);\n-        checkDataCentersDistribution(serviceList.split(\",\"), obtainsDataCenters(commonspec.getRemoteSSHConnection().getResult()).split(\";\"));\n+        checkDataCentersDistribution(serviceList.split(\",\"),\n+            obtainsDataCenters(commonspec.getRemoteSSHConnection().getResult())\n+                .split(\";\"));\n         executeCommand(\"rm -rf aux.txt\", \"foo\", 0, \"bar\", null);\n \n     }\n+\n     /**\n      * Check if all task of a service are correctly distributed in all datacenters of the cluster\n      *\n-     * @param serviceList all task deployed in the cluster separated by a semicolumn.\n+     * @param serviceList    all task deployed in the cluster separated by a semicolumn.\n      * @param dataCentersIps all ips of the datacenters to be checked\n      *                       Example: ip_1_dc1, ip_2_dc1;ip_3_dc2,ip_4_dc2\n      * @throws Exception\n-     *\n      */\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n-    public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n-        checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n+    public void checkServicesDistributionMultiDataCenterPram(String serviceList,\n+                                                             String dataCentersIps)\n+        throws Exception {\n+        checkDataCentersDistribution(serviceList.split(\",\"),\n+            dataCentersIps.split(\";\"));\n     }\n \n-    public void checkDataCentersDistribution(String[] serviceListArray, String[] dataCentersIpsArray) throws Exception {\n+    public void checkDataCentersDistribution(String[] serviceListArray,\n+                                             String[] dataCentersIpsArray)\n+        throws Exception {\n         int[] expectedDistribution = new int[dataCentersIpsArray.length];\n         int[] results = new int[dataCentersIpsArray.length];\n         //Calculamos distribucion\n@@ -894,10 +994,12 @@ public class GivenGSpec extends BaseGSpec {\n         }\n         ///Fin calculo distribucion\n         for (int i = 0; i < serviceListArray.length; i++) {\n-            executeCommand(\"dcos task | grep \" + serviceListArray[i] + \" | awk '{print $2}'\", \"foo\", 0, \"bar\", null);\n+            executeCommand(\"dcos task | grep \" + serviceListArray[i] +\n+                \" | awk '{print $2}'\", \"foo\", 0, \"bar\", null);\n             String service_ip = commonspec.getRemoteSSHConnection().getResult();\n             for (int x = 0; x < dataCentersIpsArray.length; x++) {\n-                if (dataCentersIpsArray[x].toLowerCase().contains(service_ip.toLowerCase())) {\n+                if (dataCentersIpsArray[x].toLowerCase()\n+                    .contains(service_ip.toLowerCase())) {\n                     results[x] = results[x] + 1;\n                 }\n             }\n@@ -911,17 +1013,20 @@ public class GivenGSpec extends BaseGSpec {\n     }\n \n     public String obtainsDataCenters(String jsonString) {\n-        Map<String, String> datacentersDistribution = new HashMap<String, String>();\n+        Map<String, String> datacentersDistribution =\n+            new HashMap<String, String>();\n         JSONArray jsonArray = new JSONArray(jsonString);\n         for (int i = 0; i < jsonArray.length(); i++) {\n             JSONObject object = jsonArray.getJSONObject(i);\n             String ip = object.getString(\"hostname\");\n-            String datacenter = ((JSONObject) object.get(\"attributes\")).getString(\"dc\");\n+            String datacenter =\n+                ((JSONObject) object.get(\"attributes\")).getString(\"dc\");\n             String existValue = datacentersDistribution.get(datacenter);\n             if (existValue == null) {\n                 datacentersDistribution.put(datacenter, ip);\n             } else {\n-                datacentersDistribution.put(datacenter, datacentersDistribution.get(datacenter) + \",\" + ip);\n+                datacentersDistribution.put(datacenter,\n+                    datacentersDistribution.get(datacenter) + \",\" + ip);\n             }\n         }\n         String result = \"\";\n",
            "diff_size": 257
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/143/GivenGSpec.java\nindex e970ed6c83..a0724da716 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/143/GivenGSpec.java\n@@ -445,7 +445,7 @@ public class GivenGSpec extends BaseGSpec {\n         }\n \n         if (restPort == null) {\n-            if (isSecured == null)  {\n+            if (isSecured == null) {\n                 restPort = \":80\";\n             } else {\n                 restPort = \":443\";\n@@ -602,8 +602,7 @@ public class GivenGSpec extends BaseGSpec {\n \n         for (String tokenKey : tokenList) {\n             cookiesAttributes.add(new Cookie(tokenKey, ssoCookies.get(tokenKey),\n-                    false, null,\n-                    null, 999999, false, false));\n+                    false, null, null, 999999, false, false));\n         }\n         return cookiesAttributes;\n     }\n@@ -788,8 +787,7 @@ public class GivenGSpec extends BaseGSpec {\n      */\n     @Given(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string)')? with:$\")\n     public void sendRequestDataTableTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String contains, String responseVal, String baseData, String baz, String type, DataTable modifications) throws Exception {\n-\n-        // Retrieve data\n+    // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n@@ -866,7 +864,8 @@ public class GivenGSpec extends BaseGSpec {\n         executeCommand(\"rm -rf aux.txt\", \"foo\", 0, \"bar\", null);\n \n     }\n-    /**\n+\n+/**\n      * Check if all task of a service are correctly distributed in all datacenters of the cluster\n      *\n      * @param serviceList all task deployed in the cluster separated by a semicolumn.\n@@ -933,4 +932,4 @@ public class GivenGSpec extends BaseGSpec {\n         return result.substring(1, result.length());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/143/GivenGSpec.java\nindex e970ed6c83..9a071eec78 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/143/GivenGSpec.java\n@@ -29,7 +29,6 @@ import org.assertj.core.api.Assertions;\n import org.json.JSONArray;\n import org.json.JSONObject;\n import org.openqa.selenium.WebElement;\n-\n import java.io.File;\n import java.lang.reflect.InvocationTargetException;\n import java.net.UnknownHostException;\n@@ -44,6 +43,8 @@ import static com.stratio.qa.assertions.Assertions.assertThat;\n  * Generic Given Specs.\n  * @see <a href=\"GivenGSpec-annotations.html\">Given Steps &amp; Matching Regex</a>\n  */\n+\n+\n public class GivenGSpec extends BaseGSpec {\n \n     public static final Integer ES_DEFAULT_NATIVE_PORT = 9300;\n@@ -55,9 +56,10 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n+\n     public GivenGSpec(CommonG spec) {\n         this.commonspec = spec;\n-\n     }\n \n     /**\n@@ -69,6 +71,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param keyspace   keyspace used\n      * @throws Exception exception\n      */\n+\n+\n     @Given(\"^I create a Cassandra index named '(.+?)' in table '(.+?)' using magic_column '(.+?)' using keyspace '(.+?)'$\")\n     public void createBasicMapping(String index_name, String table, String column, String keyspace) throws Exception {\n         String query = \"CREATE INDEX \" + index_name + \" ON \" + table + \" (\" + column + \");\";\n@@ -80,6 +84,8 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param keyspace cassandra keyspace\n      */\n+\n+\n     @Given(\"^I create a Cassandra keyspace named '(.+)'$\")\n     public void createCassandraKeyspace(String keyspace) {\n         commonspec.getCassandraClient().createKeyspace(keyspace);\n@@ -91,6 +97,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param clusterType DB type (Cassandra|Mongo|Elasticsearch)\n      * @param url         url where is started Cassandra cluster\n      */\n+\n+\n     @Given(\"^I connect to '(Cassandra|Mongo|Elasticsearch)' cluster at '(.+)'$\")\n     public void connect(String clusterType, String url) throws DBException, UnknownHostException {\n         switch (clusterType) {\n@@ -125,6 +133,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws UnknownHostException exception\n      * @throws NumberFormatException exception\n      */\n+\n+\n     @Given(\"^I connect to Elasticsearch cluster at host '(.+?)'( using native port '(.+?)')?( using cluster name '(.+?)')?$\")\n     public void connectToElasticSearch(String host, String foo, String nativePort, String bar, String clusterName) throws DBException, UnknownHostException, NumberFormatException {\n         LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n@@ -150,6 +160,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param datatable datatable used for parsing elements\n      * @param keyspace Cassandra keyspace\n      */\n+\n+\n     @Given(\"^I create a Cassandra table named '(.+?)' using keyspace '(.+?)' with:$\")\n     public void createTableWithData(String table, String keyspace, DataTable datatable) {\n         try {\n@@ -157,14 +169,13 @@ public class GivenGSpec extends BaseGSpec {\n             int attrLength = datatable.getGherkinRows().get(0).getCells().size();\n             Map<String, String> columns = new HashMap<String, String>();\n             ArrayList<String> pk = new ArrayList<String>();\n-\n             for (int i = 0; i < attrLength; i++) {\n-                columns.put(datatable.getGherkinRows().get(0).getCells().get(i),\n-                        datatable.getGherkinRows().get(1).getCells().get(i));\n+                columns.put(datatable.getGherkinRows().get(0).getCells().get(i), datatable.getGherkinRows().get(1).getCells().get(i));\n                 if ((datatable.getGherkinRows().size() == 3) && datatable.getGherkinRows().get(2).getCells().get(i).equalsIgnoreCase(\"PK\")) {\n                     pk.add(datatable.getGherkinRows().get(0).getCells().get(i));\n                 }\n             }\n+\n             if (pk.isEmpty()) {\n                 throw new Exception(\"A PK is needed\");\n             }\n@@ -183,6 +194,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param datatable datatable used for parsing elements\n      * @param keyspace Cassandra keyspace\n      */\n+\n+\n     @Given(\"^I insert in keyspace '(.+?)' and table '(.+?)' with:$\")\n     public void insertData(String keyspace, String table, DataTable datatable) {\n         try {\n@@ -192,10 +205,8 @@ public class GivenGSpec extends BaseGSpec {\n             for (int e = 1; e < datatable.getGherkinRows().size(); e++) {\n                 for (int i = 0; i < attrLength; i++) {\n                     fields.put(datatable.getGherkinRows().get(0).getCells().get(i), datatable.getGherkinRows().get(e).getCells().get(i));\n-\n                 }\n                 commonspec.getCassandraClient().insertData(keyspace + \".\" + table, fields);\n-\n             }\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n@@ -228,14 +239,14 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws InvocationTargetException exception\n      * @throws NoSuchMethodException exception\n      */\n+\n+\n     @Given(\"^I save element (in position \\'(.+?)\\' in )?\\'(.+?)\\' in environment variable \\'(.+?)\\'$\")\n     public void saveElementEnvironment(String foo, String position, String element, String envVar) throws Exception {\n-\n         Pattern pattern = Pattern.compile(\"^((.*)(\\\\.)+)(\\\\$.*)$\");\n         Matcher matcher = pattern.matcher(element);\n         String json;\n         String parsedElement;\n-\n         if (matcher.find()) {\n             json = matcher.group(2);\n             parsedElement = matcher.group(4);\n@@ -245,7 +256,6 @@ public class GivenGSpec extends BaseGSpec {\n         }\n \n         String value = commonspec.getJSONPathString(json, parsedElement, position);\n-\n         ThreadProperty.set(envVar, value.replaceAll(\"\\n\", \"\"));\n     }\n \n@@ -256,6 +266,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param value  value to be saved\n      * @param envVar thread environment variable where to store the value\n      */\n+\n+\n     @Given(\"^I save \\'(.+?)\\' in variable \\'(.+?)\\'$\")\n     public void saveInEnvironment(String value, String envVar) {\n         ThreadProperty.set(envVar, value);\n@@ -277,24 +289,20 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws InvocationTargetException exception\n      * @throws NoSuchMethodException exception\n      */\n+\n+\n     @Given(\"^I obtain elasticsearch cluster name in '([^:]+?)(:.+?)?' and save it in variable '(.+?)'?$\")\n     public void saveElasticCluster(String host, String port, String envVar) throws Exception {\n-\n         setupRestClient(null, host, port);\n-\n         Future<Response> response;\n-\n         response = commonspec.generateRequest(\"GET\", false, null, null, \"/\", \"\", \"json\", \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         String json;\n         String parsedElement;\n         json = commonspec.getResponse().getResponse();\n         parsedElement = \"$..cluster_name\";\n-\n         String json2 = \"[\" + json + \"]\";\n         String value = commonspec.getJSONPathString(json2, parsedElement, \"0\");\n-\n         if (value == null) {\n             throw new Exception(\"No cluster name is found\");\n         } else {\n@@ -306,6 +314,8 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Drop all the ElasticSearch indexes.\n      */\n+\n+\n     @Given(\"^I drop every existing elasticsearch index$\")\n     public void dropElasticsearchIndexes() {\n         commonspec.getElasticSearchClient().dropAllIndexes();\n@@ -316,6 +326,8 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param index ES index\n      */\n+\n+\n     @Given(\"^I drop an elasticsearch index named '(.+?)'$\")\n     public void dropElasticsearchIndex(String index) {\n         commonspec.getElasticSearchClient().dropSingleIndex(index);\n@@ -326,6 +338,8 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param keyspace Cassandra keyspace\n      */\n+\n+\n     @Given(\"^I drop a Cassandra keyspace '(.+)'$\")\n     public void dropCassandraKeyspace(String keyspace) {\n         commonspec.getCassandraClient().dropKeyspace(keyspace);\n@@ -336,10 +350,11 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param databaseName Mongo database\n      */\n+\n+\n     @Given(\"^I create a MongoDB dataBase '(.+?)'$\")\n     public void createMongoDBDataBase(String databaseName) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(databaseName);\n-\n     }\n \n     /**\n@@ -347,6 +362,8 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      * @param databaseName mongo database\n      */\n+\n+\n     @Given(\"^I drop a MongoDB database '(.+?)'$\")\n     public void dropMongoDBDataBase(String databaseName) {\n         commonspec.getMongoDBClient().dropMongoDBDataBase(databaseName);\n@@ -359,6 +376,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param tabName Mongo table\n      * @param table Datatable used for insert elements\n      */\n+\n+\n     @Given(\"^I insert into a MongoDB database '(.+?)' and table '(.+?)' this values:$\")\n     public void insertOnMongoTable(String dataBase, String tabName, DataTable table) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(dataBase);\n@@ -371,6 +390,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param database Mongo database\n      * @param table Mongo table\n      */\n+\n+\n     @Given(\"^I drop every document at a MongoDB database '(.+?)' and table '(.+?)'\")\n     public void truncateTableInMongo(String database, String table) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(database);\n@@ -383,10 +404,11 @@ public class GivenGSpec extends BaseGSpec {\n      * @param path path of running app\n      * @throws Exception exception\n      */\n+\n+\n     @Given(\"^I( securely)? browse to '(.+?)'$\")\n     public void seleniumBrowse(String isSecured, String path) throws Exception {\n         assertThat(path).isNotEmpty();\n-\n         if (commonspec.getWebHost() == null) {\n             throw new Exception(\"Web host has not been set\");\n         }\n@@ -394,13 +416,13 @@ public class GivenGSpec extends BaseGSpec {\n         if (commonspec.getWebPort() == null) {\n             throw new Exception(\"Web port has not been set\");\n         }\n+\n         String protocol = \"http://\";\n         if (isSecured != null) {\n             protocol = \"https://\";\n         }\n \n         String webURL = protocol + commonspec.getWebHost() + commonspec.getWebPort();\n-\n         commonspec.getDriver().get(webURL + path);\n         commonspec.setParentWindow(commonspec.getDriver().getWindowHandle());\n     }\n@@ -411,14 +433,14 @@ public class GivenGSpec extends BaseGSpec {\n      * @param host host where app is running\n      * @param port port where app is running\n      */\n+\n+\n     @Given(\"^My app is running in '([^:]+?)(:.+?)?'$\")\n     public void setupApp(String host, String port) {\n         assertThat(host).isNotEmpty();\n-\n         if (port == null) {\n             port = \":80\";\n         }\n-\n         commonspec.setWebHost(host);\n         commonspec.setWebPort(port);\n         commonspec.setRestHost(host);\n@@ -431,27 +453,26 @@ public class GivenGSpec extends BaseGSpec {\n      * @param restHost host where api is running\n      * @param restPort port where api is running\n      */\n+\n+\n     @Given(\"^I( securely)? send requests to '([^:]+?)(:.+?)?'$\")\n     public void setupRestClient(String isSecured, String restHost, String restPort) {\n         String restProtocol = \"http://\";\n-\n         if (isSecured != null) {\n             restProtocol = \"https://\";\n         }\n \n-\n         if (restHost == null) {\n             restHost = \"localhost\";\n         }\n \n         if (restPort == null) {\n-            if (isSecured == null)  {\n+            if (isSecured == null) {\n                 restPort = \":80\";\n             } else {\n                 restPort = \":443\";\n             }\n         }\n-\n         commonspec.setRestProtocol(restProtocol);\n         commonspec.setRestHost(restHost);\n         commonspec.setRestPort(restPort);\n@@ -460,6 +481,8 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Maximizes current browser window. Mind the current resolution could break a test.\n      */\n+\n+\n     @Given(\"^I maximize the browser$\")\n     public void seleniumMaximize() {\n         commonspec.getDriver().manage().window().maximize();\n@@ -468,12 +491,11 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Switches to a frame/ iframe.\n      */\n-    @Given(\"^I switch to the iframe on index '(\\\\d+?)'$\")\n-    public void seleniumSwitchFrame(Integer index) {\n \n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n \n+    @Given(\"^I switch to the iframe on index '(\\\\d+?)'$\")\n+    public void seleniumSwitchFrame(Integer index) {\n+        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         WebElement elem = commonspec.getPreviousWebElements().getPreviousWebElements().get(index);\n         commonspec.getDriver().switchTo().frame(elem);\n     }\n@@ -486,10 +508,11 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws NoSuchFieldException exception\n      * @throws ClassNotFoundException exception\n      */\n+\n+\n     @Given(\"^I switch to iframe with '([^:]*?):(.+?)'$\")\n     public void seleniumIdFrame(String method, String idframe) throws IllegalAccessException, NoSuchFieldException, ClassNotFoundException {\n         assertThat(commonspec.locateElement(method, idframe, 1));\n-\n         if (method.equals(\"id\") || method.equals(\"name\")) {\n             commonspec.getDriver().switchTo().frame(idframe);\n         } else {\n@@ -500,6 +523,8 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Switches to a parent frame/ iframe.\n      */\n+\n+\n     @Given(\"^I switch to a parent frame$\")\n     public void seleniumSwitchAParentFrame() {\n         commonspec.getDriver().switchTo().parentFrame();\n@@ -508,6 +533,8 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Switches to the frames main container.\n      */\n+\n+\n     @Given(\"^I switch to the main frame container$\")\n     public void seleniumSwitchParentFrame() {\n         commonspec.getDriver().switchTo().frame(commonspec.getParentWindow());\n@@ -524,6 +551,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception exception\n      *\n      */\n+\n+\n     @Given(\"^I open a ssh connection to '(.+?)'( in port '(.+?)')? with user '(.+?)'( and password '(.+?)')?( using pem file '(.+?)')?$\")\n     public void openSSHConnection(String remoteHost, String tmp, String remotePort, String user, String foo, String password, String bar, String pemFile) throws Exception {\n         if ((pemFile == null) || (pemFile.equals(\"none\"))) {\n@@ -555,6 +584,8 @@ public class GivenGSpec extends BaseGSpec {\n     *\n     *\n     */\n+\n+\n     @Given(\"^I authenticate to DCOS cluster '(.+?)' using email '(.+?)'( with user '(.+?)'( and password '(.+?)'| and pem file '(.+?)'))?$\")\n     public void authenticateDCOSpem(String remoteHost, String email, String foo, String user, String bar, String password, String pemFile) throws Exception {\n         String DCOSsecret;\n@@ -568,6 +599,7 @@ public class GivenGSpec extends BaseGSpec {\n         setDCOSCookie(DCOSsecret, email);\n     }\n \n+\n     public void setDCOSCookie(String DCOSsecret, String email) throws Exception {\n         final JWTSigner signer = new JWTSigner(DCOSsecret);\n         final HashMap<String, Object> claims = new HashMap();\n@@ -586,24 +618,23 @@ public class GivenGSpec extends BaseGSpec {\n      * @param passWord password\n      * @throws Exception exception\n      */\n+\n+\n     @Given(\"^I( do not)? set sso token using host '(.+?)' with user '(.+?)' and password '(.+?)'$\")\n     public void setGoSecSSOCookie(String set, String ssoHost, String userName, String passWord) throws Exception {\n         if (set == null) {\n             HashMap<String, String> ssoCookies = new GosecSSOUtils(ssoHost, userName, passWord).ssoTokenGenerator();\n             String[] tokenList = {\"user\", \"dcos-acs-auth-cookie\"};\n             List<Cookie> cookiesAtributes = addSsoToken(ssoCookies, tokenList);\n-\n             commonspec.setCookies(cookiesAtributes);\n         }\n     }\n \n+\n     public List<Cookie> addSsoToken(HashMap<String, String> ssoCookies, String[] tokenList) {\n         List<Cookie> cookiesAttributes = new ArrayList<>();\n-\n         for (String tokenKey : tokenList) {\n-            cookiesAttributes.add(new Cookie(tokenKey, ssoCookies.get(tokenKey),\n-                    false, null,\n-                    null, 999999, false, false));\n+            cookiesAttributes.add(new Cookie(tokenKey, ssoCookies.get(tokenKey), false, null, null, 999999, false, false));\n         }\n         return cookiesAttributes;\n     }\n@@ -617,6 +648,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception exception\n      *\n      */\n+\n+\n     @Given(\"^I inbound copy '(.+?)' through a ssh connection to '(.+?)'$\")\n     public void copyFromRemoteFile(String remotePath, String localPath) throws Exception {\n         commonspec.getRemoteSSHConnection().copyFrom(remotePath, localPath);\n@@ -630,6 +663,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param localPath path where file is located\n      * @throws Exception exception\n      */\n+\n+\n     @Given(\"^I outbound copy '(.+?)' through a ssh connection to '(.+?)'$\")\n     public void copyToRemoteFile(String localPath, String remotePath) throws Exception {\n         commonspec.getRemoteSSHConnection().copyTo(localPath, remotePath);\n@@ -646,15 +681,15 @@ public class GivenGSpec extends BaseGSpec {\n      * @param envVar environment variable name\n      * @throws Exception exception\n      **/\n+\n+\n     @Given(\"^I run '(.+?)' locally( with exit status '(.+?)')?( and save the value in environment variable '(.+?)')?$\")\n     public void executeLocalCommand(String command, String foo, Integer exitStatus, String bar, String envVar) throws Exception {\n         if (exitStatus == null) {\n             exitStatus = 0;\n         }\n-\n         commonspec.runLocalCommand(command);\n         commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.TRUE);\n-\n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(exitStatus);\n     }\n \n@@ -668,18 +703,18 @@ public class GivenGSpec extends BaseGSpec {\n      * @param envVar environment variable name\n      * @throws Exception exception\n      **/\n+\n+\n     @Given(\"^I run '(.+?)' in the ssh connection( with exit status '(.+?)')?( and save the value in environment variable '(.+?)')?$\")\n     public void executeCommand(String command, String foo, Integer exitStatus, String bar, String envVar) throws Exception {\n         if (exitStatus == null) {\n             exitStatus = 0;\n         }\n-\n         command = \"set -o pipefail && alias grep='grep --color=never' && \" + command;\n         commonspec.getRemoteSSHConnection().runCommand(command);\n         commonspec.setCommandResult(commonspec.getRemoteSSHConnection().getResult());\n         commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n         commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.FALSE);\n-\n         Assertions.assertThat(commonspec.getRemoteSSHConnection().getExitStatus()).isEqualTo(exitStatus);\n     }\n \n@@ -691,6 +726,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param collection Mongo collection\n      * @param document document used for schema\n      */\n+\n+\n     @Given(\"^I insert into MongoDB database '(.+?)' and collection '(.+?)' the document from schema '(.+?)'$\")\n     public void insertOnMongoTable(String dataBase, String collection, String document) throws Exception {\n         String retrievedDoc = commonspec.retrieveData(document, \"json\");\n@@ -702,10 +739,11 @@ public class GivenGSpec extends BaseGSpec {\n     /**\n      * Get all opened windows and store it.\n      */\n+\n+\n     @Given(\"^a new window is opened$\")\n     public void seleniumGetwindows() {\n         Set<String> wel = commonspec.getDriver().getWindowHandles();\n-\n         Assertions.assertThat(wel).as(\"Element count doesnt match\").hasSize(2);\n     }\n \n@@ -716,6 +754,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param zookeeperHosts as host:port (comma separated)\n      * @throws InterruptedException exception\n      */\n+\n+\n     @Given(\"^I connect to Zookeeper at '(.+)'$\")\n     public void connectToZk(String zookeeperHosts) throws InterruptedException {\n         commonspec.getZookeeperSecClient().setZookeeperSecConnection(zookeeperHosts, 3000);\n@@ -727,6 +767,8 @@ public class GivenGSpec extends BaseGSpec {\n      * Disconnect from zookeeper.\n      *\n      */\n+\n+\n     @Given(\"^I disconnect from Zookeeper$\")\n     public void disconnectFromZk() throws InterruptedException {\n         commonspec.getZookeeperSecClient().disconnect();\n@@ -740,6 +782,8 @@ public class GivenGSpec extends BaseGSpec {\n      * @param zkPath ZK port\n      * @throws UnknownHostException exception\n      */\n+\n+\n     @Given(\"^I connect to kafka at '(.+)' using path '(.+)'$\")\n     public void connectKafka(String zkHost, String zkPath) throws UnknownHostException {\n         String zkPort = zkHost.split(\":\")[1];\n@@ -753,6 +797,8 @@ public class GivenGSpec extends BaseGSpec {\n      *\n      *\n      */\n+\n+\n     @Given(\"^I connect to LDAP$\")\n     public void connectLDAP() {\n         commonspec.getLdapUtils().connect();\n@@ -786,6 +832,8 @@ public class GivenGSpec extends BaseGSpec {\n      *                      being the result of the modification: {\"key1\": \"value1\", \"key2\": {\"key3\": \"new value3\"}}\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string)')? with:$\")\n     public void sendRequestDataTableTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String contains, String responseVal, String baseData, String baz, String type, DataTable modifications) throws Exception {\n \n@@ -795,20 +843,17 @@ public class GivenGSpec extends BaseGSpec {\n         // Modify data\n         commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n         String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-\n         Boolean searchUntilContains;\n         if (contains == null || contains.isEmpty()) {\n             searchUntilContains = Boolean.TRUE;\n         } else {\n             searchUntilContains = Boolean.FALSE;\n         }\n+\n         Boolean found = !searchUntilContains;\n         AssertionError ex = null;\n-\n         Future<Response> response;\n-\n         Pattern pattern = CommonG.matchesOrContains(responseVal);\n-\n         for (int i = 0; (i <= timeout); i += wait) {\n             if (found && searchUntilContains) {\n                 break;\n@@ -837,13 +882,16 @@ public class GivenGSpec extends BaseGSpec {\n                 Thread.sleep(wait * 1000);\n                 ex = e;\n             }\n+\n             if (!found && !searchUntilContains) {\n                 break;\n             }\n         }\n+\n         if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n             throw (ex);\n         }\n+\n         if (searchUntilContains) {\n             commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n@@ -858,13 +906,14 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      *\n      */\n+\n+\n     @Given(\"^services '(.*?)' are splitted correctly in datacenters$\")\n     public void checkServicesDistributionMultiDataCenter(String serviceList) throws Exception {\n         executeCommand(\"dcos node --json >> aux.txt\", \"foo\", 0, \"bar\", null);\n         executeCommand(\"cat aux.txt\", \"foo\", 0, \"bar\", null);\n         checkDataCentersDistribution(serviceList.split(\",\"), obtainsDataCenters(commonspec.getRemoteSSHConnection().getResult()).split(\";\"));\n         executeCommand(\"rm -rf aux.txt\", \"foo\", 0, \"bar\", null);\n-\n     }\n     /**\n      * Check if all task of a service are correctly distributed in all datacenters of the cluster\n@@ -875,11 +924,14 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      *\n      */\n+\n+\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n     public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n     }\n \n+\n     public void checkDataCentersDistribution(String[] serviceListArray, String[] dataCentersIpsArray) throws Exception {\n         int[] expectedDistribution = new int[dataCentersIpsArray.length];\n         int[] results = new int[dataCentersIpsArray.length];\n@@ -910,6 +962,7 @@ public class GivenGSpec extends BaseGSpec {\n         }\n     }\n \n+\n     public String obtainsDataCenters(String jsonString) {\n         Map<String, String> datacentersDistribution = new HashMap<String, String>();\n         JSONArray jsonArray = new JSONArray(jsonString);\n@@ -921,9 +974,11 @@ public class GivenGSpec extends BaseGSpec {\n             if (existValue == null) {\n                 datacentersDistribution.put(datacenter, ip);\n             } else {\n-                datacentersDistribution.put(datacenter, datacentersDistribution.get(datacenter) + \",\" + ip);\n+                datacentersDistribution.put(datacenter,\n+                    datacentersDistribution.get(datacenter) + \",\" + ip);\n             }\n         }\n+\n         String result = \"\";\n         for (String ips : datacentersDistribution.keySet()) {\n             String key = ips.toString();\n@@ -932,5 +987,4 @@ public class GivenGSpec extends BaseGSpec {\n         }\n         return result.substring(1, result.length());\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 145
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "878",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/143/GivenGSpec.java\nindex e970ed6c83..a1d0a6695d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/143/GivenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/143/GivenGSpec.java\n@@ -875,6 +875,7 @@ public class GivenGSpec extends BaseGSpec {\n      * @throws Exception\n      *\n      */\n+\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n     public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n",
            "diff_size": 1
        }
    ]
}