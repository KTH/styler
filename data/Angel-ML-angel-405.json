{
    "error_id": "405",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/405/TDoubleMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/405/TDoubleMatrix.java\nindex 3728cbe4f2..2691cd3a12 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/405/TDoubleMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/405/TDoubleMatrix.java\n@@ -23,82 +23,82 @@ import com.tencent.angel.ml.math.vector.TDoubleVector;\n  */\n public abstract class TDoubleMatrix extends RowbaseMatrix {\n \n-  /**\n-   * Create a new double matrix.\n-   *\n-   * @param row the row\n-   * @param col the col\n-   */\n-  public TDoubleMatrix(int row, int col) {\n-    super(row, col);\n-  }\n-\n-  /**\n-   * Plus specified element of matrix by a update value.\n-   *\n-   * @param rowIndex the row index\n-   * @param colIndex the column index\n-   * @param value the value update value\n-   * @return this\n-   */\n-  public TDoubleMatrix plusBy(int rowIndex, int colIndex, double value){\n-    if (vectors[rowIndex] == null) {\n-      vectors[rowIndex] = initVector(rowIndex);\n+    /**\n+     * Create a new double matrix.\n+     *\n+     * @param row the row\n+     * @param col the col\n+     */\n+    public TDoubleMatrix(int row, int col) {\n+        super(row, col);\n     }\n-    ((TDoubleVector)vectors[rowIndex]).plusBy(colIndex, value);\n-    return this;\n-  }\n \n-  /**\n-   * Increases specified elements by values.\n-   *\n-   * @param rowIndexes the row ids\n-   * @param colIndexes the col ids\n-   * @param values the values\n-   * @return this\n-   */\n-  public TDoubleMatrix plusBy(int[] rowIndexes, int[] colIndexes, double[] values) {\n-    assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n-      if(vectors[rowIndexes[i]] == null) {\n-        vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n-      }\n-      ((TDoubleVector)vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n+    /**\n+     * Plus specified element of matrix by a update value.\n+     *\n+     * @param rowIndex the row index\n+     * @param colIndex the column index\n+     * @param value    the value update value\n+     * @return this\n+     */\n+    public TDoubleMatrix plusBy(int rowIndex, int colIndex, double value) {\n+        if (vectors[rowIndex] == null) {\n+            vectors[rowIndex] = initVector(rowIndex);\n+        }\n+        ((TDoubleVector) vectors[rowIndex]).plusBy(colIndex, value);\n+        return this;\n     }\n-    return this;\n-  }\n \n-  /**\n-   * Increases specified row by values.\n-   *\n-   * @param rowIndex the row id\n-   * @param colIndexes the col ids\n-   * @param values the values\n-   * @return this\n-   */\n-  public TDoubleMatrix plusBy(int rowIndex, int[] colIndexes, double[] values) {\n-    assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n-      vectors[rowIndex] = initVector(rowIndex);\n+    /**\n+     * Increases specified elements by values.\n+     *\n+     * @param rowIndexes the row ids\n+     * @param colIndexes the col ids\n+     * @param values     the values\n+     * @return this\n+     */\n+    public TDoubleMatrix plusBy(int[] rowIndexes, int[] colIndexes, double[] values) {\n+        assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n+        for (int i = 0; i < rowIndexes.length; i++) {\n+            if (vectors[rowIndexes[i]] == null) {\n+                vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n+            }\n+            ((TDoubleVector) vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n+        }\n+        return this;\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n-      ((TDoubleVector)vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n+    /**\n+     * Increases specified row by values.\n+     *\n+     * @param rowIndex   the row id\n+     * @param colIndexes the col ids\n+     * @param values     the values\n+     * @return this\n+     */\n+    public TDoubleMatrix plusBy(int rowIndex, int[] colIndexes, double[] values) {\n+        assert (colIndexes.length == values.length);\n+        if (vectors[rowIndex] == null) {\n+            vectors[rowIndex] = initVector(rowIndex);\n+        }\n+\n+        for (int i = 0; i < colIndexes.length; i++) {\n+            ((TDoubleVector) vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n+        }\n+        return this;\n     }\n-    return this;\n-  }\n \n-  /**\n-   * Get specified value.\n-   *\n-   * @param rowIndex the row index\n-   * @param colIndex the column index\n-   * @return the value\n-   */\n-  public double get(int rowIndex, int colIndex) {\n-    if(vectors[rowIndex] == null) {\n-      return 0.0;\n+    /**\n+     * Get specified value.\n+     *\n+     * @param rowIndex the row index\n+     * @param colIndex the column index\n+     * @return the value\n+     */\n+    public double get(int rowIndex, int colIndex) {\n+        if (vectors[rowIndex] == null) {\n+            return 0.0;\n+        }\n+        return ((TDoubleVector) vectors[rowIndex]).get(colIndex);\n     }\n-    return ((TDoubleVector)vectors[rowIndex]).get(colIndex);\n-  }\n }\n",
            "diff_size": 92
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/405/TDoubleMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/405/TDoubleMatrix.java\nindex 3728cbe4f2..b5db585839 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/405/TDoubleMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/405/TDoubleMatrix.java\n@@ -41,7 +41,7 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @param value the value update value\n    * @return this\n    */\n-  public TDoubleMatrix plusBy(int rowIndex, int colIndex, double value){\n+  public TDoubleMatrix plusBy(int rowIndex, int colIndex, double value) {\n     if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n@@ -58,8 +58,8 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @return this\n    */\n   public TDoubleMatrix plusBy(int[] rowIndexes, int[] colIndexes, double[] values) {\n-    assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n+    assert((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n+    for (int i = 0; i < rowIndexes.length; i++) {\n       if(vectors[rowIndexes[i]] == null) {\n         vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n       }\n@@ -77,12 +77,12 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @return this\n    */\n   public TDoubleMatrix plusBy(int rowIndex, int[] colIndexes, double[] values) {\n-    assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n+    assert(colIndexes.length == values.length);\n+    if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n+    for (int i = 0; i < colIndexes.length; i++) {\n       ((TDoubleVector)vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n@@ -101,4 +101,4 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n     }\n     return ((TDoubleVector)vectors[rowIndex]).get(colIndex);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 34.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 47.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 64.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 84.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 104.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/405/TDoubleMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/405/TDoubleMatrix.java\nindex 3728cbe4f2..407a7764dd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/405/TDoubleMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/405/TDoubleMatrix.java\n@@ -21,6 +21,7 @@ import com.tencent.angel.ml.math.vector.TDoubleVector;\n /**\n  * The double matrix.\n  */\n+\n public abstract class TDoubleMatrix extends RowbaseMatrix {\n \n   /**\n@@ -29,9 +30,10 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @param row the row\n    * @param col the col\n    */\n-  public TDoubleMatrix(int row, int col) {\n+\n+    public TDoubleMatrix(int row, int col) {\n     super(row, col);\n-  }\n+    }\n \n   /**\n    * Plus specified element of matrix by a update value.\n@@ -41,13 +43,14 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @param value the value update value\n    * @return this\n    */\n-  public TDoubleMatrix plusBy(int rowIndex, int colIndex, double value){\n+\n+    public TDoubleMatrix plusBy(int rowIndex, int colIndex, double value) {\n     if (vectors[rowIndex] == null) {\n-      vectors[rowIndex] = initVector(rowIndex);\n+        vectors[rowIndex] = initVector(rowIndex);\n     }\n-    ((TDoubleVector)vectors[rowIndex]).plusBy(colIndex, value);\n+    ((TDoubleVector) vectors[rowIndex]).plusBy(colIndex, value);\n     return this;\n-  }\n+    }\n \n   /**\n    * Increases specified elements by values.\n@@ -57,16 +60,17 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @param values the values\n    * @return this\n    */\n-  public TDoubleMatrix plusBy(int[] rowIndexes, int[] colIndexes, double[] values) {\n+\n+    public TDoubleMatrix plusBy(int[] rowIndexes, int[] colIndexes, double[] values) {\n     assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n-      if(vectors[rowIndexes[i]] == null) {\n+    for (int i = 0; i < rowIndexes.length; i++) {\n+        if (vectors[rowIndexes[i]] == null) {\n         vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n-      }\n-      ((TDoubleVector)vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n+        }\n+        ((TDoubleVector) vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n-  }\n+    }\n \n   /**\n    * Increases specified row by values.\n@@ -76,17 +80,18 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @param values the values\n    * @return this\n    */\n-  public TDoubleMatrix plusBy(int rowIndex, int[] colIndexes, double[] values) {\n+\n+    public TDoubleMatrix plusBy(int rowIndex, int[] colIndexes, double[] values) {\n     assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n-      vectors[rowIndex] = initVector(rowIndex);\n+    if (vectors[rowIndex] == null) {\n+        vectors[rowIndex] = initVector(rowIndex);\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n-      ((TDoubleVector)vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n+    for (int i = 0; i < colIndexes.length; i++) {\n+        ((TDoubleVector) vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n-  }\n+    }\n \n   /**\n    * Get specified value.\n@@ -95,10 +100,12 @@ public abstract class TDoubleMatrix extends RowbaseMatrix {\n    * @param colIndex the column index\n    * @return the value\n    */\n-  public double get(int rowIndex, int colIndex) {\n-    if(vectors[rowIndex] == null) {\n-      return 0.0;\n+\n+    public double get(int rowIndex, int colIndex) {\n+    if (vectors[rowIndex] == null) {\n+        return 0.0;\n+    }\n+    return ((TDoubleVector) vectors[rowIndex]).get(colIndex);\n     }\n-    return ((TDoubleVector)vectors[rowIndex]).get(colIndex);\n-  }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}