{
    "error_id": "182",
    "information": {
        "errors": [
            {
                "line": "73",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Nullable\n    public JobTO getJob(int jobId) throws RestServiceException {\n    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n        ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n        if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n            return null;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/182/JobServiceClient.java\nindex 9220114010..39f31b5889 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/182/JobServiceClient.java\n@@ -70,7 +70,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n@@ -84,7 +84,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+\t\t\t\t\tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return Collections.emptyList();\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/182/JobServiceClient.java\nindex 9220114010..805f3639b9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/182/JobServiceClient.java\n@@ -32,65 +32,61 @@ import com.intuit.tank.rest.util.ServiceConsants;\n \n /**\n  * JobClient\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public class JobServiceClient extends BaseRestClient {\n \n-    private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT\n-            + JobService.SERVICE_RELATIVE_PATH;\n+  private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT\n+    + JobService.SERVICE_RELATIVE_PATH;\n \n-    /**\n-     * \n-     * @param serviceUrl\n-     */\n-    public JobServiceClient(String serviceUrl) {\n-        super(serviceUrl, null, null);\n-    }\n+  /**\n+   * @param serviceUrl\n+   */\n+  public JobServiceClient(String serviceUrl) {\n+    super(serviceUrl, null, null);\n+  }\n \n-    /**\n-     * \n-     * @param serviceUrl\n-     */\n-    public JobServiceClient(String serviceUrl, final String proxyServer, final Integer proxyPort) {\n-        super(serviceUrl, proxyServer, proxyPort);\n-    }\n+  /**\n+   * @param serviceUrl\n+   */\n+  public JobServiceClient(String serviceUrl, final String proxyServer, final Integer proxyPort) {\n+    super(serviceUrl, proxyServer, proxyPort);\n+  }\n \n-    /**\n-     * \n-     * @return\n-     */\n-    protected String getServiceBaseUrl() {\n-        return SERVICE_BASE_URL;\n-    }\n+  /**\n+   * @return\n+   */\n+  protected String getServiceBaseUrl() {\n+    return SERVICE_BASE_URL;\n+  }\n \n-    /**\n-     * @{inheritDoc\n-     */\n-    @Nullable\n-    public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n-        ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n-        if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n-            return null;\n-        }\n-        exceptionHandler.checkStatusCode(response);\n-        return response.readEntity(JobTO.class);\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Nullable\n+  public JobTO getJob(int jobId) throws RestServiceException {\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+    ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n+    if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n+      return null;\n     }\n+    exceptionHandler.checkStatusCode(response);\n+    return response.readEntity(JobTO.class);\n+  }\n \n-    /**\n-     * @{inheritDoc\n-     */\n-    @Nullable\n-    public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n-        ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n-        if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n-            return Collections.emptyList();\n-        }\n-        exceptionHandler.checkStatusCode(response);\n-        JobContainer jobContainer = response.readEntity(JobContainer.class);\n-        return jobContainer.getJobs();\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Nullable\n+  public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+    ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n+    if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n+      return Collections.emptyList();\n     }\n+    exceptionHandler.checkStatusCode(response);\n+    JobContainer jobContainer = response.readEntity(JobContainer.class);\n+    return jobContainer.getJobs();\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/182/JobServiceClient.java\nindex 9220114010..ff0f8c132d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/182/JobServiceClient.java\n@@ -70,8 +70,8 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n-        ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n         }\n@@ -84,8 +84,8 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n-        ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return Collections.emptyList();\n         }\n@@ -93,4 +93,4 @@ public class JobServiceClient extends BaseRestClient {\n         JobContainer jobContainer = response.readEntity(JobContainer.class);\n         return jobContainer.getJobs();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/182/JobServiceClient.java\nindex 9220114010..851f84bb3b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/182/JobServiceClient.java\n@@ -13,16 +13,15 @@ package com.intuit.tank.api.client.v1.job;\n  * #L%\n  */\n \n+\n+\n import java.util.Collections;\n import java.util.List;\n-\n import javax.annotation.Nullable;\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response.Status;\n-\n import org.glassfish.jersey.client.ClientResponse;\n-\n import com.intuit.tank.api.model.v1.job.JobContainer;\n import com.intuit.tank.api.model.v1.job.JobTO;\n import com.intuit.tank.api.service.v1.job.JobService;\n@@ -36,15 +35,17 @@ import com.intuit.tank.rest.util.ServiceConsants;\n  * @author dangleton\n  * \n  */\n+\n public class JobServiceClient extends BaseRestClient {\n \n-    private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT\n-            + JobService.SERVICE_RELATIVE_PATH;\n+    private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT + JobService.SERVICE_RELATIVE_PATH;\n \n     /**\n      * \n      * @param serviceUrl\n      */\n+\n+\n     public JobServiceClient(String serviceUrl) {\n         super(serviceUrl, null, null);\n     }\n@@ -53,6 +54,8 @@ public class JobServiceClient extends BaseRestClient {\n      * \n      * @param serviceUrl\n      */\n+\n+\n     public JobServiceClient(String serviceUrl, final String proxyServer, final Integer proxyPort) {\n         super(serviceUrl, proxyServer, proxyPort);\n     }\n@@ -61,6 +64,8 @@ public class JobServiceClient extends BaseRestClient {\n      * \n      * @return\n      */\n+\n+\n     protected String getServiceBaseUrl() {\n         return SERVICE_BASE_URL;\n     }\n@@ -68,9 +73,11 @@ public class JobServiceClient extends BaseRestClient {\n     /**\n      * @{inheritDoc\n      */\n+\n+\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n@@ -82,9 +89,11 @@ public class JobServiceClient extends BaseRestClient {\n     /**\n      * @{inheritDoc\n      */\n+\n+\n     @Nullable\n     public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return Collections.emptyList();\n@@ -93,4 +102,4 @@ public class JobServiceClient extends BaseRestClient {\n         JobContainer jobContainer = response.readEntity(JobContainer.class);\n         return jobContainer.getJobs();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/182/JobServiceClient.java\nindex 9220114010..39f31b5889 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/182/JobServiceClient.java\n@@ -70,7 +70,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n@@ -84,7 +84,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+\t\t\t\t\tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return Collections.emptyList();\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/182/JobServiceClient.java\nindex 9220114010..a12b5d5dbf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/182/JobServiceClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/182/JobServiceClient.java\n@@ -70,7 +70,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n@@ -84,7 +84,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+\t\t\t\t\tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n         ClientResponse response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get(ClientResponse.class);\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return Collections.emptyList();\n",
            "diff_size": 2
        }
    ]
}