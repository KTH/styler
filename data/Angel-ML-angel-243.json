{
    "error_id": "243",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/243/SnapshotDumper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/243/SnapshotDumper.java\nindex c4db41bb70..34afa017db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/243/SnapshotDumper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/243/SnapshotDumper.java\n@@ -38,194 +38,198 @@ import java.util.concurrent.atomic.AtomicBoolean;\n  * Snapshot dumper, it dump the matrices to hdfs once in a while\n  */\n public class SnapshotDumper {\n-  private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n-  /**\n-   * PS context\n-   */\n-  private final PSContext context;\n-\n-  /**\n-   * Dump interval in milliseconds\n-   */\n-  private final int backupIntervalMs;\n-\n-  /**\n-   * Dump dispatcher\n-   */\n-  private volatile Thread dumpDispatcher;\n-  private final AtomicBoolean stopped;\n-\n-  /**\n-   * Application tmp output path\n-   */\n-  private final String outputDir;\n-\n-  /**\n-   * Need dump matrices\n-   */\n-  private final String [] needDumpMatrices;\n-\n-  /**\n-   * Snapshot base directory path\n-   */\n-  private final Path baseDirPath;\n-\n-  /**\n-   * Last dump iteration number\n-   */\n-  private int lastIteration;\n-\n-  /**\n-   * Application running mode\n-   */\n-  private final RunningMode mode;\n-\n-  /**\n-   * Create a SnapshotDumper\n-   * @param context PS context\n-   */\n-  public SnapshotDumper(PSContext context) {\n-    this.context = context;\n-    stopped = new AtomicBoolean(false);\n-    lastIteration = 0;\n-    mode = context.getRunningMode();\n-\n-    backupIntervalMs = context.getConf().getInt(\n-      AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n-      AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n-\n-    outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n-    baseDirPath = new Path(outputDir + Path.SEPARATOR\n-      + ModelFilesConstent.snapshotDirName + Path.SEPARATOR\n-      + context.getPSAttemptId().getPsId() + Path.SEPARATOR\n-      + String.valueOf(context.getPSAttemptId().getIndex()));\n-\n-    String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n-    if(matricesStr == null) {\n-      needDumpMatrices = null;\n-    } else {\n-      needDumpMatrices = matricesStr.split(\",\");\n-    }\n-  }\n-\n-  /**\n-   * Init\n-   */\n-  public void init() {\n-  }\n-\n-  /**\n-   * Start dump dispatcher\n-   */\n-  public void start() {\n-    LOG.info(\"Start snapshot dumper\");\n-    dumpDispatcher = new Thread(() -> {\n-      while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n-        try {\n-          Thread.sleep(backupIntervalMs);\n-          try {\n-            LOG.info(\"to writeSnapshots\");\n-            while(context.getRunningContext().getState() == ServerState.BUSY) {\n-              Thread.sleep(5000);\n-            }\n-            writeSnapshots();\n-          } catch (Exception ioe) {\n-            LOG.error(\"write snapshots error: \", ioe);\n-          }\n-        } catch (InterruptedException e) {\n-          if (!stopped.get()) {\n-            LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n-          }\n+    private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n+    /**\n+     * PS context\n+     */\n+    private final PSContext context;\n+\n+    /**\n+     * Dump interval in milliseconds\n+     */\n+    private final int backupIntervalMs;\n+\n+    /**\n+     * Dump dispatcher\n+     */\n+    private volatile Thread dumpDispatcher;\n+    private final AtomicBoolean stopped;\n+\n+    /**\n+     * Application tmp output path\n+     */\n+    private final String outputDir;\n+\n+    /**\n+     * Need dump matrices\n+     */\n+    private final String[] needDumpMatrices;\n+\n+    /**\n+     * Snapshot base directory path\n+     */\n+    private final Path baseDirPath;\n+\n+    /**\n+     * Last dump iteration number\n+     */\n+    private int lastIteration;\n+\n+    /**\n+     * Application running mode\n+     */\n+    private final RunningMode mode;\n+\n+    /**\n+     * Create a SnapshotDumper\n+     *\n+     * @param context PS context\n+     */\n+    public SnapshotDumper(PSContext context) {\n+        this.context = context;\n+        stopped = new AtomicBoolean(false);\n+        lastIteration = 0;\n+        mode = context.getRunningMode();\n+\n+        backupIntervalMs = context.getConf().getInt(\n+                AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n+                AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n+\n+        outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n+        baseDirPath = new Path(outputDir + Path.SEPARATOR\n+                + ModelFilesConstent.snapshotDirName + Path.SEPARATOR\n+                + context.getPSAttemptId().getPsId() + Path.SEPARATOR\n+                + String.valueOf(context.getPSAttemptId().getIndex()));\n+\n+        String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n+        if (matricesStr == null) {\n+            needDumpMatrices = null;\n+        } else {\n+            needDumpMatrices = matricesStr.split(\",\");\n         }\n-      }\n-    });\n-    dumpDispatcher.setName(\"snapshot-dump-dispatcher\");\n-    dumpDispatcher.start();\n-  }\n-\n-  /**\n-   * Write snapshot\n-   * @throws Exception\n-   */\n-  private void writeSnapshots() throws Exception {\n-    List<Integer> matrixIds = null;\n-    if(needDumpMatrices == null) {\n-      matrixIds = new ArrayList<>(context.getMatrixMetaManager().getMatrixMetas().keySet());\n-    } else {\n-      matrixIds = toMatrixIds();\n     }\n \n-    if(matrixIds.isEmpty()) {\n-      return;\n+    /**\n+     * Init\n+     */\n+    public void init() {\n     }\n \n-    List<Integer> needDumpMatrices = filter(matrixIds);\n-    if(needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n-      FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n-      Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n-      if(fs.exists(tmpPath)) {\n-        fs.delete(tmpPath, true);\n-      }\n-      context.getMatrixStorageManager().save(filter(matrixIds), tmpPath);\n-      HdfsUtil.rename(tmpPath, baseDirPath, fs);\n+    /**\n+     * Start dump dispatcher\n+     */\n+    public void start() {\n+        LOG.info(\"Start snapshot dumper\");\n+        dumpDispatcher = new Thread(() -> {\n+            while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n+                try {\n+                    Thread.sleep(backupIntervalMs);\n+                    try {\n+                        LOG.info(\"to writeSnapshots\");\n+                        while (context.getRunningContext().getState() == ServerState.BUSY) {\n+                            Thread.sleep(5000);\n+                        }\n+                        writeSnapshots();\n+                    } catch (Exception ioe) {\n+                        LOG.error(\"write snapshots error: \", ioe);\n+                    }\n+                } catch (InterruptedException e) {\n+                    if (!stopped.get()) {\n+                        LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n+                    }\n+                }\n+            }\n+        });\n+        dumpDispatcher.setName(\"snapshot-dump-dispatcher\");\n+        dumpDispatcher.start();\n     }\n-  }\n-\n-  /**\n-   * Get the matrices that need dump\n-   * @param matrixIds all matrices\n-   * @return the matrices that need dump\n-   * @throws ServiceException\n-   */\n-  private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n-    int size = matrixIds.size();\n-    List<Integer> ret = new ArrayList<>(size);\n-    for(int i = 0; i < size; i++) {\n-      if(checkNeedDump(matrixIds.get(i))) {\n-        ret.add(matrixIds.get(i));\n-      }\n+\n+    /**\n+     * Write snapshot\n+     *\n+     * @throws Exception\n+     */\n+    private void writeSnapshots() throws Exception {\n+        List<Integer> matrixIds = null;\n+        if (needDumpMatrices == null) {\n+            matrixIds = new ArrayList<>(context.getMatrixMetaManager().getMatrixMetas().keySet());\n+        } else {\n+            matrixIds = toMatrixIds();\n+        }\n+\n+        if (matrixIds.isEmpty()) {\n+            return;\n+        }\n+\n+        List<Integer> needDumpMatrices = filter(matrixIds);\n+        if (needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n+            FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n+            Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n+            if (fs.exists(tmpPath)) {\n+                fs.delete(tmpPath, true);\n+            }\n+            context.getMatrixStorageManager().save(filter(matrixIds), tmpPath);\n+            HdfsUtil.rename(tmpPath, baseDirPath, fs);\n+        }\n     }\n \n-    return ret;\n-  }\n-\n-  /**\n-   * Is this matrix need dump\n-   * @param matrixId matrix id\n-   * @return true mean need dump\n-   * @throws ServiceException\n-   */\n-  private boolean checkNeedDump(int matrixId) throws ServiceException {\n-    if(mode == RunningMode.ANGEL_PS) {\n-      return true;\n-    } else {\n-      MasterClient master = context.getMaster();\n-      if(master == null) {\n-        return false;\n-      } else {\n-        int iteration = context.getMaster().getIteration();\n-        return iteration > lastIteration;\n-      }\n+    /**\n+     * Get the matrices that need dump\n+     *\n+     * @param matrixIds all matrices\n+     * @return the matrices that need dump\n+     * @throws ServiceException\n+     */\n+    private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n+        int size = matrixIds.size();\n+        List<Integer> ret = new ArrayList<>(size);\n+        for (int i = 0; i < size; i++) {\n+            if (checkNeedDump(matrixIds.get(i))) {\n+                ret.add(matrixIds.get(i));\n+            }\n+        }\n+\n+        return ret;\n     }\n-  }\n-\n-  private List<Integer> toMatrixIds() {\n-    List<Integer> matrixIds = new ArrayList<>(needDumpMatrices.length);\n-    for(int i = 0; i < needDumpMatrices.length; i++) {\n-      MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(needDumpMatrices[i]);\n-      if(meta != null) {\n-        matrixIds.add(meta.getId());\n-      }\n+\n+    /**\n+     * Is this matrix need dump\n+     *\n+     * @param matrixId matrix id\n+     * @return true mean need dump\n+     * @throws ServiceException\n+     */\n+    private boolean checkNeedDump(int matrixId) throws ServiceException {\n+        if (mode == RunningMode.ANGEL_PS) {\n+            return true;\n+        } else {\n+            MasterClient master = context.getMaster();\n+            if (master == null) {\n+                return false;\n+            } else {\n+                int iteration = context.getMaster().getIteration();\n+                return iteration > lastIteration;\n+            }\n+        }\n     }\n \n-    return matrixIds;\n-  }\n+    private List<Integer> toMatrixIds() {\n+        List<Integer> matrixIds = new ArrayList<>(needDumpMatrices.length);\n+        for (int i = 0; i < needDumpMatrices.length; i++) {\n+            MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(needDumpMatrices[i]);\n+            if (meta != null) {\n+                matrixIds.add(meta.getId());\n+            }\n+        }\n+\n+        return matrixIds;\n+    }\n \n-  public void stop() {\n-    if(!stopped.getAndSet(true)) {\n-      if(dumpDispatcher != null) {\n-        dumpDispatcher.interrupt();\n-      }\n+    public void stop() {\n+        if (!stopped.getAndSet(true)) {\n+            if (dumpDispatcher != null) {\n+                dumpDispatcher.interrupt();\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 231
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/243/SnapshotDumper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/243/SnapshotDumper.java\nindex c4db41bb70..dbedbd1497 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/243/SnapshotDumper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/243/SnapshotDumper.java\n@@ -63,7 +63,7 @@ public class SnapshotDumper {\n   /**\n    * Need dump matrices\n    */\n-  private final String [] needDumpMatrices;\n+  private final String[] needDumpMatrices;\n \n   /**\n    * Snapshot base directory path\n@@ -90,18 +90,15 @@ public class SnapshotDumper {\n     lastIteration = 0;\n     mode = context.getRunningMode();\n \n-    backupIntervalMs = context.getConf().getInt(\n-      AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n-      AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n+    backupIntervalMs = context.getConf().getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS, AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n \n     outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n-    baseDirPath = new Path(outputDir + Path.SEPARATOR\n-      + ModelFilesConstent.snapshotDirName + Path.SEPARATOR\n+    baseDirPath = new Path(outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR\n       + context.getPSAttemptId().getPsId() + Path.SEPARATOR\n       + String.valueOf(context.getPSAttemptId().getIndex()));\n \n     String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n-    if(matricesStr == null) {\n+    if (matricesStr == null) {\n       needDumpMatrices = null;\n     } else {\n       needDumpMatrices = matricesStr.split(\",\");\n@@ -125,7 +122,7 @@ public class SnapshotDumper {\n           Thread.sleep(backupIntervalMs);\n           try {\n             LOG.info(\"to writeSnapshots\");\n-            while(context.getRunningContext().getState() == ServerState.BUSY) {\n+            while (context.getRunningContext().getState() == ServerState.BUSY) {\n               Thread.sleep(5000);\n             }\n             writeSnapshots();\n@@ -149,21 +146,21 @@ public class SnapshotDumper {\n    */\n   private void writeSnapshots() throws Exception {\n     List<Integer> matrixIds = null;\n-    if(needDumpMatrices == null) {\n+    if (needDumpMatrices == null) {\n       matrixIds = new ArrayList<>(context.getMatrixMetaManager().getMatrixMetas().keySet());\n     } else {\n       matrixIds = toMatrixIds();\n     }\n \n-    if(matrixIds.isEmpty()) {\n+    if (matrixIds.isEmpty()) {\n       return;\n     }\n \n     List<Integer> needDumpMatrices = filter(matrixIds);\n-    if(needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n+    if (needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n       FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n       Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n-      if(fs.exists(tmpPath)) {\n+      if (fs.exists(tmpPath)) {\n         fs.delete(tmpPath, true);\n       }\n       context.getMatrixStorageManager().save(filter(matrixIds), tmpPath);\n@@ -180,7 +177,7 @@ public class SnapshotDumper {\n   private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n     int size = matrixIds.size();\n     List<Integer> ret = new ArrayList<>(size);\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       if(checkNeedDump(matrixIds.get(i))) {\n         ret.add(matrixIds.get(i));\n       }\n@@ -200,7 +197,7 @@ public class SnapshotDumper {\n       return true;\n     } else {\n       MasterClient master = context.getMaster();\n-      if(master == null) {\n+      if (master == null) {\n         return false;\n       } else {\n         int iteration = context.getMaster().getIteration();\n@@ -211,9 +208,9 @@ public class SnapshotDumper {\n \n   private List<Integer> toMatrixIds() {\n     List<Integer> matrixIds = new ArrayList<>(needDumpMatrices.length);\n-    for(int i = 0; i < needDumpMatrices.length; i++) {\n+    for (int i = 0; i < needDumpMatrices.length; i++) {\n       MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(needDumpMatrices[i]);\n-      if(meta != null) {\n+      if (meta != null) {\n         matrixIds.add(meta.getId());\n       }\n     }\n@@ -228,4 +225,4 @@ public class SnapshotDumper {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 50.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 55.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 61.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 71.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 76.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 81.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 88.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 108.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 114.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 146.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 177.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 195.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/243/SnapshotDumper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/243/SnapshotDumper.java\nindex c4db41bb70..b036012935 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/243/SnapshotDumper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/243/SnapshotDumper.java\n@@ -29,7 +29,6 @@ import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n@@ -37,139 +36,136 @@ import java.util.concurrent.atomic.AtomicBoolean;\n /**\n  * Snapshot dumper, it dump the matrices to hdfs once in a while\n  */\n+\n public class SnapshotDumper {\n-  private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n+    private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n   /**\n    * PS context\n    */\n-  private final PSContext context;\n+    private final PSContext context;\n \n   /**\n    * Dump interval in milliseconds\n    */\n-  private final int backupIntervalMs;\n+    private final int backupIntervalMs;\n \n   /**\n    * Dump dispatcher\n    */\n-  private volatile Thread dumpDispatcher;\n-  private final AtomicBoolean stopped;\n+    private volatile Thread dumpDispatcher;\n+    private final AtomicBoolean stopped;\n \n   /**\n    * Application tmp output path\n    */\n-  private final String outputDir;\n+    private final String outputDir;\n \n   /**\n    * Need dump matrices\n    */\n-  private final String [] needDumpMatrices;\n+    private final String[] needDumpMatrices;\n \n   /**\n    * Snapshot base directory path\n    */\n-  private final Path baseDirPath;\n+    private final Path baseDirPath;\n \n   /**\n    * Last dump iteration number\n    */\n-  private int lastIteration;\n+    private int lastIteration;\n \n   /**\n    * Application running mode\n    */\n-  private final RunningMode mode;\n+    private final RunningMode mode;\n \n   /**\n    * Create a SnapshotDumper\n    * @param context PS context\n    */\n-  public SnapshotDumper(PSContext context) {\n+\n+    public SnapshotDumper(PSContext context) {\n     this.context = context;\n     stopped = new AtomicBoolean(false);\n     lastIteration = 0;\n     mode = context.getRunningMode();\n-\n-    backupIntervalMs = context.getConf().getInt(\n-      AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n-      AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n-\n+    backupIntervalMs = context.getConf().getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS, AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n     outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n-    baseDirPath = new Path(outputDir + Path.SEPARATOR\n-      + ModelFilesConstent.snapshotDirName + Path.SEPARATOR\n-      + context.getPSAttemptId().getPsId() + Path.SEPARATOR\n-      + String.valueOf(context.getPSAttemptId().getIndex()));\n-\n+    baseDirPath = new Path(outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR + context.getPSAttemptId().getPsId() + Path.SEPARATOR + String.valueOf(context.getPSAttemptId().getIndex()));\n     String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n-    if(matricesStr == null) {\n-      needDumpMatrices = null;\n+    if (matricesStr == null) {\n+                                needDumpMatrices = null;\n     } else {\n       needDumpMatrices = matricesStr.split(\",\");\n     }\n-  }\n+    }\n \n   /**\n    * Init\n    */\n-  public void init() {\n-  }\n+\n+    public void init() {}\n \n   /**\n    * Start dump dispatcher\n    */\n-  public void start() {\n+\n+    public void start() {\n     LOG.info(\"Start snapshot dumper\");\n-    dumpDispatcher = new Thread(() -> {\n-      while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n-        try {\n-          Thread.sleep(backupIntervalMs);\n-          try {\n-            LOG.info(\"to writeSnapshots\");\n-            while(context.getRunningContext().getState() == ServerState.BUSY) {\n-              Thread.sleep(5000);\n-            }\n-            writeSnapshots();\n-          } catch (Exception ioe) {\n-            LOG.error(\"write snapshots error: \", ioe);\n-          }\n-        } catch (InterruptedException e) {\n-          if (!stopped.get()) {\n-            LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n-          }\n-        }\n-      }\n-    });\n+    dumpDispatcher = new Thread(()-> {\n+                         while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n+                                    try {\n+                                                                                               Thread.sleep(backupIntervalMs);\n+                                                                                               try {\n+                                        LOG.info(\"to writeSnapshots\");\n+\n+                                        while (context.getRunningContext().getState() == ServerState.BUSY) {\n+                                                                                                   Thread.sleep(5000);\n+                                        }\n+                                        writeSnapshots();\n+                                                                                               } catch (Exception ioe) {\n+                                                                                                 LOG.error(\"write snapshots error: \", ioe);\n+                                                                                               }\n+                                    } catch (InterruptedException e) {\n+                                      if (!stopped.get()) {\n+                                        LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n+                                      }\n+                                    }\n+                         }\n+                                });\n     dumpDispatcher.setName(\"snapshot-dump-dispatcher\");\n     dumpDispatcher.start();\n-  }\n+    }\n \n   /**\n    * Write snapshot\n    * @throws Exception\n    */\n-  private void writeSnapshots() throws Exception {\n+\n+    private void writeSnapshots() throws Exception {\n     List<Integer> matrixIds = null;\n-    if(needDumpMatrices == null) {\n-      matrixIds = new ArrayList<>(context.getMatrixMetaManager().getMatrixMetas().keySet());\n+    if (needDumpMatrices == null) {\n+        matrixIds = new ArrayList<>(context.getMatrixMetaManager().getMatrixMetas().keySet());\n     } else {\n       matrixIds = toMatrixIds();\n     }\n \n-    if(matrixIds.isEmpty()) {\n-      return;\n+    if (matrixIds.isEmpty()) {\n+        return;\n     }\n \n     List<Integer> needDumpMatrices = filter(matrixIds);\n-    if(needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n-      FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n-      Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n-      if(fs.exists(tmpPath)) {\n+    if (needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n+        FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n+        Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n+        if (fs.exists(tmpPath)) {\n         fs.delete(tmpPath, true);\n-      }\n-      context.getMatrixStorageManager().save(filter(matrixIds), tmpPath);\n-      HdfsUtil.rename(tmpPath, baseDirPath, fs);\n+        }\n+        context.getMatrixStorageManager().save(filter(matrixIds), tmpPath);\n+        HdfsUtil.rename(tmpPath, baseDirPath, fs);\n+    }\n     }\n-  }\n \n   /**\n    * Get the matrices that need dump\n@@ -177,17 +173,17 @@ public class SnapshotDumper {\n    * @return the matrices that need dump\n    * @throws ServiceException\n    */\n-  private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n+\n+    private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n     int size = matrixIds.size();\n     List<Integer> ret = new ArrayList<>(size);\n-    for(int i = 0; i < size; i++) {\n-      if(checkNeedDump(matrixIds.get(i))) {\n+    for (int i = 0; i < size; i++) {\n+        if (checkNeedDump(matrixIds.get(i))) {\n         ret.add(matrixIds.get(i));\n-      }\n+        }\n     }\n-\n     return ret;\n-  }\n+    }\n \n   /**\n    * Is this matrix need dump\n@@ -195,37 +191,37 @@ public class SnapshotDumper {\n    * @return true mean need dump\n    * @throws ServiceException\n    */\n-  private boolean checkNeedDump(int matrixId) throws ServiceException {\n-    if(mode == RunningMode.ANGEL_PS) {\n-      return true;\n+\n+    private boolean checkNeedDump(int matrixId) throws ServiceException {\n+    if (mode == RunningMode.ANGEL_PS) {\n+        return true;\n     } else {\n       MasterClient master = context.getMaster();\n-      if(master == null) {\n-        return false;\n+      if (master == null) {\n+               return false;\n       } else {\n         int iteration = context.getMaster().getIteration();\n         return iteration > lastIteration;\n       }\n     }\n-  }\n+    }\n \n-  private List<Integer> toMatrixIds() {\n+    private List<Integer> toMatrixIds() {\n     List<Integer> matrixIds = new ArrayList<>(needDumpMatrices.length);\n-    for(int i = 0; i < needDumpMatrices.length; i++) {\n-      MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(needDumpMatrices[i]);\n-      if(meta != null) {\n+    for (int i = 0; i < needDumpMatrices.length; i++) {\n+        MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(needDumpMatrices[i]);\n+        if (meta != null) {\n         matrixIds.add(meta.getId());\n-      }\n+        }\n     }\n-\n     return matrixIds;\n-  }\n+    }\n \n-  public void stop() {\n-    if(!stopped.getAndSet(true)) {\n-      if(dumpDispatcher != null) {\n+    public void stop() {\n+    if (!stopped.getAndSet(true)) {\n+        if (dumpDispatcher != null) {\n         dumpDispatcher.interrupt();\n-      }\n+        }\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 96
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}