{
    "error_id": "49",
    "information": {
        "errors": [
            {
                "line": "156",
                "column": "44",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "\t@Override\n\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\t\t\n\t\treturn new ModbusSlaveTable( //\n\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n\t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n\t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/49/MeterSocomecCountisE14.java\nindex 3e1619c456..ef61d6c118 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/49/MeterSocomecCountisE14.java\n@@ -150,14 +150,14 @@ public class MeterSocomecCountisE14 extends AbstractOpenemsModbusComponent\n \tpublic SinglePhase getPhase() {\n \t\treturn this.getPhase();\n \t}\n-\t\n+\n \t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\t\t\n-\t\treturn new ModbusSlaveTable( //\n+\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n-\t\t\n+\n \t}\n }\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "156",
                    "column": "32",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/49/MeterSocomecCountisE14.java\nindex 3e1619c456..472227dbcc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/49/MeterSocomecCountisE14.java\n@@ -36,128 +36,128 @@ import io.openems.edge.meter.api.SymmetricMeter;\n @Designate(ocd = Config.class, factory = true)\n @Component(name = \"Meter.SOCOMEC.CountisE24\", immediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE)\n public class MeterSocomecCountisE14 extends AbstractOpenemsModbusComponent\n-\t\timplements SymmetricMeter, AsymmetricMeter, SinglePhaseMeter, OpenemsComponent, ModbusSlave {\n-\n-\tprivate MeterType meterType = MeterType.PRODUCTION;\n-\tprivate SinglePhase phase = SinglePhase.L1;\n-\n-\t/*\n-\t * Invert power values\n-\t */\n-\tprivate boolean invert = false;\n-\n-\t@Reference\n-\tprotected ConfigurationAdmin cm;\n-\n-\tpublic MeterSocomecCountisE14() {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tSymmetricMeter.ChannelId.values(), //\n-\t\t\t\tAsymmetricMeter.ChannelId.values(), //\n-\t\t\t\tSinglePhaseMeter.ChannelId.values(), //\n-\t\t\t\tChannelId.values() //\n-\t\t);\n-\t}\n-\n-\t@Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n-\tprotected void setModbus(BridgeModbus modbus) {\n-\t\tsuper.setModbus(modbus);\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) {\n-\t\tthis.meterType = config.type();\n-\t\tthis.phase = config.phase();\n-\t\tthis.invert = config.invert();\n-\n-\t\tsuper.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm, \"Modbus\",\n-\t\t\t\tconfig.modbus_id());\n-\n-\t\tSinglePhaseMeter.initializeCopyPhaseChannel(this, this.phase);\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\tpublic enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n-\t\t;\n-\t\tprivate final Doc doc;\n-\n-\t\tprivate ChannelId(Doc doc) {\n-\t\t\tthis.doc = doc;\n-\t\t}\n-\n-\t\tpublic Doc doc() {\n-\t\t\treturn this.doc;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic MeterType getMeterType() {\n-\t\treturn this.meterType;\n-\t}\n-\n-\t@Override\n-\tprotected ModbusProtocol defineModbusProtocol() {\n-\t\tModbusProtocol protocol = new ModbusProtocol(this, //\n-\t\t\t\t// TODO read \"Extended Name\" from 0xC38A and verify that this is really a\n-\t\t\t\t// Countis E24. Implement the same for all the other SOCOMEC meter.\n-\t\t\t\tnew FC3ReadRegistersTask(0xc558, Priority.HIGH, //\n-\t\t\t\t\t\tm(new UnsignedDoublewordElement(0xc558)) //\n-\t\t\t\t\t\t\t\t.m(AsymmetricMeter.ChannelId.VOLTAGE_L1, ElementToChannelConverter.SCALE_FACTOR_1) //\n-\t\t\t\t\t\t\t\t.m(SymmetricMeter.ChannelId.VOLTAGE, ElementToChannelConverter.SCALE_FACTOR_1) //\n-\t\t\t\t\t\t\t\t.build(), //\n-\t\t\t\t\t\tnew DummyRegisterElement(0xc55A, 0xc55D), //\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.FREQUENCY, new UnsignedDoublewordElement(0xc55E)), //\n-\t\t\t\t\t\tm(new UnsignedDoublewordElement(0xc560)) //\n-\t\t\t\t\t\t\t\t.m(AsymmetricMeter.ChannelId.CURRENT_L1,\n-\t\t\t\t\t\t\t\t\t\tElementToChannelConverter.INVERT_IF_TRUE(this.invert)) //\n-\t\t\t\t\t\t\t\t.m(SymmetricMeter.ChannelId.CURRENT,\n-\t\t\t\t\t\t\t\t\t\tElementToChannelConverter.INVERT_IF_TRUE(this.invert)) //\n-\t\t\t\t\t\t\t\t.build(), //\n-\t\t\t\t\t\tnew DummyRegisterElement(0xc562, 0xc567), //\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_POWER, new SignedDoublewordElement(0xc568),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_1_AND_INVERT_IF_TRUE(this.invert)), //\n-\t\t\t\t\t\tm(SymmetricMeter.ChannelId.REACTIVE_POWER, new SignedDoublewordElement(0xc56A),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_1_AND_INVERT_IF_TRUE(this.invert)) //\n-\t\t\t\t));\n-\n-\t\tif (this.invert) {\n-\t\t\tprotocol.addTask(new FC3ReadRegistersTask(0xC86F, Priority.LOW, //\n-\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_CONSUMPTION_ENERGY, new UnsignedWordElement(0xC86F)), //\n-\t\t\t\t\tnew DummyRegisterElement(0xC870),\n-\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_PRODUCTION_ENERGY, new UnsignedWordElement(0xC871)) //\n-\t\t\t));\n-\t\t} else {\n-\t\t\tprotocol.addTask(new FC3ReadRegistersTask(0xC86F, Priority.LOW, //\n-\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_PRODUCTION_ENERGY, new UnsignedWordElement(0xC86F)), //\n-\t\t\t\t\tnew DummyRegisterElement(0xC870),\n-\t\t\t\t\tm(SymmetricMeter.ChannelId.ACTIVE_CONSUMPTION_ENERGY, new UnsignedWordElement(0xC871)) //\n-\t\t\t));\n-\t\t}\n-\n-\t\treturn protocol;\n-\t}\n-\n-\t@Override\n-\tpublic String debugLog() {\n-\t\treturn \"L:\" + this.getActivePower().value().asString();\n-\t}\n-\n-\t@Override\n-\tpublic SinglePhase getPhase() {\n-\t\treturn this.getPhase();\n-\t}\n-\t\n-\t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\t\t\n-\t\treturn new ModbusSlaveTable( //\n-\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n-\t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n-\t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n-\t\t);\n-\t\t\n-\t}\n+    implements SymmetricMeter, AsymmetricMeter, SinglePhaseMeter, OpenemsComponent, ModbusSlave {\n+\n+  private MeterType meterType = MeterType.PRODUCTION;\n+  private SinglePhase phase = SinglePhase.L1;\n+\n+  /*\n+   * Invert power values\n+   */\n+  private boolean invert = false;\n+\n+  @Reference\n+  protected ConfigurationAdmin cm;\n+\n+  public MeterSocomecCountisE14() {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        SymmetricMeter.ChannelId.values(), //\n+        AsymmetricMeter.ChannelId.values(), //\n+        SinglePhaseMeter.ChannelId.values(), //\n+        ChannelId.values() //\n+    );\n+  }\n+\n+  @Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n+  protected void setModbus(BridgeModbus modbus) {\n+    super.setModbus(modbus);\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) {\n+    this.meterType = config.type();\n+    this.phase = config.phase();\n+    this.invert = config.invert();\n+\n+    super.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm, \"Modbus\",\n+        config.modbus_id());\n+\n+    SinglePhaseMeter.initializeCopyPhaseChannel(this, this.phase);\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  public enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n+    ;\n+    private final Doc doc;\n+\n+    private ChannelId(Doc doc) {\n+      this.doc = doc;\n+    }\n+\n+    public Doc doc() {\n+      return this.doc;\n+    }\n+  }\n+\n+  @Override\n+  public MeterType getMeterType() {\n+    return this.meterType;\n+  }\n+\n+  @Override\n+  protected ModbusProtocol defineModbusProtocol() {\n+    ModbusProtocol protocol = new ModbusProtocol(this, //\n+        // TODO read \"Extended Name\" from 0xC38A and verify that this is really a\n+        // Countis E24. Implement the same for all the other SOCOMEC meter.\n+        new FC3ReadRegistersTask(0xc558, Priority.HIGH, //\n+            m(new UnsignedDoublewordElement(0xc558)) //\n+                .m(AsymmetricMeter.ChannelId.VOLTAGE_L1, ElementToChannelConverter.SCALE_FACTOR_1) //\n+                .m(SymmetricMeter.ChannelId.VOLTAGE, ElementToChannelConverter.SCALE_FACTOR_1) //\n+                .build(), //\n+            new DummyRegisterElement(0xc55A, 0xc55D), //\n+            m(SymmetricMeter.ChannelId.FREQUENCY, new UnsignedDoublewordElement(0xc55E)), //\n+            m(new UnsignedDoublewordElement(0xc560)) //\n+                .m(AsymmetricMeter.ChannelId.CURRENT_L1,\n+                    ElementToChannelConverter.INVERT_IF_TRUE(this.invert)) //\n+                .m(SymmetricMeter.ChannelId.CURRENT,\n+                    ElementToChannelConverter.INVERT_IF_TRUE(this.invert)) //\n+                .build(), //\n+            new DummyRegisterElement(0xc562, 0xc567), //\n+            m(SymmetricMeter.ChannelId.ACTIVE_POWER, new SignedDoublewordElement(0xc568),\n+                ElementToChannelConverter.SCALE_FACTOR_1_AND_INVERT_IF_TRUE(this.invert)), //\n+            m(SymmetricMeter.ChannelId.REACTIVE_POWER, new SignedDoublewordElement(0xc56A),\n+                ElementToChannelConverter.SCALE_FACTOR_1_AND_INVERT_IF_TRUE(this.invert)) //\n+        ));\n+\n+    if (this.invert) {\n+      protocol.addTask(new FC3ReadRegistersTask(0xC86F, Priority.LOW, //\n+          m(SymmetricMeter.ChannelId.ACTIVE_CONSUMPTION_ENERGY, new UnsignedWordElement(0xC86F)), //\n+          new DummyRegisterElement(0xC870),\n+          m(SymmetricMeter.ChannelId.ACTIVE_PRODUCTION_ENERGY, new UnsignedWordElement(0xC871)) //\n+      ));\n+    } else {\n+      protocol.addTask(new FC3ReadRegistersTask(0xC86F, Priority.LOW, //\n+          m(SymmetricMeter.ChannelId.ACTIVE_PRODUCTION_ENERGY, new UnsignedWordElement(0xC86F)), //\n+          new DummyRegisterElement(0xC870),\n+          m(SymmetricMeter.ChannelId.ACTIVE_CONSUMPTION_ENERGY, new UnsignedWordElement(0xC871)) //\n+      ));\n+    }\n+\n+    return protocol;\n+  }\n+\n+  @Override\n+  public String debugLog() {\n+    return \"L:\" + this.getActivePower().value().asString();\n+  }\n+\n+  @Override\n+  public SinglePhase getPhase() {\n+    return this.getPhase();\n+  }\n+\n+  @Override\n+  public ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+    return new ModbusSlaveTable( //\n+        OpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n+        SymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n+        AsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n+    );\n+\n+  }\n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "157",
                    "column": "17",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 158.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/49/MeterSocomecCountisE14.java\nindex 3e1619c456..27e55e104e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/49/MeterSocomecCountisE14.java\n@@ -153,11 +153,11 @@ public class MeterSocomecCountisE14 extends AbstractOpenemsModbusComponent\n \t\n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\t\t\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(\n+\t\t//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n-\t\t\n \t}\n-}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/49/MeterSocomecCountisE14.java\nindex 3e1619c456..ef61d6c118 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/49/MeterSocomecCountisE14.java\n@@ -150,14 +150,14 @@ public class MeterSocomecCountisE14 extends AbstractOpenemsModbusComponent\n \tpublic SinglePhase getPhase() {\n \t\treturn this.getPhase();\n \t}\n-\t\n+\n \t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\t\t\n-\t\treturn new ModbusSlaveTable( //\n+\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n-\t\t\n+\n \t}\n }\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/49/MeterSocomecCountisE14.java\nindex 3e1619c456..ef61d6c118 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/49/MeterSocomecCountisE14.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/49/MeterSocomecCountisE14.java\n@@ -150,14 +150,14 @@ public class MeterSocomecCountisE14 extends AbstractOpenemsModbusComponent\n \tpublic SinglePhase getPhase() {\n \t\treturn this.getPhase();\n \t}\n-\t\n+\n \t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\t\t\n-\t\treturn new ModbusSlaveTable( //\n+\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tSymmetricMeter.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tAsymmetricMeter.getModbusSlaveNatureTable(accessMode) //\n \t\t);\n-\t\t\n+\n \t}\n }\n",
            "diff_size": 4
        }
    ]
}