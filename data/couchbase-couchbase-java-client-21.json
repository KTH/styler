{
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "46",
                "column": "116",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        ResponseStatus status) throws Exception {\n        if (!TranscoderUtils.hasSerializableFlags(flags)) {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n                \"document for id \" + id + \", could not decode.\");\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler/21/SerializableTranscoder.java\nindex 62b0468e99..e0fbd73db2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler/21/SerializableTranscoder.java\n@@ -44,7 +44,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "47",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/21/SerializableTranscoder.java\nindex 62b0468e99..439f594071 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/21/SerializableTranscoder.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -41,7 +42,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n \n     @Override\n     protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                            ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n                 \"document for id \" + id + \", could not decode.\");\n@@ -63,7 +64,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n \n     @Override\n     public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+                                            MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/21/SerializableTranscoder.java\nindex 62b0468e99..aec27b8a37 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/21/SerializableTranscoder.java\n@@ -40,11 +40,9 @@ import java.io.Serializable;\n public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n \n     @Override\n-    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" + \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n@@ -62,8 +60,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     }\n \n     @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas, MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -71,4 +68,4 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     public Class<SerializableDocument> documentType() {\n         return SerializableDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/21/SerializableTranscoder.java\nindex 62b0468e99..46a8d1989c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/21/SerializableTranscoder.java\n@@ -28,7 +28,6 @@ import com.couchbase.client.core.message.kv.MutationToken;\n import com.couchbase.client.deps.io.netty.buffer.ByteBuf;\n import com.couchbase.client.java.document.SerializableDocument;\n import com.couchbase.client.java.error.TranscodingException;\n-\n import java.io.Serializable;\n \n /**\n@@ -37,16 +36,14 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n \n+\n+public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n     @Override\n-    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" + \"document for id \" + id + \", could not decode.\");\n         }\n-\n         Serializable deserialized = TranscoderUtils.deserialize(content);\n         return newDocument(id, expiry, deserialized, cas);\n     }\n@@ -62,8 +59,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     }\n \n     @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas, MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -71,4 +67,4 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     public Class<SerializableDocument> documentType() {\n         return SerializableDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_random/21/SerializableTranscoder.java\nindex 62b0468e99..2fd914526c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_random/21/SerializableTranscoder.java\n@@ -43,32 +43,32 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n-        }\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \"\n+                + \"document for id \" + id + \", could not decode.\");\n+     }\n \n-        Serializable deserialized = TranscoderUtils.deserialize(content);\n-        return newDocument(id, expiry, deserialized, cas);\n-    }\n+     Serializable deserialized = TranscoderUtils.deserialize(content);\n+     return newDocument(id, expiry, deserialized, cas);\n+ }\n \n-    @Override\n-    protected Tuple2<ByteBuf, Integer> doEncode(final SerializableDocument document) throws Exception {\n-        return Tuple.create(TranscoderUtils.serialize(document.content()), TranscoderUtils.SERIALIZED_COMPAT_FLAGS);\n-    }\n+ @Override\n+ protected Tuple2<ByteBuf, Integer> doEncode(final SerializableDocument document) throws Exception {\n+     return Tuple.create(TranscoderUtils.serialize(document.content()), TranscoderUtils.SERIALIZED_COMPAT_FLAGS);\n+ }\n \n-    @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas) {\n-        return SerializableDocument.create(id, expiry, content, cas);\n-    }\n+ @Override\n+ public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas) {\n+     return SerializableDocument.create(id, expiry, content, cas);\n+ }\n \n-    @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n-        return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n-    }\n+ @Override\n+ public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n+     MutationToken mutationToken) {\n+     return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n+ }\n \n-    @Override\n-    public Class<SerializableDocument> documentType() {\n-        return SerializableDocument.class;\n-    }\n+ @Override\n+ public Class<SerializableDocument> documentType() {\n+     return SerializableDocument.class;\n+ }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/21/SerializableTranscoder.java\nindex 62b0468e99..e0fbd73db2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/21/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/21/SerializableTranscoder.java\n@@ -44,7 +44,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n",
            "diff_size": 1
        }
    ]
}