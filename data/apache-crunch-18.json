{
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "131",
                "severity": "warning",
                "message": "'ptype' has incorrect indentation level 6, expected level should be 8.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "    GenericData.Record writeRecord1 = createGenericRecord(\"John Doe\");\n    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(\n      ptype,\n                                                                      writeRecord1);\n    writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler/18/AvroMemPipelineIT.java\nindex 142f5fb8c2..275ecb093d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler/18/AvroMemPipelineIT.java\n@@ -127,62 +127,61 @@ public class AvroMemPipelineIT implements Serializable {\n \n     PType<GenericData.Record> ptype = Avros.generics(Person.SCHEMA$);\n     GenericData.Record writeRecord1 = createGenericRecord(\"John Doe\");\n-    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(\n-      ptype,\n-                                                                      writeRecord1);\n-    writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n-    File avroFile2 = tmpDir.getFile(\"test2.avro\");\n-    GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n-    final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n-                                                                    ptype,\n-                                                                    writeRecord2);\n-    writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n-\n-    List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n-        new Path(avroFile2.getAbsolutePath()));\n-    PCollection<Record> readCollection = MemPipeline.getInstance().read(\n-        new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n+    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(ptype,\n+            writeRecord1);\n+  writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n \n-    Set<Record> readSet = Sets.newHashSet(readCollection.materialize());\n+  File avroFile2 = tmpDir.getFile(\"test2.avro\");\n+  GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n+  final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n+                                                                  ptype,\n+                                                                  writeRecord2);\n+  writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n \n-    assertEquals(Sets.newHashSet(writeRecord1, writeRecord2), readSet);\n-  }\n+  List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n+      new Path(avroFile2.getAbsolutePath()));\n+  PCollection<Record> readCollection = MemPipeline.getInstance().read(\n+      new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n \n-  private GenericData.Record createGenericRecord(String name) {\n+  Set<Record> readSet = Sets.newHashSet(readCollection.materialize());\n \n-    GenericData.Record savedRecord = new GenericData.Record(Person.SCHEMA$);\n-    savedRecord.put(\"name\", name);\n-    savedRecord.put(\"age\", 42);\n-    savedRecord.put(\"siblingnames\", Lists.newArrayList(\"Jimmy\"));\n+  assertEquals(Sets.newHashSet(writeRecord1, writeRecord2), readSet);\n+}\n \n-    return savedRecord;\n-  }\n+private GenericData.Record createGenericRecord(String name) {\n \n-  @Test\n-  public void testMemPipelineWithPTable() {\n+  GenericData.Record savedRecord = new GenericData.Record(Person.SCHEMA$);\n+  savedRecord.put(\"name\", name);\n+  savedRecord.put(\"age\", 42);\n+  savedRecord.put(\"siblingnames\", Lists.newArrayList(\"Jimmy\"));\n \n-    String writeRecord = \"John Doe\";\n+  return savedRecord;\n+}\n \n-    final PCollection<String> collection = MemPipeline.typedCollectionOf(\n-        Avros.strings(),\n-        writeRecord);\n+@Test\n+public void testMemPipelineWithPTable() {\n \n-    PTable<Integer, String> writeCollection = collection.by(new MapFn<String, Integer>() {\n-      @Override\n-      public Integer map(String input) {\n-        return input.length();\n-      }\n-    }, Avros.ints());\n+  String writeRecord = \"John Doe\";\n \n-    writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+  final PCollection<String> collection = MemPipeline.typedCollectionOf(\n+      Avros.strings(),\n+      writeRecord);\n \n-    PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n-        At.avroFile(avroFile.getAbsolutePath(),\n-            Avros.tableOf(Avros.ints(), Avros.strings())));\n+  PTable<Integer, String> writeCollection = collection.by(new MapFn<String, Integer>() {\n+    @Override\n+    public Integer map(String input) {\n+      return input.length();\n+    }\n+  }, Avros.ints());\n \n-    Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n-    assertEquals(writeRecord, map.get(writeRecord.length()));\n-  }\n+  writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+\n+  PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n+      At.avroFile(avroFile.getAbsolutePath(),\n+          Avros.tableOf(Avros.ints(), Avros.strings())));\n+\n+  Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n+  assertEquals(writeRecord, map.get(writeRecord.length()));\n+}\n \n }\n",
            "diff_size": 66
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/intellij/18/AvroMemPipelineIT.java\nindex 142f5fb8c2..912eb637f7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/intellij/18/AvroMemPipelineIT.java\n@@ -5,15 +5,16 @@\n  * licenses this file to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n  * License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n package org.apache.crunch.io.avro;\n \n import static org.junit.Assert.assertEquals;\n@@ -65,7 +66,7 @@ public class AvroMemPipelineIT implements Serializable {\n     Person writeRecord = createSpecificRecord();\n \n     final PCollection<Person> writeCollection = MemPipeline.getInstance().create(\n-            ImmutableList.of(writeRecord), Avros.specifics(Person.class));\n+        ImmutableList.of(writeRecord), Avros.specifics(Person.class));\n \n     writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n \n@@ -90,8 +91,8 @@ public class AvroMemPipelineIT implements Serializable {\n     GenericData.Record writeRecord = createGenericRecord(\"John Doe\");\n \n     final PCollection<GenericData.Record> writeCollection = MemPipeline.typedCollectionOf(\n-                                                            ptype,\n-                                                            writeRecord);\n+        ptype,\n+        writeRecord);\n \n     writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n \n@@ -109,8 +110,8 @@ public class AvroMemPipelineIT implements Serializable {\n     String writeRecord = \"John Doe\";\n \n     final PCollection<String> writeCollection = MemPipeline.typedCollectionOf(\n-                                                          Avros.strings(),\n-                                                          writeRecord);\n+        Avros.strings(),\n+        writeRecord);\n \n     writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n \n@@ -128,15 +129,15 @@ public class AvroMemPipelineIT implements Serializable {\n     PType<GenericData.Record> ptype = Avros.generics(Person.SCHEMA$);\n     GenericData.Record writeRecord1 = createGenericRecord(\"John Doe\");\n     final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(\n-      ptype,\n-                                                                      writeRecord1);\n+        ptype,\n+        writeRecord1);\n     writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n \n     File avroFile2 = tmpDir.getFile(\"test2.avro\");\n     GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n     final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n-                                                                    ptype,\n-                                                                    writeRecord2);\n+        ptype,\n+        writeRecord2);\n     writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n \n     List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/naturalize/18/AvroMemPipelineIT.java\nindex 142f5fb8c2..24a0abf2eb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/naturalize/18/AvroMemPipelineIT.java\n@@ -66,8 +66,7 @@ public class AvroMemPipelineIT implements Serializable {\n \n     final PCollection<Person> writeCollection = MemPipeline.getInstance().create(\n             ImmutableList.of(writeRecord), Avros.specifics(Person.class));\n-\n-    writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n \n     PCollection<Person> readCollection = MemPipeline.getInstance().read(\n         At.avroFile(avroFile.getAbsolutePath(), Avros.records(Person.class)));\n@@ -89,11 +88,9 @@ public class AvroMemPipelineIT implements Serializable {\n \n     GenericData.Record writeRecord = createGenericRecord(\"John Doe\");\n \n-    final PCollection<GenericData.Record> writeCollection = MemPipeline.typedCollectionOf(\n-                                                            ptype,\n+    final PCollection<GenericData.Record> writeCollection = MemPipeline.typedCollectionOf(ptype,\n                                                             writeRecord);\n-\n-    writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n \n     PCollection<Record> readCollection = MemPipeline.getInstance().read(\n         At.avroFile(avroFile.getAbsolutePath(), Avros.generics(writeRecord.getSchema())));\n@@ -108,11 +105,9 @@ public class AvroMemPipelineIT implements Serializable {\n \n     String writeRecord = \"John Doe\";\n \n-    final PCollection<String> writeCollection = MemPipeline.typedCollectionOf(\n-                                                          Avros.strings(),\n+    final PCollection<String> writeCollection = MemPipeline.typedCollectionOf(Avros.strings(),\n                                                           writeRecord);\n-\n-    writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n \n     PCollection<? extends String> readCollection = MemPipeline.getInstance().read(\n         At.avroFile(avroFile.getAbsolutePath(), Avros.reflects(writeRecord.getClass())));\n@@ -127,17 +122,14 @@ public class AvroMemPipelineIT implements Serializable {\n \n     PType<GenericData.Record> ptype = Avros.generics(Person.SCHEMA$);\n     GenericData.Record writeRecord1 = createGenericRecord(\"John Doe\");\n-    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(\n-      ptype,\n-                                                                      writeRecord1);\n-    writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n+    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(ptype, writeRecord1);\n+writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n \n     File avroFile2 = tmpDir.getFile(\"test2.avro\");\n     GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n-    final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n-                                                                    ptype,\n+    final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(ptype,\n                                                                     writeRecord2);\n-    writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n+writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n \n     List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n         new Path(avroFile2.getAbsolutePath()));\n@@ -180,9 +172,8 @@ public class AvroMemPipelineIT implements Serializable {\n     PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n         At.avroFile(avroFile.getAbsolutePath(),\n             Avros.tableOf(Avros.ints(), Avros.strings())));\n-\n-    Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n+Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n     assertEquals(writeRecord, map.get(writeRecord.length()));\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 50, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 50, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 4, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'Avros' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/codebuff/18/AvroMemPipelineIT.java\nindex 142f5fb8c2..c58f200b4a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/codebuff/18/AvroMemPipelineIT.java\n@@ -24,7 +24,6 @@ import java.io.Serializable;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n@@ -50,139 +49,95 @@ import org.junit.Test;\n \n public class AvroMemPipelineIT implements Serializable {\n \n-  private transient File avroFile;\n-  @Rule\n-  public transient TemporaryPath tmpDir = TemporaryPaths.create();\n+    private transient File avroFile;\n \n-  @Before\n-  public void setUp() throws IOException {\n-    avroFile = tmpDir.getFile(\"test.avro\");\n-  }\n+    @Rule\n+    public transient TemporaryPath tmpDir = TemporaryPaths.create();\n \n-  @Test\n-  public void testMemPipelineWithSpecificRecord() {\n+    @Before\n+    public void setUp() throws IOException {\n+    avroFile = tmpDir.getFile(\"test.avro\");\n+    }\n \n+    @Test\n+    public void testMemPipelineWithSpecificRecord() {\n     Person writeRecord = createSpecificRecord();\n-\n-    final PCollection<Person> writeCollection = MemPipeline.getInstance().create(\n-            ImmutableList.of(writeRecord), Avros.specifics(Person.class));\n-\n+    final PCollection<Person> writeCollection = MemPipeline.getInstance().create(ImmutableList.of(writeRecord), Avros.specifics(Person.class));\n     writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n-    PCollection<Person> readCollection = MemPipeline.getInstance().read(\n-        At.avroFile(avroFile.getAbsolutePath(), Avros.records(Person.class)));\n-\n-    Person readRecord = readCollection.materialize().iterator().next();\n-\n+    PCollection<Person> readCollection = MemPipeline.getInstance().read(At.avroFile(avroFile.getAbsolutePath(), Avros.records(Person.class)));\n+    Person readRecord = readCollection.materialize().iterator()\n+                                                    .next();\n     assertEquals(writeRecord, readRecord);\n-  }\n+    }\n \n-  private Person createSpecificRecord() {\n+    private Person createSpecificRecord() {\n     List<CharSequence> siblingnames = Lists.newArrayList();\n     return new Person(\"John\", 41, siblingnames);\n-  }\n-\n-  @Test\n-  public void testMemPipelineWithGenericRecord() {\n+    }\n \n+    @Test\n+    public void testMemPipelineWithGenericRecord() {\n     PType<GenericData.Record> ptype = Avros.generics(Person.SCHEMA$);\n-\n     GenericData.Record writeRecord = createGenericRecord(\"John Doe\");\n-\n-    final PCollection<GenericData.Record> writeCollection = MemPipeline.typedCollectionOf(\n-                                                            ptype,\n-                                                            writeRecord);\n-\n+    final PCollection<GenericData.Record> writeCollection = MemPipeline.typedCollectionOf(ptype, writeRecord);\n     writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n-    PCollection<Record> readCollection = MemPipeline.getInstance().read(\n-        At.avroFile(avroFile.getAbsolutePath(), Avros.generics(writeRecord.getSchema())));\n-\n-    Record readRecord = readCollection.materialize().iterator().next();\n-\n+    PCollection<Record> readCollection = MemPipeline.getInstance().read(At.avroFile(avroFile.getAbsolutePath(), Avros.generics(writeRecord.getSchema())));\n+    Record readRecord = readCollection.materialize().iterator()\n+                                                    .next();\n     assertEquals(writeRecord, readRecord);\n-  }\n-\n-  @Test\n-  public void testMemPipelineWithReflectionRecord() {\n+    }\n \n+    @Test\n+    public void testMemPipelineWithReflectionRecord() {\n     String writeRecord = \"John Doe\";\n-\n-    final PCollection<String> writeCollection = MemPipeline.typedCollectionOf(\n-                                                          Avros.strings(),\n-                                                          writeRecord);\n-\n+    final PCollection<String> writeCollection = MemPipeline.typedCollectionOf(Avros.strings(), writeRecord);\n     writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n-    PCollection<? extends String> readCollection = MemPipeline.getInstance().read(\n-        At.avroFile(avroFile.getAbsolutePath(), Avros.reflects(writeRecord.getClass())));\n-\n-    Object readRecord = readCollection.materialize().iterator().next();\n-\n+    PCollection<? extends String> readCollection = MemPipeline.getInstance().read(At.avroFile(avroFile.getAbsolutePath(), Avros.reflects(writeRecord.getClass())));\n+    Object readRecord = readCollection.materialize().iterator()\n+                                                    .next();\n     assertEquals(writeRecord, readRecord.toString());\n-  }\n-\n-  @Test\n-  public void testMemPipelineWithMultiplePaths() {\n+    }\n \n+    @Test\n+    public void testMemPipelineWithMultiplePaths() {\n     PType<GenericData.Record> ptype = Avros.generics(Person.SCHEMA$);\n     GenericData.Record writeRecord1 = createGenericRecord(\"John Doe\");\n-    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(\n-      ptype,\n-                                                                      writeRecord1);\n+    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(ptype, writeRecord1);\n     writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n     File avroFile2 = tmpDir.getFile(\"test2.avro\");\n     GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n-    final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n-                                                                    ptype,\n-                                                                    writeRecord2);\n+    final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(ptype, writeRecord2);\n     writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n-\n-    List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n-        new Path(avroFile2.getAbsolutePath()));\n-    PCollection<Record> readCollection = MemPipeline.getInstance().read(\n-        new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n-\n+    List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()), new Path(avroFile2.getAbsolutePath()));\n+    PCollection<Record> readCollection = MemPipeline.getInstance().read(new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n     Set<Record> readSet = Sets.newHashSet(readCollection.materialize());\n-\n     assertEquals(Sets.newHashSet(writeRecord1, writeRecord2), readSet);\n-  }\n-\n-  private GenericData.Record createGenericRecord(String name) {\n+    }\n \n+    private GenericData.Record createGenericRecord(String name) {\n     GenericData.Record savedRecord = new GenericData.Record(Person.SCHEMA$);\n     savedRecord.put(\"name\", name);\n     savedRecord.put(\"age\", 42);\n     savedRecord.put(\"siblingnames\", Lists.newArrayList(\"Jimmy\"));\n-\n     return savedRecord;\n-  }\n-\n-  @Test\n-  public void testMemPipelineWithPTable() {\n+    }\n \n+    @Test\n+    public void testMemPipelineWithPTable() {\n     String writeRecord = \"John Doe\";\n-\n-    final PCollection<String> collection = MemPipeline.typedCollectionOf(\n-        Avros.strings(),\n-        writeRecord);\n-\n-    PTable<Integer, String> writeCollection = collection.by(new MapFn<String, Integer>() {\n-      @Override\n-      public Integer map(String input) {\n-        return input.length();\n-      }\n-    }, Avros.ints());\n-\n+    final PCollection<String> collection = MemPipeline.typedCollectionOf(Avros.strings(), writeRecord);\n+    PTable<Integer, String> writeCollection = collection.by(\n+        new MapFn<String, Integer>() {\n+                                                  @Override\n+                                                  public Integer map(String input) {\n+            return input.length();\n+                                                  }\n+    },\n+Avros.ints());\n     writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n-    PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n-        At.avroFile(avroFile.getAbsolutePath(),\n-            Avros.tableOf(Avros.ints(), Avros.strings())));\n-\n-    Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n+    PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(At.avroFile(avroFile.getAbsolutePath(), Avros.tableOf(Avros.ints(), Avros.strings())));\n+    Map<Integer, String> map = PTables.asPTable(readCollection).asMap()\n+                                                               .getValue();\n     assertEquals(writeRecord, map.get(writeRecord.length()));\n-  }\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_random/18/AvroMemPipelineIT.java\nindex 142f5fb8c2..275ecb093d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_random/18/AvroMemPipelineIT.java\n@@ -127,62 +127,61 @@ public class AvroMemPipelineIT implements Serializable {\n \n     PType<GenericData.Record> ptype = Avros.generics(Person.SCHEMA$);\n     GenericData.Record writeRecord1 = createGenericRecord(\"John Doe\");\n-    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(\n-      ptype,\n-                                                                      writeRecord1);\n-    writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n-    File avroFile2 = tmpDir.getFile(\"test2.avro\");\n-    GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n-    final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n-                                                                    ptype,\n-                                                                    writeRecord2);\n-    writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n-\n-    List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n-        new Path(avroFile2.getAbsolutePath()));\n-    PCollection<Record> readCollection = MemPipeline.getInstance().read(\n-        new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n+    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(ptype,\n+            writeRecord1);\n+  writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n \n-    Set<Record> readSet = Sets.newHashSet(readCollection.materialize());\n+  File avroFile2 = tmpDir.getFile(\"test2.avro\");\n+  GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n+  final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n+                                                                  ptype,\n+                                                                  writeRecord2);\n+  writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n \n-    assertEquals(Sets.newHashSet(writeRecord1, writeRecord2), readSet);\n-  }\n+  List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n+      new Path(avroFile2.getAbsolutePath()));\n+  PCollection<Record> readCollection = MemPipeline.getInstance().read(\n+      new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n \n-  private GenericData.Record createGenericRecord(String name) {\n+  Set<Record> readSet = Sets.newHashSet(readCollection.materialize());\n \n-    GenericData.Record savedRecord = new GenericData.Record(Person.SCHEMA$);\n-    savedRecord.put(\"name\", name);\n-    savedRecord.put(\"age\", 42);\n-    savedRecord.put(\"siblingnames\", Lists.newArrayList(\"Jimmy\"));\n+  assertEquals(Sets.newHashSet(writeRecord1, writeRecord2), readSet);\n+}\n \n-    return savedRecord;\n-  }\n+private GenericData.Record createGenericRecord(String name) {\n \n-  @Test\n-  public void testMemPipelineWithPTable() {\n+  GenericData.Record savedRecord = new GenericData.Record(Person.SCHEMA$);\n+  savedRecord.put(\"name\", name);\n+  savedRecord.put(\"age\", 42);\n+  savedRecord.put(\"siblingnames\", Lists.newArrayList(\"Jimmy\"));\n \n-    String writeRecord = \"John Doe\";\n+  return savedRecord;\n+}\n \n-    final PCollection<String> collection = MemPipeline.typedCollectionOf(\n-        Avros.strings(),\n-        writeRecord);\n+@Test\n+public void testMemPipelineWithPTable() {\n \n-    PTable<Integer, String> writeCollection = collection.by(new MapFn<String, Integer>() {\n-      @Override\n-      public Integer map(String input) {\n-        return input.length();\n-      }\n-    }, Avros.ints());\n+  String writeRecord = \"John Doe\";\n \n-    writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+  final PCollection<String> collection = MemPipeline.typedCollectionOf(\n+      Avros.strings(),\n+      writeRecord);\n \n-    PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n-        At.avroFile(avroFile.getAbsolutePath(),\n-            Avros.tableOf(Avros.ints(), Avros.strings())));\n+  PTable<Integer, String> writeCollection = collection.by(new MapFn<String, Integer>() {\n+    @Override\n+    public Integer map(String input) {\n+      return input.length();\n+    }\n+  }, Avros.ints());\n \n-    Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n-    assertEquals(writeRecord, map.get(writeRecord.length()));\n-  }\n+  writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+\n+  PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n+      At.avroFile(avroFile.getAbsolutePath(),\n+          Avros.tableOf(Avros.ints(), Avros.strings())));\n+\n+  Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n+  assertEquals(writeRecord, map.get(writeRecord.length()));\n+}\n \n }\n",
            "diff_size": 66
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_three_grams/18/AvroMemPipelineIT.java\nindex 142f5fb8c2..5f73bc46bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/18/AvroMemPipelineIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_three_grams/18/AvroMemPipelineIT.java\n@@ -127,62 +127,61 @@ public class AvroMemPipelineIT implements Serializable {\n \n     PType<GenericData.Record> ptype = Avros.generics(Person.SCHEMA$);\n     GenericData.Record writeRecord1 = createGenericRecord(\"John Doe\");\n-    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(\n-      ptype,\n-                                                                      writeRecord1);\n-    writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n-\n-    File avroFile2 = tmpDir.getFile(\"test2.avro\");\n-    GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n-    final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n-                                                                    ptype,\n-                                                                    writeRecord2);\n-    writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n-\n-    List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n-        new Path(avroFile2.getAbsolutePath()));\n-    PCollection<Record> readCollection = MemPipeline.getInstance().read(\n-        new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n+    final PCollection<GenericData.Record> writeCollection1 = MemPipeline.typedCollectionOf(ptype,\n+                                                                    writeRecord1);\n+  writeCollection1.write(To.avroFile(avroFile.getAbsolutePath()));\n \n-    Set<Record> readSet = Sets.newHashSet(readCollection.materialize());\n+  File avroFile2 = tmpDir.getFile(\"test2.avro\");\n+  GenericData.Record writeRecord2 = createGenericRecord(\"Jane Doe\");\n+  final PCollection<GenericData.Record> writeCollection2 = MemPipeline.typedCollectionOf(\n+                                                                  ptype,\n+                                                                  writeRecord2);\n+  writeCollection2.write(To.avroFile(avroFile2.getAbsolutePath()));\n \n-    assertEquals(Sets.newHashSet(writeRecord1, writeRecord2), readSet);\n-  }\n+  List<Path> paths = Lists.newArrayList(new Path(avroFile.getAbsolutePath()),\n+      new Path(avroFile2.getAbsolutePath()));\n+  PCollection<Record> readCollection = MemPipeline.getInstance().read(\n+      new AvroFileSource<Record>(paths, Avros.generics(writeRecord1.getSchema())));\n \n-  private GenericData.Record createGenericRecord(String name) {\n+  Set<Record> readSet = Sets.newHashSet(readCollection.materialize());\n \n-    GenericData.Record savedRecord = new GenericData.Record(Person.SCHEMA$);\n-    savedRecord.put(\"name\", name);\n-    savedRecord.put(\"age\", 42);\n-    savedRecord.put(\"siblingnames\", Lists.newArrayList(\"Jimmy\"));\n+  assertEquals(Sets.newHashSet(writeRecord1, writeRecord2), readSet);\n+}\n \n-    return savedRecord;\n-  }\n+private GenericData.Record createGenericRecord(String name) {\n \n-  @Test\n-  public void testMemPipelineWithPTable() {\n+  GenericData.Record savedRecord = new GenericData.Record(Person.SCHEMA$);\n+  savedRecord.put(\"name\", name);\n+  savedRecord.put(\"age\", 42);\n+  savedRecord.put(\"siblingnames\", Lists.newArrayList(\"Jimmy\"));\n \n-    String writeRecord = \"John Doe\";\n+  return savedRecord;\n+}\n \n-    final PCollection<String> collection = MemPipeline.typedCollectionOf(\n-        Avros.strings(),\n-        writeRecord);\n+@Test\n+public void testMemPipelineWithPTable() {\n \n-    PTable<Integer, String> writeCollection = collection.by(new MapFn<String, Integer>() {\n-      @Override\n-      public Integer map(String input) {\n-        return input.length();\n-      }\n-    }, Avros.ints());\n+  String writeRecord = \"John Doe\";\n \n-    writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+  final PCollection<String> collection = MemPipeline.typedCollectionOf(\n+      Avros.strings(),\n+      writeRecord);\n \n-    PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n-        At.avroFile(avroFile.getAbsolutePath(),\n-            Avros.tableOf(Avros.ints(), Avros.strings())));\n+  PTable<Integer, String> writeCollection = collection.by(new MapFn<String, Integer>() {\n+    @Override\n+    public Integer map(String input) {\n+      return input.length();\n+    }\n+  }, Avros.ints());\n \n-    Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n-    assertEquals(writeRecord, map.get(writeRecord.length()));\n-  }\n+  writeCollection.write(To.avroFile(avroFile.getAbsolutePath()));\n+\n+  PCollection<Pair<Integer, String>> readCollection = MemPipeline.getInstance().read(\n+      At.avroFile(avroFile.getAbsolutePath(),\n+          Avros.tableOf(Avros.ints(), Avros.strings())));\n+\n+  Map<Integer, String> map = PTables.asPTable(readCollection).asMap().getValue();\n+  assertEquals(writeRecord, map.get(writeRecord.length()));\n+}\n \n }\n",
            "diff_size": 66
        }
    ]
}