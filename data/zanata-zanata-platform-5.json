{
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "127",
                "column": "61",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "            });\n        } else if (!allowAnonymousAccessProvider.get() ||\n                !HttpUtil.isReadMethod(context.getMethod())){\n            // special cases for path such as '/test/' or '/oauth/' are now\n            // handled by having annotation @NoSecurityCheck on those API\n            // methods/classes. ZanataRestSecurityBinder will ensure that this",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/5/ZanataRestSecurityInterceptor.java\nindex f1b1c62cb0..c0a3f83840 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/5/ZanataRestSecurityInterceptor.java\n@@ -124,7 +124,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n                 zanataIdentity.tryLogin();\n             });\n         } else if (!allowAnonymousAccessProvider.get() ||\n-                !HttpUtil.isReadMethod(context.getMethod())){\n+                !HttpUtil.isReadMethod(context.getMethod())) {\n             // special cases for path such as '/test/' or '/oauth/' are now\n             // handled by having annotation @NoSecurityCheck on those API\n             // methods/classes. ZanataRestSecurityBinder will ensure that this\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/5/ZanataRestSecurityInterceptor.java\nindex f1b1c62cb0..92e1a25519 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/5/ZanataRestSecurityInterceptor.java\n@@ -61,7 +61,7 @@ import cyclops.control.Either;\n @ApplicationScoped\n public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n     private static final Logger log =\n-            LoggerFactory.getLogger(ZanataRestSecurityInterceptor.class);\n+        LoggerFactory.getLogger(ZanataRestSecurityInterceptor.class);\n     private HttpServletRequest request;\n \n     private SecurityTokens securityTokens;\n@@ -79,9 +79,9 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n     @Inject\n     protected ZanataRestSecurityInterceptor(@DeltaSpike HttpServletRequest request,\n-            SecurityTokens securityTokens, ZanataIdentity zanataIdentity,\n-            @SupportOAuth boolean isOAuthEnabled, IServiceLocator serviceLocator,\n-            @AllowAnonymousAccess Provider<Boolean> allowAnonymousAccessProvider) {\n+                                            SecurityTokens securityTokens, ZanataIdentity zanataIdentity,\n+                                            @SupportOAuth boolean isOAuthEnabled, IServiceLocator serviceLocator,\n+                                            @AllowAnonymousAccess Provider<Boolean> allowAnonymousAccessProvider) {\n         this.request = request;\n         this.securityTokens = securityTokens;\n         this.zanataIdentity = zanataIdentity;\n@@ -92,7 +92,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n     @Override\n     public void filter(ContainerRequestContext context)\n-            throws IOException {\n+        throws IOException {\n         if (hasAuthenticatedAccount()) {\n             // request come from the same browser and the user has logged in\n             return;\n@@ -106,14 +106,14 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n             zanataIdentity.setApiKey(restCredentials.apiKey.get());\n             zanataIdentity.tryLogin();\n             if (!SecurityFunctions.canAccessRestPath(zanataIdentity,\n-                    context.getUriInfo().getPath())) {\n+                context.getUriInfo().getPath())) {\n                 String message = InvalidApiKeyUtil\n-                        .getMessage(restCredentials.username.get(),\n-                                restCredentials.apiKey.get());\n+                    .getMessage(restCredentials.username.get(),\n+                        restCredentials.apiKey.get());\n                 log.info(\"can not authenticate REST request: {}\", message);\n                 context.abortWith(Response.status(Status.UNAUTHORIZED)\n-                        .entity(message)\n-                        .build());\n+                    .entity(message)\n+                    .build());\n             }\n         } else if (restCredentials.hasOAuthToken()) {\n             getAuthenticatedUsernameOrError().bipeek(context::abortWith, username -> {\n@@ -124,7 +124,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n                 zanataIdentity.tryLogin();\n             });\n         } else if (!allowAnonymousAccessProvider.get() ||\n-                !HttpUtil.isReadMethod(context.getMethod())){\n+            !HttpUtil.isReadMethod(context.getMethod())) {\n             // special cases for path such as '/test/' or '/oauth/' are now\n             // handled by having annotation @NoSecurityCheck on those API\n             // methods/classes. ZanataRestSecurityBinder will ensure that this\n@@ -135,9 +135,9 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n             // requesting API does NOT allow anonymous access\n             log.info(\"can not authenticate REST request: {}\", restCredentials);\n             context.abortWith(Response.status(Status.UNAUTHORIZED)\n-                    .header(\"Content-Type\", MediaType.TEXT_PLAIN)\n-                    .entity(\"User authentication required for REST request\")\n-                    .build());\n+                .header(\"Content-Type\", MediaType.TEXT_PLAIN)\n+                .entity(\"User authentication required for REST request\")\n+                .build());\n         }\n     }\n \n@@ -145,17 +145,17 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n         Optional<String> usernameOpt;\n         Optional<String> accessTokenOpt =\n-                OAuthUtil.getAccessTokenFromHeader(request);\n+            OAuthUtil.getAccessTokenFromHeader(request);\n         usernameOpt = accessTokenOpt.flatMap(\n-                token -> securityTokens.findUsernameByAccessToken(token));\n+            token -> securityTokens.findUsernameByAccessToken(token));\n \n         if (!usernameOpt.isPresent()) {\n             log.info(\n-                    \"Bad OAuth request, invalid or expired tokens: access token: {}\",\n-                    accessTokenOpt);\n+                \"Bad OAuth request, invalid or expired tokens: access token: {}\",\n+                accessTokenOpt);\n             return Either.left(buildUnauthorizedResponse(\n-                    \"Bad OAuth request, invalid or expired tokens: access token [\" +\n-                            accessTokenOpt + \"]\"));\n+                \"Bad OAuth request, invalid or expired tokens: access token [\" +\n+                    accessTokenOpt + \"]\"));\n         }\n         String username = usernameOpt.get();\n         return Either.right(username);\n@@ -165,15 +165,15 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n         OAuthResponse oauthResponse = null;\n         try {\n             oauthResponse = OAuthRSResponse\n-                    .errorResponse(HttpServletResponse.SC_UNAUTHORIZED)\n-                    .buildHeaderMessage();\n+                .errorResponse(HttpServletResponse.SC_UNAUTHORIZED)\n+                .buildHeaderMessage();\n         } catch (OAuthSystemException e1) {\n             return buildServerErrorResponse(message);\n         }\n \n         return Response\n-                .status(oauthResponse.getResponseStatus()).header(OAuth.HeaderType.WWW_AUTHENTICATE, oauthResponse.getHeader(\n-                        OAuth.HeaderType.WWW_AUTHENTICATE)).build();\n+            .status(oauthResponse.getResponseStatus()).header(OAuth.HeaderType.WWW_AUTHENTICATE, oauthResponse.getHeader(\n+                OAuth.HeaderType.WWW_AUTHENTICATE)).build();\n     }\n \n     private Response buildServerErrorResponse(String message) {\n@@ -182,8 +182,8 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n     private boolean hasAuthenticatedAccount() {\n         return serviceLocator\n-                .getInstance(HAccount.class, new AuthenticatedLiteral()) !=\n-                null;\n+            .getInstance(HAccount.class, new AuthenticatedLiteral()) !=\n+            null;\n     }\n \n     /**\n@@ -196,7 +196,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n         private final Optional<String> accessToken;\n \n         RestCredentials(ContainerRequestContext context, HttpServletRequest request,\n-                boolean isOAuthSupported) {\n+                        boolean isOAuthSupported) {\n             String username = HttpUtil.getUsername(context.getHeaders());\n             String apiKey = HttpUtil.getApiKey(context.getHeaders());\n             this.username = optionalNotEmptyString(username);\n@@ -210,8 +210,8 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n         private static Optional<String> optionalNotEmptyString(String value) {\n             return value == null || value.isEmpty() ?\n-                    Optional.empty() :\n-                    Optional.of(value);\n+                Optional.empty() :\n+                Optional.of(value);\n         }\n \n         boolean hasApiKey() {\n@@ -225,10 +225,10 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n         @Override\n         public String toString() {\n             return MoreObjects.toStringHelper(this)\n-                    .add(\"username\", username)\n-                    .add(\"apiKey\", apiKey)\n-                    .add(\"accessToken\", accessToken)\n-                    .toString();\n+                .add(\"username\", username)\n+                .add(\"apiKey\", apiKey)\n+                .add(\"accessToken\", accessToken)\n+                .toString();\n         }\n     }\n \n@@ -246,11 +246,11 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n         @Override\n         public void configure(ResourceInfo resourceInfo,\n-                FeatureContext featureContext) {\n+                              FeatureContext featureContext) {\n             Class<?> clazz = resourceInfo.getResourceClass();\n             Method method = resourceInfo.getResourceMethod();\n             if (!method.isAnnotationPresent(NoSecurityCheck.class)\n-                    && !clazz.isAnnotationPresent(NoSecurityCheck.class)) {\n+                && !clazz.isAnnotationPresent(NoSecurityCheck.class)) {\n                 featureContext.register(securityInterceptor);\n             }\n         }\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/5/ZanataRestSecurityInterceptor.java\nindex f1b1c62cb0..c8b4db30f1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/5/ZanataRestSecurityInterceptor.java\n@@ -124,7 +124,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n                 zanataIdentity.tryLogin();\n             });\n         } else if (!allowAnonymousAccessProvider.get() ||\n-                !HttpUtil.isReadMethod(context.getMethod())){\n+                !HttpUtil.isReadMethod(context.getMethod())) {\n             // special cases for path such as '/test/' or '/oauth/' are now\n             // handled by having annotation @NoSecurityCheck on those API\n             // methods/classes. ZanataRestSecurityBinder will ensure that this\n@@ -182,8 +182,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n     private boolean hasAuthenticatedAccount() {\n         return serviceLocator\n-                .getInstance(HAccount.class, new AuthenticatedLiteral()) !=\n-                null;\n+                .getInstance(HAccount.class, new AuthenticatedLiteral()) != null;\n     }\n \n     /**\n@@ -255,4 +254,4 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/5/ZanataRestSecurityInterceptor.java\nindex f1b1c62cb0..e7fe8fdd23 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/5/ZanataRestSecurityInterceptor.java\n@@ -17,7 +17,6 @@ import javax.ws.rs.core.FeatureContext;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.Status;\n-\n import org.apache.deltaspike.core.api.common.DeltaSpike;\n import org.apache.oltu.oauth2.common.OAuth;\n import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n@@ -58,30 +57,28 @@ import cyclops.control.Either;\n  * @see org.zanata.security.annotations.CheckLoggedIn\n  */\n // TODO rename this class to Filter since it's no longer a seam JAX-RS interceptor\n+\n+\n @ApplicationScoped\n public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n-    private static final Logger log =\n-            LoggerFactory.getLogger(ZanataRestSecurityInterceptor.class);\n+    private static final Logger log = LoggerFactory.getLogger(ZanataRestSecurityInterceptor.class);\n     private HttpServletRequest request;\n-\n     private SecurityTokens securityTokens;\n-\n     private ZanataIdentity zanataIdentity;\n-\n     private boolean isOAuthEnabled;\n     private IServiceLocator serviceLocator = ServiceLocator.instance();\n-\n     private Provider<Boolean> allowAnonymousAccessProvider;\n \n-\n     public ZanataRestSecurityInterceptor() {\n     }\n \n     @Inject\n     protected ZanataRestSecurityInterceptor(@DeltaSpike HttpServletRequest request,\n-            SecurityTokens securityTokens, ZanataIdentity zanataIdentity,\n-            @SupportOAuth boolean isOAuthEnabled, IServiceLocator serviceLocator,\n-            @AllowAnonymousAccess Provider<Boolean> allowAnonymousAccessProvider) {\n+SecurityTokens securityTokens,\n+ZanataIdentity zanataIdentity,\n+   @SupportOAuth boolean isOAuthEnabled,\n+IServiceLocator serviceLocator,\n+@AllowAnonymousAccess Provider<Boolean> allowAnonymousAccessProvider) {\n         this.request = request;\n         this.securityTokens = securityTokens;\n         this.zanataIdentity = zanataIdentity;\n@@ -91,29 +88,23 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n     }\n \n     @Override\n-    public void filter(ContainerRequestContext context)\n-            throws IOException {\n+    public void filter(ContainerRequestContext context) throws IOException {\n         if (hasAuthenticatedAccount()) {\n             // request come from the same browser and the user has logged in\n             return;\n         }\n-\n         RestCredentials restCredentials = new RestCredentials(context, request, isOAuthEnabled);\n-\n         if (restCredentials.hasApiKey()) {\n             // if apiKey presents, we use apiKey for security check\n             zanataIdentity.getCredentials().setUsername(restCredentials.username.get());\n             zanataIdentity.setApiKey(restCredentials.apiKey.get());\n             zanataIdentity.tryLogin();\n-            if (!SecurityFunctions.canAccessRestPath(zanataIdentity,\n-                    context.getUriInfo().getPath())) {\n-                String message = InvalidApiKeyUtil\n-                        .getMessage(restCredentials.username.get(),\n-                                restCredentials.apiKey.get());\n+            if (!SecurityFunctions.canAccessRestPath(zanataIdentity, context.getUriInfo().getPath())) {\n+                String message = InvalidApiKeyUtil.getMessage(restCredentials.username.get(),\n+                                                              restCredentials.apiKey.get());\n                 log.info(\"can not authenticate REST request: {}\", message);\n-                context.abortWith(Response.status(Status.UNAUTHORIZED)\n-                        .entity(message)\n-                        .build());\n+                context.abortWith(Response.status(Status.UNAUTHORIZED).entity(message)\n+                                                                      .build());\n             }\n         } else if (restCredentials.hasOAuthToken()) {\n             getAuthenticatedUsernameOrError().bipeek(context::abortWith, username -> {\n@@ -123,8 +114,8 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n                 // here the tryLogin() will just set up the correct system state\n                 zanataIdentity.tryLogin();\n             });\n-        } else if (!allowAnonymousAccessProvider.get() ||\n-                !HttpUtil.isReadMethod(context.getMethod())){\n+        } else if (!allowAnonymousAccessProvider.get()\n+                       || !HttpUtil.isReadMethod(context.getMethod())) {\n             // special cases for path such as '/test/' or '/oauth/' are now\n             // handled by having annotation @NoSecurityCheck on those API\n             // methods/classes. ZanataRestSecurityBinder will ensure that this\n@@ -133,29 +124,22 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n             // if we don't have any information to authenticate and the\n             // requesting API does NOT allow anonymous access\n-            log.info(\"can not authenticate REST request: {}\", restCredentials);\n-            context.abortWith(Response.status(Status.UNAUTHORIZED)\n-                    .header(\"Content-Type\", MediaType.TEXT_PLAIN)\n-                    .entity(\"User authentication required for REST request\")\n-                    .build());\n-        }\n+                   log.info(\"can not authenticate REST request: {}\",\n+restCredentials);\n+                   context.abortWith(Response.status(Status.UNAUTHORIZED).header(\"Content-Type\", MediaType.TEXT_PLAIN)\n+                                                                         .entity(\"User authentication required for REST request\")\n+                                                                         .build());\n+               }\n     }\n \n     private Either<Response, String> getAuthenticatedUsernameOrError() {\n-\n         Optional<String> usernameOpt;\n-        Optional<String> accessTokenOpt =\n-                OAuthUtil.getAccessTokenFromHeader(request);\n-        usernameOpt = accessTokenOpt.flatMap(\n-                token -> securityTokens.findUsernameByAccessToken(token));\n-\n+        Optional<String> accessTokenOpt = OAuthUtil.getAccessTokenFromHeader(request);\n+        usernameOpt = accessTokenOpt.flatMap(token -> securityTokens.findUsernameByAccessToken(token));\n         if (!usernameOpt.isPresent()) {\n-            log.info(\n-                    \"Bad OAuth request, invalid or expired tokens: access token: {}\",\n-                    accessTokenOpt);\n-            return Either.left(buildUnauthorizedResponse(\n-                    \"Bad OAuth request, invalid or expired tokens: access token [\" +\n-                            accessTokenOpt + \"]\"));\n+            log.info(\"Bad OAuth request, invalid or expired tokens: access token: {}\",\n+accessTokenOpt);\n+            return Either.left(buildUnauthorizedResponse(\"Bad OAuth request, invalid or expired tokens: access token [\" + accessTokenOpt + \"]\"));\n         }\n         String username = usernameOpt.get();\n         return Either.right(username);\n@@ -164,39 +148,35 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n     private Response buildUnauthorizedResponse(String message) {\n         OAuthResponse oauthResponse = null;\n         try {\n-            oauthResponse = OAuthRSResponse\n-                    .errorResponse(HttpServletResponse.SC_UNAUTHORIZED)\n-                    .buildHeaderMessage();\n+            oauthResponse = OAuthRSResponse.errorResponse(HttpServletResponse.SC_UNAUTHORIZED).buildHeaderMessage();\n         } catch (OAuthSystemException e1) {\n             return buildServerErrorResponse(message);\n         }\n-\n-        return Response\n-                .status(oauthResponse.getResponseStatus()).header(OAuth.HeaderType.WWW_AUTHENTICATE, oauthResponse.getHeader(\n-                        OAuth.HeaderType.WWW_AUTHENTICATE)).build();\n+        return Response.status(oauthResponse.getResponseStatus()).header(OAuth.HeaderType.WWW_AUTHENTICATE,\n+            oauthResponse.getHeader(OAuth.HeaderType.WWW_AUTHENTICATE))\n+                                                                 .build();\n     }\n \n     private Response buildServerErrorResponse(String message) {\n-        return Response.serverError().entity(message).build();\n+        return Response.serverError().entity(message)\n+                                     .build();\n     }\n \n     private boolean hasAuthenticatedAccount() {\n-        return serviceLocator\n-                .getInstance(HAccount.class, new AuthenticatedLiteral()) !=\n-                null;\n+        return serviceLocator.getInstance(HAccount.class, new AuthenticatedLiteral()) != null;\n     }\n \n     /**\n      * Encapsulate all possible authentication values from a REST request.\n      */\n-    private static class RestCredentials {\n \n+    private static class RestCredentials {\n         private final Optional<String> username;\n         private final Optional<String> apiKey;\n         private final Optional<String> accessToken;\n \n         RestCredentials(ContainerRequestContext context, HttpServletRequest request,\n-                boolean isOAuthSupported) {\n+        boolean isOAuthSupported) {\n             String username = HttpUtil.getUsername(context.getHeaders());\n             String apiKey = HttpUtil.getApiKey(context.getHeaders());\n             this.username = optionalNotEmptyString(username);\n@@ -209,9 +189,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n         }\n \n         private static Optional<String> optionalNotEmptyString(String value) {\n-            return value == null || value.isEmpty() ?\n-                    Optional.empty() :\n-                    Optional.of(value);\n+            return value == null || value.isEmpty() ? Optional.empty() : Optional.of(value);\n         }\n \n         boolean hasApiKey() {\n@@ -224,11 +202,10 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n \n         @Override\n         public String toString() {\n-            return MoreObjects.toStringHelper(this)\n-                    .add(\"username\", username)\n-                    .add(\"apiKey\", apiKey)\n-                    .add(\"accessToken\", accessToken)\n-                    .toString();\n+            return MoreObjects.toStringHelper(this).add(\"username\", username)\n+                                                   .add(\"apiKey\", apiKey)\n+                                                   .add(\"accessToken\", accessToken)\n+                                                   .toString();\n         }\n     }\n \n@@ -238,6 +215,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n      *\n      * @author Patrick Huang <a href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n      */\n+\n     @javax.ws.rs.ext.Provider\n     @PreMatching\n     public static class ZanataRestSecurityBinder implements DynamicFeature {\n@@ -245,14 +223,12 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n         private ZanataRestSecurityInterceptor securityInterceptor;\n \n         @Override\n-        public void configure(ResourceInfo resourceInfo,\n-                FeatureContext featureContext) {\n+        public void configure(ResourceInfo resourceInfo, FeatureContext featureContext) {\n             Class<?> clazz = resourceInfo.getResourceClass();\n             Method method = resourceInfo.getResourceMethod();\n-            if (!method.isAnnotationPresent(NoSecurityCheck.class)\n-                    && !clazz.isAnnotationPresent(NoSecurityCheck.class)) {\n+            if (!method.isAnnotationPresent(NoSecurityCheck.class) && !clazz.isAnnotationPresent(NoSecurityCheck.class)) {\n                 featureContext.register(securityInterceptor);\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 76
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/5/ZanataRestSecurityInterceptor.java\nindex f1b1c62cb0..c0a3f83840 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/5/ZanataRestSecurityInterceptor.java\n@@ -124,7 +124,7 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n                 zanataIdentity.tryLogin();\n             });\n         } else if (!allowAnonymousAccessProvider.get() ||\n-                !HttpUtil.isReadMethod(context.getMethod())){\n+                !HttpUtil.isReadMethod(context.getMethod())) {\n             // special cases for path such as '/test/' or '/oauth/' are now\n             // handled by having annotation @NoSecurityCheck on those API\n             // methods/classes. ZanataRestSecurityBinder will ensure that this\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "129",
                    "column": "17",
                    "severity": "error",
                    "message": "'{' at column 17 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/5/ZanataRestSecurityInterceptor.java\nindex f1b1c62cb0..6579324f65 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/5/ZanataRestSecurityInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/5/ZanataRestSecurityInterceptor.java\n@@ -124,8 +124,10 @@ public class ZanataRestSecurityInterceptor implements ContainerRequestFilter {\n                 zanataIdentity.tryLogin();\n             });\n         } else if (!allowAnonymousAccessProvider.get() ||\n-                !HttpUtil.isReadMethod(context.getMethod())){\n-            // special cases for path such as '/test/' or '/oauth/' are now\n+                !HttpUtil.isReadMethod(context.getMethod()))\n+\n+                {\n+                // special cases for path such as '/test/' or '/oauth/' are now\n             // handled by having annotation @NoSecurityCheck on those API\n             // methods/classes. ZanataRestSecurityBinder will ensure that this\n             // ContainerRequestFilter will not be called for those annotated\n",
            "diff_size": 4
        }
    ]
}