{
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Created by ecoolper on 2017/5/5.\n */\npublic class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n  public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler/15/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdf..017eae7215 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler/15/OkHttpMediaDownloadRequestExecutor.java\n@@ -21,51 +21,51 @@ import java.io.IOException;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n-  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo\n+  > { private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n-  public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n-    super(requestHttp, tmpDirFile);\n-  }\n+public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n+  super(requestHttp, tmpDirFile);\n+}\n \n-  @Override\n-  public File execute(String uri, String queryParam) throws WxErrorException, IOException {\n-    logger.debug(\"OkHttpMediaDownloadRequestExecutor is running\");\n-    if (queryParam != null) {\n-      if (uri.indexOf('?') == -1) {\n-        uri += '?';\n-      }\n-      uri += uri.endsWith(\"?\") ? queryParam : '&' + queryParam;\n+@Override\n+public File execute(String uri, String queryParam) throws WxErrorException, IOException {\n+  logger.debug(\"OkHttpMediaDownloadRequestExecutor is running\");\n+  if (queryParam != null) {\n+    if (uri.indexOf('?') == -1) {\n+      uri += '?';\n     }\n+    uri += uri.endsWith(\"?\") ? queryParam : '&' + queryParam;\n+  }\n \n-    //\u5f97\u5230httpClient\n-    OkHttpClient client = requestHttp.getRequestHttpClient();\n-\n-    Request request = new Request.Builder().url(uri).get().build();\n+  //\u5f97\u5230httpClient\n+  OkHttpClient client = requestHttp.getRequestHttpClient();\n \n-    Response response = client.newCall(request).execute();\n+  Request request = new Request.Builder().url(uri).get().build();\n \n-    String contentType = response.header(\"Content-Type\");\n-    if (contentType != null && contentType.startsWith(\"application/json\")) {\n-      // application/json; encoding=utf-8 \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n-      throw new WxErrorException(WxError.fromJson(response.body().string()));\n-    }\n+  Response response = client.newCall(request).execute();\n \n-    String fileName = new HttpResponseProxy(response).getFileName();\n-    if (StringUtils.isBlank(fileName)) {\n-      return null;\n-    }\n+  String contentType = response.header(\"Content-Type\");\n+  if (contentType != null && contentType.startsWith(\"application/json\")) {\n+    // application/json; encoding=utf-8 \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n+    throw new WxErrorException(WxError.fromJson(response.body().string()));\n+  }\n \n-    File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n-    );\n+  String fileName = new HttpResponseProxy(response).getFileName();\n+  if (StringUtils.isBlank(fileName)) {\n+    return null;\n+  }\n \n-    try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n-      sink.writeAll(response.body().source());\n-    }\n+  File file = File.createTempFile(\n+    FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n+  );\n \n-    file.deleteOnExit();\n-    return file;\n+  try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n+    sink.writeAll(response.body().source());\n   }\n \n+  file.deleteOnExit();\n+  return file;\n+}\n+\n }\n",
            "diff_size": 43
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/15/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdf..83fe66381f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/15/OkHttpMediaDownloadRequestExecutor.java\n@@ -21,7 +21,8 @@ import java.io.IOException;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n+public class OkHttpMediaDownloadRequestExecutor\n+    extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n   private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n   public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n@@ -57,7 +58,7 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n     }\n \n     File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n+        FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n     );\n \n     try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/15/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdf..b72dec9f6d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/15/OkHttpMediaDownloadRequestExecutor.java\n@@ -57,8 +57,7 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n     }\n \n     File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n-    );\n+      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile);\n \n     try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n       sink.writeAll(response.body().source());\n@@ -68,4 +67,4 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n     return file;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/15/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdf..151623a15c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/15/OkHttpMediaDownloadRequestExecutor.java\n@@ -14,58 +14,53 @@ import org.apache.commons.io.FilenameUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.File;\n import java.io.IOException;\n \n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n+\n+\n public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n-  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n-  public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n+    public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n     super(requestHttp, tmpDirFile);\n-  }\n+    }\n \n-  @Override\n-  public File execute(String uri, String queryParam) throws WxErrorException, IOException {\n+    @Override\n+    public File execute(String uri, String queryParam) throws WxErrorException, IOException {\n     logger.debug(\"OkHttpMediaDownloadRequestExecutor is running\");\n     if (queryParam != null) {\n-      if (uri.indexOf('?') == -1) {\n-        uri += '?';\n-      }\n-      uri += uri.endsWith(\"?\") ? queryParam : '&' + queryParam;\n+        if (uri.indexOf('?') == -1) {\n+                                uri += '?';\n+        }\n+        uri += uri.endsWith(\"?\") ? queryParam : '&' + queryParam;\n     }\n \n     //\u5f97\u5230httpClient\n-    OkHttpClient client = requestHttp.getRequestHttpClient();\n \n+    OkHttpClient client = requestHttp.getRequestHttpClient();\n     Request request = new Request.Builder().url(uri).get().build();\n-\n     Response response = client.newCall(request).execute();\n-\n     String contentType = response.header(\"Content-Type\");\n     if (contentType != null && contentType.startsWith(\"application/json\")) {\n       // application/json; encoding=utf-8 \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n-      throw new WxErrorException(WxError.fromJson(response.body().string()));\n+        throw new WxErrorException(WxError.fromJson(response.body().string()));\n     }\n \n     String fileName = new HttpResponseProxy(response).getFileName();\n     if (StringUtils.isBlank(fileName)) {\n-      return null;\n+        return null;\n     }\n \n-    File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n-    );\n-\n+    File file = File.createTempFile(FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile);\n     try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n-      sink.writeAll(response.body().source());\n+        sink.writeAll(response.body().source());\n     }\n-\n     file.deleteOnExit();\n     return file;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler_random/15/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdf..017eae7215 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/15/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler_random/15/OkHttpMediaDownloadRequestExecutor.java\n@@ -21,51 +21,51 @@ import java.io.IOException;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n-  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo\n+  > { private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n-  public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n-    super(requestHttp, tmpDirFile);\n-  }\n+public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n+  super(requestHttp, tmpDirFile);\n+}\n \n-  @Override\n-  public File execute(String uri, String queryParam) throws WxErrorException, IOException {\n-    logger.debug(\"OkHttpMediaDownloadRequestExecutor is running\");\n-    if (queryParam != null) {\n-      if (uri.indexOf('?') == -1) {\n-        uri += '?';\n-      }\n-      uri += uri.endsWith(\"?\") ? queryParam : '&' + queryParam;\n+@Override\n+public File execute(String uri, String queryParam) throws WxErrorException, IOException {\n+  logger.debug(\"OkHttpMediaDownloadRequestExecutor is running\");\n+  if (queryParam != null) {\n+    if (uri.indexOf('?') == -1) {\n+      uri += '?';\n     }\n+    uri += uri.endsWith(\"?\") ? queryParam : '&' + queryParam;\n+  }\n \n-    //\u5f97\u5230httpClient\n-    OkHttpClient client = requestHttp.getRequestHttpClient();\n-\n-    Request request = new Request.Builder().url(uri).get().build();\n+  //\u5f97\u5230httpClient\n+  OkHttpClient client = requestHttp.getRequestHttpClient();\n \n-    Response response = client.newCall(request).execute();\n+  Request request = new Request.Builder().url(uri).get().build();\n \n-    String contentType = response.header(\"Content-Type\");\n-    if (contentType != null && contentType.startsWith(\"application/json\")) {\n-      // application/json; encoding=utf-8 \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n-      throw new WxErrorException(WxError.fromJson(response.body().string()));\n-    }\n+  Response response = client.newCall(request).execute();\n \n-    String fileName = new HttpResponseProxy(response).getFileName();\n-    if (StringUtils.isBlank(fileName)) {\n-      return null;\n-    }\n+  String contentType = response.header(\"Content-Type\");\n+  if (contentType != null && contentType.startsWith(\"application/json\")) {\n+    // application/json; encoding=utf-8 \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n+    throw new WxErrorException(WxError.fromJson(response.body().string()));\n+  }\n \n-    File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n-    );\n+  String fileName = new HttpResponseProxy(response).getFileName();\n+  if (StringUtils.isBlank(fileName)) {\n+    return null;\n+  }\n \n-    try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n-      sink.writeAll(response.body().source());\n-    }\n+  File file = File.createTempFile(\n+    FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n+  );\n \n-    file.deleteOnExit();\n-    return file;\n+  try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n+    sink.writeAll(response.body().source());\n   }\n \n+  file.deleteOnExit();\n+  return file;\n+}\n+\n }\n",
            "diff_size": 43
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}