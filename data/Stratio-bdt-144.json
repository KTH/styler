{
    "error_id": "144",
    "information": {
        "errors": [
            {
                "line": "766",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param zNode path at zookeeper\n     */\n    @When(\"^I remove the zNode '(.+?)'$\")\n    public void removeZNode(String zNode) throws Exception {\n        commonspec.getZookeeperSecClient().delete(zNode);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "766",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/144/WhenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/144/WhenGSpec.java\nindex 42ed50689e..1a246a5bfd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/144/WhenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/144/WhenGSpec.java\n@@ -94,13 +94,19 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @When(\"^I drag '([^:]*?):(.+?)' and drop it to '([^:]*?):(.+?)'$\")\n-    public void seleniumDrag(String smethod, String source, String dmethod, String destination) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void seleniumDrag(String smethod, String source, String dmethod,\n+                             String destination)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         Actions builder = new Actions(commonspec.getDriver());\n \n-        List<WebElement> sourceElement = commonspec.locateElement(smethod, source, 1);\n-        List<WebElement> destinationElement = commonspec.locateElement(dmethod, destination, 1);\n+        List<WebElement> sourceElement =\n+            commonspec.locateElement(smethod, source, 1);\n+        List<WebElement> destinationElement =\n+            commonspec.locateElement(dmethod, destination, 1);\n \n-        builder.dragAndDrop(sourceElement.get(0), destinationElement.get(0)).perform();\n+        builder.dragAndDrop(sourceElement.get(0), destinationElement.get(0))\n+            .perform();\n     }\n \n     /**\n@@ -113,14 +119,18 @@ public class WhenGSpec extends BaseGSpec {\n     public void seleniumClick(Integer index) throws InterruptedException {\n \n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).click();\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).click();\n         }\n     }\n \n@@ -134,15 +144,21 @@ public class WhenGSpec extends BaseGSpec {\n     public void seleniumDoubleClick(Integer index) throws InterruptedException {\n         Actions action = new Actions(commonspec.getDriver());\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements()\n+                    .get(index)).perform();\n \n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n-            action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n+            action.doubleClick(\n+                commonspec.getPreviousWebElements().getPreviousWebElements()\n+                    .get(index)).perform();\n         }\n     }\n \n@@ -153,12 +169,16 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I clear the content on text input at index '(\\\\d+?)'$\")\n     public void seleniumClear(Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).isTextField(commonspec.getTextFieldCondition());\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index)).isTextField(commonspec.getTextFieldCondition());\n \n-        commonspec.getPreviousWebElements().getPreviousWebElements().get(index).clear();\n+        commonspec.getPreviousWebElements().getPreviousWebElements().get(index)\n+            .clear();\n     }\n \n \n@@ -168,12 +188,16 @@ public class WhenGSpec extends BaseGSpec {\n      * @param index\n      */\n     @When(\"^I delete the text '(.+?)' on the element on index '(\\\\d+?)'( and replace it for '(.+?)')?$\")\n-    public void seleniumDelete(String text, Integer index, String foo, String replacement) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+    public void seleniumDelete(String text, Integer index, String foo,\n+                               String replacement) {\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n \n         Actions actions = new Actions(commonspec.getDriver());\n-        actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index), (text.length() / 2), 0);\n+        actions.moveToElement(\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index), (text.length() / 2), 0);\n         for (int i = 0; i < (text.length() / 2); i++) {\n             actions.sendKeys(Keys.ARROW_LEFT);\n             actions.build().perform();\n@@ -196,19 +220,25 @@ public class WhenGSpec extends BaseGSpec {\n      * @param index\n      */\n     @When(\"^I type '(.+?)' on the element on index '(\\\\d+?)'$\")\n-    public void seleniumType(@Transform(NullableStringConverter.class) String text, Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+    public void seleniumType(\n+        @Transform(NullableStringConverter.class) String text, Integer index) {\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n         while (text.length() > 0) {\n             Actions actions = new Actions(commonspec.getDriver());\n             if (-1 == text.indexOf(\"\\\\n\")) {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements()\n+                        .get(index));\n                 actions.click();\n                 actions.sendKeys(text);\n                 actions.build().perform();\n                 text = \"\";\n             } else {\n-                actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+                actions.moveToElement(\n+                    commonspec.getPreviousWebElements().getPreviousWebElements()\n+                        .get(index));\n                 actions.click();\n                 actions.sendKeys(text.substring(0, text.indexOf(\"\\\\n\")));\n                 actions.build().perform();\n@@ -232,10 +262,13 @@ public class WhenGSpec extends BaseGSpec {\n      * @param index\n      */\n     @When(\"^I send '(.+?)'( on the element on index '(\\\\d+?)')?$\")\n-    public void seleniumKeys(@Transform(ArrayListConverter.class) List<String> strokes, String foo, Integer index) {\n+    public void seleniumKeys(\n+        @Transform(ArrayListConverter.class) List<String> strokes, String foo,\n+        Integer index) {\n         if (index != null) {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+                .as(\"There are less found elements than required\")\n+                .hasAtLeast(index);\n         }\n         assertThat(strokes).isNotEmpty();\n \n@@ -247,15 +280,21 @@ public class WhenGSpec extends BaseGSpec {\n                 }\n                 Keys[] csa = csl.toArray(new Keys[csl.size()]);\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa).perform();\n+                    new Actions(commonspec.getDriver()).sendKeys(\n+                        commonspec.getDriver().findElement(By.tagName(\"body\")),\n+                        csa).perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(csa);\n+                    commonspec.getPreviousWebElements().getPreviousWebElements()\n+                        .get(index).sendKeys(csa);\n                 }\n             } else {\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), Keys.valueOf(stroke)).perform();\n+                    new Actions(commonspec.getDriver()).sendKeys(\n+                        commonspec.getDriver().findElement(By.tagName(\"body\")),\n+                        Keys.valueOf(stroke)).perform();\n                 } else {\n-                    commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(Keys.valueOf(stroke));\n+                    commonspec.getPreviousWebElements().getPreviousWebElements()\n+                        .get(index).sendKeys(Keys.valueOf(stroke));\n                 }\n             }\n         }\n@@ -270,7 +309,9 @@ public class WhenGSpec extends BaseGSpec {\n     @When(\"^I select '(.+?)' on the element on index '(\\\\d+?)'$\")\n     public void elementSelect(String option, Integer index) {\n         Select sel = null;\n-        sel = new Select(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+        sel = new Select(\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index));\n \n         sel.selectByVisibleText(option);\n     }\n@@ -283,7 +324,9 @@ public class WhenGSpec extends BaseGSpec {\n     @When(\"^I de-select every item on the element on index '(\\\\d+?)'$\")\n     public void elementDeSelect(Integer index) {\n         Select sel = null;\n-        sel = new Select(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n+        sel = new Select(\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index));\n \n         if (sel.isMultiple()) {\n             sel.deselectAll();\n@@ -317,24 +360,35 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I send a '(.+?)' request to '(.+?)'( with user and password '(.+:.+?)')? based on '([^:]+?)'( as '(json|string)')? with:$\")\n-    public void sendRequest(String requestType, String endPoint, String foo, String loginInfo, String baseData, String baz, String type, DataTable modifications) throws Exception {\n+    public void sendRequest(String requestType, String endPoint, String foo,\n+                            String loginInfo, String baseData, String baz,\n+                            String type, DataTable modifications)\n+        throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n-        commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n-        String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n+        commonspec.getLogger()\n+            .debug(\"Modifying data {} as {}\", retrievedData, type);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, type, modifications)\n+                .toString();\n \n         String user = null;\n         String password = null;\n         if (loginInfo != null) {\n             user = loginInfo.substring(0, loginInfo.indexOf(':'));\n-            password = loginInfo.substring(loginInfo.indexOf(':') + 1, loginInfo.length());\n+            password = loginInfo\n+                .substring(loginInfo.indexOf(':') + 1, loginInfo.length());\n         }\n \n \n-        commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-        Future<Response> response = commonspec.generateRequest(requestType, false, user, password, endPoint, modifiedData, type, \"\");\n+        commonspec.getLogger()\n+            .debug(\"Generating request {} to {} with data {} as {}\",\n+                requestType, endPoint, modifiedData, type);\n+        Future<Response> response = commonspec\n+            .generateRequest(requestType, false, user, password, endPoint,\n+                modifiedData, type, \"\");\n \n         // Save response\n         commonspec.getLogger().debug(\"Saving response\");\n@@ -355,24 +409,32 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I send a '(.+?)' request to '(.+?)'( with user and password '(.+:.+?)')?( based on '([^:]+?)')?( as '(json|string)')?$\")\n-    public void sendRequestNoDataTable(String requestType, String endPoint, String foo, String loginInfo, String bar, String baseData, String baz, String type) throws Exception {\n+    public void sendRequestNoDataTable(String requestType, String endPoint,\n+                                       String foo, String loginInfo, String bar,\n+                                       String baseData, String baz, String type)\n+        throws Exception {\n         Future<Response> response;\n         String user = null;\n         String password = null;\n \n         if (loginInfo != null) {\n             user = loginInfo.substring(0, loginInfo.indexOf(':'));\n-            password = loginInfo.substring(loginInfo.indexOf(':') + 1, loginInfo.length());\n+            password = loginInfo\n+                .substring(loginInfo.indexOf(':') + 1, loginInfo.length());\n         }\n \n         if (baseData != null) {\n             // Retrieve data\n             String retrievedData = commonspec.retrieveData(baseData, type);\n             // Generate request\n-            response = commonspec.generateRequest(requestType, false, user, password, endPoint, retrievedData, type, \"\");\n+            response = commonspec\n+                .generateRequest(requestType, false, user, password, endPoint,\n+                    retrievedData, type, \"\");\n         } else {\n             // Generate request\n-            response = commonspec.generateRequest(requestType, false, user, password, endPoint, \"\", type, \"\");\n+            response = commonspec\n+                .generateRequest(requestType, false, user, password, endPoint,\n+                    \"\", type, \"\");\n         }\n \n         // Save response\n@@ -391,7 +453,10 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)'( so that the response( does not)? contains '(.+?)')?$\")\n-    public void sendRequestTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String foo, String contains, String responseVal) throws Exception {\n+    public void sendRequestTimeout(Integer timeout, Integer wait,\n+                                   String requestType, String endPoint,\n+                                   String foo, String contains,\n+                                   String responseVal) throws Exception {\n \n         AssertionError ex = null;\n         String type = \"\";\n@@ -411,24 +476,30 @@ public class WhenGSpec extends BaseGSpec {\n                 if (found && searchUntilContains) {\n                     break;\n                 }\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, \"\", type, \"\");\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint,\n+                        \"\", type, \"\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n                 try {\n                     if (searchUntilContains) {\n-                        assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n+                        assertThat(commonspec.getResponse().getResponse())\n+                            .containsPattern(pattern);\n                         found = true;\n                         timeout = i;\n                     } else {\n-                        assertThat(commonspec.getResponse().getResponse()).doesNotContain(responseVal);\n+                        assertThat(commonspec.getResponse().getResponse())\n+                            .doesNotContain(responseVal);\n                         found = false;\n                         timeout = i;\n                     }\n                 } catch (AssertionError e) {\n                     if (!found) {\n-                        commonspec.getLogger().info(\"Response value not found after \" + i + \" seconds\");\n+                        commonspec.getLogger().info(\n+                            \"Response value not found after \" + i + \" seconds\");\n                     } else {\n-                        commonspec.getLogger().info(\"Response value found after \" + i + \" seconds\");\n+                        commonspec.getLogger().info(\n+                            \"Response value found after \" + i + \" seconds\");\n                     }\n                     Thread.sleep(wait * 1000);\n                     ex = e;\n@@ -437,18 +508,25 @@ public class WhenGSpec extends BaseGSpec {\n                     break;\n                 }\n             }\n-            if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n+            if ((!found && searchUntilContains) ||\n+                (found && !searchUntilContains)) {\n                 throw (ex);\n             }\n             if (searchUntilContains) {\n-                commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+                commonspec.getLogger().info(\n+                    \"Success! Response value found after \" + timeout +\n+                        \" seconds\");\n             } else {\n-                commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+                commonspec.getLogger().info(\n+                    \"Success! Response value not found after \" + timeout +\n+                        \" seconds\");\n             }\n         } else {\n \n             for (int i = 0; (i <= timeout); i += wait) {\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, \"\", type, \"\");\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint,\n+                        \"\", type, \"\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n                 try {\n@@ -463,13 +541,17 @@ public class WhenGSpec extends BaseGSpec {\n     }\n \n     @When(\"^I login to '(.+?)' based on '([^:]+?)' as '(json|string)'$\")\n-    public void loginUser(String endPoint, String baseData, String type) throws Exception {\n-        sendRequestNoDataTable(\"POST\", endPoint, null, null, null, baseData, null, type);\n+    public void loginUser(String endPoint, String baseData, String type)\n+        throws Exception {\n+        sendRequestNoDataTable(\"POST\", endPoint, null, null, null, baseData,\n+            null, type);\n     }\n \n     @When(\"^I login to '(.+?)' based on '([^:]+?)' as '(json|string)' with:$\")\n-    public void loginUser(String endPoint, String baseData, String type, DataTable modifications) throws Exception {\n-        sendRequest(\"POST\", endPoint, null, null, baseData, \"\", type, modifications);\n+    public void loginUser(String endPoint, String baseData, String type,\n+                          DataTable modifications) throws Exception {\n+        sendRequest(\"POST\", endPoint, null, null, baseData, \"\", type,\n+            modifications);\n     }\n \n     @When(\"^I logout from '(.+?)'$\")\n@@ -489,11 +571,14 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications all data in \"where\" clause. Where schema is \"empty\", query has not a where clause. So it is necessary to provide an empty table. Example:  ||.\n      */\n     @When(\"^I execute a query over fields '(.+?)' with schema '(.+?)' of type '(json|string)' with magic_column '(.+?)' from table: '(.+?)' using keyspace: '(.+?)' with:$\")\n-    public void sendQueryOfType(String fields, String schema, String type, String magic_column, String table, String keyspace, DataTable modifications) {\n+    public void sendQueryOfType(String fields, String schema, String type,\n+                                String magic_column, String table,\n+                                String keyspace, DataTable modifications) {\n         try {\n             commonspec.setResultsType(\"cassandra\");\n             commonspec.getCassandraClient().useKeyspace(keyspace);\n-            commonspec.getLogger().debug(\"Starting a query of type \" + commonspec.getResultsType());\n+            commonspec.getLogger().debug(\n+                \"Starting a query of type \" + commonspec.getResultsType());\n \n             String query = \"\";\n \n@@ -501,20 +586,28 @@ public class WhenGSpec extends BaseGSpec {\n \n                 query = \"SELECT \" + fields + \" FROM \" + table + \";\";\n \n-            } else if (!schema.equals(\"empty\") && magic_column.equals(\"empty\")) {\n+            } else if (!schema.equals(\"empty\") &&\n+                magic_column.equals(\"empty\")) {\n                 String retrievedData = commonspec.retrieveData(schema, type);\n-                String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-                query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + modifiedData + \";\";\n+                String modifiedData =\n+                    commonspec.modifyData(retrievedData, type, modifications)\n+                        .toString();\n+                query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" +\n+                    modifiedData + \";\";\n \n \n             } else {\n                 String retrievedData = commonspec.retrieveData(schema, type);\n-                String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-                query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + magic_column + \" = '\" + modifiedData + \"';\";\n+                String modifiedData =\n+                    commonspec.modifyData(retrievedData, type, modifications)\n+                        .toString();\n+                query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" +\n+                    magic_column + \" = '\" + modifiedData + \"';\";\n \n             }\n             commonspec.getLogger().debug(\"query: {}\", query);\n-            ResultSet results = commonspec.getCassandraClient().executeQuery(query);\n+            ResultSet results =\n+                commonspec.getCassandraClient().executeQuery(query);\n             commonspec.setCassandraResults(results);\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n@@ -534,13 +627,17 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications modifications to perform in query\n      */\n     @When(\"^I execute a query '(.+?)' of type '(json|string)' in mongo '(.+?)' database using collection '(.+?)' with:$\")\n-    public void sendQueryOfType(String query, String type, String database, String collection, DataTable modifications) throws Exception {\n+    public void sendQueryOfType(String query, String type, String database,\n+                                String collection, DataTable modifications)\n+        throws Exception {\n         try {\n             commonspec.setResultsType(\"mongo\");\n             String retrievedData = commonspec.retrieveData(query, type);\n-            String modifiedData = commonspec.modifyData(retrievedData, type, modifications);\n+            String modifiedData =\n+                commonspec.modifyData(retrievedData, type, modifications);\n             commonspec.getMongoDBClient().connectToMongoDBDataBase(database);\n-            DBCollection dbCollection = commonspec.getMongoDBClient().getMongoDBCollection(collection);\n+            DBCollection dbCollection =\n+                commonspec.getMongoDBClient().getMongoDBCollection(collection);\n             DBObject dbObject = (DBObject) JSON.parse(modifiedData);\n             DBCursor cursor = dbCollection.find(dbObject);\n             commonspec.setMongoResults(cursor);\n@@ -559,14 +656,17 @@ public class WhenGSpec extends BaseGSpec {\n      * @param value       value of the column to be filtered.\n      */\n     @When(\"^I execute an elasticsearch query over index '(.*?)' and mapping '(.*?)' and column '(.*?)' with value '(.*?)' to '(.*?)'$\")\n-    public void elasticSearchQueryWithFilter(String indexName, String mappingName, String\n-            columnName, String filterType, String value) {\n+    public void elasticSearchQueryWithFilter(String indexName,\n+                                             String mappingName, String\n+                                                 columnName, String filterType,\n+                                             String value) {\n         try {\n             commonspec.setResultsType(\"elasticsearch\");\n             commonspec.setElasticsearchResults(\n-                    commonspec.getElasticSearchClient()\n-                            .searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName,\n-                                    value, filterType)\n+                commonspec.getElasticSearchClient()\n+                    .searchSimpleFilterElasticsearchQuery(indexName,\n+                        mappingName, columnName,\n+                        value, filterType)\n             );\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n@@ -588,12 +688,21 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications data introduced for query fields defined on schema\n      */\n     @When(\"^I create a Cassandra index named '(.+?)' with schema '(.+?)' of type '(json|string)' in table '(.+?)' using magic_column '(.+?)' using keyspace '(.+?)' with:$\")\n-    public void createCustomMapping(String index_name, String schema, String type, String table, String magic_column, String keyspace, DataTable modifications) throws Exception {\n+    public void createCustomMapping(String index_name, String schema,\n+                                    String type, String table,\n+                                    String magic_column, String keyspace,\n+                                    DataTable modifications) throws Exception {\n         String retrievedData = commonspec.retrieveData(schema, type);\n-        String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-        String query = \"CREATE CUSTOM INDEX \" + index_name + \" ON \" + keyspace + \".\" + table + \"(\" + magic_column + \") \"\n-                + \"USING 'com.stratio.cassandra.lucene.Index' WITH OPTIONS = \" + modifiedData;\n-        commonspec.getLogger().debug(\"Will execute a cassandra query: {}\", query);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, type, modifications)\n+                .toString();\n+        String query =\n+            \"CREATE CUSTOM INDEX \" + index_name + \" ON \" + keyspace + \".\" +\n+                table + \"(\" + magic_column + \") \"\n+                + \"USING 'com.stratio.cassandra.lucene.Index' WITH OPTIONS = \" +\n+                modifiedData;\n+        commonspec.getLogger()\n+            .debug(\"Will execute a cassandra query: {}\", query);\n         commonspec.getCassandraClient().executeQuery(query);\n     }\n \n@@ -648,7 +757,8 @@ public class WhenGSpec extends BaseGSpec {\n             rows.setHeaders(columns);\n         }\n \n-        List<Map<String, String>> results = new ArrayList<Map<String, String>>();\n+        List<Map<String, String>> results =\n+            new ArrayList<Map<String, String>>();\n         while (rows.readRecord()) {\n             Map<String, String> row = new HashMap<String, String>();\n             for (String column : columns) {\n@@ -704,7 +814,8 @@ public class WhenGSpec extends BaseGSpec {\n                 commonspec.getLogger().debug(\"Alphabetical criteria selected.\");\n                 comparator = new Comparator<JsonValue>() {\n                     public int compare(JsonValue json1, JsonValue json2) {\n-                        int res = String.CASE_INSENSITIVE_ORDER.compare(json1.toString(), json2.toString());\n+                        int res = String.CASE_INSENSITIVE_ORDER\n+                            .compare(json1.toString(), json2.toString());\n                         if (res == 0) {\n                             res = json1.toString().compareTo(json2.toString());\n                         }\n@@ -755,9 +866,11 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I copy the kafka topic '(.*?)' to file '(.*?)' with headers '(.*?)'$\")\n-    public void topicToFile(String topic_name, String filename, String header) throws Exception {\n+    public void topicToFile(String topic_name, String filename, String header)\n+        throws Exception {\n         commonspec.getKafkaUtils().resultsToFile(topic_name, filename, header);\n     }\n+\n     /**\n      * Delete zPath, it should be empty\n      *\n@@ -778,9 +891,11 @@ public class WhenGSpec extends BaseGSpec {\n      * @param ephemeral if it's created as ephemeral or not\n      */\n     @When(\"^I create the zNode '(.+?)'( with content '(.+?)')? which (IS|IS NOT) ephemeral$\")\n-    public void createZNode(String path, String foo, String content, boolean ephemeral) throws Exception {\n+    public void createZNode(String path, String foo, String content,\n+                            boolean ephemeral) throws Exception {\n         if (content != null) {\n-            commonspec.getZookeeperSecClient().zCreate(path, content, ephemeral);\n+            commonspec.getZookeeperSecClient()\n+                .zCreate(path, content, ephemeral);\n         } else {\n             commonspec.getZookeeperSecClient().zCreate(path, ephemeral);\n         }\n@@ -793,8 +908,10 @@ public class WhenGSpec extends BaseGSpec {\n      * @param numPartitions number of partitions\n      */\n     @When(\"^I increase '(.+?)' partitions in a Kafka topic named '(.+?)'\")\n-    public void modifyPartitions(int numPartitions, String topic_name) throws Exception {\n-        commonspec.getKafkaUtils().modifyTopicPartitioning(topic_name, numPartitions);\n+    public void modifyPartitions(int numPartitions, String topic_name)\n+        throws Exception {\n+        commonspec.getKafkaUtils()\n+            .modifyTopicPartitioning(topic_name, numPartitions);\n     }\n \n \n@@ -805,7 +922,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param message    string that you send to topic\n      */\n     @When(\"^I send a message '(.+?)' to the kafka topic named '(.+?)'\")\n-    public void sendAMessage(String message, String topic_name) throws Exception {\n+    public void sendAMessage(String message, String topic_name)\n+        throws Exception {\n         commonspec.getKafkaUtils().sendMessage(message, topic_name);\n     }\n \n@@ -816,7 +934,8 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I create an elasticsearch index named '(.+?)'( removing existing index if exist)?$\")\n     public void createElasticsearchIndex(String index, String removeIndex) {\n-        if (removeIndex != null && commonspec.getElasticSearchClient().indexExists(index)) {\n+        if (removeIndex != null &&\n+            commonspec.getElasticSearchClient().indexExists(index)) {\n             commonspec.getElasticSearchClient().dropSingleIndex(index);\n         }\n         commonspec.getElasticSearchClient().createSingleIndex(index);\n@@ -832,11 +951,16 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I index a document in the index named '(.+?)' using the mapping named '(.+?)' with key '(.+?)' and value '(.+?)'$\")\n-    public void indexElasticsearchDocument(String indexName, String mappingName, String key, String value) throws Exception {\n-        ArrayList<XContentBuilder> mappingsource = new ArrayList<XContentBuilder>();\n-        XContentBuilder builder = jsonBuilder().startObject().field(key, value).endObject();\n+    public void indexElasticsearchDocument(String indexName, String mappingName,\n+                                           String key, String value)\n+        throws Exception {\n+        ArrayList<XContentBuilder> mappingsource =\n+            new ArrayList<XContentBuilder>();\n+        XContentBuilder builder =\n+            jsonBuilder().startObject().field(key, value).endObject();\n         mappingsource.add(builder);\n-        commonspec.getElasticSearchClient().createMapping(indexName, mappingName, mappingsource);\n+        commonspec.getElasticSearchClient()\n+            .createMapping(indexName, mappingName, mappingsource);\n     }\n \n     /**\n@@ -888,24 +1012,36 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I create file '(.+?)' based on '(.+?)' as '(.+?)' with:$\")\n-    public void createFile(String fileName, String baseData, String type, DataTable modifications) throws Exception {\n+    public void createFile(String fileName, String baseData, String type,\n+                           DataTable modifications) throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n-        commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n-        String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n+        commonspec.getLogger()\n+            .debug(\"Modifying data {} as {}\", retrievedData, type);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, type, modifications)\n+                .toString();\n \n         // Create file (temporary) and set path to be accessible within test\n-        File tempDirectory = new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n-        String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n-        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n+        File tempDirectory = new File(String\n+            .valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n+        String absolutePathFile =\n+            tempDirectory.getAbsolutePath() + \"/\" + fileName;\n+        commonspec.getLogger()\n+            .debug(\"Creating file {} in 'target/test-classes'\",\n+                absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n+        Writer out = new BufferedWriter(\n+            new OutputStreamWriter(new FileOutputStream(absolutePathFile),\n+                \"UTF-8\"));\n         try {\n             out.write(modifiedData);\n         } catch (Exception e) {\n-            commonspec.getLogger().error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n+            commonspec.getLogger()\n+                .error(\"Custom file {} hasn't been created:\\n{}\",\n+                    absolutePathFile, e.toString());\n         } finally {\n             out.close();\n         }\n@@ -923,13 +1059,17 @@ public class WhenGSpec extends BaseGSpec {\n      * @param modifications modifications to perform in the content of the file\n      */\n     @When(\"^I read file '(.+?)' as '(.+?)' and save it in environment variable '(.+?)' with:$\")\n-    public void readFileToVariable(String baseData, String type, String envVar, DataTable modifications) throws Exception {\n+    public void readFileToVariable(String baseData, String type, String envVar,\n+                                   DataTable modifications) throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n-        commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n-        String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n+        commonspec.getLogger()\n+            .debug(\"Modifying data {} as {}\", retrievedData, type);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, type, modifications)\n+                .toString();\n \n         // Save in environment variable\n         ThreadProperty.set(envVar, modifiedData);\n@@ -944,7 +1084,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param envVar   name of the variable where to store the result\n      */\n     @When(\"^I read file '(.+?)' as '(.+?)' and save it in environment variable '(.+?)'$\")\n-    public void readFileToVariableNoDataTable(String baseData, String type, String envVar) throws Exception {\n+    public void readFileToVariableNoDataTable(String baseData, String type,\n+                                              String envVar) throws Exception {\n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n@@ -957,7 +1098,8 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I search in LDAP using the filter '(.+?)' and the baseDn '(.+?)'$\")\n     public void searchLDAP(String filter, String baseDn) throws Exception {\n-        this.commonspec.setPreviousLdapResults(commonspec.getLdapUtils().search(new SearchRequest(baseDn, filter)));\n+        this.commonspec.setPreviousLdapResults(commonspec.getLdapUtils()\n+            .search(new SearchRequest(baseDn, filter)));\n     }\n \n     /**\n@@ -966,21 +1108,30 @@ public class WhenGSpec extends BaseGSpec {\n      * File will be placed on path /target/test-classes\n      */\n     @When(\"^I convert the json file '(.+?)' to yaml file '(.+?)'$\")\n-    public void convertJsonToYaml(String fileToConvert, String fileName) throws Exception {\n+    public void convertJsonToYaml(String fileToConvert, String fileName)\n+        throws Exception {\n \n         // Retrieve data\n         String retrievedData = commonspec.asYaml(fileToConvert);\n \n         // Create file (temporary) and set path to be accessible within test\n-        File tempDirectory = new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n-        String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n-        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n+        File tempDirectory = new File(String\n+            .valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n+        String absolutePathFile =\n+            tempDirectory.getAbsolutePath() + \"/\" + fileName;\n+        commonspec.getLogger()\n+            .debug(\"Creating file {} in 'target/test-classes'\",\n+                absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n+        Writer out = new BufferedWriter(\n+            new OutputStreamWriter(new FileOutputStream(absolutePathFile),\n+                \"UTF-8\"));\n         try {\n             out.write(retrievedData);\n         } catch (Exception e) {\n-            commonspec.getLogger().error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n+            commonspec.getLogger()\n+                .error(\"Custom file {} hasn't been created:\\n{}\",\n+                    absolutePathFile, e.toString());\n             throw new RuntimeException(\"Custom file {} hasn't been created\");\n         } finally {\n             out.close();\n@@ -1007,7 +1158,9 @@ public class WhenGSpec extends BaseGSpec {\n             myStatement.close();\n         } catch (Exception e) {\n             e.printStackTrace();\n-            assertThat(result).as(e.getClass().getName() + \": \" + e.getMessage()).isNotEqualTo(0);\n+            assertThat(result)\n+                .as(e.getClass().getName() + \": \" + e.getMessage())\n+                .isNotEqualTo(0);\n         }\n     }\n \n@@ -1052,7 +1205,8 @@ public class WhenGSpec extends BaseGSpec {\n             myStatement.close();\n         } catch (Exception e) {\n             e.printStackTrace();\n-            Assertions.assertThat(rs).as(\"There are no response from SELECT\").isNotNull();\n+            Assertions.assertThat(rs).as(\"There are no response from SELECT\")\n+                .isNotNull();\n         }\n     }\n \n@@ -1064,13 +1218,15 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I check that framework '(.+?)' doesn't appear as inactive$\")\n     public void checkResources(String framework) throws Exception {\n-        sendRequestNoDataTable(\"GET\", \"/mesos/state-summary\", null, null, null, null, null, \"json\");\n+        sendRequestNoDataTable(\"GET\", \"/mesos/state-summary\", null, null, null,\n+            null, null, \"json\");\n \n         String json = \"[\" + commonspec.getResponse().getResponse() + \"]\";\n         String parsedElement = \"$..frameworks[?(@.active==false)].name\";\n         String value = commonspec.getJSONPathString(json, parsedElement, null);\n \n-        Assertions.assertThat(value).as(\"Inactive frameworks\").doesNotContain(framework);\n+        Assertions.assertThat(value).as(\"Inactive frameworks\")\n+            .doesNotContain(framework);\n     }\n \n }\n",
            "diff_size": 275
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/144/WhenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/144/WhenGSpec.java\nindex 42ed50689e..4ced359df2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/144/WhenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/144/WhenGSpec.java\n@@ -52,7 +52,6 @@ import java.util.regex.Pattern;\n import static com.stratio.qa.assertions.Assertions.assertThat;\n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n \n-\n /**\n  * Generic When Specs.\n  *\n@@ -566,8 +565,7 @@ public class WhenGSpec extends BaseGSpec {\n             commonspec.setElasticsearchResults(\n                     commonspec.getElasticSearchClient()\n                             .searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName,\n-                                    value, filterType)\n-            );\n+                                    value, filterType));\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n             commonspec.getLogger().debug(e.toString());\n@@ -758,7 +756,8 @@ public class WhenGSpec extends BaseGSpec {\n     public void topicToFile(String topic_name, String filename, String header) throws Exception {\n         commonspec.getKafkaUtils().resultsToFile(topic_name, filename, header);\n     }\n-    /**\n+\n+/**\n      * Delete zPath, it should be empty\n      *\n      * @param zNode path at zookeeper\n@@ -967,8 +966,7 @@ public class WhenGSpec extends BaseGSpec {\n      */\n     @When(\"^I convert the json file '(.+?)' to yaml file '(.+?)'$\")\n     public void convertJsonToYaml(String fileToConvert, String fileName) throws Exception {\n-\n-        // Retrieve data\n+    // Retrieve data\n         String retrievedData = commonspec.asYaml(fileToConvert);\n \n         // Create file (temporary) and set path to be accessible within test\n@@ -1073,4 +1071,4 @@ public class WhenGSpec extends BaseGSpec {\n         Assertions.assertThat(value).as(\"Inactive frameworks\").doesNotContain(framework);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "543",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "544",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "545",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/144/WhenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/144/WhenGSpec.java\nindex 42ed50689e..5d49937df9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/144/WhenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/144/WhenGSpec.java\n@@ -40,7 +40,6 @@ import org.openqa.selenium.Keys;\n import org.openqa.selenium.WebElement;\n import org.openqa.selenium.interactions.Actions;\n import org.openqa.selenium.support.ui.Select;\n-\n import java.io.*;\n import java.sql.Connection;\n import java.sql.ResultSetMetaData;\n@@ -50,6 +49,7 @@ import java.util.concurrent.Future;\n import java.util.regex.Pattern;\n \n import static com.stratio.qa.assertions.Assertions.assertThat;\n+\n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n \n \n@@ -58,6 +58,8 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n  *\n  * @see <a href=\"WhenGSpec-annotations.html\">When Steps &amp; Matching Regex</a>\n  */\n+\n+\n public class WhenGSpec extends BaseGSpec {\n \n     public static final int DEFAULT_TIMEOUT = 1000;\n@@ -67,6 +69,8 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param spec\n      */\n+\n+\n     public WhenGSpec(CommonG spec) {\n         this.commonspec = spec;\n     }\n@@ -77,6 +81,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param seconds\n      * @throws InterruptedException\n      */\n+\n+\n     @When(\"^I wait '(\\\\d+?)' seconds?$\")\n     public void idleWait(Integer seconds) throws InterruptedException {\n         Thread.sleep(seconds * DEFAULT_TIMEOUT);\n@@ -93,13 +99,13 @@ public class WhenGSpec extends BaseGSpec {\n      * @throws NoSuchFieldException\n      * @throws ClassNotFoundException\n      */\n+\n+\n     @When(\"^I drag '([^:]*?):(.+?)' and drop it to '([^:]*?):(.+?)'$\")\n     public void seleniumDrag(String smethod, String source, String dmethod, String destination) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         Actions builder = new Actions(commonspec.getDriver());\n-\n         List<WebElement> sourceElement = commonspec.locateElement(smethod, source, 1);\n         List<WebElement> destinationElement = commonspec.locateElement(dmethod, destination, 1);\n-\n         builder.dragAndDrop(sourceElement.get(0), destinationElement.get(0)).perform();\n     }\n \n@@ -109,17 +115,18 @@ public class WhenGSpec extends BaseGSpec {\n      * @param index\n      * @throws InterruptedException\n      */\n+\n+\n     @When(\"^I click on the element on index '(\\\\d+?)'$\")\n     public void seleniumClick(Integer index) throws InterruptedException {\n-\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             commonspec.getPreviousWebElements().getPreviousWebElements().get(index).click();\n         }\n     }\n@@ -130,18 +137,19 @@ public class WhenGSpec extends BaseGSpec {\n      * @param index\n      * @throws InterruptedException\n      */\n+\n+\n     @When(\"^I double click on the element on index '(\\\\d+?)'$\")\n     public void seleniumDoubleClick(Integer index) throws InterruptedException {\n         Actions action = new Actions(commonspec.getDriver());\n         try {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n-\n         } catch (AssertionError e) {\n             Thread.sleep(1000);\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n             action.doubleClick(commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).perform();\n         }\n     }\n@@ -151,13 +159,13 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param index\n      */\n+\n+\n     @When(\"^I clear the content on text input at index '(\\\\d+?)'$\")\n     public void seleniumClear(Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index)).isTextField(commonspec.getTextFieldCondition());\n-\n         commonspec.getPreviousWebElements().getPreviousWebElements().get(index).clear();\n     }\n \n@@ -167,11 +175,12 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param index\n      */\n+\n+\n     @When(\"^I delete the text '(.+?)' on the element on index '(\\\\d+?)'( and replace it for '(.+?)')?$\")\n     public void seleniumDelete(String text, Integer index, String foo, String replacement) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         Actions actions = new Actions(commonspec.getDriver());\n         actions.moveToElement(commonspec.getPreviousWebElements().getPreviousWebElements().get(index), (text.length() / 2), 0);\n         for (int i = 0; i < (text.length() / 2); i++) {\n@@ -182,6 +191,7 @@ public class WhenGSpec extends BaseGSpec {\n             actions.sendKeys(Keys.DELETE);\n             actions.build().perform();\n         }\n+\n         if (replacement != null && replacement.length() != 0) {\n             actions.sendKeys(replacement);\n             actions.build().perform();\n@@ -195,10 +205,12 @@ public class WhenGSpec extends BaseGSpec {\n      * @param text\n      * @param index\n      */\n+\n+\n     @When(\"^I type '(.+?)' on the element on index '(\\\\d+?)'$\")\n     public void seleniumType(@Transform(NullableStringConverter.class) String text, Integer index) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         while (text.length() > 0) {\n             Actions actions = new Actions(commonspec.getDriver());\n             if (-1 == text.indexOf(\"\\\\n\")) {\n@@ -231,23 +243,26 @@ public class WhenGSpec extends BaseGSpec {\n      * @param foo\n      * @param index\n      */\n+\n+\n     @When(\"^I send '(.+?)'( on the element on index '(\\\\d+?)')?$\")\n     public void seleniumKeys(@Transform(ArrayListConverter.class) List<String> strokes, String foo, Integer index) {\n         if (index != null) {\n-            assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                    .hasAtLeast(index);\n+            assertThat(this.commonspec,\n+                commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         }\n         assertThat(strokes).isNotEmpty();\n-\n         for (String stroke : strokes) {\n             if (stroke.contains(\"+\")) {\n                 List<Keys> csl = new ArrayList<Keys>();\n                 for (String strokeInChord : stroke.split(\"\\\\+\")) {\n                     csl.add(Keys.valueOf(strokeInChord.trim()));\n                 }\n+\n                 Keys[] csa = csl.toArray(new Keys[csl.size()]);\n                 if (index == null) {\n-                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")), csa).perform();\n+                    new Actions(commonspec.getDriver()).sendKeys(commonspec.getDriver().findElement(By.tagName(\"body\")),\n+                                                                 csa).perform();\n                 } else {\n                     commonspec.getPreviousWebElements().getPreviousWebElements().get(index).sendKeys(csa);\n                 }\n@@ -267,11 +282,12 @@ public class WhenGSpec extends BaseGSpec {\n      * @param option\n      * @param index\n      */\n+\n+\n     @When(\"^I select '(.+?)' on the element on index '(\\\\d+?)'$\")\n     public void elementSelect(String option, Integer index) {\n         Select sel = null;\n         sel = new Select(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n-\n         sel.selectByVisibleText(option);\n     }\n \n@@ -280,11 +296,12 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param index\n      */\n+\n+\n     @When(\"^I de-select every item on the element on index '(\\\\d+?)'$\")\n     public void elementDeSelect(Integer index) {\n         Select sel = null;\n         sel = new Select(commonspec.getPreviousWebElements().getPreviousWebElements().get(index));\n-\n         if (sel.isMultiple()) {\n             sel.deselectAll();\n         }\n@@ -316,6 +333,8 @@ public class WhenGSpec extends BaseGSpec {\n      *                      being the result of the modification: {\"key1\": \"value1\", \"key2\": {\"key3\": \"new value3\"}}\n      * @throws Exception\n      */\n+\n+\n     @When(\"^I send a '(.+?)' request to '(.+?)'( with user and password '(.+:.+?)')? based on '([^:]+?)'( as '(json|string)')? with:$\")\n     public void sendRequest(String requestType, String endPoint, String foo, String loginInfo, String baseData, String baz, String type, DataTable modifications) throws Exception {\n         // Retrieve data\n@@ -324,17 +343,21 @@ public class WhenGSpec extends BaseGSpec {\n         // Modify data\n         commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n         String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-\n         String user = null;\n         String password = null;\n         if (loginInfo != null) {\n             user = loginInfo.substring(0, loginInfo.indexOf(':'));\n             password = loginInfo.substring(loginInfo.indexOf(':') + 1, loginInfo.length());\n         }\n-\n-\n         commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-        Future<Response> response = commonspec.generateRequest(requestType, false, user, password, endPoint, modifiedData, type, \"\");\n+        Future<Response> response = commonspec.generateRequest(requestType,\n+            false,\n+                user,\n+                    password,\n+                        endPoint,\n+                            modifiedData,\n+                                type,\n+                                    \"\");\n \n         // Save response\n         commonspec.getLogger().debug(\"Saving response\");\n@@ -354,12 +377,13 @@ public class WhenGSpec extends BaseGSpec {\n      * @param type\n      * @throws Exception\n      */\n+\n+\n     @When(\"^I send a '(.+?)' request to '(.+?)'( with user and password '(.+:.+?)')?( based on '([^:]+?)')?( as '(json|string)')?$\")\n     public void sendRequestNoDataTable(String requestType, String endPoint, String foo, String loginInfo, String bar, String baseData, String baz, String type) throws Exception {\n         Future<Response> response;\n         String user = null;\n         String password = null;\n-\n         if (loginInfo != null) {\n             user = loginInfo.substring(0, loginInfo.indexOf(':'));\n             password = loginInfo.substring(loginInfo.indexOf(':') + 1, loginInfo.length());\n@@ -369,7 +393,14 @@ public class WhenGSpec extends BaseGSpec {\n             // Retrieve data\n             String retrievedData = commonspec.retrieveData(baseData, type);\n             // Generate request\n-            response = commonspec.generateRequest(requestType, false, user, password, endPoint, retrievedData, type, \"\");\n+            response = commonspec.generateRequest(requestType,\n+                false,\n+                    user,\n+                        password,\n+                            endPoint,\n+                                retrievedData,\n+                                    type,\n+                                        \"\");\n         } else {\n             // Generate request\n             response = commonspec.generateRequest(requestType, false, user, password, endPoint, \"\", type, \"\");\n@@ -390,13 +421,13 @@ public class WhenGSpec extends BaseGSpec {\n      * @param responseVal\n      * @throws Exception\n      */\n+\n+\n     @When(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, I send a '(.+?)' request to '(.+?)'( so that the response( does not)? contains '(.+?)')?$\")\n     public void sendRequestTimeout(Integer timeout, Integer wait, String requestType, String endPoint, String foo, String contains, String responseVal) throws Exception {\n-\n         AssertionError ex = null;\n         String type = \"\";\n         Future<Response> response;\n-\n         if (foo != null) {\n             Boolean searchUntilContains;\n             if (contains == null || contains.isEmpty()) {\n@@ -404,8 +435,8 @@ public class WhenGSpec extends BaseGSpec {\n             } else {\n                 searchUntilContains = Boolean.FALSE;\n             }\n-            Boolean found = !searchUntilContains;\n \n+            Boolean found = !searchUntilContains;\n             Pattern pattern = CommonG.matchesOrContains(responseVal);\n             for (int i = 0; (i <= timeout); i += wait) {\n                 if (found && searchUntilContains) {\n@@ -433,20 +464,22 @@ public class WhenGSpec extends BaseGSpec {\n                     Thread.sleep(wait * 1000);\n                     ex = e;\n                 }\n+\n                 if (!found && !searchUntilContains) {\n                     break;\n                 }\n             }\n+\n             if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n                 throw (ex);\n             }\n+\n             if (searchUntilContains) {\n                 commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n             } else {\n                 commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n             }\n         } else {\n-\n             for (int i = 0; (i <= timeout); i += wait) {\n                 response = commonspec.generateRequest(requestType, false, null, null, endPoint, \"\", type, \"\");\n                 commonspec.setResponse(requestType, response.get());\n@@ -462,16 +495,19 @@ public class WhenGSpec extends BaseGSpec {\n         }\n     }\n \n+\n     @When(\"^I login to '(.+?)' based on '([^:]+?)' as '(json|string)'$\")\n     public void loginUser(String endPoint, String baseData, String type) throws Exception {\n         sendRequestNoDataTable(\"POST\", endPoint, null, null, null, baseData, null, type);\n     }\n \n+\n     @When(\"^I login to '(.+?)' based on '([^:]+?)' as '(json|string)' with:$\")\n     public void loginUser(String endPoint, String baseData, String type, DataTable modifications) throws Exception {\n         sendRequest(\"POST\", endPoint, null, null, baseData, \"\", type, modifications);\n     }\n \n+\n     @When(\"^I logout from '(.+?)'$\")\n     public void logoutUser(String endPoint) throws Exception {\n         sendRequestNoDataTable(\"GET\", endPoint, null, null, null, \"\", null, \"\");\n@@ -488,30 +524,25 @@ public class WhenGSpec extends BaseGSpec {\n      * @param keyspace      keyspace used\n      * @param modifications all data in \"where\" clause. Where schema is \"empty\", query has not a where clause. So it is necessary to provide an empty table. Example:  ||.\n      */\n+\n+\n     @When(\"^I execute a query over fields '(.+?)' with schema '(.+?)' of type '(json|string)' with magic_column '(.+?)' from table: '(.+?)' using keyspace: '(.+?)' with:$\")\n     public void sendQueryOfType(String fields, String schema, String type, String magic_column, String table, String keyspace, DataTable modifications) {\n         try {\n             commonspec.setResultsType(\"cassandra\");\n             commonspec.getCassandraClient().useKeyspace(keyspace);\n             commonspec.getLogger().debug(\"Starting a query of type \" + commonspec.getResultsType());\n-\n             String query = \"\";\n-\n             if (schema.equals(\"empty\") && magic_column.equals(\"empty\")) {\n-\n                 query = \"SELECT \" + fields + \" FROM \" + table + \";\";\n-\n             } else if (!schema.equals(\"empty\") && magic_column.equals(\"empty\")) {\n                 String retrievedData = commonspec.retrieveData(schema, type);\n                 String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n                 query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + modifiedData + \";\";\n-\n-\n             } else {\n-                String retrievedData = commonspec.retrieveData(schema, type);\n-                String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-                query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + magic_column + \" = '\" + modifiedData + \"';\";\n-\n+                       String retrievedData = commonspec.retrieveData(schema, type);\n+                       String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n+                       query = \"SELECT \" + fields + \" FROM \" + table + \" WHERE \" + magic_column + \" = '\" + modifiedData + \"';\";\n             }\n             commonspec.getLogger().debug(\"query: {}\", query);\n             ResultSet results = commonspec.getCassandraClient().executeQuery(query);\n@@ -521,8 +552,6 @@ public class WhenGSpec extends BaseGSpec {\n             commonspec.getLogger().debug(e.toString());\n             commonspec.getExceptions().add(e);\n         }\n-\n-\n     }\n \n     /**\n@@ -533,6 +562,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param collection    collection in database\n      * @param modifications modifications to perform in query\n      */\n+\n+\n     @When(\"^I execute a query '(.+?)' of type '(json|string)' in mongo '(.+?)' database using collection '(.+?)' with:$\")\n     public void sendQueryOfType(String query, String type, String database, String collection, DataTable modifications) throws Exception {\n         try {\n@@ -558,16 +589,13 @@ public class WhenGSpec extends BaseGSpec {\n      * @param filterType  it could be equals, gt, gte, lt and lte.\n      * @param value       value of the column to be filtered.\n      */\n+\n+\n     @When(\"^I execute an elasticsearch query over index '(.*?)' and mapping '(.*?)' and column '(.*?)' with value '(.*?)' to '(.*?)'$\")\n-    public void elasticSearchQueryWithFilter(String indexName, String mappingName, String\n-            columnName, String filterType, String value) {\n+    public void elasticSearchQueryWithFilter(String indexName, String mappingName, String columnName, String filterType, String value) {\n         try {\n             commonspec.setResultsType(\"elasticsearch\");\n-            commonspec.setElasticsearchResults(\n-                    commonspec.getElasticSearchClient()\n-                            .searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName,\n-                                    value, filterType)\n-            );\n+            commonspec.setElasticsearchResults(commonspec.getElasticSearchClient().searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName, value, filterType));\n         } catch (Exception e) {\n             commonspec.getLogger().debug(\"Exception captured\");\n             commonspec.getLogger().debug(e.toString());\n@@ -587,12 +615,13 @@ public class WhenGSpec extends BaseGSpec {\n      * @param keyspace      keyspace used\n      * @param modifications data introduced for query fields defined on schema\n      */\n+\n+\n     @When(\"^I create a Cassandra index named '(.+?)' with schema '(.+?)' of type '(json|string)' in table '(.+?)' using magic_column '(.+?)' using keyspace '(.+?)' with:$\")\n     public void createCustomMapping(String index_name, String schema, String type, String table, String magic_column, String keyspace, DataTable modifications) throws Exception {\n         String retrievedData = commonspec.retrieveData(schema, type);\n         String modifiedData = commonspec.modifyData(retrievedData, type, modifications).toString();\n-        String query = \"CREATE CUSTOM INDEX \" + index_name + \" ON \" + keyspace + \".\" + table + \"(\" + magic_column + \") \"\n-                + \"USING 'com.stratio.cassandra.lucene.Index' WITH OPTIONS = \" + modifiedData;\n+        String query = \"CREATE CUSTOM INDEX \" + index_name + \" ON \" + keyspace + \".\" + table + \"(\" + magic_column + \") \" + \"USING 'com.stratio.cassandra.lucene.Index' WITH OPTIONS = \" + modifiedData;\n         commonspec.getLogger().debug(\"Will execute a cassandra query: {}\", query);\n         commonspec.getCassandraClient().executeQuery(query);\n     }\n@@ -603,6 +632,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param table\n      * @param keyspace\n      */\n+\n+\n     @When(\"^I drop a Cassandra table named '(.+?)' using keyspace '(.+?)'$\")\n     public void dropTableWithData(String table, String keyspace) {\n         try {\n@@ -621,6 +652,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param table\n      * @param keyspace\n      */\n+\n+\n     @When(\"^I truncate a Cassandra table named '(.+?)' using keyspace '(.+?)'$\")\n     public void truncateTable(String table, String keyspace) {\n         try {\n@@ -638,10 +671,11 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param csvFile\n      */\n+\n+\n     @When(\"^I read info from csv file '(.+?)'$\")\n     public void readFromCSV(String csvFile) throws Exception {\n         CsvReader rows = new CsvReader(csvFile);\n-\n         String[] columns = null;\n         if (rows.readRecord()) {\n             columns = rows.getValues();\n@@ -656,9 +690,7 @@ public class WhenGSpec extends BaseGSpec {\n             }\n             results.add(row);\n         }\n-\n         rows.close();\n-\n         commonspec.setResultsType(\"csv\");\n         commonspec.setCSVResults(results);\n     }\n@@ -667,17 +699,17 @@ public class WhenGSpec extends BaseGSpec {\n     /**\n      * Change current window to another opened window.\n      */\n+\n+\n     @When(\"^I change active window$\")\n     public void seleniumChangeWindow() {\n         String originalWindowHandle = commonspec.getDriver().getWindowHandle();\n         Set<String> windowHandles = commonspec.getDriver().getWindowHandles();\n-\n         for (String window : windowHandles) {\n             if (!window.equals(originalWindowHandle)) {\n                 commonspec.getDriver().switchTo().window(window);\n             }\n         }\n-\n     }\n \n     /**\n@@ -687,12 +719,12 @@ public class WhenGSpec extends BaseGSpec {\n      * @param criteria alphabetical,...\n      * @param order    ascending or descending\n      */\n+\n+\n     @When(\"^I sort elements in '(.+?)' by '(.+?)' criteria in '(.+?)' order$\")\n     public void sortElements(String envVar, String criteria, String order) {\n-\n         String value = ThreadProperty.get(envVar);\n         JsonArray jsonArr = JsonValue.readHjson(value).asArray();\n-\n         List<JsonValue> jsonValues = new ArrayList<JsonValue>();\n         for (int i = 0; i < jsonArr.size(); i++) {\n             jsonValues.add(jsonArr.get(i));\n@@ -703,6 +735,7 @@ public class WhenGSpec extends BaseGSpec {\n             case \"alphabetical\":\n                 commonspec.getLogger().debug(\"Alphabetical criteria selected.\");\n                 comparator = new Comparator<JsonValue>() {\n+\n                     public int compare(JsonValue json1, JsonValue json2) {\n                         int res = String.CASE_INSENSITIVE_ORDER.compare(json1.toString(), json2.toString());\n                         if (res == 0) {\n@@ -722,7 +755,6 @@ public class WhenGSpec extends BaseGSpec {\n         } else {\n             Collections.sort(jsonValues, comparator.reversed());\n         }\n-\n         ThreadProperty.set(envVar, jsonValues.toString());\n     }\n \n@@ -731,6 +763,8 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param topic_name topic name\n      */\n+\n+\n     @When(\"^I create a Kafka topic named '(.+?)'\")\n     public void createKafkaTopic(String topic_name) throws Exception {\n         commonspec.getKafkaUtils().createTopic(topic_name);\n@@ -741,6 +775,8 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param topic_name topic name\n      */\n+\n+\n     @When(\"^I delete a Kafka topic named '(.+?)'\")\n     public void deleteKafkaTopic(String topic_name) throws Exception {\n         commonspec.getKafkaUtils().deleteTopic(topic_name);\n@@ -754,6 +790,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param header\n      * @throws Exception\n      */\n+\n+\n     @When(\"^I copy the kafka topic '(.*?)' to file '(.*?)' with headers '(.*?)'$\")\n     public void topicToFile(String topic_name, String filename, String header) throws Exception {\n         commonspec.getKafkaUtils().resultsToFile(topic_name, filename, header);\n@@ -763,6 +801,8 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param zNode path at zookeeper\n      */\n+\n+\n     @When(\"^I remove the zNode '(.+?)'$\")\n     public void removeZNode(String zNode) throws Exception {\n         commonspec.getZookeeperSecClient().delete(zNode);\n@@ -777,6 +817,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param content   if it has content it should be defined\n      * @param ephemeral if it's created as ephemeral or not\n      */\n+\n+\n     @When(\"^I create the zNode '(.+?)'( with content '(.+?)')? which (IS|IS NOT) ephemeral$\")\n     public void createZNode(String path, String foo, String content, boolean ephemeral) throws Exception {\n         if (content != null) {\n@@ -792,6 +834,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param topic_name    topic name\n      * @param numPartitions number of partitions\n      */\n+\n+\n     @When(\"^I increase '(.+?)' partitions in a Kafka topic named '(.+?)'\")\n     public void modifyPartitions(int numPartitions, String topic_name) throws Exception {\n         commonspec.getKafkaUtils().modifyTopicPartitioning(topic_name, numPartitions);\n@@ -804,6 +848,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param topic_name topic name\n      * @param message    string that you send to topic\n      */\n+\n+\n     @When(\"^I send a message '(.+?)' to the kafka topic named '(.+?)'\")\n     public void sendAMessage(String message, String topic_name) throws Exception {\n         commonspec.getKafkaUtils().sendMessage(message, topic_name);\n@@ -814,6 +860,8 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      * @param index\n      */\n+\n+\n     @When(\"^I create an elasticsearch index named '(.+?)'( removing existing index if exist)?$\")\n     public void createElasticsearchIndex(String index, String removeIndex) {\n         if (removeIndex != null && commonspec.getElasticSearchClient().indexExists(index)) {\n@@ -831,6 +879,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param value\n      * @throws Exception\n      */\n+\n+\n     @When(\"^I index a document in the index named '(.+?)' using the mapping named '(.+?)' with key '(.+?)' and value '(.+?)'$\")\n     public void indexElasticsearchDocument(String indexName, String mappingName, String key, String value) throws Exception {\n         ArrayList<XContentBuilder> mappingsource = new ArrayList<XContentBuilder>();\n@@ -887,6 +937,8 @@ public class WhenGSpec extends BaseGSpec {\n      *                      being the result of the modification: {\"key1\": \"value1\", \"key2\": {\"key4\": \"value4\"}}\n      * @throws Exception\n      */\n+\n+\n     @When(\"^I create file '(.+?)' based on '(.+?)' as '(.+?)' with:$\")\n     public void createFile(String fileName, String baseData, String type, DataTable modifications) throws Exception {\n         // Retrieve data\n@@ -899,7 +951,8 @@ public class WhenGSpec extends BaseGSpec {\n         // Create file (temporary) and set path to be accessible within test\n         File tempDirectory = new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n-        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n+        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\",\n+            absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n         Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n         try {\n@@ -909,7 +962,6 @@ public class WhenGSpec extends BaseGSpec {\n         } finally {\n             out.close();\n         }\n-\n         Assertions.assertThat(new File(absolutePathFile).isFile());\n     }\n \n@@ -922,6 +974,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param envVar        name of the variable where to store the result\n      * @param modifications modifications to perform in the content of the file\n      */\n+\n+\n     @When(\"^I read file '(.+?)' as '(.+?)' and save it in environment variable '(.+?)' with:$\")\n     public void readFileToVariable(String baseData, String type, String envVar, DataTable modifications) throws Exception {\n         // Retrieve data\n@@ -943,6 +997,8 @@ public class WhenGSpec extends BaseGSpec {\n      * @param type     whether the info in the file is a 'json' or a simple 'string'\n      * @param envVar   name of the variable where to store the result\n      */\n+\n+\n     @When(\"^I read file '(.+?)' as '(.+?)' and save it in environment variable '(.+?)'$\")\n     public void readFileToVariableNoDataTable(String baseData, String type, String envVar) throws Exception {\n         // Retrieve data\n@@ -955,6 +1011,8 @@ public class WhenGSpec extends BaseGSpec {\n     /**\n      * Search for a LDAP object\n      */\n+\n+\n     @When(\"^I search in LDAP using the filter '(.+?)' and the baseDn '(.+?)'$\")\n     public void searchLDAP(String filter, String baseDn) throws Exception {\n         this.commonspec.setPreviousLdapResults(commonspec.getLdapUtils().search(new SearchRequest(baseDn, filter)));\n@@ -965,6 +1023,8 @@ public class WhenGSpec extends BaseGSpec {\n      * <p>\n      * File will be placed on path /target/test-classes\n      */\n+\n+\n     @When(\"^I convert the json file '(.+?)' to yaml file '(.+?)'$\")\n     public void convertJsonToYaml(String fileToConvert, String fileName) throws Exception {\n \n@@ -974,7 +1034,8 @@ public class WhenGSpec extends BaseGSpec {\n         // Create file (temporary) and set path to be accessible within test\n         File tempDirectory = new File(String.valueOf(System.getProperty(\"user.dir\") + \"/target/test-classes/\"));\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n-        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n+        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\",\n+            absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n         Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), \"UTF-8\"));\n         try {\n@@ -985,7 +1046,6 @@ public class WhenGSpec extends BaseGSpec {\n         } finally {\n             out.close();\n         }\n-\n         Assertions.assertThat(new File(absolutePathFile).isFile());\n     }\n \n@@ -995,12 +1055,13 @@ public class WhenGSpec extends BaseGSpec {\n      *\n      *\n      */\n+\n+\n     @When(\"^I execute query '(.+?)'$\")\n     public void executeQuery(String query) throws Exception {\n         Statement myStatement = null;\n         int result = 0;\n         Connection myConnection = this.commonspec.getConnection();\n-\n         try {\n             myStatement = myConnection.createStatement();\n             result = myStatement.executeUpdate(query);\n@@ -1017,6 +1078,8 @@ public class WhenGSpec extends BaseGSpec {\n      * and sends it to environment variable\n      *\n      */\n+\n+\n     @When(\"^I query the database with '(.+?)'$\")\n     public void selectData(String query) throws Exception {\n         Statement myStatement = null;\n@@ -1062,15 +1125,21 @@ public class WhenGSpec extends BaseGSpec {\n      * @param framework Framework\n      * @throws Exception exception\n      */\n+\n+\n     @When(\"^I check that framework '(.+?)' doesn't appear as inactive$\")\n     public void checkResources(String framework) throws Exception {\n-        sendRequestNoDataTable(\"GET\", \"/mesos/state-summary\", null, null, null, null, null, \"json\");\n-\n+        sendRequestNoDataTable(\"GET\",\n+            \"/mesos/state-summary\",\n+                null,\n+                    null,\n+                        null,\n+                            null,\n+                                null,\n+                                    \"json\");\n         String json = \"[\" + commonspec.getResponse().getResponse() + \"]\";\n         String parsedElement = \"$..frameworks[?(@.active==false)].name\";\n         String value = commonspec.getJSONPathString(json, parsedElement, null);\n-\n         Assertions.assertThat(value).as(\"Inactive frameworks\").doesNotContain(framework);\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 193
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "766",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "766",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}