{
    "error_id": "460",
    "information": {
        "errors": [
            {
                "line": "116",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 120).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        WorkerAttempt runningAttempt = worker.getRunningAttempt();\n        if(runningAttempt != null) {\n          context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n        }\n      }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/460/SlowChecker.java\nindex 78aea61c65..86f66e5d35 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/460/SlowChecker.java\n@@ -112,43 +112,42 @@ public class SlowChecker extends AbstractService {\n \n       if(worker.getAttempts().size() < worker.getMaxAttempts()) {\n         WorkerAttempt runningAttempt = worker.getRunningAttempt();\n-        if(runningAttempt != null) {\n-          context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n-        }\n+        if(runningAttempt != null) { context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n       }\n     }\n   }\n+}\n \n-  @Override\n-  protected void serviceInit(Configuration conf) throws Exception {\n-    if(slowCheckEnable) {\n-      String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n-        AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n-\n-      LOG.info(\"slow check policy list = \" + polices);\n-      String [] policyNames = polices.split(\",\");\n-      for(int i = 0; i < policyNames.length; i++) {\n-        Class<? extends CheckPolicy> policyClass =\n-          (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n-        Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n-        constructor.setAccessible(true);\n-        checkPolices.add(constructor.newInstance());\n-      }\n+@Override\n+protected void serviceInit(Configuration conf) throws Exception {\n+  if(slowCheckEnable) {\n+    String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n+      AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n+\n+    LOG.info(\"slow check policy list = \" + polices);\n+    String [] policyNames = polices.split(\",\");\n+    for(int i = 0; i < policyNames.length; i++) {\n+      Class<? extends CheckPolicy> policyClass =\n+        (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n+      Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n+      constructor.setAccessible(true);\n+      checkPolices.add(constructor.newInstance());\n     }\n   }\n+}\n \n-  @Override\n-  protected void serviceStop() throws Exception {\n-    if (stopped.getAndSet(true)) {\n-      return;\n-    }\n-    if (checker != null) {\n-      checker.interrupt();\n-      try {\n-        checker.join();\n-      } catch (InterruptedException ie) {\n-        LOG.warn(\"slow-checker interrupted while stopping\");\n-      }\n+@Override\n+protected void serviceStop() throws Exception {\n+  if (stopped.getAndSet(true)) {\n+    return;\n+  }\n+  if (checker != null) {\n+    checker.interrupt();\n+    try {\n+      checker.join();\n+    } catch (InterruptedException ie) {\n+      LOG.warn(\"slow-checker interrupted while stopping\");\n     }\n   }\n }\n+}\n",
            "diff_size": 33
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/460/SlowChecker.java\nindex 78aea61c65..55f3fc4c33 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/460/SlowChecker.java\n@@ -39,116 +39,124 @@ import java.util.concurrent.atomic.AtomicBoolean;\n  * Slow workers and pss checker.\n  */\n public class SlowChecker extends AbstractService {\n-  private static final Log LOG = LogFactory.getLog(SlowChecker.class);\n-  private final AMContext context;\n-\n-  /** check polices*/\n-  private final List<CheckPolicy> checkPolices;\n-\n-  /** enable checker or not */\n-  private final boolean slowCheckEnable;\n-  private AtomicBoolean stopped;\n-\n-  /** check interval in milliseconds*/\n-  private final int checkIntervalMs;\n-  private volatile Thread checker;\n-\n-  /**\n-   * Construct the service.\n-   */\n-  public SlowChecker(AMContext context) {\n-    super(\"slow-checker\");\n-    this.context = context;\n-    checkPolices = new ArrayList<>();\n-    slowCheckEnable = context.getConf().getBoolean(AngelConf.ANGEL_AM_SLOW_CHECK_ENABLE,\n-      AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_ENABLE);\n-    checkIntervalMs = context.getConf().getInt(AngelConf.ANGEL_AM_SLOW_CHECK_INTERVAL_MS,\n-      AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_INTERVAL_MS);\n-    stopped = new AtomicBoolean(false);\n-  }\n-\n-  @Override\n-  protected void serviceStart() throws Exception {\n-    LOG.info(\"slowCheckEnable = \" + slowCheckEnable + \", checkIntervalMs = \" + checkIntervalMs);\n-\n-    if(slowCheckEnable) {\n-      checker = new Thread(new Runnable() {\n-        @Override\n-        public void run() {\n-          LOG.info(\"start slow check thread\");\n-          int size = checkPolices.size();\n-          while(!stopped.get() && !Thread.interrupted()) {\n-            for(int i = 0; i < size; i++) {\n-              List<Id> slowItems = checkPolices.get(i).check(context);\n-              handleSlowItems(slowItems);\n-            }\n+    private static final Log LOG = LogFactory.getLog(SlowChecker.class);\n+    private final AMContext context;\n+\n+    /**\n+     * check polices\n+     */\n+    private final List<CheckPolicy> checkPolices;\n+\n+    /**\n+     * enable checker or not\n+     */\n+    private final boolean slowCheckEnable;\n+    private AtomicBoolean stopped;\n+\n+    /**\n+     * check interval in milliseconds\n+     */\n+    private final int checkIntervalMs;\n+    private volatile Thread checker;\n+\n+    /**\n+     * Construct the service.\n+     */\n+    public SlowChecker(AMContext context) {\n+        super(\"slow-checker\");\n+        this.context = context;\n+        checkPolices = new ArrayList<>();\n+        slowCheckEnable = context.getConf().getBoolean(AngelConf.ANGEL_AM_SLOW_CHECK_ENABLE,\n+                AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_ENABLE);\n+        checkIntervalMs = context.getConf().getInt(AngelConf.ANGEL_AM_SLOW_CHECK_INTERVAL_MS,\n+                AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_INTERVAL_MS);\n+        stopped = new AtomicBoolean(false);\n+    }\n \n-            try {\n-              Thread.sleep(checkIntervalMs);\n-            } catch (InterruptedException e) {\n-              LOG.warn(\"slow ps/worker checker is interrupted\");\n-            }\n-          }\n+    @Override\n+    protected void serviceStart() throws Exception {\n+        LOG.info(\"slowCheckEnable = \" + slowCheckEnable + \", checkIntervalMs = \" + checkIntervalMs);\n+\n+        if (slowCheckEnable) {\n+            checker = new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    LOG.info(\"start slow check thread\");\n+                    int size = checkPolices.size();\n+                    while (!stopped.get() && !Thread.interrupted()) {\n+                        for (int i = 0; i < size; i++) {\n+                            List<Id> slowItems = checkPolices.get(i).check(context);\n+                            handleSlowItems(slowItems);\n+                        }\n+\n+                        try {\n+                            Thread.sleep(checkIntervalMs);\n+                        } catch (InterruptedException e) {\n+                            LOG.warn(\"slow ps/worker checker is interrupted\");\n+                        }\n+                    }\n+                }\n+            });\n+            checker.setName(\"slow-checker\");\n+            checker.start();\n         }\n-      });\n-      checker.setName(\"slow-checker\");\n-      checker.start();\n-    }\n-  }\n-\n-  private void handleSlowItems(List<Id> slowItems) {\n-    if(slowItems != null && slowItems.isEmpty()) {\n-      int size = slowItems.size();\n-      for(int i = 0; i < size; i++) {\n-        handleSlowItem(slowItems.get(i));\n-      }\n     }\n-  }\n \n-  private void handleSlowItem(Id id) {\n-    LOG.info(\"slow item \" + id + \" is checked!!\");\n-    if(id instanceof WorkerId) {\n-      AMWorker worker = context.getWorkerManager().getWorker((WorkerId) id);\n-\n-      if(worker.getAttempts().size() < worker.getMaxAttempts()) {\n-        WorkerAttempt runningAttempt = worker.getRunningAttempt();\n-        if(runningAttempt != null) {\n-          context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n+    private void handleSlowItems(List<Id> slowItems) {\n+        if (slowItems != null && slowItems.isEmpty()) {\n+            int size = slowItems.size();\n+            for (int i = 0; i < size; i++) {\n+                handleSlowItem(slowItems.get(i));\n+            }\n         }\n-      }\n     }\n-  }\n-\n-  @Override\n-  protected void serviceInit(Configuration conf) throws Exception {\n-    if(slowCheckEnable) {\n-      String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n-        AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n-\n-      LOG.info(\"slow check policy list = \" + polices);\n-      String [] policyNames = polices.split(\",\");\n-      for(int i = 0; i < policyNames.length; i++) {\n-        Class<? extends CheckPolicy> policyClass =\n-          (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n-        Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n-        constructor.setAccessible(true);\n-        checkPolices.add(constructor.newInstance());\n-      }\n+\n+    private void handleSlowItem(Id id) {\n+        LOG.info(\"slow item \" + id + \" is checked!!\");\n+        if (id instanceof WorkerId) {\n+            AMWorker worker = context.getWorkerManager().getWorker((WorkerId) id);\n+\n+            if (worker.getAttempts().size() < worker.getMaxAttempts()) {\n+                WorkerAttempt runningAttempt = worker.getRunningAttempt();\n+                if (runningAttempt != null) {\n+                    context.getEventHandler()\n+                            .handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL,\n+                                    runningAttempt.getId()));\n+                }\n+            }\n+        }\n     }\n-  }\n \n-  @Override\n-  protected void serviceStop() throws Exception {\n-    if (stopped.getAndSet(true)) {\n-      return;\n+    @Override\n+    protected void serviceInit(Configuration conf) throws Exception {\n+        if (slowCheckEnable) {\n+            String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n+                    AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n+\n+            LOG.info(\"slow check policy list = \" + polices);\n+            String[] policyNames = polices.split(\",\");\n+            for (int i = 0; i < policyNames.length; i++) {\n+                Class<? extends CheckPolicy> policyClass =\n+                        (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n+                Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n+                constructor.setAccessible(true);\n+                checkPolices.add(constructor.newInstance());\n+            }\n+        }\n     }\n-    if (checker != null) {\n-      checker.interrupt();\n-      try {\n-        checker.join();\n-      } catch (InterruptedException ie) {\n-        LOG.warn(\"slow-checker interrupted while stopping\");\n-      }\n+\n+    @Override\n+    protected void serviceStop() throws Exception {\n+        if (stopped.getAndSet(true)) {\n+            return;\n+        }\n+        if (checker != null) {\n+            checker.interrupt();\n+            try {\n+                checker.join();\n+            } catch (InterruptedException ie) {\n+                LOG.warn(\"slow-checker interrupted while stopping\");\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 141
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/460/SlowChecker.java\nindex 78aea61c65..50461582b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/460/SlowChecker.java\n@@ -62,23 +62,23 @@ public class SlowChecker extends AbstractService {\n     checkPolices = new ArrayList<>();\n     slowCheckEnable = context.getConf().getBoolean(AngelConf.ANGEL_AM_SLOW_CHECK_ENABLE,\n       AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_ENABLE);\n-    checkIntervalMs = context.getConf().getInt(AngelConf.ANGEL_AM_SLOW_CHECK_INTERVAL_MS,\n+checkIntervalMs = context.getConf().getInt(AngelConf.ANGEL_AM_SLOW_CHECK_INTERVAL_MS,\n       AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_INTERVAL_MS);\n-    stopped = new AtomicBoolean(false);\n+stopped = new AtomicBoolean(false);\n   }\n \n   @Override\n   protected void serviceStart() throws Exception {\n     LOG.info(\"slowCheckEnable = \" + slowCheckEnable + \", checkIntervalMs = \" + checkIntervalMs);\n \n-    if(slowCheckEnable) {\n+    if (slowCheckEnable) {\n       checker = new Thread(new Runnable() {\n         @Override\n         public void run() {\n           LOG.info(\"start slow check thread\");\n           int size = checkPolices.size();\n-          while(!stopped.get() && !Thread.interrupted()) {\n-            for(int i = 0; i < size; i++) {\n+          while (!stopped.get() && !Thread.interrupted()) {\n+            for (int i = 0; i < size; i++) {\n               List<Id> slowItems = checkPolices.get(i).check(context);\n               handleSlowItems(slowItems);\n             }\n@@ -99,7 +99,7 @@ public class SlowChecker extends AbstractService {\n   private void handleSlowItems(List<Id> slowItems) {\n     if(slowItems != null && slowItems.isEmpty()) {\n       int size = slowItems.size();\n-      for(int i = 0; i < size; i++) {\n+      for (int i = 0; i < size; i++) {\n         handleSlowItem(slowItems.get(i));\n       }\n     }\n@@ -107,12 +107,12 @@ public class SlowChecker extends AbstractService {\n \n   private void handleSlowItem(Id id) {\n     LOG.info(\"slow item \" + id + \" is checked!!\");\n-    if(id instanceof WorkerId) {\n+    if (id instanceof WorkerId) {\n       AMWorker worker = context.getWorkerManager().getWorker((WorkerId) id);\n \n-      if(worker.getAttempts().size() < worker.getMaxAttempts()) {\n+      if (worker.getAttempts().size() < worker.getMaxAttempts()) {\n         WorkerAttempt runningAttempt = worker.getRunningAttempt();\n-        if(runningAttempt != null) {\n+        if (runningAttempt != null) {\n           context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n         }\n       }\n@@ -126,11 +126,10 @@ public class SlowChecker extends AbstractService {\n         AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n \n       LOG.info(\"slow check policy list = \" + polices);\n-      String [] policyNames = polices.split(\",\");\n-      for(int i = 0; i < policyNames.length; i++) {\n-        Class<? extends CheckPolicy> policyClass =\n-          (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n-        Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n+      String[] policyNames = polices.split(\",\");\n+      for (int i = 0; i < policyNames.length; i++) {\n+        Class<? extends CheckPolicy> policyClass = (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n+Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n         constructor.setAccessible(true);\n         checkPolices.add(constructor.newInstance());\n       }\n@@ -151,4 +150,4 @@ public class SlowChecker extends AbstractService {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 46.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 49.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 53.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 60.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/460/SlowChecker.java\nindex 78aea61c65..9c8ecc966f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/460/SlowChecker.java\n@@ -29,7 +29,6 @@ import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.service.AbstractService;\n-\n import java.lang.reflect.Constructor;\n import java.util.ArrayList;\n import java.util.List;\n@@ -38,117 +37,117 @@ import java.util.concurrent.atomic.AtomicBoolean;\n /**\n  * Slow workers and pss checker.\n  */\n+\n public class SlowChecker extends AbstractService {\n-  private static final Log LOG = LogFactory.getLog(SlowChecker.class);\n-  private final AMContext context;\n+    private static final Log LOG = LogFactory.getLog(SlowChecker.class);\n+    private final AMContext context;\n \n   /** check polices*/\n-  private final List<CheckPolicy> checkPolices;\n+    private final List<CheckPolicy> checkPolices;\n \n   /** enable checker or not */\n-  private final boolean slowCheckEnable;\n-  private AtomicBoolean stopped;\n+    private final boolean slowCheckEnable;\n+    private AtomicBoolean stopped;\n \n   /** check interval in milliseconds*/\n-  private final int checkIntervalMs;\n-  private volatile Thread checker;\n+    private final int checkIntervalMs;\n+    private volatile Thread checker;\n \n   /**\n    * Construct the service.\n    */\n-  public SlowChecker(AMContext context) {\n+\n+    public SlowChecker(AMContext context) {\n     super(\"slow-checker\");\n     this.context = context;\n     checkPolices = new ArrayList<>();\n-    slowCheckEnable = context.getConf().getBoolean(AngelConf.ANGEL_AM_SLOW_CHECK_ENABLE,\n-      AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_ENABLE);\n-    checkIntervalMs = context.getConf().getInt(AngelConf.ANGEL_AM_SLOW_CHECK_INTERVAL_MS,\n-      AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_INTERVAL_MS);\n+    slowCheckEnable = context.getConf().getBoolean(AngelConf.ANGEL_AM_SLOW_CHECK_ENABLE, AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_ENABLE);\n+    checkIntervalMs = context.getConf().getInt(\n+                                           AngelConf.ANGEL_AM_SLOW_CHECK_INTERVAL_MS,\n+                                           AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_INTERVAL_MS);\n     stopped = new AtomicBoolean(false);\n-  }\n+    }\n \n-  @Override\n-  protected void serviceStart() throws Exception {\n+    @Override\n+    protected void serviceStart() throws Exception {\n     LOG.info(\"slowCheckEnable = \" + slowCheckEnable + \", checkIntervalMs = \" + checkIntervalMs);\n+    if (slowCheckEnable) {\n+        checker = new Thread(new Runnable() {\n+\n+\n+                             @Override\n+                             public void run() {\n+                                 LOG.info(\"start slow check thread\");\n+\n+                                 int size = checkPolices.size();\n+                                 while (!stopped.get() && !Thread.interrupted()) {\n+                                 for (int i = 0; i < size; i++) {\n+                                                                                     List<Id> slowItems = checkPolices.get(i).check(context);\n+                                                                                     handleSlowItems(slowItems);\n+                                 }\n+                                 try {\n+                                                                                     Thread.sleep(checkIntervalMs);\n+                                 } catch (InterruptedException e) {\n+                                   LOG.warn(\"slow ps/worker checker is interrupted\");\n+                                 }\n+                                 }\n+                             }\n+        });\n+        checker.setName(\"slow-checker\");\n+        checker.start();\n+    }\n+    }\n \n-    if(slowCheckEnable) {\n-      checker = new Thread(new Runnable() {\n-        @Override\n-        public void run() {\n-          LOG.info(\"start slow check thread\");\n-          int size = checkPolices.size();\n-          while(!stopped.get() && !Thread.interrupted()) {\n-            for(int i = 0; i < size; i++) {\n-              List<Id> slowItems = checkPolices.get(i).check(context);\n-              handleSlowItems(slowItems);\n-            }\n-\n-            try {\n-              Thread.sleep(checkIntervalMs);\n-            } catch (InterruptedException e) {\n-              LOG.warn(\"slow ps/worker checker is interrupted\");\n-            }\n-          }\n+    private void handleSlowItems(List<Id> slowItems) {\n+    if (slowItems != null && slowItems.isEmpty()) {\n+        int size = slowItems.size();\n+        for (int i = 0; i < size; i++) {\n+                                                      handleSlowItem(slowItems.get(i));\n         }\n-      });\n-      checker.setName(\"slow-checker\");\n-      checker.start();\n     }\n-  }\n-\n-  private void handleSlowItems(List<Id> slowItems) {\n-    if(slowItems != null && slowItems.isEmpty()) {\n-      int size = slowItems.size();\n-      for(int i = 0; i < size; i++) {\n-        handleSlowItem(slowItems.get(i));\n-      }\n     }\n-  }\n \n-  private void handleSlowItem(Id id) {\n+    private void handleSlowItem(Id id) {\n     LOG.info(\"slow item \" + id + \" is checked!!\");\n-    if(id instanceof WorkerId) {\n-      AMWorker worker = context.getWorkerManager().getWorker((WorkerId) id);\n-\n-      if(worker.getAttempts().size() < worker.getMaxAttempts()) {\n+    if (id instanceof WorkerId) {\n+        AMWorker worker = context.getWorkerManager().getWorker((WorkerId) id);\n+        if (worker.getAttempts().size() < worker.getMaxAttempts()) {\n         WorkerAttempt runningAttempt = worker.getRunningAttempt();\n-        if(runningAttempt != null) {\n-          context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n+        if (runningAttempt != null) {\n+            context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n+        }\n         }\n-      }\n     }\n-  }\n-\n-  @Override\n-  protected void serviceInit(Configuration conf) throws Exception {\n-    if(slowCheckEnable) {\n-      String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n-        AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n-\n-      LOG.info(\"slow check policy list = \" + polices);\n-      String [] policyNames = polices.split(\",\");\n-      for(int i = 0; i < policyNames.length; i++) {\n-        Class<? extends CheckPolicy> policyClass =\n-          (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n-        Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n-        constructor.setAccessible(true);\n-        checkPolices.add(constructor.newInstance());\n-      }\n     }\n-  }\n \n-  @Override\n-  protected void serviceStop() throws Exception {\n+    @Override\n+    protected void serviceInit(Configuration conf) throws Exception {\n+    if (slowCheckEnable) {\n+        String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES, AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n+        LOG.info(\"slow check policy list = \" + polices);\n+        String[] policyNames = polices.split(\",\");\n+        for (int i = 0; i < policyNames.length; i++) {\n+                             Class<? extends CheckPolicy> policyClass = (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n+                             Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n+                             constructor.setAccessible(true);\n+                             checkPolices.add(constructor.newInstance());\n+        }\n+    }\n+    }\n+\n+    @Override\n+    protected void serviceStop() throws Exception {\n     if (stopped.getAndSet(true)) {\n-      return;\n+        return;\n     }\n+\n     if (checker != null) {\n-      checker.interrupt();\n-      try {\n-        checker.join();\n-      } catch (InterruptedException ie) {\n-        LOG.warn(\"slow-checker interrupted while stopping\");\n-      }\n+        checker.interrupt();\n+        try {\n+                             checker.join();\n+        } catch (InterruptedException ie) {\n+          LOG.warn(\"slow-checker interrupted while stopping\");\n+        }\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 129
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/460/SlowChecker.java\nindex 78aea61c65..b89c19f4ac 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/460/SlowChecker.java\n@@ -113,42 +113,42 @@ public class SlowChecker extends AbstractService {\n       if(worker.getAttempts().size() < worker.getMaxAttempts()) {\n         WorkerAttempt runningAttempt = worker.getRunningAttempt();\n         if(runningAttempt != null) {\n-          context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n-        }\n+          context.getEventHandler().handle(newWorkerAttemptEvent(WorkerAttemptEventType .KILL,runningAttempt.getId(\n+        ) ) ) ;\n+            } } }\n       }\n-    }\n-  }\n \n-  @Override\n-  protected void serviceInit(Configuration conf) throws Exception {\n-    if(slowCheckEnable) {\n-      String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n-        AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n-\n-      LOG.info(\"slow check policy list = \" + polices);\n-      String [] policyNames = polices.split(\",\");\n-      for(int i = 0; i < policyNames.length; i++) {\n-        Class<? extends CheckPolicy> policyClass =\n-          (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n-        Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n-        constructor.setAccessible(true);\n-        checkPolices.add(constructor.newInstance());\n+      @Override\n+      protected void serviceInit(Configuration conf) throws Exception {\n+        if(slowCheckEnable) {\n+          String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n+            AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n+\n+          LOG.info(\"slow check policy list = \" + polices);\n+          String [] policyNames = polices.split(\",\");\n+          for(int i = 0; i < policyNames.length; i++) {\n+            Class<? extends CheckPolicy> policyClass =\n+              (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n+            Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n+            constructor.setAccessible(true);\n+            checkPolices.add(constructor.newInstance());\n+          }\n+        }\n       }\n-    }\n-  }\n \n-  @Override\n-  protected void serviceStop() throws Exception {\n-    if (stopped.getAndSet(true)) {\n-      return;\n-    }\n-    if (checker != null) {\n-      checker.interrupt();\n-      try {\n-        checker.join();\n-      } catch (InterruptedException ie) {\n-        LOG.warn(\"slow-checker interrupted while stopping\");\n+      @Override\n+      protected void serviceStop() throws Exception {\n+        if (stopped.getAndSet(true)) {\n+          return;\n+        }\n+        if (checker != null) {\n+          checker.interrupt();\n+          try {\n+            checker.join();\n+          } catch (InterruptedException ie) {\n+            LOG.warn(\"slow-checker interrupted while stopping\");\n+          }\n+        }\n       }\n     }\n-  }\n-}\n+    \n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/460/SlowChecker.java\nindex 78aea61c65..86f66e5d35 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/460/SlowChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/460/SlowChecker.java\n@@ -112,43 +112,42 @@ public class SlowChecker extends AbstractService {\n \n       if(worker.getAttempts().size() < worker.getMaxAttempts()) {\n         WorkerAttempt runningAttempt = worker.getRunningAttempt();\n-        if(runningAttempt != null) {\n-          context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n-        }\n+        if(runningAttempt != null) { context.getEventHandler().handle(new WorkerAttemptEvent(WorkerAttemptEventType.KILL, runningAttempt.getId()));\n       }\n     }\n   }\n+}\n \n-  @Override\n-  protected void serviceInit(Configuration conf) throws Exception {\n-    if(slowCheckEnable) {\n-      String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n-        AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n-\n-      LOG.info(\"slow check policy list = \" + polices);\n-      String [] policyNames = polices.split(\",\");\n-      for(int i = 0; i < policyNames.length; i++) {\n-        Class<? extends CheckPolicy> policyClass =\n-          (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n-        Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n-        constructor.setAccessible(true);\n-        checkPolices.add(constructor.newInstance());\n-      }\n+@Override\n+protected void serviceInit(Configuration conf) throws Exception {\n+  if(slowCheckEnable) {\n+    String polices = conf.get(AngelConf.ANGEL_AM_SLOW_CHECK_POLICES,\n+      AngelConf.DEFAULT_ANGEL_AM_SLOW_CHECK_POLICES);\n+\n+    LOG.info(\"slow check policy list = \" + polices);\n+    String [] policyNames = polices.split(\",\");\n+    for(int i = 0; i < policyNames.length; i++) {\n+      Class<? extends CheckPolicy> policyClass =\n+        (Class<? extends CheckPolicy>) Class.forName(policyNames[i]);\n+      Constructor<? extends CheckPolicy> constructor = policyClass.getConstructor();\n+      constructor.setAccessible(true);\n+      checkPolices.add(constructor.newInstance());\n     }\n   }\n+}\n \n-  @Override\n-  protected void serviceStop() throws Exception {\n-    if (stopped.getAndSet(true)) {\n-      return;\n-    }\n-    if (checker != null) {\n-      checker.interrupt();\n-      try {\n-        checker.join();\n-      } catch (InterruptedException ie) {\n-        LOG.warn(\"slow-checker interrupted while stopping\");\n-      }\n+@Override\n+protected void serviceStop() throws Exception {\n+  if (stopped.getAndSet(true)) {\n+    return;\n+  }\n+  if (checker != null) {\n+    checker.interrupt();\n+    try {\n+      checker.join();\n+    } catch (InterruptedException ie) {\n+      LOG.warn(\"slow-checker interrupted while stopping\");\n     }\n   }\n }\n+}\n",
            "diff_size": 33
        }
    ]
}