{
    "error_id": "463",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/463/ServerRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/463/ServerRow.java\nindex 7dc7776419..0511e4b972 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/463/ServerRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/463/ServerRow.java\n@@ -32,214 +32,214 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;\n  * ServerRow is the storage unit at PS Server when using RowBlock as storage format. Each Row from\n  * worker is split among multiple PS Servers. Therefore, we need startCol and endCol to clarify the\n  * position of this ServerRow.\n- *\n  */\n public abstract class ServerRow implements Serialize {\n-  private static final Log LOG = LogFactory.getLog(ServerRow.class);\n-  protected int clock;\n-  protected int rowId;\n-  protected long endCol;\n-  protected long startCol;\n-  protected int rowVersion;\n-  protected final ReentrantReadWriteLock lock;\n-\n-  /**\n-   * Create a new Server row.\n-   *\n-   * @param rowId    the row id\n-   * @param startCol the start col\n-   * @param endCol   the end col\n-   */\n-  public ServerRow(int rowId, long startCol, long endCol) {\n-    this.rowId = rowId;\n-    this.startCol = startCol;\n-    this.endCol = endCol;\n-    this.rowVersion = 0;\n-    this.lock = new ReentrantReadWriteLock();\n-  }\n-\n-  public ServerRow() {\n-    this(0, 0, 0);\n-  }\n-\n-  /**\n-   * Gets row type.\n-   *\n-   * @return the row type\n-   */\n-  public abstract MLProtos.RowType getRowType();\n-\n-  /**\n-   * Update row data\n-   *\n-   * @param rowType the row type\n-   * @param buf     the buf\n-   * @param size    the size\n-   */\n-  public abstract void update(RowType rowType, ByteBuf buf, int size);\n-\n-  /**\n-   * Write row to output\n-   *\n-   * @param output the output\n-   * @throws IOException\n-   */\n-  protected void writeTo(DataOutputStream output) throws IOException{\n-    output.writeInt(clock);\n-  }\n-\n-  /**\n-   * Read row from input\n-   *\n-   * @param input the input\n-   * @throws IOException\n-   */\n-  protected void readFrom(DataInputStream input) throws IOException{\n-    clock = input.readInt();\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    buf.writeInt(rowId);\n-    buf.writeInt(clock);\n-    buf.writeLong(startCol);\n-    buf.writeLong(endCol);\n-    buf.writeInt(rowVersion);\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    rowId = buf.readInt();\n-    clock = buf.readInt();\n-    startCol = buf.readLong();\n-    endCol = buf.readLong();\n-    rowVersion = buf.readInt();\n-  }\n-\n-  /**\n-   * Gets row size.\n-   *\n-   * @return the size\n-   */\n-  public abstract int size();\n-\n-  @Override\n-  public int bufferLen() {\n-    return 20;\n-  }\n-\n-  /**\n-   * Update row version.\n-   */\n-  protected void updateRowVersion() {\n-    rowVersion++;\n-  }\n-\n-  /**\n-   * Encode row.\n-   *\n-   * @param in  the in\n-   * @param out the out\n-   * @param len the len\n-   */\n-  public void encode(ByteBuf in, ByteBuf out, int len) {\n-\n-  }\n-\n-  /**\n-   * Gets row id.\n-   *\n-   * @return the row id\n-   */\n-  public int getRowId() {\n-    return rowId;\n-  }\n-\n-  /**\n-   * Gets end col.\n-   *\n-   * @return the end col\n-   */\n-  public long getEndCol() {\n-    return endCol;\n-  }\n-\n-  /**\n-   * Gets start col.\n-   *\n-   * @return the start col\n-   */\n-  public long getStartCol() {\n-    return startCol;\n-  }\n-\n-  /**\n-   * Gets row version.\n-   *\n-   * @return the row version\n-   */\n-  public int getRowVersion() {\n-    return rowVersion;\n-  }\n-\n-  /**\n-   * Gets row lock.\n-   *\n-   * @return the lock\n-   */\n-  public ReentrantReadWriteLock getLock() {\n-    return lock;\n-  }\n-\n-  /**\n-   * Gets clock.\n-   *\n-   * @return the clock\n-   */\n-  public int getClock() {\n-    return clock;\n-  }\n-\n-\n-  /**\n-   * Sets row version.\n-   *\n-   * @param rowVersion the row version\n-   */\n-  public void setRowVersion(int rowVersion) {\n-    this.rowVersion = rowVersion;\n-  }\n-\n-  /**\n-   * Sets start col.\n-   *\n-   * @param startCol the start col\n-   */\n-  public void setStartCol(int startCol) {\n-    this.startCol = startCol;\n-  }\n-\n-  /**\n-   * Sets end col.\n-   *\n-   * @param endCol the end col\n-   */\n-  public void setEndCol(int endCol) {\n-    this.endCol = endCol;\n-  }\n-\n-  /**\n-   * Sets clock.\n-   *\n-   * @param clock the clock\n-   */\n-  public void setClock(int clock) {\n-    this.clock = clock;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol + \", startCol=\"\n-        + startCol + \", rowVersion=\" + rowVersion + \"]\";\n-  }\n+    private static final Log LOG = LogFactory.getLog(ServerRow.class);\n+    protected int clock;\n+    protected int rowId;\n+    protected long endCol;\n+    protected long startCol;\n+    protected int rowVersion;\n+    protected final ReentrantReadWriteLock lock;\n+\n+    /**\n+     * Create a new Server row.\n+     *\n+     * @param rowId    the row id\n+     * @param startCol the start col\n+     * @param endCol   the end col\n+     */\n+    public ServerRow(int rowId, long startCol, long endCol) {\n+        this.rowId = rowId;\n+        this.startCol = startCol;\n+        this.endCol = endCol;\n+        this.rowVersion = 0;\n+        this.lock = new ReentrantReadWriteLock();\n+    }\n+\n+    public ServerRow() {\n+        this(0, 0, 0);\n+    }\n+\n+    /**\n+     * Gets row type.\n+     *\n+     * @return the row type\n+     */\n+    public abstract MLProtos.RowType getRowType();\n+\n+    /**\n+     * Update row data\n+     *\n+     * @param rowType the row type\n+     * @param buf     the buf\n+     * @param size    the size\n+     */\n+    public abstract void update(RowType rowType, ByteBuf buf, int size);\n+\n+    /**\n+     * Write row to output\n+     *\n+     * @param output the output\n+     * @throws IOException\n+     */\n+    protected void writeTo(DataOutputStream output) throws IOException {\n+        output.writeInt(clock);\n+    }\n+\n+    /**\n+     * Read row from input\n+     *\n+     * @param input the input\n+     * @throws IOException\n+     */\n+    protected void readFrom(DataInputStream input) throws IOException {\n+        clock = input.readInt();\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        buf.writeInt(rowId);\n+        buf.writeInt(clock);\n+        buf.writeLong(startCol);\n+        buf.writeLong(endCol);\n+        buf.writeInt(rowVersion);\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        rowId = buf.readInt();\n+        clock = buf.readInt();\n+        startCol = buf.readLong();\n+        endCol = buf.readLong();\n+        rowVersion = buf.readInt();\n+    }\n+\n+    /**\n+     * Gets row size.\n+     *\n+     * @return the size\n+     */\n+    public abstract int size();\n+\n+    @Override\n+    public int bufferLen() {\n+        return 20;\n+    }\n+\n+    /**\n+     * Update row version.\n+     */\n+    protected void updateRowVersion() {\n+        rowVersion++;\n+    }\n+\n+    /**\n+     * Encode row.\n+     *\n+     * @param in  the in\n+     * @param out the out\n+     * @param len the len\n+     */\n+    public void encode(ByteBuf in, ByteBuf out, int len) {\n+\n+    }\n+\n+    /**\n+     * Gets row id.\n+     *\n+     * @return the row id\n+     */\n+    public int getRowId() {\n+        return rowId;\n+    }\n+\n+    /**\n+     * Gets end col.\n+     *\n+     * @return the end col\n+     */\n+    public long getEndCol() {\n+        return endCol;\n+    }\n+\n+    /**\n+     * Gets start col.\n+     *\n+     * @return the start col\n+     */\n+    public long getStartCol() {\n+        return startCol;\n+    }\n+\n+    /**\n+     * Gets row version.\n+     *\n+     * @return the row version\n+     */\n+    public int getRowVersion() {\n+        return rowVersion;\n+    }\n+\n+    /**\n+     * Gets row lock.\n+     *\n+     * @return the lock\n+     */\n+    public ReentrantReadWriteLock getLock() {\n+        return lock;\n+    }\n+\n+    /**\n+     * Gets clock.\n+     *\n+     * @return the clock\n+     */\n+    public int getClock() {\n+        return clock;\n+    }\n+\n+\n+    /**\n+     * Sets row version.\n+     *\n+     * @param rowVersion the row version\n+     */\n+    public void setRowVersion(int rowVersion) {\n+        this.rowVersion = rowVersion;\n+    }\n+\n+    /**\n+     * Sets start col.\n+     *\n+     * @param startCol the start col\n+     */\n+    public void setStartCol(int startCol) {\n+        this.startCol = startCol;\n+    }\n+\n+    /**\n+     * Sets end col.\n+     *\n+     * @param endCol the end col\n+     */\n+    public void setEndCol(int endCol) {\n+        this.endCol = endCol;\n+    }\n+\n+    /**\n+     * Sets clock.\n+     *\n+     * @param clock the clock\n+     */\n+    public void setClock(int clock) {\n+        this.clock = clock;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol +\n+                \", startCol=\"\n+                + startCol + \", rowVersion=\" + rowVersion + \"]\";\n+    }\n }\n",
            "diff_size": 209
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/463/ServerRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/463/ServerRow.java\nindex 7dc7776419..5086774d22 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/463/ServerRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/463/ServerRow.java\n@@ -36,7 +36,8 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;\n  */\n public abstract class ServerRow implements Serialize {\n   private static final Log LOG = LogFactory.getLog(ServerRow.class);\n-  protected int clock;\n+\n+protected int clock;\n   protected int rowId;\n   protected long endCol;\n   protected long startCol;\n@@ -84,7 +85,7 @@ public abstract class ServerRow implements Serialize {\n    * @param output the output\n    * @throws IOException\n    */\n-  protected void writeTo(DataOutputStream output) throws IOException{\n+  protected void writeTo(DataOutputStream output) throws IOException {\n     output.writeInt(clock);\n   }\n \n@@ -94,7 +95,7 @@ public abstract class ServerRow implements Serialize {\n    * @param input the input\n    * @throws IOException\n    */\n-  protected void readFrom(DataInputStream input) throws IOException{\n+  protected void readFrom(DataInputStream input) throws IOException {\n     clock = input.readInt();\n   }\n \n@@ -242,4 +243,4 @@ public abstract class ServerRow implements Serialize {\n     return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol + \", startCol=\"\n         + startCol + \", rowVersion=\" + rowVersion + \"]\";\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 54.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 72.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 82.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 90.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 101.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 129.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 140.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 152.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 160.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 170.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 180.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 190.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 200.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 210.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 221.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 231.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 241.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 251.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "257",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/463/ServerRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/463/ServerRow.java\nindex 7dc7776419..03d9b2637e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/463/ServerRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/463/ServerRow.java\n@@ -22,7 +22,6 @@ import com.tencent.angel.protobuf.generated.MLProtos.RowType;\n import io.netty.buffer.ByteBuf;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -34,14 +33,15 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;\n  * position of this ServerRow.\n  *\n  */\n+\n public abstract class ServerRow implements Serialize {\n-  private static final Log LOG = LogFactory.getLog(ServerRow.class);\n-  protected int clock;\n-  protected int rowId;\n-  protected long endCol;\n-  protected long startCol;\n-  protected int rowVersion;\n-  protected final ReentrantReadWriteLock lock;\n+    private static final Log LOG = LogFactory.getLog(ServerRow.class);\n+    protected int clock;\n+    protected int rowId;\n+    protected long endCol;\n+    protected long startCol;\n+    protected int rowVersion;\n+    protected final ReentrantReadWriteLock lock;\n \n   /**\n    * Create a new Server row.\n@@ -50,24 +50,26 @@ public abstract class ServerRow implements Serialize {\n    * @param startCol the start col\n    * @param endCol   the end col\n    */\n-  public ServerRow(int rowId, long startCol, long endCol) {\n+\n+    public ServerRow(int rowId, long startCol, long endCol) {\n     this.rowId = rowId;\n     this.startCol = startCol;\n     this.endCol = endCol;\n     this.rowVersion = 0;\n     this.lock = new ReentrantReadWriteLock();\n-  }\n+    }\n \n-  public ServerRow() {\n+    public ServerRow() {\n     this(0, 0, 0);\n-  }\n+    }\n \n   /**\n    * Gets row type.\n    *\n    * @return the row type\n    */\n-  public abstract MLProtos.RowType getRowType();\n+\n+    public abstract MLProtos.RowType getRowType();\n \n   /**\n    * Update row data\n@@ -76,7 +78,8 @@ public abstract class ServerRow implements Serialize {\n    * @param buf     the buf\n    * @param size    the size\n    */\n-  public abstract void update(RowType rowType, ByteBuf buf, int size);\n+\n+    public abstract void update(RowType rowType, ByteBuf buf, int size);\n \n   /**\n    * Write row to output\n@@ -84,9 +87,9 @@ public abstract class ServerRow implements Serialize {\n    * @param output the output\n    * @throws IOException\n    */\n-  protected void writeTo(DataOutputStream output) throws IOException{\n+    protected void writeTo(DataOutputStream output) throws IOException {\n     output.writeInt(clock);\n-  }\n+    }\n \n   /**\n    * Read row from input\n@@ -94,46 +97,49 @@ public abstract class ServerRow implements Serialize {\n    * @param input the input\n    * @throws IOException\n    */\n-  protected void readFrom(DataInputStream input) throws IOException{\n+\n+    protected void readFrom(DataInputStream input) throws IOException {\n     clock = input.readInt();\n-  }\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n+    @Override\n+    public void serialize(ByteBuf buf) {\n     buf.writeInt(rowId);\n     buf.writeInt(clock);\n     buf.writeLong(startCol);\n     buf.writeLong(endCol);\n     buf.writeInt(rowVersion);\n-  }\n+    }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n     rowId = buf.readInt();\n     clock = buf.readInt();\n     startCol = buf.readLong();\n     endCol = buf.readLong();\n     rowVersion = buf.readInt();\n-  }\n+    }\n \n   /**\n    * Gets row size.\n    *\n    * @return the size\n    */\n-  public abstract int size();\n \n-  @Override\n-  public int bufferLen() {\n+    public abstract int size();\n+\n+    @Override\n+    public int bufferLen() {\n     return 20;\n-  }\n+    }\n \n   /**\n    * Update row version.\n    */\n-  protected void updateRowVersion() {\n+\n+    protected void updateRowVersion() {\n     rowVersion++;\n-  }\n+    }\n \n   /**\n    * Encode row.\n@@ -142,63 +148,68 @@ public abstract class ServerRow implements Serialize {\n    * @param out the out\n    * @param len the len\n    */\n-  public void encode(ByteBuf in, ByteBuf out, int len) {\n \n-  }\n+    public void encode(ByteBuf in, ByteBuf out, int len) {}\n \n   /**\n    * Gets row id.\n    *\n    * @return the row id\n    */\n-  public int getRowId() {\n+\n+    public int getRowId() {\n     return rowId;\n-  }\n+    }\n \n   /**\n    * Gets end col.\n    *\n    * @return the end col\n    */\n-  public long getEndCol() {\n+\n+    public long getEndCol() {\n     return endCol;\n-  }\n+    }\n \n   /**\n    * Gets start col.\n    *\n    * @return the start col\n    */\n-  public long getStartCol() {\n+\n+    public long getStartCol() {\n     return startCol;\n-  }\n+    }\n \n   /**\n    * Gets row version.\n    *\n    * @return the row version\n    */\n-  public int getRowVersion() {\n+\n+    public int getRowVersion() {\n     return rowVersion;\n-  }\n+    }\n \n   /**\n    * Gets row lock.\n    *\n    * @return the lock\n    */\n-  public ReentrantReadWriteLock getLock() {\n+\n+    public ReentrantReadWriteLock getLock() {\n     return lock;\n-  }\n+    }\n \n   /**\n    * Gets clock.\n    *\n    * @return the clock\n    */\n-  public int getClock() {\n+\n+    public int getClock() {\n     return clock;\n-  }\n+    }\n \n \n   /**\n@@ -206,40 +217,44 @@ public abstract class ServerRow implements Serialize {\n    *\n    * @param rowVersion the row version\n    */\n-  public void setRowVersion(int rowVersion) {\n+\n+    public void setRowVersion(int rowVersion) {\n     this.rowVersion = rowVersion;\n-  }\n+    }\n \n   /**\n    * Sets start col.\n    *\n    * @param startCol the start col\n    */\n-  public void setStartCol(int startCol) {\n+\n+    public void setStartCol(int startCol) {\n     this.startCol = startCol;\n-  }\n+    }\n \n   /**\n    * Sets end col.\n    *\n    * @param endCol the end col\n    */\n-  public void setEndCol(int endCol) {\n+\n+    public void setEndCol(int endCol) {\n     this.endCol = endCol;\n-  }\n+    }\n \n   /**\n    * Sets clock.\n    *\n    * @param clock the clock\n    */\n-  public void setClock(int clock) {\n+\n+    public void setClock(int clock) {\n     this.clock = clock;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol + \", startCol=\"\n-        + startCol + \", rowVersion=\" + rowVersion + \"]\";\n-  }\n-}\n+    }\n+\n+    @Override\n+    public String toString() {\n+    return \"ServerRow [rowId=\" + rowId + \", clock=\" + clock + \", endCol=\" + endCol + \", startCol=\" + startCol + \", rowVersion=\" + rowVersion + \"]\";\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 77
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}