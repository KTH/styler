{
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public final class ProcessHelper {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n\n    private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/11/ProcessHelper.java\nindex bb3d07e280..a8e232ba26 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/11/ProcessHelper.java\n@@ -29,7 +29,7 @@ import org.slf4j.LoggerFactory;\n  */\n public final class ProcessHelper {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n \n     private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/11/ProcessHelper.java\nindex bb3d07e280..14ca1ec3ec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/11/ProcessHelper.java\n@@ -29,7 +29,7 @@ import org.slf4j.LoggerFactory;\n  */\n public final class ProcessHelper {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n \n     private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n \n@@ -37,23 +37,23 @@ public final class ProcessHelper {\n     }\n \n     public static boolean executeProgram(String programPath, boolean executeInBackground, int successExitValue,\n-            OutputStream outputStream) {\n+                                         OutputStream outputStream) {\n         return executeProgram(programPath, null, executeInBackground, successExitValue, outputStream);\n     }\n \n     public static boolean executeProgram(String programPath, String workingDirectory, boolean executeInBackground,\n-            int successExitValue, OutputStream outputStream) {\n+                                         int successExitValue, OutputStream outputStream) {\n         CommandLine commandLine = new CommandLine(programPath);\n         return executeProgram(commandLine, workingDirectory, executeInBackground, successExitValue, outputStream);\n     }\n \n     public static boolean executeProgram(CommandLine commandLine, boolean executeInBackground, int successExitValue,\n-            OutputStream outputStream) {\n+                                         OutputStream outputStream) {\n         return executeProgram(commandLine, null, executeInBackground, successExitValue, outputStream);\n     }\n \n     public static boolean executeProgram(CommandLine commandLine, String workingDirectory, boolean executeInBackground,\n-            int successExitValue, OutputStream outputStream) {\n+                                         int successExitValue, OutputStream outputStream) {\n         long printJobTimeout = PRINT_JOB_TIMEOUT;\n \n         ExecuteStreamHandler streamHandler = null;\n@@ -65,7 +65,7 @@ public final class ProcessHelper {\n         try {\n             LOG.debug(String.format(\"Preparing to start process %s\", commandLine.toString()));\n             printResult = executeProgram(commandLine, workingDirectory, printJobTimeout, executeInBackground,\n-                    successExitValue, streamHandler);\n+                successExitValue, streamHandler);\n             LOG.debug(String.format(\"Successfully start process %s\", commandLine.toString()));\n         } catch (Exception ex) {\n             LOG.trace(String.format(\"Problem during starting process %s\", commandLine.toString()), ex);\n@@ -90,37 +90,31 @@ public final class ProcessHelper {\n     }\n \n     /**\n-     *\n-     * @param printJobTimeout\n-     *            the printJobTimeout (ms) before the watchdog terminates the print\n-     *            process\n-     * @param printInBackground\n-     *            printing done in the background or blocking\n+     * @param printJobTimeout   the printJobTimeout (ms) before the watchdog terminates the print\n+     *                          process\n+     * @param printInBackground printing done in the background or blocking\n      * @param streamHandler\n      * @return a print result handler (implementing a future)\n-     * @throws IOException\n-     *             the test failed\n+     * @throws IOException the test failed\n      */\n     public static PrintResultHandler executeProgram(CommandLine commandLine, long printJobTimeout,\n-            boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler) throws IOException {\n+                                                    boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler)\n+        throws IOException {\n         return executeProgram(commandLine, null, printJobTimeout, printInBackground, successExitValue, streamHandler);\n     }\n \n     /**\n-     *\n-     * @param printJobTimeout\n-     *            the printJobTimeout (ms) before the watchdog terminates the print\n-     *            process\n-     * @param printInBackground\n-     *            printing done in the background or blocking\n+     * @param printJobTimeout   the printJobTimeout (ms) before the watchdog terminates the print\n+     *                          process\n+     * @param printInBackground printing done in the background or blocking\n      * @param streamHandler\n      * @return a print result handler (implementing a future)\n-     * @throws IOException\n-     *             the test failed\n+     * @throws IOException the test failed\n      */\n     public static PrintResultHandler executeProgram(CommandLine commandLine, String workingDirectory,\n-            long printJobTimeout, boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler)\n-            throws IOException {\n+                                                    long printJobTimeout, boolean printInBackground, int successExitValue,\n+                                                    ExecuteStreamHandler streamHandler)\n+        throws IOException {\n         ExecuteWatchdog watchdog = null;\n         PrintResultHandler resultHandler;\n \n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/11/ProcessHelper.java\nindex bb3d07e280..c3a7e8d258 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/11/ProcessHelper.java\n@@ -29,9 +29,9 @@ import org.slf4j.LoggerFactory;\n  */\n public final class ProcessHelper {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n \n-    private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n+private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n \n     private ProcessHelper() {\n     }\n@@ -119,8 +119,7 @@ public final class ProcessHelper {\n      *             the test failed\n      */\n     public static PrintResultHandler executeProgram(CommandLine commandLine, String workingDirectory,\n-            long printJobTimeout, boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler)\n-            throws IOException {\n+            long printJobTimeout, boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler) throws IOException {\n         ExecuteWatchdog watchdog = null;\n         PrintResultHandler resultHandler;\n \n@@ -184,4 +183,4 @@ public final class ProcessHelper {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/11/ProcessHelper.java\nindex bb3d07e280..5583af97a1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/11/ProcessHelper.java\n@@ -9,7 +9,6 @@ package org.gluu.util.process;\n import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n-\n import org.apache.commons.exec.CommandLine;\n import org.apache.commons.exec.DefaultExecuteResultHandler;\n import org.apache.commons.exec.DefaultExecutor;\n@@ -27,35 +26,33 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Yuriy Movchan Date: 11.22.2010\n  */\n-public final class ProcessHelper {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n \n+public final class ProcessHelper {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n     private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n \n-    private ProcessHelper() {\n-    }\n+    private ProcessHelper() { }\n \n-    public static boolean executeProgram(String programPath, boolean executeInBackground, int successExitValue,\n-            OutputStream outputStream) {\n+    public static boolean executeProgram(String programPath, boolean executeInBackground, int successExitValue, OutputStream outputStream) {\n         return executeProgram(programPath, null, executeInBackground, successExitValue, outputStream);\n     }\n \n-    public static boolean executeProgram(String programPath, String workingDirectory, boolean executeInBackground,\n-            int successExitValue, OutputStream outputStream) {\n+    public static boolean executeProgram(String programPath, String workingDirectory, boolean executeInBackground, int successExitValue, OutputStream outputStream) {\n         CommandLine commandLine = new CommandLine(programPath);\n+\n         return executeProgram(commandLine, workingDirectory, executeInBackground, successExitValue, outputStream);\n     }\n \n-    public static boolean executeProgram(CommandLine commandLine, boolean executeInBackground, int successExitValue,\n-            OutputStream outputStream) {\n+    public static boolean executeProgram(CommandLine commandLine,\n+                                         boolean executeInBackground,\n+                                         int successExitValue, OutputStream outputStream) {\n         return executeProgram(commandLine, null, executeInBackground, successExitValue, outputStream);\n     }\n \n-    public static boolean executeProgram(CommandLine commandLine, String workingDirectory, boolean executeInBackground,\n-            int successExitValue, OutputStream outputStream) {\n+    public static boolean executeProgram(CommandLine commandLine, String workingDirectory, boolean executeInBackground, int successExitValue, OutputStream outputStream) {\n         long printJobTimeout = PRINT_JOB_TIMEOUT;\n-\n         ExecuteStreamHandler streamHandler = null;\n         if (outputStream != null) {\n             streamHandler = new PumpStreamHandler(outputStream);\n@@ -64,8 +61,12 @@ public final class ProcessHelper {\n         PrintResultHandler printResult = null;\n         try {\n             LOG.debug(String.format(\"Preparing to start process %s\", commandLine.toString()));\n-            printResult = executeProgram(commandLine, workingDirectory, printJobTimeout, executeInBackground,\n-                    successExitValue, streamHandler);\n+            printResult = executeProgram(commandLine,\n+                workingDirectory,\n+                    printJobTimeout,\n+                        executeInBackground,\n+                            successExitValue,\n+                                streamHandler);\n             LOG.debug(String.format(\"Successfully start process %s\", commandLine.toString()));\n         } catch (Exception ex) {\n             LOG.trace(String.format(\"Problem during starting process %s\", commandLine.toString()), ex);\n@@ -83,9 +84,7 @@ public final class ProcessHelper {\n         } catch (InterruptedException ex) {\n             LOG.error(String.format(\"Problem during process execution %s\", commandLine.toString()), ex);\n         }\n-\n         LOG.debug(String.format(\"Process %s has finished\", commandLine.toString()));\n-\n         return true;\n     }\n \n@@ -101,8 +100,8 @@ public final class ProcessHelper {\n      * @throws IOException\n      *             the test failed\n      */\n-    public static PrintResultHandler executeProgram(CommandLine commandLine, long printJobTimeout,\n-            boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler) throws IOException {\n+\n+    public static PrintResultHandler executeProgram(CommandLine commandLine, long printJobTimeout, boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler) throws IOException {\n         return executeProgram(commandLine, null, printJobTimeout, printInBackground, successExitValue, streamHandler);\n     }\n \n@@ -118,9 +117,8 @@ public final class ProcessHelper {\n      * @throws IOException\n      *             the test failed\n      */\n-    public static PrintResultHandler executeProgram(CommandLine commandLine, String workingDirectory,\n-            long printJobTimeout, boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler)\n-            throws IOException {\n+\n+    public static PrintResultHandler executeProgram(CommandLine commandLine, String workingDirectory, long printJobTimeout, boolean printInBackground, int successExitValue, ExecuteStreamHandler streamHandler) throws IOException {\n         ExecuteWatchdog watchdog = null;\n         PrintResultHandler resultHandler;\n \n@@ -133,17 +131,20 @@ public final class ProcessHelper {\n         }\n \n         // Redirect streams if needed\n+\n         if (streamHandler != null) {\n             executor.setStreamHandler(streamHandler);\n         }\n \n         // Create a watchdog if requested\n+\n         if (printJobTimeout > 0) {\n             watchdog = new ExecuteWatchdog(printJobTimeout);\n             executor.setWatchdog(watchdog);\n         }\n \n         // Pass a \"ExecuteResultHandler\" when doing background printing\n+\n         if (printInBackground) {\n             LOG.debug(String.format(\"Executing non-blocking process %s\", commandLine.toString()));\n             resultHandler = new PrintResultHandler(watchdog);\n@@ -176,6 +177,7 @@ public final class ProcessHelper {\n \n         public void onProcessFailed(ExecuteException ex) {\n             super.onProcessFailed(ex);\n+\n             if ((watchdog != null) && watchdog.killedProcess()) {\n                 LOG.debug(\"The process timed out\");\n             } else {\n@@ -184,4 +186,4 @@ public final class ProcessHelper {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/11/ProcessHelper.java\nindex bb3d07e280..a8e232ba26 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/11/ProcessHelper.java\n@@ -29,7 +29,7 @@ import org.slf4j.LoggerFactory;\n  */\n public final class ProcessHelper {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n \n     private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/11/ProcessHelper.java\nindex bb3d07e280..be258cef47 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/11/ProcessHelper.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/11/ProcessHelper.java\n@@ -29,7 +29,7 @@ import org.slf4j.LoggerFactory;\n  */\n public final class ProcessHelper {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n+private static final Logger LOG = LoggerFactory.getLogger(ProcessHelper.class);\n \n     private static final long PRINT_JOB_TIMEOUT = 100 * 1000;\n \n",
            "diff_size": 1
        }
    ]
}