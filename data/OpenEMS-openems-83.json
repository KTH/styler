{
    "error_id": "83",
    "information": {
        "errors": [
            {
                "line": "55",
                "column": "11",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "import io.openems.edge.common.jsonapi.JsonApi;\n\n@Component( //\n\t\tname = \"Core.ComponentManager\", //\n\t\timmediate = true, //\n\t\tproperty = { //",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/83/ComponentManagerImpl.java\nindex 746e583cfe..0d2c879267 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/83/ComponentManagerImpl.java\n@@ -52,7 +52,7 @@ import io.openems.edge.common.component.ComponentManager;\n import io.openems.edge.common.component.OpenemsComponent;\n import io.openems.edge.common.jsonapi.JsonApi;\n \n-@Component( //\n+@Component(//\n \t\tname = \"Core.ComponentManager\", //\n \t\timmediate = true, //\n \t\tproperty = { //\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "55",
                    "column": "11",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/83/ComponentManagerImpl.java\nindex 746e583cfe..5661a6d3b1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/83/ComponentManagerImpl.java\n@@ -53,372 +53,375 @@ import io.openems.edge.common.component.OpenemsComponent;\n import io.openems.edge.common.jsonapi.JsonApi;\n \n @Component( //\n-\t\tname = \"Core.ComponentManager\", //\n-\t\timmediate = true, //\n-\t\tproperty = { //\n-\t\t\t\t\"id=\" + OpenemsConstants.COMPONENT_MANAGER_ID, //\n-\t\t\t\t\"enabled=true\" //\n-\t\t})\n+    name = \"Core.ComponentManager\", //\n+    immediate = true, //\n+    property = { //\n+        \"id=\" + OpenemsConstants.COMPONENT_MANAGER_ID, //\n+        \"enabled=true\" //\n+    })\n public class ComponentManagerImpl extends AbstractOpenemsComponent\n-\t\timplements ComponentManager, OpenemsComponent, JsonApi, ConfigurationListener {\n+    implements ComponentManager, OpenemsComponent, JsonApi, ConfigurationListener {\n \n-\tprivate final OsgiValidateWorker osgiValidateWorker;\n-\tprivate final OutOfMemoryHeapDumpWorker outOfMemoryHeapDumpWorker;\n-\tprivate final DefaultConfigurationWorker defaultConfigurationWorker;\n-\tprivate final EdgeConfigWorker edgeConfigWorker;\n+  private final OsgiValidateWorker osgiValidateWorker;\n+  private final OutOfMemoryHeapDumpWorker outOfMemoryHeapDumpWorker;\n+  private final DefaultConfigurationWorker defaultConfigurationWorker;\n+  private final EdgeConfigWorker edgeConfigWorker;\n \n-\tprotected BundleContext bundleContext;\n-\n-\t@Reference(cardinality = ReferenceCardinality.OPTIONAL)\n-\tprotected volatile ClockProvider clockProvider = null;\n+  protected BundleContext bundleContext;\n+\n+  @Reference(cardinality = ReferenceCardinality.OPTIONAL)\n+  protected volatile ClockProvider clockProvider = null;\n \n-\t@Reference\n-\tprotected MetaTypeService metaTypeService;\n+  @Reference\n+  protected MetaTypeService metaTypeService;\n \n-\t@Reference\n-\tprotected ConfigurationAdmin cm;\n+  @Reference\n+  protected ConfigurationAdmin cm;\n \n-\t@Reference\n-\tprotected EventAdmin eventAdmin;\n+  @Reference\n+  protected EventAdmin eventAdmin;\n \n-\t@Reference(policy = ReferencePolicy.DYNAMIC, //\n-\t\t\tpolicyOption = ReferencePolicyOption.GREEDY, //\n-\t\t\tcardinality = ReferenceCardinality.MULTIPLE, //\n-\t\t\ttarget = \"(&(enabled=true)(!(service.factoryPid=Core.ComponentManager)))\")\n-\tprivate volatile List<OpenemsComponent> enabledComponents = new CopyOnWriteArrayList<>();\n+  @Reference(policy = ReferencePolicy.DYNAMIC, //\n+      policyOption = ReferencePolicyOption.GREEDY, //\n+      cardinality = ReferenceCardinality.MULTIPLE, //\n+      target = \"(&(enabled=true)(!(service.factoryPid=Core.ComponentManager)))\")\n+  private volatile List<OpenemsComponent> enabledComponents = new CopyOnWriteArrayList<>();\n \n-\t@Reference(policy = ReferencePolicy.DYNAMIC, //\n-\t\t\tpolicyOption = ReferencePolicyOption.GREEDY, //\n-\t\t\tcardinality = ReferenceCardinality.MULTIPLE, //\n-\t\t\ttarget = \"(!(service.factoryPid=Core.ComponentManager))\")\n-\tprivate volatile List<OpenemsComponent> allComponents = new CopyOnWriteArrayList<>();\n+  @Reference(policy = ReferencePolicy.DYNAMIC, //\n+      policyOption = ReferencePolicyOption.GREEDY, //\n+      cardinality = ReferenceCardinality.MULTIPLE, //\n+      target = \"(!(service.factoryPid=Core.ComponentManager))\")\n+  private volatile List<OpenemsComponent> allComponents = new CopyOnWriteArrayList<>();\n \n-\tpublic ComponentManagerImpl() {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tComponentManager.ChannelId.values() //\n-\t\t);\n-\t\tthis.osgiValidateWorker = new OsgiValidateWorker(this);\n-\t\tthis.outOfMemoryHeapDumpWorker = new OutOfMemoryHeapDumpWorker(this);\n-\t\tthis.defaultConfigurationWorker = new DefaultConfigurationWorker(this);\n-\t\tthis.edgeConfigWorker = new EdgeConfigWorker(this);\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext componentContext, BundleContext bundleContext) throws OpenemsException {\n-\t\tsuper.activate(componentContext, OpenemsConstants.COMPONENT_MANAGER_ID, \"Component-Manager\", true);\n-\n-\t\tthis.bundleContext = bundleContext;\n-\n-\t\t// Start OSGi Validate Worker\n-\t\tthis.osgiValidateWorker.activate(this.id());\n-\n-\t\t// Start the Out-Of-Memory Worker\n-\t\tthis.outOfMemoryHeapDumpWorker.activate(this.id());\n-\n-\t\t// Start the Default-Configuration Worker\n-\t\tthis.defaultConfigurationWorker.activate(this.id());\n-\n-\t\t// Start the EdgeConfig Worker\n-\t\tthis.edgeConfigWorker.activate(this.id());\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\n-\t\t// Stop OSGi Validate Worker\n-\t\tthis.osgiValidateWorker.deactivate();\n-\n-\t\t// Stop the Out-Of-Memory Worker\n-\t\tthis.outOfMemoryHeapDumpWorker.deactivate();\n-\n-\t\t// Stop the Default-Configuration Worker\n-\t\tthis.defaultConfigurationWorker.deactivate();\n-\n-\t\t// Stop the EdgeConfig Worker\n-\t\tthis.edgeConfigWorker.deactivate();\n-\t}\n-\n-\t@Override\n-\tpublic List<OpenemsComponent> getEnabledComponents() {\n-\t\treturn Collections.unmodifiableList(this.enabledComponents);\n-\t}\n-\n-\t@Override\n-\tpublic List<OpenemsComponent> getAllComponents() {\n-\t\treturn Collections.unmodifiableList(this.allComponents);\n-\t}\n-\n-\t@Override\n-\tprotected void logInfo(Logger log, String message) {\n-\t\tsuper.logInfo(log, message);\n-\t}\n-\n-\t@Override\n-\tprotected void logWarn(Logger log, String message) {\n-\t\tsuper.logWarn(log, message);\n-\t}\n-\n-\t@Override\n-\tprotected void logError(Logger log, String message) {\n-\t\tsuper.logError(log, message);\n-\t}\n-\n-\t@Override\n-\tpublic CompletableFuture<JsonrpcResponseSuccess> handleJsonrpcRequest(User user, JsonrpcRequest request)\n-\t\t\tthrows OpenemsNamedException {\n-\t\tuser.assertRoleIsAtLeast(\"handleJsonrpcRequest\", Role.GUEST);\n-\n-\t\tswitch (request.getMethod()) {\n-\n-\t\tcase GetEdgeConfigRequest.METHOD:\n-\t\t\treturn this.handleGetEdgeConfigRequest(user, GetEdgeConfigRequest.from(request));\n-\n-\t\tcase CreateComponentConfigRequest.METHOD:\n-\t\t\treturn this.handleCreateComponentConfigRequest(user, CreateComponentConfigRequest.from(request));\n-\n-\t\tcase UpdateComponentConfigRequest.METHOD:\n-\t\t\treturn this.handleUpdateComponentConfigRequest(user, UpdateComponentConfigRequest.from(request));\n-\n-\t\tcase DeleteComponentConfigRequest.METHOD:\n-\t\t\treturn this.handleDeleteComponentConfigRequest(user, DeleteComponentConfigRequest.from(request));\n-\n-\t\tdefault:\n-\t\t\tthrow OpenemsError.JSONRPC_UNHANDLED_METHOD.exception(request.getMethod());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Handles a GetEdgeConfigRequest.\n-\t * \n-\t * @param user    the User\n-\t * @param request the GetEdgeConfigRequest\n-\t * @return the Future JSON-RPC Response\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprivate CompletableFuture<JsonrpcResponseSuccess> handleGetEdgeConfigRequest(User user,\n-\t\t\tGetEdgeConfigRequest request) throws OpenemsNamedException {\n-\t\tEdgeConfig config = this.getEdgeConfig();\n-\t\tGetEdgeConfigResponse response = new GetEdgeConfigResponse(request.getId(), config);\n-\t\treturn CompletableFuture.completedFuture(response);\n-\t}\n-\n-\t/**\n-\t * Handles a CreateComponentConfigRequest.\n-\t * \n-\t * @param user    the User\n-\t * @param request the CreateComponentConfigRequest\n-\t * @return the Future JSON-RPC Response\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprotected CompletableFuture<JsonrpcResponseSuccess> handleCreateComponentConfigRequest(User user,\n-\t\t\tCreateComponentConfigRequest request) throws OpenemsNamedException {\n-\t\t// Get Component-ID from Request\n-\t\tString componentId = null;\n-\t\tfor (Property property : request.getProperties()) {\n-\t\t\tif (property.getName().equals(\"id\")) {\n-\t\t\t\tcomponentId = JsonUtils.getAsString(property.getValue());\n-\t\t\t}\n-\t\t}\n-\n-\t\tConfiguration config;\n-\t\tif (componentId != null) {\n-\t\t\t// Normal OpenEMS Component with ID.\n-\t\t\t// Check that there is currently no Component with the same ID.\n-\t\t\tConfiguration[] configs;\n-\t\t\ttry {\n-\t\t\t\tconfigs = this.cm.listConfigurations(\"(id=\" + componentId + \")\");\n-\t\t\t} catch (IOException | InvalidSyntaxException e) {\n-\t\t\t\tthrow OpenemsError.GENERIC.exception(\"Unable to list configurations for ID [\" + componentId + \"]. \"\n-\t\t\t\t\t\t+ e.getClass().getSimpleName() + \": \" + e.getMessage());\n-\t\t\t}\n-\t\t\tif (configs != null && configs.length > 0) {\n-\t\t\t\tthrow new OpenemsException(\"A Component with id [\" + componentId + \"] is already existing!\");\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\tconfig = this.cm.createFactoryConfiguration(request.getFactoryPid(), null);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t\tthrow OpenemsError.GENERIC.exception(\"Unable create Configuration for Factory-ID [\"\n-\t\t\t\t\t\t+ request.getFactoryPid() + \"]. \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\t// Singleton?\n-\t\t\ttry {\n-\t\t\t\tconfig = this.cm.getConfiguration(request.getFactoryPid(), null);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t\tthrow OpenemsError.GENERIC.exception(\"Unable to get Configurations for Factory-PID [\"\n-\t\t\t\t\t\t+ request.getFactoryPid() + \"]. \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n-\t\t\t}\n-\t\t\tif (config.getProperties() != null) {\n-\t\t\t\tthrow new OpenemsException(\n-\t\t\t\t\t\t\"A Singleton Component for PID [\" + request.getFactoryPid() + \"] is already existing!\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Create map with configuration attributes\n-\t\tDictionary<String, Object> properties = new Hashtable<>();\n-\t\tfor (Property property : request.getProperties()) {\n-\t\t\tproperties.put(property.getName(), JsonUtils.getAsBestType(property.getValue()));\n-\t\t}\n-\n-\t\t// Update Configuration\n-\t\ttry {\n-\t\t\tthis.applyConfiguration(user, config, properties);\n-\t\t} catch (IOException | IllegalArgumentException e) {\n-\t\t\te.printStackTrace();\n-\t\t\tthrow OpenemsError.EDGE_UNABLE_TO_CREATE_CONFIG.exception(request.getFactoryPid(), e.getMessage());\n-\t\t}\n-\n-\t\treturn CompletableFuture.completedFuture(new GenericJsonrpcResponseSuccess(request.getId()));\n-\t}\n-\n-\t/**\n-\t * Handles a UpdateComponentConfigRequest.\n-\t * \n-\t * @param user    the User\n-\t * @param request the UpdateComponentConfigRequest\n-\t * @return the Future JSON-RPC Response\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprotected CompletableFuture<JsonrpcResponseSuccess> handleUpdateComponentConfigRequest(User user,\n-\t\t\tUpdateComponentConfigRequest request) throws OpenemsNamedException {\n-\t\tConfiguration config = this.getExistingConfigForId(request.getComponentId());\n-\n-\t\t// Create map with changed configuration attributes\n-\t\tDictionary<String, Object> properties = config.getProperties();\n-\t\tfor (Property property : request.getProperties()) {\n-\t\t\t// do not allow certain properties to be updated, like pid and service.pid\n-\t\t\tif (!EdgeConfig.ignorePropertyKey(property.getName())) {\n-\t\t\t\tObject value = JsonUtils.getAsBestType(property.getValue());\n-\t\t\t\tif (value instanceof Object[] && ((Object[]) value).length == 0) {\n-\t\t\t\t\tvalue = new String[0];\n-\t\t\t\t}\n-\t\t\t\tproperties.put(property.getName(), value);\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Update Configuration\n-\t\ttry {\n-\t\t\tthis.applyConfiguration(user, config, properties);\n-\t\t} catch (IOException e) {\n-\t\t\te.printStackTrace();\n-\t\t\tthrow OpenemsError.EDGE_UNABLE_TO_APPLY_CONFIG.exception(request.getComponentId(), e.getMessage());\n-\t\t}\n-\n-\t\treturn CompletableFuture.completedFuture(new GenericJsonrpcResponseSuccess(request.getId()));\n-\t}\n-\n-\t/**\n-\t * Handles a DeleteComponentConfigRequest.\n-\t * \n-\t * @param user    the User\n-\t * @param request the DeleteComponentConfigRequest\n-\t * @return the Future JSON-RPC Response\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprotected CompletableFuture<JsonrpcResponseSuccess> handleDeleteComponentConfigRequest(User user,\n-\t\t\tDeleteComponentConfigRequest request) throws OpenemsNamedException {\n-\t\tConfiguration config = this.getExistingConfigForId(request.getComponentId());\n-\n-\t\ttry {\n-\t\t\tconfig.delete();\n-\t\t} catch (IOException e) {\n-\t\t\te.printStackTrace();\n-\t\t\tthrow OpenemsError.EDGE_UNABLE_TO_DELETE_CONFIG.exception(request.getComponentId(), e.getMessage());\n-\t\t}\n-\n-\t\treturn CompletableFuture.completedFuture(new GenericJsonrpcResponseSuccess(request.getId()));\n-\t}\n-\n-\t/**\n-\t * Updates the Configuration from the given Properties and adds some meta\n-\t * information.\n-\t * \n-\t * @param user       the User\n-\t * @param config     the Configuration object\n-\t * @param properties the properties\n-\t * @throws IOException on error\n-\t */\n-\tprivate void applyConfiguration(User user, Configuration config, Dictionary<String, Object> properties)\n-\t\t\tthrows IOException {\n-\t\tString lastChangeBy;\n-\t\tif (user != null) {\n-\t\t\tlastChangeBy = user.getId() + \": \" + user.getName();\n-\t\t} else {\n-\t\t\tlastChangeBy = \"UNDEFINED\";\n-\t\t}\n-\t\tproperties.put(OpenemsConstants.PROPERTY_LAST_CHANGE_BY, lastChangeBy);\n-\t\tproperties.put(OpenemsConstants.PROPERTY_LAST_CHANGE_AT,\n-\t\t\t\tLocalDateTime.now().truncatedTo(ChronoUnit.SECONDS).toString());\n-\t\tconfig.update(properties);\n-\t}\n-\n-\t/**\n-\t * Gets the ConfigAdmin Configuration for the OpenEMS Component with the given\n-\t * Component-ID.\n-\t * \n-\t * @param componentId the Component-ID\n-\t * @return the Configuration\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tprotected Configuration getExistingConfigForId(String componentId) throws OpenemsNamedException {\n-\t\tConfiguration[] configs;\n-\t\ttry {\n-\t\t\tconfigs = this.cm.listConfigurations(\"(id=\" + componentId + \")\");\n-\t\t} catch (IOException | InvalidSyntaxException e) {\n-\t\t\te.printStackTrace();\n-\t\t\tthrow OpenemsError.GENERIC.exception(\"Unable to list configurations for ID [\" + componentId + \"]. \"\n-\t\t\t\t\t+ e.getClass().getSimpleName() + \": \" + e.getMessage());\n-\t\t}\n-\n-\t\tif (configs == null) {\n-\t\t\t// Maybe this is a Singleton?\n-\t\t\tString factoryPid = this.getComponent(componentId).serviceFactoryPid();\n-\t\t\ttry {\n-\t\t\t\treturn this.cm.getConfiguration(factoryPid, null);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t\tthrow OpenemsError.GENERIC.exception(\n-\t\t\t\t\t\t\"Unable to get Singleton-Component Configuration for ID [\" + componentId + \"], Factory-PID [\"\n-\t\t\t\t\t\t\t\t+ factoryPid + \"]. \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Make sure we only have one config\n-\t\tif (configs == null || configs.length == 0) {\n-\t\t\tthrow OpenemsError.EDGE_NO_COMPONENT_WITH_ID.exception(componentId);\n-\t\t} else if (configs.length > 1) {\n-\t\t\tthrow OpenemsError.EDGE_MULTIPLE_COMPONENTS_WITH_ID.exception(componentId);\n-\t\t}\n-\t\treturn configs[0];\n-\t}\n-\n-\t@Override\n-\tpublic synchronized EdgeConfig getEdgeConfig() {\n-\t\treturn this.edgeConfigWorker.getEdgeConfig();\n-\t}\n-\n-\t@Override\n-\tpublic void configurationEvent(ConfigurationEvent event) {\n-\t\t// trigger update of EdgeConfig\n-\t\tthis.edgeConfigWorker.handleEvent(event);\n-\n-\t\t// trigger immediate validation on configuration event\n-\t\tthis.osgiValidateWorker.triggerNextRun();\n-\t}\n-\n-\t@Override\n-\tpublic Clock getClock() {\n-\t\tClockProvider clockProvider = this.clockProvider;\n-\t\tif (clockProvider != null) {\n-\t\t\treturn clockProvider.getClock();\n-\t\t} else {\n-\t\t\treturn Clock.systemDefaultZone();\n-\t\t}\n-\t}\n+  public ComponentManagerImpl() {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        ComponentManager.ChannelId.values() //\n+    );\n+    this.osgiValidateWorker = new OsgiValidateWorker(this);\n+    this.outOfMemoryHeapDumpWorker = new OutOfMemoryHeapDumpWorker(this);\n+    this.defaultConfigurationWorker = new DefaultConfigurationWorker(this);\n+    this.edgeConfigWorker = new EdgeConfigWorker(this);\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext componentContext, BundleContext bundleContext) throws OpenemsException {\n+    super.activate(componentContext, OpenemsConstants.COMPONENT_MANAGER_ID, \"Component-Manager\", true);\n+\n+    this.bundleContext = bundleContext;\n+\n+    // Start OSGi Validate Worker\n+    this.osgiValidateWorker.activate(this.id());\n+\n+    // Start the Out-Of-Memory Worker\n+    this.outOfMemoryHeapDumpWorker.activate(this.id());\n+\n+    // Start the Default-Configuration Worker\n+    this.defaultConfigurationWorker.activate(this.id());\n+\n+    // Start the EdgeConfig Worker\n+    this.edgeConfigWorker.activate(this.id());\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+\n+    // Stop OSGi Validate Worker\n+    this.osgiValidateWorker.deactivate();\n+\n+    // Stop the Out-Of-Memory Worker\n+    this.outOfMemoryHeapDumpWorker.deactivate();\n+\n+    // Stop the Default-Configuration Worker\n+    this.defaultConfigurationWorker.deactivate();\n+\n+    // Stop the EdgeConfig Worker\n+    this.edgeConfigWorker.deactivate();\n+  }\n+\n+  @Override\n+  public List<OpenemsComponent> getEnabledComponents() {\n+    return Collections.unmodifiableList(this.enabledComponents);\n+  }\n+\n+  @Override\n+  public List<OpenemsComponent> getAllComponents() {\n+    return Collections.unmodifiableList(this.allComponents);\n+  }\n+\n+  @Override\n+  protected void logInfo(Logger log, String message) {\n+    super.logInfo(log, message);\n+  }\n+\n+  @Override\n+  protected void logWarn(Logger log, String message) {\n+    super.logWarn(log, message);\n+  }\n+\n+  @Override\n+  protected void logError(Logger log, String message) {\n+    super.logError(log, message);\n+  }\n+\n+  @Override\n+  public CompletableFuture<JsonrpcResponseSuccess> handleJsonrpcRequest(User user, JsonrpcRequest request)\n+      throws OpenemsNamedException {\n+    user.assertRoleIsAtLeast(\"handleJsonrpcRequest\", Role.GUEST);\n+\n+    switch (request.getMethod()) {\n+\n+      case GetEdgeConfigRequest.METHOD:\n+        return this.handleGetEdgeConfigRequest(user, GetEdgeConfigRequest.from(request));\n+\n+      case CreateComponentConfigRequest.METHOD:\n+        return this.handleCreateComponentConfigRequest(user, CreateComponentConfigRequest.from(request));\n+\n+      case UpdateComponentConfigRequest.METHOD:\n+        return this.handleUpdateComponentConfigRequest(user, UpdateComponentConfigRequest.from(request));\n+\n+      case DeleteComponentConfigRequest.METHOD:\n+        return this.handleDeleteComponentConfigRequest(user, DeleteComponentConfigRequest.from(request));\n+\n+      default:\n+        throw OpenemsError.JSONRPC_UNHANDLED_METHOD.exception(request.getMethod());\n+    }\n+  }\n+\n+  /**\n+   * Handles a GetEdgeConfigRequest.\n+   *\n+   * @param user    the User\n+   * @param request the GetEdgeConfigRequest\n+   * @return the Future JSON-RPC Response\n+   * @throws OpenemsNamedException on error\n+   */\n+  private CompletableFuture<JsonrpcResponseSuccess> handleGetEdgeConfigRequest(User user,\n+                                                                               GetEdgeConfigRequest request) throws OpenemsNamedException {\n+    EdgeConfig config = this.getEdgeConfig();\n+    GetEdgeConfigResponse response = new GetEdgeConfigResponse(request.getId(), config);\n+    return CompletableFuture.completedFuture(response);\n+  }\n+\n+  /**\n+   * Handles a CreateComponentConfigRequest.\n+   *\n+   * @param user    the User\n+   * @param request the CreateComponentConfigRequest\n+   * @return the Future JSON-RPC Response\n+   * @throws OpenemsNamedException on error\n+   */\n+  protected CompletableFuture<JsonrpcResponseSuccess> handleCreateComponentConfigRequest(User user,\n+                                                                                         CreateComponentConfigRequest request)\n+      throws OpenemsNamedException {\n+    // Get Component-ID from Request\n+    String componentId = null;\n+    for (Property property : request.getProperties()) {\n+      if (property.getName().equals(\"id\")) {\n+        componentId = JsonUtils.getAsString(property.getValue());\n+      }\n+    }\n+\n+    Configuration config;\n+    if (componentId != null) {\n+      // Normal OpenEMS Component with ID.\n+      // Check that there is currently no Component with the same ID.\n+      Configuration[] configs;\n+      try {\n+        configs = this.cm.listConfigurations(\"(id=\" + componentId + \")\");\n+      } catch (IOException | InvalidSyntaxException e) {\n+        throw OpenemsError.GENERIC.exception(\"Unable to list configurations for ID [\" + componentId + \"]. \"\n+            + e.getClass().getSimpleName() + \": \" + e.getMessage());\n+      }\n+      if (configs != null && configs.length > 0) {\n+        throw new OpenemsException(\"A Component with id [\" + componentId + \"] is already existing!\");\n+      }\n+      try {\n+        config = this.cm.createFactoryConfiguration(request.getFactoryPid(), null);\n+      } catch (IOException e) {\n+        e.printStackTrace();\n+        throw OpenemsError.GENERIC.exception(\"Unable create Configuration for Factory-ID [\"\n+            + request.getFactoryPid() + \"]. \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n+      }\n+\n+    } else {\n+      // Singleton?\n+      try {\n+        config = this.cm.getConfiguration(request.getFactoryPid(), null);\n+      } catch (IOException e) {\n+        e.printStackTrace();\n+        throw OpenemsError.GENERIC.exception(\"Unable to get Configurations for Factory-PID [\"\n+            + request.getFactoryPid() + \"]. \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n+      }\n+      if (config.getProperties() != null) {\n+        throw new OpenemsException(\n+            \"A Singleton Component for PID [\" + request.getFactoryPid() + \"] is already existing!\");\n+      }\n+    }\n+\n+    // Create map with configuration attributes\n+    Dictionary<String, Object> properties = new Hashtable<>();\n+    for (Property property : request.getProperties()) {\n+      properties.put(property.getName(), JsonUtils.getAsBestType(property.getValue()));\n+    }\n+\n+    // Update Configuration\n+    try {\n+      this.applyConfiguration(user, config, properties);\n+    } catch (IOException | IllegalArgumentException e) {\n+      e.printStackTrace();\n+      throw OpenemsError.EDGE_UNABLE_TO_CREATE_CONFIG.exception(request.getFactoryPid(), e.getMessage());\n+    }\n+\n+    return CompletableFuture.completedFuture(new GenericJsonrpcResponseSuccess(request.getId()));\n+  }\n+\n+  /**\n+   * Handles a UpdateComponentConfigRequest.\n+   *\n+   * @param user    the User\n+   * @param request the UpdateComponentConfigRequest\n+   * @return the Future JSON-RPC Response\n+   * @throws OpenemsNamedException on error\n+   */\n+  protected CompletableFuture<JsonrpcResponseSuccess> handleUpdateComponentConfigRequest(User user,\n+                                                                                         UpdateComponentConfigRequest request)\n+      throws OpenemsNamedException {\n+    Configuration config = this.getExistingConfigForId(request.getComponentId());\n+\n+    // Create map with changed configuration attributes\n+    Dictionary<String, Object> properties = config.getProperties();\n+    for (Property property : request.getProperties()) {\n+      // do not allow certain properties to be updated, like pid and service.pid\n+      if (!EdgeConfig.ignorePropertyKey(property.getName())) {\n+        Object value = JsonUtils.getAsBestType(property.getValue());\n+        if (value instanceof Object[] && ((Object[]) value).length == 0) {\n+          value = new String[0];\n+        }\n+        properties.put(property.getName(), value);\n+      }\n+    }\n+\n+    // Update Configuration\n+    try {\n+      this.applyConfiguration(user, config, properties);\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+      throw OpenemsError.EDGE_UNABLE_TO_APPLY_CONFIG.exception(request.getComponentId(), e.getMessage());\n+    }\n+\n+    return CompletableFuture.completedFuture(new GenericJsonrpcResponseSuccess(request.getId()));\n+  }\n+\n+  /**\n+   * Handles a DeleteComponentConfigRequest.\n+   *\n+   * @param user    the User\n+   * @param request the DeleteComponentConfigRequest\n+   * @return the Future JSON-RPC Response\n+   * @throws OpenemsNamedException on error\n+   */\n+  protected CompletableFuture<JsonrpcResponseSuccess> handleDeleteComponentConfigRequest(User user,\n+                                                                                         DeleteComponentConfigRequest request)\n+      throws OpenemsNamedException {\n+    Configuration config = this.getExistingConfigForId(request.getComponentId());\n+\n+    try {\n+      config.delete();\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+      throw OpenemsError.EDGE_UNABLE_TO_DELETE_CONFIG.exception(request.getComponentId(), e.getMessage());\n+    }\n+\n+    return CompletableFuture.completedFuture(new GenericJsonrpcResponseSuccess(request.getId()));\n+  }\n+\n+  /**\n+   * Updates the Configuration from the given Properties and adds some meta\n+   * information.\n+   *\n+   * @param user       the User\n+   * @param config     the Configuration object\n+   * @param properties the properties\n+   * @throws IOException on error\n+   */\n+  private void applyConfiguration(User user, Configuration config, Dictionary<String, Object> properties)\n+      throws IOException {\n+    String lastChangeBy;\n+    if (user != null) {\n+      lastChangeBy = user.getId() + \": \" + user.getName();\n+    } else {\n+      lastChangeBy = \"UNDEFINED\";\n+    }\n+    properties.put(OpenemsConstants.PROPERTY_LAST_CHANGE_BY, lastChangeBy);\n+    properties.put(OpenemsConstants.PROPERTY_LAST_CHANGE_AT,\n+        LocalDateTime.now().truncatedTo(ChronoUnit.SECONDS).toString());\n+    config.update(properties);\n+  }\n+\n+  /**\n+   * Gets the ConfigAdmin Configuration for the OpenEMS Component with the given\n+   * Component-ID.\n+   *\n+   * @param componentId the Component-ID\n+   * @return the Configuration\n+   * @throws OpenemsNamedException on error\n+   */\n+  protected Configuration getExistingConfigForId(String componentId) throws OpenemsNamedException {\n+    Configuration[] configs;\n+    try {\n+      configs = this.cm.listConfigurations(\"(id=\" + componentId + \")\");\n+    } catch (IOException | InvalidSyntaxException e) {\n+      e.printStackTrace();\n+      throw OpenemsError.GENERIC.exception(\"Unable to list configurations for ID [\" + componentId + \"]. \"\n+          + e.getClass().getSimpleName() + \": \" + e.getMessage());\n+    }\n+\n+    if (configs == null) {\n+      // Maybe this is a Singleton?\n+      String factoryPid = this.getComponent(componentId).serviceFactoryPid();\n+      try {\n+        return this.cm.getConfiguration(factoryPid, null);\n+      } catch (IOException e) {\n+        e.printStackTrace();\n+        throw OpenemsError.GENERIC.exception(\n+            \"Unable to get Singleton-Component Configuration for ID [\" + componentId + \"], Factory-PID [\"\n+                + factoryPid + \"]. \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n+      }\n+    }\n+\n+    // Make sure we only have one config\n+    if (configs == null || configs.length == 0) {\n+      throw OpenemsError.EDGE_NO_COMPONENT_WITH_ID.exception(componentId);\n+    } else if (configs.length > 1) {\n+      throw OpenemsError.EDGE_MULTIPLE_COMPONENTS_WITH_ID.exception(componentId);\n+    }\n+    return configs[0];\n+  }\n+\n+  @Override\n+  public synchronized EdgeConfig getEdgeConfig() {\n+    return this.edgeConfigWorker.getEdgeConfig();\n+  }\n+\n+  @Override\n+  public void configurationEvent(ConfigurationEvent event) {\n+    // trigger update of EdgeConfig\n+    this.edgeConfigWorker.handleEvent(event);\n+\n+    // trigger immediate validation on configuration event\n+    this.osgiValidateWorker.triggerNextRun();\n+  }\n+\n+  @Override\n+  public Clock getClock() {\n+    ClockProvider clockProvider = this.clockProvider;\n+    if (clockProvider != null) {\n+      return clockProvider.getClock();\n+    } else {\n+      return Clock.systemDefaultZone();\n+    }\n+  }\n \n }\n",
            "diff_size": 361
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/83/ComponentManagerImpl.java\nindex 746e583cfe..a82cb13223 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/83/ComponentManagerImpl.java\n@@ -52,7 +52,7 @@ import io.openems.edge.common.component.ComponentManager;\n import io.openems.edge.common.component.OpenemsComponent;\n import io.openems.edge.common.jsonapi.JsonApi;\n \n-@Component( //\n+@Component(//\n \t\tname = \"Core.ComponentManager\", //\n \t\timmediate = true, //\n \t\tproperty = { //\n@@ -85,13 +85,13 @@ public class ComponentManagerImpl extends AbstractOpenemsComponent\n \t\t\tpolicyOption = ReferencePolicyOption.GREEDY, //\n \t\t\tcardinality = ReferenceCardinality.MULTIPLE, //\n \t\t\ttarget = \"(&(enabled=true)(!(service.factoryPid=Core.ComponentManager)))\")\n-\tprivate volatile List<OpenemsComponent> enabledComponents = new CopyOnWriteArrayList<>();\n+private volatile List<OpenemsComponent> enabledComponents = new CopyOnWriteArrayList<>();\n \n \t@Reference(policy = ReferencePolicy.DYNAMIC, //\n \t\t\tpolicyOption = ReferencePolicyOption.GREEDY, //\n \t\t\tcardinality = ReferenceCardinality.MULTIPLE, //\n \t\t\ttarget = \"(!(service.factoryPid=Core.ComponentManager))\")\n-\tprivate volatile List<OpenemsComponent> allComponents = new CopyOnWriteArrayList<>();\n+private volatile List<OpenemsComponent> allComponents = new CopyOnWriteArrayList<>();\n \n \tpublic ComponentManagerImpl() {\n \t\tsuper(//\n@@ -421,4 +421,4 @@ public class ComponentManagerImpl extends AbstractOpenemsComponent\n \t\t}\n \t}\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/83/ComponentManagerImpl.java\nindex 746e583cfe..0d2c879267 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/83/ComponentManagerImpl.java\n@@ -52,7 +52,7 @@ import io.openems.edge.common.component.ComponentManager;\n import io.openems.edge.common.component.OpenemsComponent;\n import io.openems.edge.common.jsonapi.JsonApi;\n \n-@Component( //\n+@Component(//\n \t\tname = \"Core.ComponentManager\", //\n \t\timmediate = true, //\n \t\tproperty = { //\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/83/ComponentManagerImpl.java\nindex 746e583cfe..0d2c879267 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/83/ComponentManagerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/83/ComponentManagerImpl.java\n@@ -52,7 +52,7 @@ import io.openems.edge.common.component.ComponentManager;\n import io.openems.edge.common.component.OpenemsComponent;\n import io.openems.edge.common.jsonapi.JsonApi;\n \n-@Component( //\n+@Component(//\n \t\tname = \"Core.ComponentManager\", //\n \t\timmediate = true, //\n \t\tproperty = { //\n",
            "diff_size": 1
        }
    ]
}