{
    "error_id": "80",
    "information": {
        "errors": [
            {
                "line": "71",
                "column": "9",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            store.update(root);\n        } else {\n        \t//\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n        \t//\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n            rootPageId = store.getRootPageId(id);\n            PageData root = getPage(rootPageId, 0);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/80/PageDataIndex.java\nindex 1b07f9abc6..fc867025a7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/80/PageDataIndex.java\n@@ -68,8 +68,7 @@ public class PageDataIndex extends PageIndex {\n             PageDataLeaf root = PageDataLeaf.create(this, rootPageId, PageData.ROOT);\n             store.update(root);\n         } else {\n-        \t//\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n-        \t//\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n+        //\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4 //\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n             rootPageId = store.getRootPageId(id);\n             PageData root = getPage(rootPageId, 0);\n             lastKey = root.getLastKey();\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/80/PageDataIndex.java\nindex 1b07f9abc6..57699e0b45 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/80/PageDataIndex.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.index;\n \n import org.h2.api.ErrorCode;\n@@ -45,13 +46,13 @@ public class PageDataIndex extends PageIndex {\n     private int memoryPerPage;\n     private int memoryCount;\n \n-//<<<<<<< HEAD\n+    //<<<<<<< HEAD\n //    private final boolean multiVersion;\n //\n //    //PageDataIndex\u7684id\u5c31\u662f\u8868\u7684id\uff0c\u5176\u4ed6\u7d22\u5f15\u5982PageBtreeIndex\u7684id\u662f\u81ea\u52a8\u5206\u914d\u7684\u5e76\u4e0d\u662f\u8868\u7684id\n //=======\n     public PageDataIndex(RegularTable table, int id, IndexColumn[] columns,\n-            IndexType indexType, boolean create, Session session) {\n+                         IndexType indexType, boolean create, Session session) {\n         super(table, id, table.getName() + \"_DATA\", columns, indexType);\n \n         // trace = database.getTrace(Trace.PAGE_STORE + \"_di\");\n@@ -68,8 +69,8 @@ public class PageDataIndex extends PageIndex {\n             PageDataLeaf root = PageDataLeaf.create(this, rootPageId, PageData.ROOT);\n             store.update(root);\n         } else {\n-        \t//\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n-        \t//\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n+            //\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n+            //\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n             rootPageId = store.getRootPageId(id);\n             PageData root = getPage(rootPageId, 0);\n             lastKey = root.getLastKey();\n@@ -148,7 +149,7 @@ public class PageDataIndex extends PageIndex {\n     public DbException getNewDuplicateKeyException() {\n         String sql = \"PRIMARY KEY ON \" + table.getSQL();\n         if (mainIndexColumn >= 0 && mainIndexColumn < indexColumns.length) {\n-            sql +=  \"(\" + indexColumns[mainIndexColumn].getSQL() + \")\";\n+            sql += \"(\" + indexColumns[mainIndexColumn].getSQL() + \")\";\n         }\n         DbException e = DbException.get(ErrorCode.DUPLICATE_KEY_1, sql);\n         e.setSource(this);\n@@ -197,13 +198,13 @@ public class PageDataIndex extends PageIndex {\n             return (PageDataOverflow) p;\n         }\n         throw DbException.get(ErrorCode.FILE_CORRUPTED_1,\n-                p == null ? \"null\" : p.toString());\n+            p == null ? \"null\" : p.toString());\n     }\n \n     /**\n      * Read the given page.\n      *\n-     * @param id the page id\n+     * @param id     the page id\n      * @param parent the parent, or -1 if unknown\n      * @return the page\n      */\n@@ -224,7 +225,7 @@ public class PageDataIndex extends PageIndex {\n         if (parent != -1) {\n             if (p.getParentPageId() != parent) {\n                 throw DbException.throwInternalError(p +\n-                        \" parent \" + p.getParentPageId() + \" expected \" + parent);\n+                    \" parent \" + p.getParentPageId() + \" expected \" + parent);\n             }\n         }\n         return p;\n@@ -238,9 +239,9 @@ public class PageDataIndex extends PageIndex {\n     /**\n      * Get the key from the row.\n      *\n-     * @param row the row\n+     * @param row     the row\n      * @param ifEmpty the value to use if the row is empty\n-     * @param ifNull the value to use if the column is NULL\n+     * @param ifNull  the value to use if the column is NULL\n      * @return the key\n      */\n     long getKey(SearchRow row, long ifEmpty, long ifNull) {\n@@ -269,8 +270,8 @@ public class PageDataIndex extends PageIndex {\n      * Search for a specific row or a set of rows.\n      *\n      * @param session the session\n-     * @param first the key of the first row\n-     * @param last the key of the last row\n+     * @param first   the key of the first row\n+     * @param last    the key of the last row\n      * @return the cursor\n      */\n     Cursor find(Session session, long first, long last) {\n@@ -290,14 +291,14 @@ public class PageDataIndex extends PageIndex {\n \n     @Override\n     public double getCost(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            AllColumnsForPlan allColumnsSet) {\n+                          TableFilter[] filters, int filter, SortOrder sortOrder,\n+                          AllColumnsForPlan allColumnsSet) {\n         // The +200 is so that indexes that can return the same data, but have less\n         // columns, will take precedence. This all works out easier in the MVStore case,\n         // because MVStore uses the same cost calculation code for the ScanIndex (i.e.\n         // the MVPrimaryIndex) and all other indices.\n         return 10 * (tableData.getRowCountApproximation() +\n-                Constants.COST_ROW_OFFSET) + 200;\n+            Constants.COST_ROW_OFFSET) + 200;\n     }\n \n     @Override\n@@ -444,7 +445,7 @@ public class PageDataIndex extends PageIndex {\n      * The root page has changed.\n      *\n      * @param session the session\n-     * @param newPos the new position\n+     * @param newPos  the new position\n      */\n     void setRootPageId(Session session, int newPos) {\n         store.removeMeta(this, session);\n@@ -505,7 +506,7 @@ public class PageDataIndex extends PageIndex {\n             memoryPerPage += (x - memoryPerPage) / ++memoryCount;\n         } else {\n             memoryPerPage += (x > memoryPerPage ? 1 : -1) +\n-                    ((x - memoryPerPage) / Constants.MEMORY_FACTOR);\n+                ((x - memoryPerPage) / Constants.MEMORY_FACTOR);\n         }\n     }\n \n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/80/PageDataIndex.java\nindex 1b07f9abc6..15aec9b564 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/80/PageDataIndex.java\n@@ -29,6 +29,8 @@ import org.h2.value.ValueNull;\n  * all rows of a table. Each regular table has one such object, even if no\n  * primary key or indexes are defined.\n  */\n+\n+\n public class PageDataIndex extends PageIndex {\n \n     private final PageStore store;\n@@ -50,8 +52,8 @@ public class PageDataIndex extends PageIndex {\n //\n //    //PageDataIndex\u7684id\u5c31\u662f\u8868\u7684id\uff0c\u5176\u4ed6\u7d22\u5f15\u5982PageBtreeIndex\u7684id\u662f\u81ea\u52a8\u5206\u914d\u7684\u5e76\u4e0d\u662f\u8868\u7684id\n //=======\n-    public PageDataIndex(RegularTable table, int id, IndexColumn[] columns,\n-            IndexType indexType, boolean create, Session session) {\n+\n+    public PageDataIndex(RegularTable table, int id, IndexColumn[] columns, IndexType indexType, boolean create, Session session) {\n         super(table, id, table.getName() + \"_DATA\", columns, indexType);\n \n         // trace = database.getTrace(Trace.PAGE_STORE + \"_di\");\n@@ -68,8 +70,8 @@ public class PageDataIndex extends PageIndex {\n             PageDataLeaf root = PageDataLeaf.create(this, rootPageId, PageData.ROOT);\n             store.update(root);\n         } else {\n-        \t//\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n-        \t//\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n+            //\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n+            //\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n             rootPageId = store.getRootPageId(id);\n             PageData root = getPage(rootPageId, 0);\n             lastKey = root.getLastKey();\n@@ -145,10 +147,11 @@ public class PageDataIndex extends PageIndex {\n         lastKey = Math.max(lastKey, row.getKey());\n     }\n \n+\n     public DbException getNewDuplicateKeyException() {\n         String sql = \"PRIMARY KEY ON \" + table.getSQL();\n         if (mainIndexColumn >= 0 && mainIndexColumn < indexColumns.length) {\n-            sql +=  \"(\" + indexColumns[mainIndexColumn].getSQL() + \")\";\n+            sql += \"(\" + indexColumns[mainIndexColumn].getSQL() + \")\";\n         }\n         DbException e = DbException.get(ErrorCode.DUPLICATE_KEY_1, sql);\n         e.setSource(this);\n@@ -191,13 +194,15 @@ public class PageDataIndex extends PageIndex {\n      * @param id the page id\n      * @return the page\n      */\n+\n+\n     PageDataOverflow getPageOverflow(int id) {\n         Page p = store.getPage(id);\n         if (p instanceof PageDataOverflow) {\n             return (PageDataOverflow) p;\n         }\n         throw DbException.get(ErrorCode.FILE_CORRUPTED_1,\n-                p == null ? \"null\" : p.toString());\n+                              p == null ? \"null\" : p.toString());\n     }\n \n     /**\n@@ -207,6 +212,8 @@ public class PageDataIndex extends PageIndex {\n      * @param parent the parent, or -1 if unknown\n      * @return the page\n      */\n+\n+\n     PageData getPage(int id, int parent) {\n         Page pd = store.getPage(id);\n         if (pd == null) {\n@@ -223,8 +230,8 @@ public class PageDataIndex extends PageIndex {\n         PageData p = (PageData) pd;\n         if (parent != -1) {\n             if (p.getParentPageId() != parent) {\n-                throw DbException.throwInternalError(p +\n-                        \" parent \" + p.getParentPageId() + \" expected \" + parent);\n+                throw DbException.throwInternalError(p + \" parent \"\n+                + p.getParentPageId() + \" expected \" + parent);\n             }\n         }\n         return p;\n@@ -243,6 +250,8 @@ public class PageDataIndex extends PageIndex {\n      * @param ifNull the value to use if the column is NULL\n      * @return the key\n      */\n+\n+\n     long getKey(SearchRow row, long ifEmpty, long ifNull) {\n         if (row == null) {\n             return ifEmpty;\n@@ -262,7 +271,6 @@ public class PageDataIndex extends PageIndex {\n         long to = last == null ? Long.MAX_VALUE : last.getKey();\n         PageData root = getPage(rootPageId, 0);\n         return root.find(session, from, to);\n-\n     }\n \n     /**\n@@ -273,6 +281,8 @@ public class PageDataIndex extends PageIndex {\n      * @param last the key of the last row\n      * @return the cursor\n      */\n+\n+\n     Cursor find(Session session, long first, long last) {\n         PageData root = getPage(rootPageId, 0);\n         return root.find(session, first, last);\n@@ -283,21 +293,19 @@ public class PageDataIndex extends PageIndex {\n         throw DbException.throwInternalError(toString());\n     }\n \n+\n     long getLastKey() {\n         PageData root = getPage(rootPageId, 0);\n         return root.getLastKey();\n     }\n \n     @Override\n-    public double getCost(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            AllColumnsForPlan allColumnsSet) {\n+    public double getCost(Session session, int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder, AllColumnsForPlan allColumnsSet) {\n         // The +200 is so that indexes that can return the same data, but have less\n         // columns, will take precedence. This all works out easier in the MVStore case,\n         // because MVStore uses the same cost calculation code for the ScanIndex (i.e.\n         // the MVPrimaryIndex) and all other indices.\n-        return 10 * (tableData.getRowCountApproximation() +\n-                Constants.COST_ROW_OFFSET) + 200;\n+        return 10 * (tableData.getRowCountApproximation() + Constants.COST_ROW_OFFSET) + 200;\n     }\n \n     @Override\n@@ -389,11 +397,14 @@ public class PageDataIndex extends PageIndex {\n      * @param key the key\n      * @return the row\n      */\n+\n+\n     public Row getRowWithKey(long key) {\n         PageData root = getPage(rootPageId, 0);\n         return root.getRowWithKey(key);\n     }\n \n+\n     PageStore getPageStore() {\n         return store;\n     }\n@@ -446,6 +457,8 @@ public class PageDataIndex extends PageIndex {\n      * @param session the session\n      * @param newPos the new position\n      */\n+\n+\n     void setRootPageId(Session session, int newPos) {\n         store.removeMeta(this, session);\n         this.rootPageId = newPos;\n@@ -453,10 +466,12 @@ public class PageDataIndex extends PageIndex {\n         store.addIndex(this);\n     }\n \n+\n     public void setMainIndexColumn(int mainIndexColumn) {\n         this.mainIndexColumn = mainIndexColumn;\n     }\n \n+\n     public int getMainIndexColumn() {\n         return mainIndexColumn;\n     }\n@@ -500,12 +515,13 @@ public class PageDataIndex extends PageIndex {\n      *\n      * @param x the new memory size\n      */\n+\n+\n     void memoryChange(int x) {\n         if (memoryCount < Constants.MEMORY_FACTOR) {\n             memoryPerPage += (x - memoryPerPage) / ++memoryCount;\n         } else {\n-            memoryPerPage += (x > memoryPerPage ? 1 : -1) +\n-                    ((x - memoryPerPage) / Constants.MEMORY_FACTOR);\n+            memoryPerPage += (x > memoryPerPage ? 1 : -1) + ((x - memoryPerPage) / Constants.MEMORY_FACTOR);\n         }\n     }\n \n@@ -514,4 +530,4 @@ public class PageDataIndex extends PageIndex {\n         return true;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/80/PageDataIndex.java\nindex 1b07f9abc6..fc867025a7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/80/PageDataIndex.java\n@@ -68,8 +68,7 @@ public class PageDataIndex extends PageIndex {\n             PageDataLeaf root = PageDataLeaf.create(this, rootPageId, PageData.ROOT);\n             store.update(root);\n         } else {\n-        \t//\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n-        \t//\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n+        //\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4 //\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n             rootPageId = store.getRootPageId(id);\n             PageData root = getPage(rootPageId, 0);\n             lastKey = root.getLastKey();\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/80/PageDataIndex.java\nindex 1b07f9abc6..8453343d0e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/80/PageDataIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/80/PageDataIndex.java\n@@ -68,8 +68,8 @@ public class PageDataIndex extends PageIndex {\n             PageDataLeaf root = PageDataLeaf.create(this, rootPageId, PageData.ROOT);\n             store.update(root);\n         } else {\n-        \t//\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n-        \t//\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n+            //\u7b2c\u4e00\u6b21\u4eceorg.h2.store.PageStore.openMetaIndex()\u90a3\u8f6c\u8fc7\u6765\u65f6\uff0cid\u662f-1\uff0c\u6b64\u65f6\u53d6\u51fa\u6765\u7684rootPageId\u662f4\n+         //\u662f\u5728org.h2.store.PageStore.open()\u90a3\u4e8b\u5148\u653e\u5165\u7684\uff0cpageId=4\u7684\u9875\u56fa\u5b9a\u662fmetaIndex\u7684rootPageId\n             rootPageId = store.getRootPageId(id);\n             PageData root = getPage(rootPageId, 0);\n             lastKey = root.getLastKey();\n",
            "diff_size": 2
        }
    ]
}