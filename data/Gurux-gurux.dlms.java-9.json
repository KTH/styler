{
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "68",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 86).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * Collection of enumerator values.\n     */\n    private static java.util.HashMap<Integer, CreditCollectionConfiguration> mappings;\n\n    /**\n     * Returns collection of enumerator values.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler/9/CreditCollectionConfiguration.java\nindex 0f77a4da45..70570f5d6a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler/9/CreditCollectionConfiguration.java\n@@ -65,52 +65,53 @@ public enum CreditCollectionConfiguration {\n     /**\n      * Collection of enumerator values.\n      */\n-    private static java.util.HashMap<Integer, CreditCollectionConfiguration> mappings;\n+    private static java.util.HashMap<Integer, CreditCollectionConfiguration>\n+            mappings;\n \n-    /**\n+     /**\n      * Returns collection of enumerator values.\n      * \n      * @return Enumerator values.\n      */\n-    private static HashMap<Integer, CreditCollectionConfiguration>\n-            getMappings() {\n-        synchronized (CreditCollectionConfiguration.class) {\n-            if (mappings == null) {\n-                mappings =\n-                        new HashMap<Integer, CreditCollectionConfiguration>();\n-            }\n-        }\n-        return mappings;\n-    }\n+     private static HashMap<Integer, CreditCollectionConfiguration>\n+             getMappings() {\n+         synchronized (CreditCollectionConfiguration.class) {\n+             if (mappings == null) {\n+                 mappings =\n+                         new HashMap<Integer, CreditCollectionConfiguration>();\n+             }\n+         }\n+         return mappings;\n+     }\n \n-    /**\n+     /**\n      * Constructor.\n      * \n      * @param value\n      *            Integer value of enumerator.\n      */\n-    CreditCollectionConfiguration(final int value) {\n-        intValue = value;\n-        getMappings().put(new Integer(value), this);\n-    }\n+     CreditCollectionConfiguration(final int value) {\n+         intValue = value;\n+         getMappings().put(new Integer(value), this);\n+     }\n \n-    /**\n+     /**\n      * Get integer value for enumerator.\n      * \n      * @return Enumerator integer value.\n      */\n-    public int getValue() {\n-        return intValue;\n-    }\n+     public int getValue() {\n+         return intValue;\n+     }\n \n-    /**\n+     /**\n      * Returns enumerator value from an integer value.\n      * \n      * @param value\n      *            Integer value.\n      * @return Enumeration value.\n      */\n-    public static CreditCollectionConfiguration forValue(final int value) {\n-        return getMappings().get(new Integer(value));\n-    }\n-}\n\\ No newline at end of file\n+     public static CreditCollectionConfiguration forValue(final int value) {\n+         return getMappings().get(new Integer(value));\n+     }\n+ }\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/intellij/9/CreditCollectionConfiguration.java\nindex 0f77a4da45..d4590e8fb6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/intellij/9/CreditCollectionConfiguration.java\n@@ -40,77 +40,76 @@ import java.util.HashMap;\n  * Defines behavior under specific conditions.\n  */\n public enum CreditCollectionConfiguration {\n-    /**\n-     * None.\n-     */\n-    NONE(0),\n-    /**\n-     * Collect when supply disconnected.\n-     */\n-    DISCONNECTED(0x80),\n-    /**\n-     * Collect in load limiting periods.\n-     */\n-    LOAD_LIMITING(0x40),\n-    /**\n-     * Collect in friendly credit periods.\n-     */\n-    FRIENDLY_CREDIT(0x20);\n+  /**\n+   * None.\n+   */\n+  NONE(0),\n+  /**\n+   * Collect when supply disconnected.\n+   */\n+  DISCONNECTED(0x80),\n+  /**\n+   * Collect in load limiting periods.\n+   */\n+  LOAD_LIMITING(0x40),\n+  /**\n+   * Collect in friendly credit periods.\n+   */\n+  FRIENDLY_CREDIT(0x20);\n \n-    /**\n-     * Integer value of enumerator.\n-     */\n-    private int intValue;\n+  /**\n+   * Integer value of enumerator.\n+   */\n+  private int intValue;\n \n-    /**\n-     * Collection of enumerator values.\n-     */\n-    private static java.util.HashMap<Integer, CreditCollectionConfiguration> mappings;\n+  /**\n+   * Collection of enumerator values.\n+   */\n+  private static java.util.HashMap<Integer, CreditCollectionConfiguration>\n+      mappings;\n \n-    /**\n-     * Returns collection of enumerator values.\n-     * \n-     * @return Enumerator values.\n-     */\n-    private static HashMap<Integer, CreditCollectionConfiguration>\n-            getMappings() {\n-        synchronized (CreditCollectionConfiguration.class) {\n-            if (mappings == null) {\n-                mappings =\n-                        new HashMap<Integer, CreditCollectionConfiguration>();\n-            }\n-        }\n-        return mappings;\n+  /**\n+   * Returns collection of enumerator values.\n+   *\n+   * @return Enumerator values.\n+   */\n+  private static HashMap<Integer, CreditCollectionConfiguration>\n+  getMappings() {\n+    synchronized (CreditCollectionConfiguration.class) {\n+      if (mappings == null) {\n+        mappings =\n+            new HashMap<Integer, CreditCollectionConfiguration>();\n+      }\n     }\n+    return mappings;\n+  }\n \n-    /**\n-     * Constructor.\n-     * \n-     * @param value\n-     *            Integer value of enumerator.\n-     */\n-    CreditCollectionConfiguration(final int value) {\n-        intValue = value;\n-        getMappings().put(new Integer(value), this);\n-    }\n+  /**\n+   * Constructor.\n+   *\n+   * @param value Integer value of enumerator.\n+   */\n+  CreditCollectionConfiguration(final int value) {\n+    intValue = value;\n+    getMappings().put(new Integer(value), this);\n+  }\n \n-    /**\n-     * Get integer value for enumerator.\n-     * \n-     * @return Enumerator integer value.\n-     */\n-    public int getValue() {\n-        return intValue;\n-    }\n+  /**\n+   * Get integer value for enumerator.\n+   *\n+   * @return Enumerator integer value.\n+   */\n+  public int getValue() {\n+    return intValue;\n+  }\n \n-    /**\n-     * Returns enumerator value from an integer value.\n-     * \n-     * @param value\n-     *            Integer value.\n-     * @return Enumeration value.\n-     */\n-    public static CreditCollectionConfiguration forValue(final int value) {\n-        return getMappings().get(new Integer(value));\n-    }\n+  /**\n+   * Returns enumerator value from an integer value.\n+   *\n+   * @param value Integer value.\n+   * @return Enumeration value.\n+   */\n+  public static CreditCollectionConfiguration forValue(final int value) {\n+    return getMappings().get(new Integer(value));\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/codebuff/9/CreditCollectionConfiguration.java\nindex 0f77a4da45..4cf10be22d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/codebuff/9/CreditCollectionConfiguration.java\n@@ -39,27 +39,36 @@ import java.util.HashMap;\n /**\n  * Defines behavior under specific conditions.\n  */\n+\n public enum CreditCollectionConfiguration {\n     /**\n      * None.\n      */\n+\n     NONE(0),\n     /**\n      * Collect when supply disconnected.\n      */\n+\n+\n     DISCONNECTED(0x80),\n     /**\n      * Collect in load limiting periods.\n      */\n+\n+\n     LOAD_LIMITING(0x40),\n     /**\n      * Collect in friendly credit periods.\n      */\n+\n+\n     FRIENDLY_CREDIT(0x20);\n \n     /**\n      * Integer value of enumerator.\n      */\n+\n     private int intValue;\n \n     /**\n@@ -72,12 +81,10 @@ public enum CreditCollectionConfiguration {\n      * \n      * @return Enumerator values.\n      */\n-    private static HashMap<Integer, CreditCollectionConfiguration>\n-            getMappings() {\n+    private static HashMap<Integer, CreditCollectionConfiguration> getMappings() {\n         synchronized (CreditCollectionConfiguration.class) {\n             if (mappings == null) {\n-                mappings =\n-                        new HashMap<Integer, CreditCollectionConfiguration>();\n+                mappings = new HashMap<Integer, CreditCollectionConfiguration>();\n             }\n         }\n         return mappings;\n@@ -89,6 +96,7 @@ public enum CreditCollectionConfiguration {\n      * @param value\n      *            Integer value of enumerator.\n      */\n+\n     CreditCollectionConfiguration(final int value) {\n         intValue = value;\n         getMappings().put(new Integer(value), this);\n@@ -99,6 +107,8 @@ public enum CreditCollectionConfiguration {\n      * \n      * @return Enumerator integer value.\n      */\n+\n+\n     public int getValue() {\n         return intValue;\n     }\n@@ -110,6 +120,8 @@ public enum CreditCollectionConfiguration {\n      *            Integer value.\n      * @return Enumeration value.\n      */\n+\n+\n     public static CreditCollectionConfiguration forValue(final int value) {\n         return getMappings().get(new Integer(value));\n     }\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler_three_grams/9/CreditCollectionConfiguration.java\nindex 0f77a4da45..70570f5d6a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/9/CreditCollectionConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler_three_grams/9/CreditCollectionConfiguration.java\n@@ -65,52 +65,53 @@ public enum CreditCollectionConfiguration {\n     /**\n      * Collection of enumerator values.\n      */\n-    private static java.util.HashMap<Integer, CreditCollectionConfiguration> mappings;\n+    private static java.util.HashMap<Integer, CreditCollectionConfiguration>\n+            mappings;\n \n-    /**\n+     /**\n      * Returns collection of enumerator values.\n      * \n      * @return Enumerator values.\n      */\n-    private static HashMap<Integer, CreditCollectionConfiguration>\n-            getMappings() {\n-        synchronized (CreditCollectionConfiguration.class) {\n-            if (mappings == null) {\n-                mappings =\n-                        new HashMap<Integer, CreditCollectionConfiguration>();\n-            }\n-        }\n-        return mappings;\n-    }\n+     private static HashMap<Integer, CreditCollectionConfiguration>\n+             getMappings() {\n+         synchronized (CreditCollectionConfiguration.class) {\n+             if (mappings == null) {\n+                 mappings =\n+                         new HashMap<Integer, CreditCollectionConfiguration>();\n+             }\n+         }\n+         return mappings;\n+     }\n \n-    /**\n+     /**\n      * Constructor.\n      * \n      * @param value\n      *            Integer value of enumerator.\n      */\n-    CreditCollectionConfiguration(final int value) {\n-        intValue = value;\n-        getMappings().put(new Integer(value), this);\n-    }\n+     CreditCollectionConfiguration(final int value) {\n+         intValue = value;\n+         getMappings().put(new Integer(value), this);\n+     }\n \n-    /**\n+     /**\n      * Get integer value for enumerator.\n      * \n      * @return Enumerator integer value.\n      */\n-    public int getValue() {\n-        return intValue;\n-    }\n+     public int getValue() {\n+         return intValue;\n+     }\n \n-    /**\n+     /**\n      * Returns enumerator value from an integer value.\n      * \n      * @param value\n      *            Integer value.\n      * @return Enumeration value.\n      */\n-    public static CreditCollectionConfiguration forValue(final int value) {\n-        return getMappings().get(new Integer(value));\n-    }\n-}\n\\ No newline at end of file\n+     public static CreditCollectionConfiguration forValue(final int value) {\n+         return getMappings().get(new Integer(value));\n+     }\n+ }\n\\ No newline at end of file\n",
            "diff_size": 31
        }
    ]
}