{
    "error_id": "311",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.spring;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/311/StartMessageDeployedEventProducer.java\nindex 6753d09ca7..a27d9dffbb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/311/StartMessageDeployedEventProducer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring;\n \n import java.util.ArrayList;\n@@ -38,7 +39,7 @@ import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationEventPublisher;\n \n public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLifeCycle {\n-    \n+\n     private static Logger logger = LoggerFactory.getLogger(StartMessageDeployedEventProducer.class);\n \n     private RepositoryService repositoryService;\n@@ -47,7 +48,7 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n     private StartMessageSubscriptionConverter subscriptionConverter;\n     private List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners;\n     private ApplicationEventPublisher eventPublisher;\n-    \n+\n     public StartMessageDeployedEventProducer(RepositoryService repositoryService,\n                                         ManagementService managementService,\n                                         StartMessageSubscriptionConverter subscriptionConverter,\n@@ -61,11 +62,11 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n         this.listeners = listeners;\n         this.eventPublisher = eventPublisher;\n     }\n-    \n+\n     public void doStart() {\n         List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());\n         List<StartMessageDeployedEvent> messageDeployedEvents = new ArrayList<>();\n-        \n+\n         for (ProcessDefinition processDefinition : processDefinitions) {\n             managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId()))\n                              .stream()\n@@ -79,20 +80,20 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n                                                                                                    .build())\n                              .forEach(messageDeployedEvents::add);\n         }\n-        \n+\n         managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n \n         if (!messageDeployedEvents.isEmpty()) {\n             eventPublisher.publishEvent(new StartMessageDeployedEvents(messageDeployedEvents));\n         }\n     }\n-    \n+\n     public void doStop() {\n         // nothing\n     }\n \n     class DispatchStartMessageDeployedEvents implements Command<Void> {\n-        \n+\n         private final List<StartMessageDeployedEvent> messageDeployedEvents;\n \n         public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n@@ -104,13 +105,13 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n                 messageDeployedEvents.stream()\n                                      .forEach(listener::onEvent);\n             }\n-            \n+\n             return null;\n         }\n-    }    \n+    }\n \n     static class FindStartMessageEventSubscriptions implements Command<List<MessageEventSubscriptionEntity>> {\n-        \n+\n         private static final String MESSAGE = \"message\";\n         private final String processDefinitionId;\n \n",
            "diff_size": 11
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/311/StartMessageDeployedEventProducer.java\nindex 6753d09ca7..a3746b85e6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/311/StartMessageDeployedEventProducer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring;\n \n import java.util.ArrayList;\n@@ -38,7 +39,7 @@ import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationEventPublisher;\n \n public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLifeCycle {\n-    \n+\n     private static Logger logger = LoggerFactory.getLogger(StartMessageDeployedEventProducer.class);\n \n     private RepositoryService repositoryService;\n@@ -47,13 +48,13 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n     private StartMessageSubscriptionConverter subscriptionConverter;\n     private List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners;\n     private ApplicationEventPublisher eventPublisher;\n-    \n+\n     public StartMessageDeployedEventProducer(RepositoryService repositoryService,\n-                                        ManagementService managementService,\n-                                        StartMessageSubscriptionConverter subscriptionConverter,\n-                                        APIProcessDefinitionConverter converter,\n-                                        List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners,\n-                                        ApplicationEventPublisher eventPublisher) {\n+                                             ManagementService managementService,\n+                                             StartMessageSubscriptionConverter subscriptionConverter,\n+                                             APIProcessDefinitionConverter converter,\n+                                             List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners,\n+                                             ApplicationEventPublisher eventPublisher) {\n         this.repositoryService = repositoryService;\n         this.managementService = managementService;\n         this.subscriptionConverter = subscriptionConverter;\n@@ -61,38 +62,38 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n         this.listeners = listeners;\n         this.eventPublisher = eventPublisher;\n     }\n-    \n+\n     public void doStart() {\n         List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());\n         List<StartMessageDeployedEvent> messageDeployedEvents = new ArrayList<>();\n-        \n+\n         for (ProcessDefinition processDefinition : processDefinitions) {\n             managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId()))\n-                             .stream()\n-                             .map(subscriptionConverter::convertToStartMessageSubscription)\n-                             .map(messageSubscription -> StartMessageDeploymentDefinitionImpl.builder()\n-                                                                                             .withMessageSubscription(messageSubscription)\n-                                                                                             .withProcessDefinition(processDefinition)\n-                                                                                             .build())\n-                             .map(startMessageDeploymentDefinition -> StartMessageDeployedEventImpl.builder()\n-                                                                                                   .withEntity(startMessageDeploymentDefinition)\n-                                                                                                   .build())\n-                             .forEach(messageDeployedEvents::add);\n+                    .stream()\n+                    .map(subscriptionConverter::convertToStartMessageSubscription)\n+                    .map(messageSubscription -> StartMessageDeploymentDefinitionImpl.builder()\n+                            .withMessageSubscription(messageSubscription)\n+                            .withProcessDefinition(processDefinition)\n+                            .build())\n+                    .map(startMessageDeploymentDefinition -> StartMessageDeployedEventImpl.builder()\n+                            .withEntity(startMessageDeploymentDefinition)\n+                            .build())\n+                    .forEach(messageDeployedEvents::add);\n         }\n-        \n+\n         managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n \n         if (!messageDeployedEvents.isEmpty()) {\n             eventPublisher.publishEvent(new StartMessageDeployedEvents(messageDeployedEvents));\n         }\n     }\n-    \n+\n     public void doStop() {\n         // nothing\n     }\n \n     class DispatchStartMessageDeployedEvents implements Command<Void> {\n-        \n+\n         private final List<StartMessageDeployedEvent> messageDeployedEvents;\n \n         public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n@@ -102,15 +103,15 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n         public Void execute(CommandContext commandContext) {\n             for (ProcessRuntimeEventListener<StartMessageDeployedEvent> listener : listeners) {\n                 messageDeployedEvents.stream()\n-                                     .forEach(listener::onEvent);\n+                        .forEach(listener::onEvent);\n             }\n-            \n+\n             return null;\n         }\n-    }    \n+    }\n \n     static class FindStartMessageEventSubscriptions implements Command<List<MessageEventSubscriptionEntity>> {\n-        \n+\n         private static final String MESSAGE = \"message\";\n         private final String processDefinitionId;\n \n@@ -120,12 +121,12 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n \n         public List<MessageEventSubscriptionEntity> execute(CommandContext commandContext) {\n             return new EventSubscriptionQueryImpl(commandContext).eventType(MESSAGE)\n-                                                                 .configuration(processDefinitionId)\n-                                                                 .list()\n-                                                                 .stream()\n-                                                                 .map(MessageEventSubscriptionEntity.class::cast)\n-                                                                 .filter(it -> it.getProcessInstanceId() == null)\n-                                                                 .collect(Collectors.toList());\n+                    .configuration(processDefinitionId)\n+                    .list()\n+                    .stream()\n+                    .map(MessageEventSubscriptionEntity.class::cast)\n+                    .filter(it -> it.getProcessInstanceId() == null)\n+                    .collect(Collectors.toList());\n         }\n     }\n \n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/311/StartMessageDeployedEventProducer.java\nindex 6753d09ca7..5fa6edaa12 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/311/StartMessageDeployedEventProducer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring;\n \n import java.util.ArrayList;\n@@ -38,17 +39,17 @@ import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationEventPublisher;\n \n public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLifeCycle {\n-    \n-    private static Logger logger = LoggerFactory.getLogger(StartMessageDeployedEventProducer.class);\n \n-    private RepositoryService repositoryService;\n+  private static Logger logger = LoggerFactory.getLogger(StartMessageDeployedEventProducer.class);\n+\n+private RepositoryService repositoryService;\n     private ManagementService managementService;\n     private APIProcessDefinitionConverter converter;\n     private StartMessageSubscriptionConverter subscriptionConverter;\n     private List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners;\n     private ApplicationEventPublisher eventPublisher;\n-    \n-    public StartMessageDeployedEventProducer(RepositoryService repositoryService,\n+\n+public StartMessageDeployedEventProducer(RepositoryService repositoryService,\n                                         ManagementService managementService,\n                                         StartMessageSubscriptionConverter subscriptionConverter,\n                                         APIProcessDefinitionConverter converter,\n@@ -65,22 +66,15 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n     public void doStart() {\n         List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());\n         List<StartMessageDeployedEvent> messageDeployedEvents = new ArrayList<>();\n-        \n-        for (ProcessDefinition processDefinition : processDefinitions) {\n-            managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId()))\n-                             .stream()\n+for (ProcessDefinition processDefinition : processDefinitions) {\n+            managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId())).stream()\n                              .map(subscriptionConverter::convertToStartMessageSubscription)\n-                             .map(messageSubscription -> StartMessageDeploymentDefinitionImpl.builder()\n-                                                                                             .withMessageSubscription(messageSubscription)\n+                             .map(messageSubscription -> StartMessageDeploymentDefinitionImpl.builder().withMessageSubscription(messageSubscription)\n                                                                                              .withProcessDefinition(processDefinition)\n-                                                                                             .build())\n-                             .map(startMessageDeploymentDefinition -> StartMessageDeployedEventImpl.builder()\n-                                                                                                   .withEntity(startMessageDeploymentDefinition)\n-                                                                                                   .build())\n-                             .forEach(messageDeployedEvents::add);\n-        }\n-        \n-        managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n+                                                                                             .build()).map(startMessageDeploymentDefinition -> StartMessageDeployedEventImpl.builder().withEntity(startMessageDeploymentDefinition)\n+                                                                                                   .build()).forEach(messageDeployedEvents::add);\n+  }\n+managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n \n         if (!messageDeployedEvents.isEmpty()) {\n             eventPublisher.publishEvent(new StartMessageDeployedEvents(messageDeployedEvents));\n@@ -88,45 +82,44 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n     }\n     \n     public void doStop() {\n-        // nothing\n+\n+    // nothing\n     }\n \n     class DispatchStartMessageDeployedEvents implements Command<Void> {\n-        \n-        private final List<StartMessageDeployedEvent> messageDeployedEvents;\n \n-        public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n+    private final List<StartMessageDeployedEvent> messageDeployedEvents;\n+\n+public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n             this.messageDeployedEvents = messageDeployedEvents;\n         }\n \n         public Void execute(CommandContext commandContext) {\n             for (ProcessRuntimeEventListener<StartMessageDeployedEvent> listener : listeners) {\n-                messageDeployedEvents.stream()\n-                                     .forEach(listener::onEvent);\n-            }\n-            \n-            return null;\n-        }\n+                messageDeployedEvents.stream().forEach(listener::onEvent);\n+  }\n+return null;\n+    }\n     }    \n \n     static class FindStartMessageEventSubscriptions implements Command<List<MessageEventSubscriptionEntity>> {\n-        \n-        private static final String MESSAGE = \"message\";\n-        private final String processDefinitionId;\n+\n+  private static final String MESSAGE = \"message\";\n+\n+private final String processDefinitionId;\n \n         public FindStartMessageEventSubscriptions(String processDefinitionId) {\n             this.processDefinitionId = processDefinitionId;\n         }\n \n         public List<MessageEventSubscriptionEntity> execute(CommandContext commandContext) {\n-            return new EventSubscriptionQueryImpl(commandContext).eventType(MESSAGE)\n-                                                                 .configuration(processDefinitionId)\n+            return new EventSubscriptionQueryImpl(commandContext).eventType(MESSAGE).configuration(processDefinitionId)\n                                                                  .list()\n                                                                  .stream()\n                                                                  .map(MessageEventSubscriptionEntity.class::cast)\n                                                                  .filter(it -> it.getProcessInstanceId() == null)\n                                                                  .collect(Collectors.toList());\n-        }\n+    }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 332).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 518).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 257).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/311/StartMessageDeployedEventProducer.java\nindex 6753d09ca7..8911a12aa9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/311/StartMessageDeployedEventProducer.java\n@@ -18,7 +18,6 @@ package org.activiti.spring;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.stream.Collectors;\n-\n import org.activiti.api.process.model.ProcessDefinition;\n import org.activiti.api.process.model.events.StartMessageDeployedEvent;\n import org.activiti.api.process.runtime.events.listener.ProcessRuntimeEventListener;\n@@ -37,96 +36,78 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationEventPublisher;\n \n+\n public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLifeCycle {\n-    \n+\n     private static Logger logger = LoggerFactory.getLogger(StartMessageDeployedEventProducer.class);\n \n     private RepositoryService repositoryService;\n+\n     private ManagementService managementService;\n+\n     private APIProcessDefinitionConverter converter;\n+\n     private StartMessageSubscriptionConverter subscriptionConverter;\n+\n     private List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners;\n+\n     private ApplicationEventPublisher eventPublisher;\n-    \n-    public StartMessageDeployedEventProducer(RepositoryService repositoryService,\n-                                        ManagementService managementService,\n-                                        StartMessageSubscriptionConverter subscriptionConverter,\n-                                        APIProcessDefinitionConverter converter,\n-                                        List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners,\n-                                        ApplicationEventPublisher eventPublisher) {\n-        this.repositoryService = repositoryService;\n-        this.managementService = managementService;\n-        this.subscriptionConverter = subscriptionConverter;\n-        this.converter = converter;\n-        this.listeners = listeners;\n-        this.eventPublisher = eventPublisher;\n+\n+    public StartMessageDeployedEventProducer(RepositoryService repositoryService, ManagementService managementService, StartMessageSubscriptionConverter subscriptionConverter, APIProcessDefinitionConverter converter, List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners, ApplicationEventPublisher eventPublisher) {\n+    this.repositoryService = repositoryService;\n+    this.managementService = managementService;\n+    this.subscriptionConverter = subscriptionConverter;\n+    this.converter = converter;\n+    this.listeners = listeners;\n+    this.eventPublisher = eventPublisher;\n     }\n-    \n+\n     public void doStart() {\n-        List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());\n-        List<StartMessageDeployedEvent> messageDeployedEvents = new ArrayList<>();\n-        \n-        for (ProcessDefinition processDefinition : processDefinitions) {\n-            managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId()))\n-                             .stream()\n-                             .map(subscriptionConverter::convertToStartMessageSubscription)\n-                             .map(messageSubscription -> StartMessageDeploymentDefinitionImpl.builder()\n-                                                                                             .withMessageSubscription(messageSubscription)\n-                                                                                             .withProcessDefinition(processDefinition)\n-                                                                                             .build())\n-                             .map(startMessageDeploymentDefinition -> StartMessageDeployedEventImpl.builder()\n-                                                                                                   .withEntity(startMessageDeploymentDefinition)\n-                                                                                                   .build())\n-                             .forEach(messageDeployedEvents::add);\n-        }\n-        \n-        managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n-\n-        if (!messageDeployedEvents.isEmpty()) {\n-            eventPublisher.publishEvent(new StartMessageDeployedEvents(messageDeployedEvents));\n-        }\n+    List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());\n+    List<StartMessageDeployedEvent> messageDeployedEvents = new ArrayList<>();\n+    for (ProcessDefinition processDefinition : processDefinitions) {\n+        managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId())).stream().map(subscriptionConverter::convertToStartMessageSubscription).map(messageSubscription -> StartMessageDeploymentDefinitionImpl.builder().withMessageSubscription(messageSubscription).withProcessDefinition(processDefinition).build()).map(startMessageDeploymentDefinition -> StartMessageDeployedEventImpl.builder().withEntity(startMessageDeploymentDefinition).build()).forEach(messageDeployedEvents::add);\n+    }\n+    managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n+    if (!messageDeployedEvents.isEmpty()) {\n+        eventPublisher.publishEvent(new StartMessageDeployedEvents(messageDeployedEvents));\n     }\n-    \n+    }\n+\n     public void doStop() {\n         // nothing\n     }\n \n     class DispatchStartMessageDeployedEvents implements Command<Void> {\n-        \n-        private final List<StartMessageDeployedEvent> messageDeployedEvents;\n-\n-        public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n-            this.messageDeployedEvents = messageDeployedEvents;\n-        }\n-\n-        public Void execute(CommandContext commandContext) {\n-            for (ProcessRuntimeEventListener<StartMessageDeployedEvent> listener : listeners) {\n-                messageDeployedEvents.stream()\n-                                     .forEach(listener::onEvent);\n-            }\n-            \n-            return null;\n-        }\n-    }    \n \n-    static class FindStartMessageEventSubscriptions implements Command<List<MessageEventSubscriptionEntity>> {\n-        \n-        private static final String MESSAGE = \"message\";\n-        private final String processDefinitionId;\n-\n-        public FindStartMessageEventSubscriptions(String processDefinitionId) {\n-            this.processDefinitionId = processDefinitionId;\n-        }\n-\n-        public List<MessageEventSubscriptionEntity> execute(CommandContext commandContext) {\n-            return new EventSubscriptionQueryImpl(commandContext).eventType(MESSAGE)\n-                                                                 .configuration(processDefinitionId)\n-                                                                 .list()\n-                                                                 .stream()\n-                                                                 .map(MessageEventSubscriptionEntity.class::cast)\n-                                                                 .filter(it -> it.getProcessInstanceId() == null)\n-                                                                 .collect(Collectors.toList());\n-        }\n+    private final List<StartMessageDeployedEvent> messageDeployedEvents;\n+\n+    public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n+        this.messageDeployedEvents = messageDeployedEvents;\n     }\n \n+    public Void execute(CommandContext commandContext) {\n+for (ProcessRuntimeEventListener<StartMessageDeployedEvent> listener : listeners) {\n+    messageDeployedEvents.stream().forEach(listener::onEvent);\n }\n+return null;\n+    }\n+\n+    }\n+\n+    static class FindStartMessageEventSubscriptions implements Command<List<MessageEventSubscriptionEntity>> {\n+\n+    private static final String MESSAGE = \"message\";\n+\n+    private final String processDefinitionId;\n+\n+    public FindStartMessageEventSubscriptions(String processDefinitionId) {\n+        this.processDefinitionId = processDefinitionId;\n+    }\n+\n+    public List<MessageEventSubscriptionEntity> execute(CommandContext commandContext) {\n+        return new EventSubscriptionQueryImpl(commandContext).eventType(MESSAGE).configuration(processDefinitionId).list().stream().map(MessageEventSubscriptionEntity.class::cast).filter(it -> it.getProcessInstanceId() == null).collect(Collectors.toList());\n+    }\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/311/StartMessageDeployedEventProducer.java\nindex 6753d09ca7..a27d9dffbb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/311/StartMessageDeployedEventProducer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring;\n \n import java.util.ArrayList;\n@@ -38,7 +39,7 @@ import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationEventPublisher;\n \n public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLifeCycle {\n-    \n+\n     private static Logger logger = LoggerFactory.getLogger(StartMessageDeployedEventProducer.class);\n \n     private RepositoryService repositoryService;\n@@ -47,7 +48,7 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n     private StartMessageSubscriptionConverter subscriptionConverter;\n     private List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners;\n     private ApplicationEventPublisher eventPublisher;\n-    \n+\n     public StartMessageDeployedEventProducer(RepositoryService repositoryService,\n                                         ManagementService managementService,\n                                         StartMessageSubscriptionConverter subscriptionConverter,\n@@ -61,11 +62,11 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n         this.listeners = listeners;\n         this.eventPublisher = eventPublisher;\n     }\n-    \n+\n     public void doStart() {\n         List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());\n         List<StartMessageDeployedEvent> messageDeployedEvents = new ArrayList<>();\n-        \n+\n         for (ProcessDefinition processDefinition : processDefinitions) {\n             managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId()))\n                              .stream()\n@@ -79,20 +80,20 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n                                                                                                    .build())\n                              .forEach(messageDeployedEvents::add);\n         }\n-        \n+\n         managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n \n         if (!messageDeployedEvents.isEmpty()) {\n             eventPublisher.publishEvent(new StartMessageDeployedEvents(messageDeployedEvents));\n         }\n     }\n-    \n+\n     public void doStop() {\n         // nothing\n     }\n \n     class DispatchStartMessageDeployedEvents implements Command<Void> {\n-        \n+\n         private final List<StartMessageDeployedEvent> messageDeployedEvents;\n \n         public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n@@ -104,13 +105,13 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n                 messageDeployedEvents.stream()\n                                      .forEach(listener::onEvent);\n             }\n-            \n+\n             return null;\n         }\n-    }    \n+    }\n \n     static class FindStartMessageEventSubscriptions implements Command<List<MessageEventSubscriptionEntity>> {\n-        \n+\n         private static final String MESSAGE = \"message\";\n         private final String processDefinitionId;\n \n",
            "diff_size": 11
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/311/StartMessageDeployedEventProducer.java\nindex 6753d09ca7..a27d9dffbb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/311/StartMessageDeployedEventProducer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/311/StartMessageDeployedEventProducer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring;\n \n import java.util.ArrayList;\n@@ -38,7 +39,7 @@ import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationEventPublisher;\n \n public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLifeCycle {\n-    \n+\n     private static Logger logger = LoggerFactory.getLogger(StartMessageDeployedEventProducer.class);\n \n     private RepositoryService repositoryService;\n@@ -47,7 +48,7 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n     private StartMessageSubscriptionConverter subscriptionConverter;\n     private List<ProcessRuntimeEventListener<StartMessageDeployedEvent>> listeners;\n     private ApplicationEventPublisher eventPublisher;\n-    \n+\n     public StartMessageDeployedEventProducer(RepositoryService repositoryService,\n                                         ManagementService managementService,\n                                         StartMessageSubscriptionConverter subscriptionConverter,\n@@ -61,11 +62,11 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n         this.listeners = listeners;\n         this.eventPublisher = eventPublisher;\n     }\n-    \n+\n     public void doStart() {\n         List<ProcessDefinition> processDefinitions = converter.from(repositoryService.createProcessDefinitionQuery().list());\n         List<StartMessageDeployedEvent> messageDeployedEvents = new ArrayList<>();\n-        \n+\n         for (ProcessDefinition processDefinition : processDefinitions) {\n             managementService.executeCommand(new FindStartMessageEventSubscriptions(processDefinition.getId()))\n                              .stream()\n@@ -79,20 +80,20 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n                                                                                                    .build())\n                              .forEach(messageDeployedEvents::add);\n         }\n-        \n+\n         managementService.executeCommand(new DispatchStartMessageDeployedEvents(messageDeployedEvents));\n \n         if (!messageDeployedEvents.isEmpty()) {\n             eventPublisher.publishEvent(new StartMessageDeployedEvents(messageDeployedEvents));\n         }\n     }\n-    \n+\n     public void doStop() {\n         // nothing\n     }\n \n     class DispatchStartMessageDeployedEvents implements Command<Void> {\n-        \n+\n         private final List<StartMessageDeployedEvent> messageDeployedEvents;\n \n         public DispatchStartMessageDeployedEvents(List<StartMessageDeployedEvent> messageDeployedEvents) {\n@@ -104,13 +105,13 @@ public class StartMessageDeployedEventProducer extends AbstractActivitiSmartLife\n                 messageDeployedEvents.stream()\n                                      .forEach(listener::onEvent);\n             }\n-            \n+\n             return null;\n         }\n-    }    \n+    }\n \n     static class FindStartMessageEventSubscriptions implements Command<List<MessageEventSubscriptionEntity>> {\n-        \n+\n         private static final String MESSAGE = \"message\";\n         private final String processDefinitionId;\n \n",
            "diff_size": 11
        }
    ]
}