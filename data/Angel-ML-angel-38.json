{
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/38/MultiGradPair.java\nindex 80216c3434..c1d16b9001 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/38/MultiGradPair.java\n@@ -26,181 +26,181 @@ import java.util.Arrays;\n \n public class MultiGradPair implements GradPair, Serializable {\n \n-  private double[] grad;\n-  private double[] hess;\n-\n-  public MultiGradPair(int numClass, boolean fullHessian) {\n-    this.grad = new double[numClass];\n-    if (fullHessian) {\n-      this.hess = new double[(numClass * (numClass + 1)) >> 1];\n-    } else {\n-      this.hess = new double[numClass];\n-    }\n-  }\n-\n-  public MultiGradPair(double[] grad, double[] hess) {\n-    this.grad = grad;\n-    this.hess = hess;\n-  }\n-\n-  @Override\n-  public void plusBy(GradPair gradPair) {\n-    double[] grad = ((MultiGradPair) gradPair).grad;\n-    double[] hess = ((MultiGradPair) gradPair).hess;\n-    for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] += grad[i];\n-    }\n-    for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] += hess[i];\n-    }\n-  }\n-\n-  public void plusBy(double[] grad, double[] hess) {\n-    for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] += grad[i];\n-    }\n-    for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] += hess[i];\n-    }\n-  }\n-\n-  @Override\n-  public void subtractBy(GradPair gradPair) {\n-    double[] grad = ((MultiGradPair) gradPair).grad;\n-    double[] hess = ((MultiGradPair) gradPair).hess;\n-    for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] -= grad[i];\n-    }\n-    for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] -= hess[i];\n-    }\n-  }\n-\n-  public void subtractBy(double[] grad, double[] hess) {\n-    for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] -= grad[i];\n-    }\n-    for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] -= hess[i];\n-    }\n-  }\n-\n-  @Override\n-  public GradPair plus(GradPair gradPair) {\n-    GradPair res = this.copy();\n-    res.plusBy(gradPair);\n-    return res;\n-  }\n-\n-  public GradPair plus(double[] grad, double[] hess) {\n-    MultiGradPair res = this.copy();\n-    res.plusBy(grad, hess);\n-    return res;\n-  }\n-\n-  @Override\n-  public GradPair subtract(GradPair gradPair) {\n-    GradPair res = this.copy();\n-    res.subtractBy(gradPair);\n-    return res;\n-  }\n-\n-  public GradPair subtract(double[] grad, double[] hess) {\n-    MultiGradPair res = this.copy();\n-    res.plusBy(grad, hess);\n-    return res;\n-  }\n-\n-  @Override\n-  public void timesBy(double x) {\n-    for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] *= x;\n-    }\n-    for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] *= x;\n-    }\n-  }\n-\n-  @Override\n-  public float calcGain(GBDTParam param) {\n-    return (float) param.calcGain(grad, hess);\n-  }\n-\n-  public float[] calcWeights(GBDTParam param) {\n-    //return param.calcWeights(grad, hess);\n-    return Maths.doubleArrayToFloatArray(param.calcWeights(grad, hess));\n-  }\n-\n-  @Override\n-  public boolean satisfyWeight(GBDTParam param) {\n-    return param.satisfyWeight(hess);\n-  }\n-\n-  @Override\n-  public MultiGradPair copy() {\n-    return new MultiGradPair(grad.clone(), hess.clone());\n-  }\n-\n-  public double[] getGrad() {\n-    return grad;\n-  }\n-\n-  public double[] getHess() {\n-    return hess;\n-  }\n-\n-  public void setGrad(double[] grad) {\n-    this.grad = grad;\n-  }\n-\n-  public void setHess(double[] hess) {\n-    this.hess = hess;\n-  }\n-\n-  public void set(double[] grad, double[] hess) {\n-    this.grad = grad;\n-    this.hess = hess;\n-  }\n-\n-  public void set(double[] grad, double[] hess, int offset) {\n-    // numClass is usually small, so we do not use arraycopy here\n-    for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] = grad[i + offset];\n-      this.hess[i] = hess[i + offset];\n-    }\n-  }\n-\n-  public void set(double[] grad, int gradOffset, double[] hess, int hessOffset) {\n-    // numClass is usually small, so we do not use arraycopy here\n-    for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] = grad[i + gradOffset];\n-    }\n-    for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] = hess[i + hessOffset];\n-    }\n-  }\n-\n-  @Override\n-  public String toString() {\n-    String gradStr = Arrays.toString(grad);\n-    if (grad.length == hess.length) {\n-      return \"(\" + gradStr + \", diag{\" + Arrays.toString(hess) + \"})\";\n-    } else {\n-      int rowSize = 1, offset = 0;\n-      StringBuilder hessSB = new StringBuilder(\"[\");\n-      while (rowSize <= grad.length) {\n-        hessSB.append(\"[\");\n-        hessSB.append(hess[offset]);\n-        for (int i = 1; i < rowSize; i++) {\n-          hessSB.append(\", \");\n-          hessSB.append(hess[offset + i]);\n+    private double[] grad;\n+    private double[] hess;\n+\n+    public MultiGradPair(int numClass, boolean fullHessian) {\n+        this.grad = new double[numClass];\n+        if (fullHessian) {\n+            this.hess = new double[(numClass * (numClass + 1)) >> 1];\n+        } else {\n+            this.hess = new double[numClass];\n         }\n-        hessSB.append(\"]\");\n-        offset += rowSize;\n-        rowSize++;\n-      }\n-      hessSB.append(\"]\");\n-      return \"(\" + gradStr + \", \" + hessSB.toString() + \")\";\n-    }\n-  }\n+    }\n+\n+    public MultiGradPair(double[] grad, double[] hess) {\n+        this.grad = grad;\n+        this.hess = hess;\n+    }\n+\n+    @Override\n+    public void plusBy(GradPair gradPair) {\n+        double[] grad = ((MultiGradPair) gradPair).grad;\n+        double[] hess = ((MultiGradPair) gradPair).hess;\n+        for (int i = 0; i < this.grad.length; i++) {\n+            this.grad[i] += grad[i];\n+        }\n+        for (int i = 0; i < this.hess.length; i++) {\n+            this.hess[i] += hess[i];\n+        }\n+    }\n+\n+    public void plusBy(double[] grad, double[] hess) {\n+        for (int i = 0; i < this.grad.length; i++) {\n+            this.grad[i] += grad[i];\n+        }\n+        for (int i = 0; i < this.hess.length; i++) {\n+            this.hess[i] += hess[i];\n+        }\n+    }\n+\n+    @Override\n+    public void subtractBy(GradPair gradPair) {\n+        double[] grad = ((MultiGradPair) gradPair).grad;\n+        double[] hess = ((MultiGradPair) gradPair).hess;\n+        for (int i = 0; i < this.grad.length; i++) {\n+            this.grad[i] -= grad[i];\n+        }\n+        for (int i = 0; i < this.hess.length; i++) {\n+            this.hess[i] -= hess[i];\n+        }\n+    }\n+\n+    public void subtractBy(double[] grad, double[] hess) {\n+        for (int i = 0; i < this.grad.length; i++) {\n+            this.grad[i] -= grad[i];\n+        }\n+        for (int i = 0; i < this.hess.length; i++) {\n+            this.hess[i] -= hess[i];\n+        }\n+    }\n+\n+    @Override\n+    public GradPair plus(GradPair gradPair) {\n+        GradPair res = this.copy();\n+        res.plusBy(gradPair);\n+        return res;\n+    }\n+\n+    public GradPair plus(double[] grad, double[] hess) {\n+        MultiGradPair res = this.copy();\n+        res.plusBy(grad, hess);\n+        return res;\n+    }\n+\n+    @Override\n+    public GradPair subtract(GradPair gradPair) {\n+        GradPair res = this.copy();\n+        res.subtractBy(gradPair);\n+        return res;\n+    }\n+\n+    public GradPair subtract(double[] grad, double[] hess) {\n+        MultiGradPair res = this.copy();\n+        res.plusBy(grad, hess);\n+        return res;\n+    }\n+\n+    @Override\n+    public void timesBy(double x) {\n+        for (int i = 0; i < this.grad.length; i++) {\n+            this.grad[i] *= x;\n+        }\n+        for (int i = 0; i < this.hess.length; i++) {\n+            this.hess[i] *= x;\n+        }\n+    }\n+\n+    @Override\n+    public float calcGain(GBDTParam param) {\n+        return (float) param.calcGain(grad, hess);\n+    }\n+\n+    public float[] calcWeights(GBDTParam param) {\n+        //return param.calcWeights(grad, hess);\n+        return Maths.doubleArrayToFloatArray(param.calcWeights(grad, hess));\n+    }\n+\n+    @Override\n+    public boolean satisfyWeight(GBDTParam param) {\n+        return param.satisfyWeight(hess);\n+    }\n+\n+    @Override\n+    public MultiGradPair copy() {\n+        return new MultiGradPair(grad.clone(), hess.clone());\n+    }\n+\n+    public double[] getGrad() {\n+        return grad;\n+    }\n+\n+    public double[] getHess() {\n+        return hess;\n+    }\n+\n+    public void setGrad(double[] grad) {\n+        this.grad = grad;\n+    }\n+\n+    public void setHess(double[] hess) {\n+        this.hess = hess;\n+    }\n+\n+    public void set(double[] grad, double[] hess) {\n+        this.grad = grad;\n+        this.hess = hess;\n+    }\n+\n+    public void set(double[] grad, double[] hess, int offset) {\n+        // numClass is usually small, so we do not use arraycopy here\n+        for (int i = 0; i < this.grad.length; i++) {\n+            this.grad[i] = grad[i + offset];\n+            this.hess[i] = hess[i + offset];\n+        }\n+    }\n+\n+    public void set(double[] grad, int gradOffset, double[] hess, int hessOffset) {\n+        // numClass is usually small, so we do not use arraycopy here\n+        for (int i = 0; i < this.grad.length; i++) {\n+            this.grad[i] = grad[i + gradOffset];\n+        }\n+        for (int i = 0; i < this.hess.length; i++) {\n+            this.hess[i] = hess[i + hessOffset];\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        String gradStr = Arrays.toString(grad);\n+        if (grad.length == hess.length) {\n+            return \"(\" + gradStr + \", diag{\" + Arrays.toString(hess) + \"})\";\n+        } else {\n+            int rowSize = 1, offset = 0;\n+            StringBuilder hessSB = new StringBuilder(\"[\");\n+            while (rowSize <= grad.length) {\n+                hessSB.append(\"[\");\n+                hessSB.append(hess[offset]);\n+                for (int i = 1; i < rowSize; i++) {\n+                    hessSB.append(\", \");\n+                    hessSB.append(hess[offset + i]);\n+                }\n+                hessSB.append(\"]\");\n+                offset += rowSize;\n+                rowSize++;\n+            }\n+            hessSB.append(\"]\");\n+            return \"(\" + gradStr + \", \" + hessSB.toString() + \")\";\n+        }\n+    }\n }\n",
            "diff_size": 335
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/38/MultiGradPair.java\nindex 80216c3434..3461219e87 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/38/MultiGradPair.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.spark.ml.tree.gbdt.histogram;\n \n import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;\n@@ -203,4 +202,4 @@ public class MultiGradPair implements GradPair, Serializable {\n       return \"(\" + gradStr + \", \" + hessSB.toString() + \")\";\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/38/MultiGradPair.java\nindex 80216c3434..fd027463ca 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/38/MultiGradPair.java\n@@ -23,184 +23,189 @@ import com.tencent.angel.spark.ml.tree.util.Maths;\n import java.io.Serializable;\n import java.util.Arrays;\n \n-\n public class MultiGradPair implements GradPair, Serializable {\n+    private double[] grad;\n+    private double[] hess;\n \n-  private double[] grad;\n-  private double[] hess;\n-\n-  public MultiGradPair(int numClass, boolean fullHessian) {\n+    public MultiGradPair(int numClass, boolean fullHessian) {\n     this.grad = new double[numClass];\n     if (fullHessian) {\n-      this.hess = new double[(numClass * (numClass + 1)) >> 1];\n+        this.hess = new double[(numClass * (numClass + 1)) >> 1];\n     } else {\n       this.hess = new double[numClass];\n     }\n-  }\n+    }\n \n-  public MultiGradPair(double[] grad, double[] hess) {\n+    public MultiGradPair(double[] grad, double[] hess) {\n     this.grad = grad;\n     this.hess = hess;\n-  }\n+    }\n \n-  @Override\n-  public void plusBy(GradPair gradPair) {\n+    @Override\n+    public void plusBy(GradPair gradPair) {\n     double[] grad = ((MultiGradPair) gradPair).grad;\n     double[] hess = ((MultiGradPair) gradPair).hess;\n     for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] += grad[i];\n+        this.grad[i] += grad[i];\n     }\n+\n     for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] += hess[i];\n+        this.hess[i] += hess[i];\n+    }\n     }\n-  }\n \n-  public void plusBy(double[] grad, double[] hess) {\n+    public void plusBy(double[] grad, double[] hess) {\n     for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] += grad[i];\n+        this.grad[i] += grad[i];\n     }\n+\n     for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] += hess[i];\n+        this.hess[i] += hess[i];\n+    }\n     }\n-  }\n \n-  @Override\n-  public void subtractBy(GradPair gradPair) {\n+    @Override\n+    public void subtractBy(GradPair gradPair) {\n     double[] grad = ((MultiGradPair) gradPair).grad;\n     double[] hess = ((MultiGradPair) gradPair).hess;\n     for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] -= grad[i];\n+        this.grad[i] -= grad[i];\n     }\n+\n     for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] -= hess[i];\n+        this.hess[i] -= hess[i];\n+    }\n     }\n-  }\n \n-  public void subtractBy(double[] grad, double[] hess) {\n+    public void subtractBy(double[] grad, double[] hess) {\n     for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] -= grad[i];\n+        this.grad[i] -= grad[i];\n     }\n+\n     for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] -= hess[i];\n+        this.hess[i] -= hess[i];\n+    }\n     }\n-  }\n \n-  @Override\n-  public GradPair plus(GradPair gradPair) {\n+    @Override\n+    public GradPair plus(GradPair gradPair) {\n     GradPair res = this.copy();\n     res.plusBy(gradPair);\n     return res;\n-  }\n+    }\n \n-  public GradPair plus(double[] grad, double[] hess) {\n+    public GradPair plus(double[] grad, double[] hess) {\n     MultiGradPair res = this.copy();\n     res.plusBy(grad, hess);\n     return res;\n-  }\n+    }\n \n-  @Override\n-  public GradPair subtract(GradPair gradPair) {\n+    @Override\n+    public GradPair subtract(GradPair gradPair) {\n     GradPair res = this.copy();\n     res.subtractBy(gradPair);\n     return res;\n-  }\n+    }\n \n-  public GradPair subtract(double[] grad, double[] hess) {\n+    public GradPair subtract(double[] grad, double[] hess) {\n     MultiGradPair res = this.copy();\n     res.plusBy(grad, hess);\n     return res;\n-  }\n+    }\n \n-  @Override\n-  public void timesBy(double x) {\n+    @Override\n+    public void timesBy(double x) {\n     for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] *= x;\n+        this.grad[i] *= x;\n     }\n+\n     for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] *= x;\n+        this.hess[i] *= x;\n+    }\n     }\n-  }\n \n-  @Override\n-  public float calcGain(GBDTParam param) {\n+    @Override\n+    public float calcGain(GBDTParam param) {\n     return (float) param.calcGain(grad, hess);\n-  }\n+    }\n \n-  public float[] calcWeights(GBDTParam param) {\n+    public float[] calcWeights(GBDTParam param) {\n     //return param.calcWeights(grad, hess);\n     return Maths.doubleArrayToFloatArray(param.calcWeights(grad, hess));\n-  }\n+    }\n \n-  @Override\n-  public boolean satisfyWeight(GBDTParam param) {\n+    @Override\n+    public boolean satisfyWeight(GBDTParam param) {\n     return param.satisfyWeight(hess);\n-  }\n+    }\n \n-  @Override\n-  public MultiGradPair copy() {\n+    @Override\n+    public MultiGradPair copy() {\n     return new MultiGradPair(grad.clone(), hess.clone());\n-  }\n+    }\n \n-  public double[] getGrad() {\n+    public double[] getGrad() {\n     return grad;\n-  }\n+    }\n \n-  public double[] getHess() {\n+    public double[] getHess() {\n     return hess;\n-  }\n+    }\n \n-  public void setGrad(double[] grad) {\n+    public void setGrad(double[] grad) {\n     this.grad = grad;\n-  }\n+    }\n \n-  public void setHess(double[] hess) {\n+    public void setHess(double[] hess) {\n     this.hess = hess;\n-  }\n+    }\n \n-  public void set(double[] grad, double[] hess) {\n+    public void set(double[] grad, double[] hess) {\n     this.grad = grad;\n     this.hess = hess;\n-  }\n+    }\n \n-  public void set(double[] grad, double[] hess, int offset) {\n+    public void set(double[] grad, double[] hess, int offset) {\n     // numClass is usually small, so we do not use arraycopy here\n     for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] = grad[i + offset];\n-      this.hess[i] = hess[i + offset];\n+        this.grad[i] = grad[i + offset];\n+        this.hess[i] = hess[i + offset];\n+    }\n     }\n-  }\n \n-  public void set(double[] grad, int gradOffset, double[] hess, int hessOffset) {\n+    public void set(double[] grad, int gradOffset, double[] hess, int hessOffset) {\n     // numClass is usually small, so we do not use arraycopy here\n     for (int i = 0; i < this.grad.length; i++) {\n-      this.grad[i] = grad[i + gradOffset];\n+        this.grad[i] = grad[i + gradOffset];\n     }\n+\n     for (int i = 0; i < this.hess.length; i++) {\n-      this.hess[i] = hess[i + hessOffset];\n+        this.hess[i] = hess[i + hessOffset];\n+    }\n     }\n-  }\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     String gradStr = Arrays.toString(grad);\n     if (grad.length == hess.length) {\n-      return \"(\" + gradStr + \", diag{\" + Arrays.toString(hess) + \"})\";\n+        return \"(\" + gradStr + \", diag{\" + Arrays.toString(hess) + \"})\";\n     } else {\n       int rowSize = 1, offset = 0;\n       StringBuilder hessSB = new StringBuilder(\"[\");\n       while (rowSize <= grad.length) {\n-        hessSB.append(\"[\");\n-        hessSB.append(hess[offset]);\n-        for (int i = 1; i < rowSize; i++) {\n-          hessSB.append(\", \");\n-          hessSB.append(hess[offset + i]);\n-        }\n-        hessSB.append(\"]\");\n-        offset += rowSize;\n-        rowSize++;\n+               hessSB.append(\"[\");\n+               hessSB.append(hess[offset]);\n+               for (int i = 1; i < rowSize; i++) {\n+                                         hessSB.append(\", \");\n+                                         hessSB.append(hess[offset + i]);\n+               }\n+               hessSB.append(\"]\");\n+               offset += rowSize;\n+               rowSize++;\n       }\n       hessSB.append(\"]\");\n       return \"(\" + gradStr + \", \" + hessSB.toString() + \")\";\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 101
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/38/MultiGradPair.java\nindex 80216c3434..58955bc3b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/38/MultiGradPair.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/38/MultiGradPair.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.spark.ml.tree.gbdt.histogram;\n \n import com.tencent.angel.spark.ml.tree.tree.param.GBDTParam;\n",
            "diff_size": 1
        }
    ]
}