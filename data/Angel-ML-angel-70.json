{
    "error_id": "70",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/70/TreeParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/70/TreeParam.java\nindex 08fadcf8ad..e14ae2d485 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/70/TreeParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/70/TreeParam.java\n@@ -21,23 +21,23 @@ import java.io.Serializable;\n \n public abstract class TreeParam implements Serializable {\n \n-  public int numFeature;  // number of features\n-  public int maxDepth;  // maximum depth\n-  public int maxNodeNum;  // maximum node num\n-  public int numSplit;  // number of candidate splits\n-  public int numWorker;  // number of workers\n-  //public float insSampleRatio;  // subsample ratio for instances\n-  public float featSampleRatio;  // subsample ratio for features\n+    public int numFeature;  // number of features\n+    public int maxDepth;  // maximum depth\n+    public int maxNodeNum;  // maximum node num\n+    public int numSplit;  // number of candidate splits\n+    public int numWorker;  // number of workers\n+    //public float insSampleRatio;  // subsample ratio for instances\n+    public float featSampleRatio;  // subsample ratio for features\n \n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(String.format(\"|numFeature = %d\\n\", numFeature));\n-    sb.append(String.format(\"|maxDepth = %d\\n\", maxDepth));\n-    sb.append(String.format(\"|maxNodeNum = %d\\n\", maxNodeNum));\n-    sb.append(String.format(\"|numSplit = %d\\n\", numSplit));\n-    sb.append(String.format(\"|numWorker = %d\\n\", numWorker));\n-    sb.append(String.format(\"|featSampleRatio = %f\\n\", featSampleRatio));\n-    return sb.toString();\n-  }\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(String.format(\"|numFeature = %d\\n\", numFeature));\n+        sb.append(String.format(\"|maxDepth = %d\\n\", maxDepth));\n+        sb.append(String.format(\"|maxNodeNum = %d\\n\", maxNodeNum));\n+        sb.append(String.format(\"|numSplit = %d\\n\", numSplit));\n+        sb.append(String.format(\"|numWorker = %d\\n\", numWorker));\n+        sb.append(String.format(\"|featSampleRatio = %f\\n\", featSampleRatio));\n+        return sb.toString();\n+    }\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 2, indentation should be the same level as line 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 2, indentation should be the same level as line 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 2, indentation should be the same level as line 30.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 2, indentation should be the same level as line 32.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 2, indentation should be the same level as line 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/70/TreeParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/70/TreeParam.java\nindex 08fadcf8ad..bd857da69f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/70/TreeParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/70/TreeParam.java\n@@ -21,13 +21,18 @@ import java.io.Serializable;\n \n public abstract class TreeParam implements Serializable {\n \n-  public int numFeature;  // number of features\n-  public int maxDepth;  // maximum depth\n-  public int maxNodeNum;  // maximum node num\n-  public int numSplit;  // number of candidate splits\n-  public int numWorker;  // number of workers\n+  public int numFeature;\n+// number of features\n+  public int maxDepth;\n+// maximum depth\n+  public int maxNodeNum;\n+// maximum node num\n+  public int numSplit;\n+// number of candidate splits\n+  public int numWorker;\n+// number of workers\n   //public float insSampleRatio;  // subsample ratio for instances\n-  public float featSampleRatio;  // subsample ratio for features\n+  public float featSampleRatio; // subsample ratio for features\n \n   @Override\n   public String toString() {\n@@ -40,4 +45,4 @@ public abstract class TreeParam implements Serializable {\n     sb.append(String.format(\"|featSampleRatio = %f\\n\", featSampleRatio));\n     return sb.toString();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/70/TreeParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/70/TreeParam.java\nindex 08fadcf8ad..8bb8b3c282 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/70/TreeParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/70/TreeParam.java\n@@ -21,16 +21,21 @@ import java.io.Serializable;\n \n public abstract class TreeParam implements Serializable {\n \n-  public int numFeature;  // number of features\n-  public int maxDepth;  // maximum depth\n-  public int maxNodeNum;  // maximum node num\n-  public int numSplit;  // number of candidate splits\n-  public int numWorker;  // number of workers\n+    public int numFeature;  // number of features\n+\n+    public int maxDepth;  // maximum depth\n+\n+    public int maxNodeNum;  // maximum node num\n+\n+    public int numSplit;  // number of candidate splits\n+\n+    public int numWorker;  // number of workers\n   //public float insSampleRatio;  // subsample ratio for instances\n-  public float featSampleRatio;  // subsample ratio for features\n \n-  @Override\n-  public String toString() {\n+    public float featSampleRatio;  // subsample ratio for features\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(String.format(\"|numFeature = %d\\n\", numFeature));\n     sb.append(String.format(\"|maxDepth = %d\\n\", maxDepth));\n@@ -39,5 +44,6 @@ public abstract class TreeParam implements Serializable {\n     sb.append(String.format(\"|numWorker = %d\\n\", numWorker));\n     sb.append(String.format(\"|featSampleRatio = %f\\n\", featSampleRatio));\n     return sb.toString();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}