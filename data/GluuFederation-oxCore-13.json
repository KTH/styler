{
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "44",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public final class LdifDataUtility {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n\n    // Just define the singleton as a static field in a separate class.\n    // The semantics of Java guarantee that the field will not be initialized until",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/13/LdifDataUtility.java\nindex 1d06fead58..8ac9fd08eb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/13/LdifDataUtility.java\n@@ -41,7 +41,7 @@ import com.unboundid.ldif.LDIFReader;\n  */\n public final class LdifDataUtility {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n \n     // Just define the singleton as a static field in a separate class.\n     // The semantics of Java guarantee that the field will not be initialized until\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/13/LdifDataUtility.java\nindex 1d06fead58..f8caad6af8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/13/LdifDataUtility.java\n@@ -41,7 +41,7 @@ import com.unboundid.ldif.LDIFReader;\n  */\n public final class LdifDataUtility {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n \n     // Just define the singleton as a static field in a separate class.\n     // The semantics of Java guarantee that the field will not be initialized until\n@@ -63,10 +63,8 @@ public final class LdifDataUtility {\n     /**\n      * Performs ldif file import\n      *\n-     * @param connection\n-     *            Connection to LDAP server\n-     * @param ldifFileName\n-     *            LDIF file\n+     * @param connection   Connection to LDAP server\n+     * @param ldifFileName LDIF file\n      * @return The result code for the processing that was performed\n      */\n     public ResultCode importLdifFile(LDAPConnection connection, String ldifFileName) {\n@@ -84,10 +82,8 @@ public final class LdifDataUtility {\n     /**\n      * Performs ldif file conent import\n      *\n-     * @param connection\n-     *            Connection to LDAP server\n-     * @param ldifFileContent\n-     *            LDIF file\n+     * @param connection      Connection to LDAP server\n+     * @param ldifFileContent LDIF file\n      * @return The result code for the processing that was performed\n      */\n     public ResultCode importLdifFileContent(LDAPConnection connection, String ldifFileContent) {\n@@ -109,10 +105,8 @@ public final class LdifDataUtility {\n     /**\n      * Performs ldif file import\n      *\n-     * @param connection\n-     *            Connection to LDAP server\n-     * @param ldifReader\n-     *            LDIF reader\n+     * @param connection Connection to LDAP server\n+     * @param ldifReader LDIF reader\n      * @return The result code for the processing that was performed\n      */\n     public ResultCode importLdifFile(LDAPConnection connection, LDIFReader ldifReader) {\n@@ -162,12 +156,10 @@ public final class LdifDataUtility {\n     /**\n      * Check if DS has at least one DN simular to specified in ldif file.\n      *\n-     * @param connection\n-     *            Connection to LDAP server\n-     * @param ldifFileName\n-     *            LDIF file\n+     * @param connection   Connection to LDAP server\n+     * @param ldifFileName LDIF file\n      * @return true if server contains at least one DN simular to specified in ldif\n-     *         file.\n+     * file.\n      */\n     public boolean checkIfSerrverHasEntryFromLDIFFile(LDAPConnection connection, String ldifFileName) {\n         // Set up the LDIF reader that will be used to read the changes to apply\n@@ -220,10 +212,8 @@ public final class LdifDataUtility {\n     /**\n      * Remove base entry with all sub entries\n      *\n-     * @param connection\n-     *            Connection to LDAP server\n-     * @param baseDN\n-     *            Base DN entry\n+     * @param connection Connection to LDAP server\n+     * @param baseDN     Base DN entry\n      * @return The result code for the processing that was performed.\n      */\n     public ResultCode deleteEntryWithAllSubs(LDAPConnection connection, String baseDN) {\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/13/LdifDataUtility.java\nindex 1d06fead58..4dc572cb9b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/13/LdifDataUtility.java\n@@ -41,9 +41,9 @@ import com.unboundid.ldif.LDIFReader;\n  */\n public final class LdifDataUtility {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n \n-    // Just define the singleton as a static field in a separate class.\n+// Just define the singleton as a static field in a separate class.\n     // The semantics of Java guarantee that the field will not be initialized until\n     // the field is referenced,\n     // and that any thread which accesses the field will see all of the writes\n@@ -343,4 +343,4 @@ public final class LdifDataUtility {\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/13/LdifDataUtility.java\nindex 1d06fead58..5fc30fb1a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/13/LdifDataUtility.java\n@@ -14,12 +14,10 @@ import java.util.ArrayList;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.ListIterator;\n-\n import org.apache.commons.io.IOUtils;\n import org.gluu.util.StringHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.unboundid.ldap.sdk.ChangeType;\n import com.unboundid.ldap.sdk.Entry;\n import com.unboundid.ldap.sdk.Filter;\n@@ -39,9 +37,11 @@ import com.unboundid.ldif.LDIFReader;\n  *\n  * @author Yuriy Movchan Date: 08.06.2010\n  */\n+\n+\n public final class LdifDataUtility {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n \n     // Just define the singleton as a static field in a separate class.\n     // The semantics of Java guarantee that the field will not be initialized until\n@@ -50,12 +50,13 @@ public final class LdifDataUtility {\n     // resulting from initializing that field.\n     // http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\n     private static class Holder {\n+\n         private static LdifDataUtility INSTANCE = new LdifDataUtility();\n-    }\n \n-    private LdifDataUtility() {\n     }\n \n+    private LdifDataUtility() { }\n+\n     public static LdifDataUtility instance() {\n         return Holder.INSTANCE;\n     }\n@@ -69,11 +70,13 @@ public final class LdifDataUtility {\n      *            LDIF file\n      * @return The result code for the processing that was performed\n      */\n+\n     public ResultCode importLdifFile(LDAPConnection connection, String ldifFileName) {\n         LDIFReader ldifReader = createLdifReader(ldifFileName);\n         if (ldifReader == null) {\n             return ResultCode.LOCAL_ERROR;\n         }\n+\n         try {\n             return importLdifFile(connection, ldifReader);\n         } finally {\n@@ -90,16 +93,17 @@ public final class LdifDataUtility {\n      *            LDIF file\n      * @return The result code for the processing that was performed\n      */\n+\n     public ResultCode importLdifFileContent(LDAPConnection connection, String ldifFileContent) {\n         BufferedReader is = null;\n         LDIFReader ldifReader = null;\n         try {\n             is = new BufferedReader(new StringReader(ldifFileContent));\n             ldifReader = new LDIFReader(is);\n-\n             return importLdifFile(connection, ldifReader);\n         } finally {\n             IOUtils.closeQuietly(is);\n+\n             if (ldifReader != null) {\n                 disposeLdifReader(ldifReader);\n             }\n@@ -115,6 +119,7 @@ public final class LdifDataUtility {\n      *            LDIF reader\n      * @return The result code for the processing that was performed\n      */\n+\n     public ResultCode importLdifFile(LDAPConnection connection, LDIFReader ldifReader) {\n         // Attempt to process and apply the changes to the server\n         ResultCode resultCode = ResultCode.SUCCESS;\n@@ -125,6 +130,7 @@ public final class LdifDataUtility {\n                 ldifRecord = ldifReader.readChangeRecord(true);\n             } catch (LDIFException le) {\n                 LOG.error(\"Malformed ldif record\", le);\n+\n                 if (!le.mayContinueReading()) {\n                     resultCode = ResultCode.DECODING_ERROR;\n                     break;\n@@ -137,21 +143,23 @@ public final class LdifDataUtility {\n \n             // If the change record was null, then it means there are no more\n             // changes to be processed.\n+\n             if (ldifRecord == null) {\n                 break;\n             }\n \n             // Apply the target change to the server.\n+\n             try {\n                 ldifRecord.processChange(connection);\n             } catch (LDAPException le) {\n                 if (ResultCode.ENTRY_ALREADY_EXISTS.equals(le.getResultCode())) {\n                     continue;\n                 }\n+\n                 if (ldifRecord.getChangeType().equals(ChangeType.DELETE)) {\n                     continue;\n                 }\n-\n                 LOG.error(\"Failed to inserting ldif record\", le);\n             }\n         }\n@@ -169,6 +177,7 @@ public final class LdifDataUtility {\n      * @return true if server contains at least one DN simular to specified in ldif\n      *         file.\n      */\n+\n     public boolean checkIfSerrverHasEntryFromLDIFFile(LDAPConnection connection, String ldifFileName) {\n         // Set up the LDIF reader that will be used to read the changes to apply\n         LDIFReader ldifReader = createLdifReader(ldifFileName);\n@@ -177,6 +186,7 @@ public final class LdifDataUtility {\n         }\n \n         // Check all ldif entries\n+\n         while (true) {\n             // Read the next change to process.\n             Entry entry = null;\n@@ -184,6 +194,7 @@ public final class LdifDataUtility {\n                 entry = ldifReader.readEntry();\n             } catch (LDIFException le) {\n                 LOG.error(\"Malformed ldif record\", le);\n+\n                 if (!le.mayContinueReading()) {\n                     return true;\n                 }\n@@ -194,11 +205,13 @@ public final class LdifDataUtility {\n \n             // If the change record was null, then it means there are no more\n             // changes to be processed.\n+\n             if (entry == null) {\n                 break;\n             }\n \n             // Search entry in the server.\n+\n             try {\n                 SearchResult sr = connection.search(entry.getDN(), SearchScope.BASE, \"objectClass=*\");\n                 if ((sr != null) && (sr.getEntryCount() > 0)) {\n@@ -211,9 +224,7 @@ public final class LdifDataUtility {\n                 }\n             }\n         }\n-\n         disposeLdifReader(ldifReader);\n-\n         return false;\n     }\n \n@@ -226,11 +237,13 @@ public final class LdifDataUtility {\n      *            Base DN entry\n      * @return The result code for the processing that was performed.\n      */\n+\n     public ResultCode deleteEntryWithAllSubs(LDAPConnection connection, String baseDN) {\n         ResultCode resultCode = ResultCode.SUCCESS;\n         SearchResult searchResult = null;\n         try {\n             searchResult = connection.search(baseDN, SearchScope.SUB, \"objectClass=*\");\n+\n             if ((searchResult == null) || (searchResult.getEntryCount() == 0)) {\n                 return ResultCode.LOCAL_ERROR;\n             }\n@@ -292,6 +305,7 @@ public final class LdifDataUtility {\n             LDIFChangeRecord ldifRecord = null;\n             try {\n                 ldifRecord = ldifReader.readChangeRecord(true);\n+\n                 if (ldifRecord != null) {\n                     if (StringHelper.isNotEmpty(baseDn)) {\n                         if (!ldifRecord.getDN().toLowerCase().endsWith(baseDn)) {\n@@ -300,7 +314,6 @@ public final class LdifDataUtility {\n                         }\n                     }\n                 }\n-\n             } catch (LDIFException le) {\n                 LOG.info(\"Malformed ldif record \" + ldifRecord);\n                 LOG.error(\"Malformed ldif record\", le);\n@@ -314,6 +327,7 @@ public final class LdifDataUtility {\n \n             // If the change record was null, then it means there are no more\n             // changes to be processed.\n+\n             if (ldifRecord == null) {\n                 break;\n             }\n@@ -340,7 +354,8 @@ public final class LdifDataUtility {\n                 return null;\n             }\n         }\n+\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/13/LdifDataUtility.java\nindex 1d06fead58..8ac9fd08eb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/13/LdifDataUtility.java\n@@ -41,7 +41,7 @@ import com.unboundid.ldif.LDIFReader;\n  */\n public final class LdifDataUtility {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n \n     // Just define the singleton as a static field in a separate class.\n     // The semantics of Java guarantee that the field will not be initialized until\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/13/LdifDataUtility.java\nindex 1d06fead58..7747cfcba8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/13/LdifDataUtility.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/13/LdifDataUtility.java\n@@ -41,7 +41,7 @@ import com.unboundid.ldif.LDIFReader;\n  */\n public final class LdifDataUtility {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n+private static final Logger LOG = LoggerFactory.getLogger(LdifDataUtility.class);\n \n     // Just define the singleton as a static field in a separate class.\n     // The semantics of Java guarantee that the field will not be initialized until\n",
            "diff_size": 1
        }
    ]
}