{
    "error_id": "62",
    "information": {
        "errors": [
            {
                "line": "77",
                "column": "5",
                "severity": "warning",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "\n    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds)\n    {\n        final StringWriter stringWriter = new StringWriter();\n        final PrintWriter print = new PrintWriter(stringWriter);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/62/ThreadDeadlockDetector.java\nindex 5737850ffd..195661a9a5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/62/ThreadDeadlockDetector.java\n@@ -73,8 +73,7 @@ public class ThreadDeadlockDetector {\n         dumpThreadsAndLocks(msg, threadBean, allThreadIds);\n     }\n \n-    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds)\n-    {\n+    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds) {\n         final StringWriter stringWriter = new StringWriter();\n         final PrintWriter print = new PrintWriter(stringWriter);\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/62/ThreadDeadlockDetector.java\nindex 5737850ffd..c2aa6ebdd1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/62/ThreadDeadlockDetector.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.util;\n \n import java.io.PrintWriter;\n@@ -24,144 +25,146 @@ import org.h2.mvstore.db.MVTable;\n  */\n public class ThreadDeadlockDetector {\n \n-    private static final String INDENT = \"    \";\n-\n-    private static ThreadDeadlockDetector detector;\n-\n-    private final ThreadMXBean threadBean;\n-\n-    // a daemon thread\n-    private final Timer threadCheck = new Timer(\"ThreadDeadlockDetector\", true);\n-\n-    private ThreadDeadlockDetector() {\n-        this.threadBean = ManagementFactory.getThreadMXBean();\n-        // delay: 10 ms\n-        // period: 10000 ms (100 seconds)\n-        threadCheck.schedule(new TimerTask() {\n-            @Override\n-            public void run() {\n-                checkForDeadlocks();\n-            }\n-        }, 10, 10000);\n+  private static final String INDENT = \"    \";\n+\n+  private static ThreadDeadlockDetector detector;\n+\n+  private final ThreadMXBean threadBean;\n+\n+  // a daemon thread\n+  private final Timer threadCheck = new Timer(\"ThreadDeadlockDetector\", true);\n+\n+  private ThreadDeadlockDetector() {\n+    this.threadBean = ManagementFactory.getThreadMXBean();\n+    // delay: 10 ms\n+    // period: 10000 ms (100 seconds)\n+    threadCheck.schedule(new TimerTask() {\n+      @Override\n+      public void run() {\n+        checkForDeadlocks();\n+      }\n+    }, 10, 10000);\n+  }\n+\n+  /**\n+   * Initialize the detector.\n+   */\n+  public static synchronized void init() {\n+    if (detector == null) {\n+      detector = new ThreadDeadlockDetector();\n     }\n-\n-    /**\n-     * Initialize the detector.\n-     */\n-    public static synchronized void init() {\n-        if (detector == null) {\n-            detector = new ThreadDeadlockDetector();\n-        }\n+  }\n+\n+  /**\n+   * Checks if any threads are deadlocked. If any, print the thread dump\n+   * information.\n+   */\n+  void checkForDeadlocks() {\n+    long[] deadlockedThreadIds = threadBean.findDeadlockedThreads();\n+    if (deadlockedThreadIds == null) {\n+      return;\n+    }\n+    dumpThreadsAndLocks(\"ThreadDeadlockDetector - deadlock found :\",\n+        threadBean, deadlockedThreadIds);\n+  }\n+\n+  public static void dumpAllThreadsAndLocks(String msg) {\n+    final ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n+    final long[] allThreadIds = threadBean.getAllThreadIds();\n+    dumpThreadsAndLocks(msg, threadBean, allThreadIds);\n+  }\n+\n+  private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean,\n+                                          long[] threadIds) {\n+    final StringWriter stringWriter = new StringWriter();\n+    final PrintWriter print = new PrintWriter(stringWriter);\n+\n+    print.println(msg);\n+    final ThreadInfo[] infos = threadBean.getThreadInfo(threadIds, true, true);\n+    final HashMap<Long, String> tableWaitingForLockMap =\n+        MVTable.WAITING_FOR_LOCK.getSnapshotOfAllThreads();\n+    final HashMap<Long, ArrayList<String>> tableExclusiveLocksMap =\n+        MVTable.EXCLUSIVE_LOCKS.getSnapshotOfAllThreads();\n+    final HashMap<Long, ArrayList<String>> tableSharedLocksMap =\n+        MVTable.SHARED_LOCKS.getSnapshotOfAllThreads();\n+    for (ThreadInfo ti : infos) {\n+      printThreadInfo(print, ti);\n+      printLockInfo(print, ti.getLockedSynchronizers(),\n+          tableWaitingForLockMap.get(ti.getThreadId()),\n+          tableExclusiveLocksMap.get(ti.getThreadId()),\n+          tableSharedLocksMap.get(ti.getThreadId()));\n     }\n \n-    /**\n-     * Checks if any threads are deadlocked. If any, print the thread dump\n-     * information.\n-     */\n-    void checkForDeadlocks() {\n-        long[] deadlockedThreadIds = threadBean.findDeadlockedThreads();\n-        if (deadlockedThreadIds == null) {\n-            return;\n+    print.flush();\n+    // Dump it to system.out in one block, so it doesn't get mixed up with\n+    // other stuff when we're using a logging subsystem.\n+    System.out.println(stringWriter.getBuffer());\n+  }\n+\n+  private static void printThreadInfo(PrintWriter print, ThreadInfo ti) {\n+    // print thread information\n+    printThread(print, ti);\n+\n+    // print stack trace with locks\n+    StackTraceElement[] stackTrace = ti.getStackTrace();\n+    MonitorInfo[] monitors = ti.getLockedMonitors();\n+    for (int i = 0; i < stackTrace.length; i++) {\n+      StackTraceElement e = stackTrace[i];\n+      print.println(INDENT + \"at \" + e.toString());\n+      for (MonitorInfo mi : monitors) {\n+        if (mi.getLockedStackDepth() == i) {\n+          print.println(INDENT + \"  - locked \" + mi);\n         }\n-        dumpThreadsAndLocks(\"ThreadDeadlockDetector - deadlock found :\",\n-                threadBean, deadlockedThreadIds);\n+      }\n     }\n-\n-    public static void dumpAllThreadsAndLocks(String msg) {\n-        final ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n-        final long[] allThreadIds = threadBean.getAllThreadIds();\n-        dumpThreadsAndLocks(msg, threadBean, allThreadIds);\n+    print.println();\n+  }\n+\n+  private static void printThread(PrintWriter print, ThreadInfo ti) {\n+    print.print(\"\\\"\" + ti.getThreadName() + \"\\\"\" + \" Id=\"\n+        + ti.getThreadId() + \" in \" + ti.getThreadState());\n+    if (ti.getLockName() != null) {\n+      print.append(\" on lock=\" + ti.getLockName());\n     }\n-\n-    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds)\n-    {\n-        final StringWriter stringWriter = new StringWriter();\n-        final PrintWriter print = new PrintWriter(stringWriter);\n-\n-        print.println(msg);\n-        final ThreadInfo[] infos = threadBean.getThreadInfo(threadIds, true, true);\n-        final HashMap<Long, String> tableWaitingForLockMap =\n-                MVTable.WAITING_FOR_LOCK.getSnapshotOfAllThreads();\n-        final HashMap<Long, ArrayList<String>> tableExclusiveLocksMap =\n-                MVTable.EXCLUSIVE_LOCKS.getSnapshotOfAllThreads();\n-        final HashMap<Long, ArrayList<String>> tableSharedLocksMap =\n-                MVTable.SHARED_LOCKS.getSnapshotOfAllThreads();\n-        for (ThreadInfo ti : infos) {\n-            printThreadInfo(print, ti);\n-            printLockInfo(print, ti.getLockedSynchronizers(),\n-                    tableWaitingForLockMap.get(ti.getThreadId()),\n-                    tableExclusiveLocksMap.get(ti.getThreadId()),\n-                    tableSharedLocksMap.get(ti.getThreadId()));\n-        }\n-\n-        print.flush();\n-        // Dump it to system.out in one block, so it doesn't get mixed up with\n-        // other stuff when we're using a logging subsystem.\n-        System.out.println(stringWriter.getBuffer());\n+    if (ti.isSuspended()) {\n+      print.append(\" (suspended)\");\n     }\n-\n-    private static void printThreadInfo(PrintWriter print, ThreadInfo ti) {\n-        // print thread information\n-        printThread(print, ti);\n-\n-        // print stack trace with locks\n-        StackTraceElement[] stackTrace = ti.getStackTrace();\n-        MonitorInfo[] monitors = ti.getLockedMonitors();\n-        for (int i = 0; i < stackTrace.length; i++) {\n-            StackTraceElement e = stackTrace[i];\n-            print.println(INDENT + \"at \" + e.toString());\n-            for (MonitorInfo mi : monitors) {\n-                if (mi.getLockedStackDepth() == i) {\n-                    print.println(INDENT + \"  - locked \" + mi);\n-                }\n-            }\n-        }\n-        print.println();\n+    if (ti.isInNative()) {\n+      print.append(\" (running in native)\");\n     }\n-\n-    private static void printThread(PrintWriter print, ThreadInfo ti) {\n-        print.print(\"\\\"\" + ti.getThreadName() + \"\\\"\" + \" Id=\"\n-                + ti.getThreadId() + \" in \" + ti.getThreadState());\n-        if (ti.getLockName() != null) {\n-            print.append(\" on lock=\" + ti.getLockName());\n-        }\n-        if (ti.isSuspended()) {\n-            print.append(\" (suspended)\");\n-        }\n-        if (ti.isInNative()) {\n-            print.append(\" (running in native)\");\n-        }\n-        print.println();\n-        if (ti.getLockOwnerName() != null) {\n-            print.println(INDENT + \" owned by \" + ti.getLockOwnerName() + \" Id=\"\n-                    + ti.getLockOwnerId());\n-        }\n+    print.println();\n+    if (ti.getLockOwnerName() != null) {\n+      print.println(INDENT + \" owned by \" + ti.getLockOwnerName() + \" Id=\"\n+          + ti.getLockOwnerId());\n     }\n-\n-    private static void printLockInfo(PrintWriter print, LockInfo[] locks,\n-            String tableWaitingForLock,\n-            ArrayList<String> tableExclusiveLocks,\n-            ArrayList<String> tableSharedLocksMap) {\n-        print.println(INDENT + \"Locked synchronizers: count = \" + locks.length);\n-        for (LockInfo li : locks) {\n-            print.println(INDENT + \"  - \" + li);\n-        }\n-        if (tableWaitingForLock != null) {\n-            print.println(INDENT + \"Waiting for table: \" + tableWaitingForLock);\n-        }\n-        if (tableExclusiveLocks != null) {\n-            print.println(INDENT + \"Exclusive table locks: count = \" + tableExclusiveLocks.size());\n-            for (String name : tableExclusiveLocks) {\n-                print.println(INDENT + \"  - \" + name);\n-            }\n-        }\n-        if (tableSharedLocksMap != null) {\n-            print.println(INDENT + \"Shared table locks: count = \" + tableSharedLocksMap.size());\n-            for (String name : tableSharedLocksMap) {\n-                print.println(INDENT + \"  - \" + name);\n-            }\n-        }\n-        print.println();\n+  }\n+\n+  private static void printLockInfo(PrintWriter print, LockInfo[] locks,\n+                                    String tableWaitingForLock,\n+                                    ArrayList<String> tableExclusiveLocks,\n+                                    ArrayList<String> tableSharedLocksMap) {\n+    print.println(INDENT + \"Locked synchronizers: count = \" + locks.length);\n+    for (LockInfo li : locks) {\n+      print.println(INDENT + \"  - \" + li);\n+    }\n+    if (tableWaitingForLock != null) {\n+      print.println(INDENT + \"Waiting for table: \" + tableWaitingForLock);\n+    }\n+    if (tableExclusiveLocks != null) {\n+      print.println(INDENT + \"Exclusive table locks: count = \" +\n+          tableExclusiveLocks.size());\n+      for (String name : tableExclusiveLocks) {\n+        print.println(INDENT + \"  - \" + name);\n+      }\n+    }\n+    if (tableSharedLocksMap != null) {\n+      print.println(\n+          INDENT + \"Shared table locks: count = \" + tableSharedLocksMap.size());\n+      for (String name : tableSharedLocksMap) {\n+        print.println(INDENT + \"  - \" + name);\n+      }\n     }\n+    print.println();\n+  }\n \n }\n\\ No newline at end of file\n",
            "diff_size": 187
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/62/ThreadDeadlockDetector.java\nindex 5737850ffd..59110bca45 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/62/ThreadDeadlockDetector.java\n@@ -22,12 +22,12 @@ import org.h2.mvstore.db.MVTable;\n  * Detects deadlocks between threads. Prints out data in the same format as the\n  * CTRL-BREAK handler, but includes information about table locks.\n  */\n+\n+\n public class ThreadDeadlockDetector {\n \n     private static final String INDENT = \"    \";\n-\n     private static ThreadDeadlockDetector detector;\n-\n     private final ThreadMXBean threadBean;\n \n     // a daemon thread\n@@ -48,6 +48,8 @@ public class ThreadDeadlockDetector {\n     /**\n      * Initialize the detector.\n      */\n+\n+\n     public static synchronized void init() {\n         if (detector == null) {\n             detector = new ThreadDeadlockDetector();\n@@ -58,42 +60,37 @@ public class ThreadDeadlockDetector {\n      * Checks if any threads are deadlocked. If any, print the thread dump\n      * information.\n      */\n+\n+\n     void checkForDeadlocks() {\n         long[] deadlockedThreadIds = threadBean.findDeadlockedThreads();\n         if (deadlockedThreadIds == null) {\n             return;\n         }\n         dumpThreadsAndLocks(\"ThreadDeadlockDetector - deadlock found :\",\n-                threadBean, deadlockedThreadIds);\n+            threadBean,\n+                deadlockedThreadIds);\n     }\n \n+\n     public static void dumpAllThreadsAndLocks(String msg) {\n         final ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n         final long[] allThreadIds = threadBean.getAllThreadIds();\n         dumpThreadsAndLocks(msg, threadBean, allThreadIds);\n     }\n \n-    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds)\n-    {\n+    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds) {\n         final StringWriter stringWriter = new StringWriter();\n         final PrintWriter print = new PrintWriter(stringWriter);\n-\n         print.println(msg);\n         final ThreadInfo[] infos = threadBean.getThreadInfo(threadIds, true, true);\n-        final HashMap<Long, String> tableWaitingForLockMap =\n-                MVTable.WAITING_FOR_LOCK.getSnapshotOfAllThreads();\n-        final HashMap<Long, ArrayList<String>> tableExclusiveLocksMap =\n-                MVTable.EXCLUSIVE_LOCKS.getSnapshotOfAllThreads();\n-        final HashMap<Long, ArrayList<String>> tableSharedLocksMap =\n-                MVTable.SHARED_LOCKS.getSnapshotOfAllThreads();\n+        final HashMap<Long, String> tableWaitingForLockMap = MVTable.WAITING_FOR_LOCK.getSnapshotOfAllThreads();\n+        final HashMap<Long, ArrayList<String>> tableExclusiveLocksMap = MVTable.EXCLUSIVE_LOCKS.getSnapshotOfAllThreads();\n+        final HashMap<Long, ArrayList<String>> tableSharedLocksMap = MVTable.SHARED_LOCKS.getSnapshotOfAllThreads();\n         for (ThreadInfo ti : infos) {\n             printThreadInfo(print, ti);\n-            printLockInfo(print, ti.getLockedSynchronizers(),\n-                    tableWaitingForLockMap.get(ti.getThreadId()),\n-                    tableExclusiveLocksMap.get(ti.getThreadId()),\n-                    tableSharedLocksMap.get(ti.getThreadId()));\n+            printLockInfo(print, ti.getLockedSynchronizers(), tableWaitingForLockMap.get(ti.getThreadId()), tableExclusiveLocksMap.get(ti.getThreadId()), tableSharedLocksMap.get(ti.getThreadId()));\n         }\n-\n         print.flush();\n         // Dump it to system.out in one block, so it doesn't get mixed up with\n         // other stuff when we're using a logging subsystem.\n@@ -120,8 +117,9 @@ public class ThreadDeadlockDetector {\n     }\n \n     private static void printThread(PrintWriter print, ThreadInfo ti) {\n-        print.print(\"\\\"\" + ti.getThreadName() + \"\\\"\" + \" Id=\"\n-                + ti.getThreadId() + \" in \" + ti.getThreadState());\n+        print.print(\"\\\"\" + ti.getThreadName() + \"\\\"\"\n+        + \" Id=\"\n+        + ti.getThreadId() + \" in \" + ti.getThreadState());\n         if (ti.getLockName() != null) {\n             print.append(\" on lock=\" + ti.getLockName());\n         }\n@@ -133,15 +131,12 @@ public class ThreadDeadlockDetector {\n         }\n         print.println();\n         if (ti.getLockOwnerName() != null) {\n-            print.println(INDENT + \" owned by \" + ti.getLockOwnerName() + \" Id=\"\n-                    + ti.getLockOwnerId());\n+            print.println(INDENT + \" owned by \"\n+            + ti.getLockOwnerName() + \" Id=\" + ti.getLockOwnerId());\n         }\n     }\n \n-    private static void printLockInfo(PrintWriter print, LockInfo[] locks,\n-            String tableWaitingForLock,\n-            ArrayList<String> tableExclusiveLocks,\n-            ArrayList<String> tableSharedLocksMap) {\n+    private static void printLockInfo(PrintWriter print, LockInfo[] locks, String tableWaitingForLock, ArrayList<String> tableExclusiveLocks, ArrayList<String> tableSharedLocksMap) {\n         print.println(INDENT + \"Locked synchronizers: count = \" + locks.length);\n         for (LockInfo li : locks) {\n             print.println(INDENT + \"  - \" + li);\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/62/ThreadDeadlockDetector.java\nindex 5737850ffd..195661a9a5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/62/ThreadDeadlockDetector.java\n@@ -73,8 +73,7 @@ public class ThreadDeadlockDetector {\n         dumpThreadsAndLocks(msg, threadBean, allThreadIds);\n     }\n \n-    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds)\n-    {\n+    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds) {\n         final StringWriter stringWriter = new StringWriter();\n         final PrintWriter print = new PrintWriter(stringWriter);\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/62/ThreadDeadlockDetector.java\nindex 5737850ffd..195661a9a5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/62/ThreadDeadlockDetector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/62/ThreadDeadlockDetector.java\n@@ -73,8 +73,7 @@ public class ThreadDeadlockDetector {\n         dumpThreadsAndLocks(msg, threadBean, allThreadIds);\n     }\n \n-    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds)\n-    {\n+    private static void dumpThreadsAndLocks(String msg, ThreadMXBean threadBean, long[] threadIds) {\n         final StringWriter stringWriter = new StringWriter();\n         final PrintWriter print = new PrintWriter(stringWriter);\n \n",
            "diff_size": 2
        }
    ]
}