{
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class AutoCompensableAspect {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n\tprivate final OmegaContext context;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler/15/AutoCompensableAspect.java\nindex 13c1a219c0..015fabc6cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler/15/AutoCompensableAspect.java\n@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;\n @Aspect\n public class AutoCompensableAspect {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n \tprivate final OmegaContext context;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/intellij/15/AutoCompensableAspect.java\nindex 13c1a219c0..fa90591b75 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/intellij/15/AutoCompensableAspect.java\n@@ -27,36 +27,36 @@ import org.slf4j.LoggerFactory;\n @Aspect\n public class AutoCompensableAspect {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-\n-\tprivate final OmegaContext context;\n-\n-\tprivate IAutoCompensateService autoCompensateService;\n-\tprivate AutoCompensableInterceptor autoCompensableInterceptor;\n-\n-\tpublic AutoCompensableAspect(MessageSender sender, OmegaContext context, AutoCompensateService autoCompensateService) {\n-\t\tthis.context = context;\n-\t\tthis.autoCompensateService = autoCompensateService;\n-\t\tthis.autoCompensableInterceptor = new AutoCompensableInterceptor(context, sender);\n-\t}\n-\n-\t@Around(\"execution(@org.apache.servicecomb.saga.omega.transaction.annotations.AutoCompensable * *(..)) && @annotation(autoCompensable)\")\n-\tObject advise(ProceedingJoinPoint joinPoint, AutoCompensable autoCompensable) throws Throwable {\n-\t\tMethod method = null;\n-\t\ttry {\n-\t\t\tmethod = ((MethodSignature) joinPoint.getSignature()).getMethod();\n-\t\t\tString localTxId = context.newLocalTxId();\n-\t\t\tLOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Updated context [{}] for autoCompensable method [{}] \", context, method.toString());\n-\n-\t\t\tint retries = autoCompensable.retries();\n-\t\t\tAutoCompensableRecoveryPolicy recoveryPolicy = AutoCompensableRecoveryPolicyFactory.getRecoveryPolicy(retries);\n-\n-\t\t\treturn recoveryPolicy.apply(joinPoint, autoCompensable, autoCompensableInterceptor, context, localTxId, retries, autoCompensateService);\n-\t\t} catch (Throwable e) {\n-\t\t\tLOG.error(TxleConstants.LOG_ERROR_PREFIX + \"Fail to execute AutoCompensableAspect, context [{}], method [{}]\", context,\n-\t\t\t\t\tmethod == null ? \"\" : method.toString(), e);\n-\t\t\tthrow e;\n-\t\t}\n-\t}\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+    private final OmegaContext context;\n+\n+    private IAutoCompensateService autoCompensateService;\n+    private AutoCompensableInterceptor autoCompensableInterceptor;\n+\n+    public AutoCompensableAspect(MessageSender sender, OmegaContext context, AutoCompensateService autoCompensateService) {\n+        this.context = context;\n+        this.autoCompensateService = autoCompensateService;\n+        this.autoCompensableInterceptor = new AutoCompensableInterceptor(context, sender);\n+    }\n+\n+    @Around(\"execution(@org.apache.servicecomb.saga.omega.transaction.annotations.AutoCompensable * *(..)) && @annotation(autoCompensable)\")\n+    Object advise(ProceedingJoinPoint joinPoint, AutoCompensable autoCompensable) throws Throwable {\n+        Method method = null;\n+        try {\n+            method = ((MethodSignature) joinPoint.getSignature()).getMethod();\n+            String localTxId = context.newLocalTxId();\n+            LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Updated context [{}] for autoCompensable method [{}] \", context, method.toString());\n+\n+            int retries = autoCompensable.retries();\n+            AutoCompensableRecoveryPolicy recoveryPolicy = AutoCompensableRecoveryPolicyFactory.getRecoveryPolicy(retries);\n+\n+            return recoveryPolicy.apply(joinPoint, autoCompensable, autoCompensableInterceptor, context, localTxId, retries, autoCompensateService);\n+        } catch (Throwable e) {\n+            LOG.error(TxleConstants.LOG_ERROR_PREFIX + \"Fail to execute AutoCompensableAspect, context [{}], method [{}]\", context,\n+                    method == null ? \"\" : method.toString(), e);\n+            throw e;\n+        }\n+    }\n \n }\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/naturalize/15/AutoCompensableAspect.java\nindex 13c1a219c0..3f45099399 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/naturalize/15/AutoCompensableAspect.java\n@@ -26,8 +26,7 @@ import org.slf4j.LoggerFactory;\n  */\n @Aspect\n public class AutoCompensableAspect {\n-\n-\tprivate static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n \tprivate final OmegaContext context;\n \n@@ -35,16 +34,16 @@ public class AutoCompensableAspect {\n \tprivate AutoCompensableInterceptor autoCompensableInterceptor;\n \n \tpublic AutoCompensableAspect(MessageSender sender, OmegaContext context, AutoCompensateService autoCompensateService) {\n-\t\tthis.context = context;\n+    this.context = context;\n \t\tthis.autoCompensateService = autoCompensateService;\n \t\tthis.autoCompensableInterceptor = new AutoCompensableInterceptor(context, sender);\n-\t}\n+    }\n \n \t@Around(\"execution(@org.apache.servicecomb.saga.omega.transaction.annotations.AutoCompensable * *(..)) && @annotation(autoCompensable)\")\n \tObject advise(ProceedingJoinPoint joinPoint, AutoCompensable autoCompensable) throws Throwable {\n-\t\tMethod method = null;\n+    Method method = null;\n \t\ttry {\n-\t\t\tmethod = ((MethodSignature) joinPoint.getSignature()).getMethod();\n+    method = ((MethodSignature) joinPoint.getSignature()).getMethod();\n \t\t\tString localTxId = context.newLocalTxId();\n \t\t\tLOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Updated context [{}] for autoCompensable method [{}] \", context, method.toString());\n \n@@ -52,11 +51,9 @@ public class AutoCompensableAspect {\n \t\t\tAutoCompensableRecoveryPolicy recoveryPolicy = AutoCompensableRecoveryPolicyFactory.getRecoveryPolicy(retries);\n \n \t\t\treturn recoveryPolicy.apply(joinPoint, autoCompensable, autoCompensableInterceptor, context, localTxId, retries, autoCompensateService);\n-\t\t} catch (Throwable e) {\n-\t\t\tLOG.error(TxleConstants.LOG_ERROR_PREFIX + \"Fail to execute AutoCompensableAspect, context [{}], method [{}]\", context,\n-\t\t\t\t\tmethod == null ? \"\" : method.toString(), e);\n-\t\t\tthrow e;\n-\t\t}\n-\t}\n-\n-}\n+    } catch (Throwable e) {\n+    LOG.error(TxleConstants.LOG_ERROR_PREFIX + \"Fail to execute AutoCompensableAspect, context [{}], method [{}]\", context, method == null ? \"\" : method.toString(), e);\n+throw e;\n+    }\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/codebuff/15/AutoCompensableAspect.java\nindex 13c1a219c0..a328769048 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/codebuff/15/AutoCompensableAspect.java\n@@ -7,7 +7,6 @@ package org.apache.servicecomb.saga.omega.transaction;\n \n import java.lang.invoke.MethodHandles;\n import java.lang.reflect.Method;\n-\n import org.apache.servicecomb.saga.common.TxleConstants;\n import org.apache.servicecomb.saga.omega.context.OmegaContext;\n import org.apache.servicecomb.saga.omega.transaction.annotations.AutoCompensable;\n@@ -24,39 +23,39 @@ import org.slf4j.LoggerFactory;\n  * @author Gannalyo\n  * @since 2018-07-30\n  */\n-@Aspect\n-public class AutoCompensableAspect {\n-\n-\tprivate static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-\n-\tprivate final OmegaContext context;\n-\n-\tprivate IAutoCompensateService autoCompensateService;\n-\tprivate AutoCompensableInterceptor autoCompensableInterceptor;\n \n-\tpublic AutoCompensableAspect(MessageSender sender, OmegaContext context, AutoCompensateService autoCompensateService) {\n-\t\tthis.context = context;\n-\t\tthis.autoCompensateService = autoCompensateService;\n-\t\tthis.autoCompensableInterceptor = new AutoCompensableInterceptor(context, sender);\n-\t}\n \n-\t@Around(\"execution(@org.apache.servicecomb.saga.omega.transaction.annotations.AutoCompensable * *(..)) && @annotation(autoCompensable)\")\n-\tObject advise(ProceedingJoinPoint joinPoint, AutoCompensable autoCompensable) throws Throwable {\n-\t\tMethod method = null;\n-\t\ttry {\n-\t\t\tmethod = ((MethodSignature) joinPoint.getSignature()).getMethod();\n-\t\t\tString localTxId = context.newLocalTxId();\n-\t\t\tLOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Updated context [{}] for autoCompensable method [{}] \", context, method.toString());\n-\n-\t\t\tint retries = autoCompensable.retries();\n-\t\t\tAutoCompensableRecoveryPolicy recoveryPolicy = AutoCompensableRecoveryPolicyFactory.getRecoveryPolicy(retries);\n-\n-\t\t\treturn recoveryPolicy.apply(joinPoint, autoCompensable, autoCompensableInterceptor, context, localTxId, retries, autoCompensateService);\n-\t\t} catch (Throwable e) {\n-\t\t\tLOG.error(TxleConstants.LOG_ERROR_PREFIX + \"Fail to execute AutoCompensableAspect, context [{}], method [{}]\", context,\n-\t\t\t\t\tmethod == null ? \"\" : method.toString(), e);\n-\t\t\tthrow e;\n-\t\t}\n-\t}\n-\n-}\n+@Aspect\n+public class AutoCompensableAspect {\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+    private final OmegaContext context;\n+    private IAutoCompensateService autoCompensateService;\n+    private AutoCompensableInterceptor autoCompensableInterceptor;\n+\n+    public AutoCompensableAspect(MessageSender sender, OmegaContext context, AutoCompensateService autoCompensateService) {\n+    this.context = context;\n+    this.autoCompensateService = autoCompensateService;\n+    this.autoCompensableInterceptor = new AutoCompensableInterceptor(context, sender);\n+    }\n+\n+    @Around(\"execution(@org.apache.servicecomb.saga.omega.transaction.annotations.AutoCompensable * *(..)) && @annotation(autoCompensable)\")\n+    Object advise(ProceedingJoinPoint joinPoint, AutoCompensable autoCompensable) throws Throwable {\n+    Method method = null;\n+    try {\n+        method = ((MethodSignature) joinPoint.getSignature()).getMethod();\n+\n+        String localTxId = context.newLocalTxId();\n+        LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Updated context [{}] for autoCompensable method [{}] \", context, method.toString());\n+        int retries = autoCompensable.retries();\n+        AutoCompensableRecoveryPolicy recoveryPolicy = AutoCompensableRecoveryPolicyFactory.getRecoveryPolicy(retries);\n+        return recoveryPolicy.apply(joinPoint, autoCompensable, autoCompensableInterceptor, context, localTxId, retries, autoCompensateService);\n+    } catch (Throwable e) {\n+        LOG.error(\n+            TxleConstants.LOG_ERROR_PREFIX + \"Fail to execute AutoCompensableAspect, context [{}], method [{}]\",\n+context,\n+method == null ? \"\" : method.toString(),\n+e);\n+        throw e;\n+    }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler_random/15/AutoCompensableAspect.java\nindex 13c1a219c0..015fabc6cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler_random/15/AutoCompensableAspect.java\n@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;\n @Aspect\n public class AutoCompensableAspect {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n \tprivate final OmegaContext context;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler_three_grams/15/AutoCompensableAspect.java\nindex 13c1a219c0..015fabc6cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/15/AutoCompensableAspect.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler_three_grams/15/AutoCompensableAspect.java\n@@ -27,7 +27,7 @@ import org.slf4j.LoggerFactory;\n @Aspect\n public class AutoCompensableAspect {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+    private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n \n \tprivate final OmegaContext context;\n \n",
            "diff_size": 1
        }
    ]
}