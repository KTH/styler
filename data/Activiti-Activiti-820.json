{
    "error_id": "820",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.parser.handler;\n\nimport org.activiti.bpmn.model.BaseElement;\nimport org.activiti.bpmn.model.ImplementationType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/820/ServiceTaskParseHandler.java\nindex f5ccd76595..343314618c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/820/ServiceTaskParseHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.parser.handler;\n \n import org.activiti.bpmn.model.BaseElement;\n@@ -45,7 +46,7 @@ public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<Se\n     }\n \n   }\n-  \n+\n   protected void createActivityBehaviorForServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     if (serviceTask.getType().equalsIgnoreCase(\"mail\")) {\n       createMailActivityBehavior(bpmnParse, serviceTask);\n@@ -75,7 +76,7 @@ public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<Se\n   protected void createShellActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));\n   }\n-  \n+\n   protected void createActivityBehaviorForCustomServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     logger.warn(\"Invalid service task type: '\" + serviceTask.getType() + \"' \" + \" for service task \" + serviceTask.getId());\n   }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/820/ServiceTaskParseHandler.java\nindex f5ccd76595..d3dcb7dbce 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/820/ServiceTaskParseHandler.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.parser.handler;\n \n import org.activiti.bpmn.model.BaseElement;\n@@ -22,81 +23,81 @@ import org.slf4j.LoggerFactory;\n \n public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<ServiceTask> {\n \n-  private static Logger logger = LoggerFactory.getLogger(ServiceTaskParseHandler.class);\n-\n-  public Class<? extends BaseElement> getHandledType() {\n-    return ServiceTask.class;\n-  }\n-\n-  protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-\n-    if (StringUtils.isNotEmpty(serviceTask.getType())) {\n-      createActivityBehaviorForServiceTaskType(bpmnParse, serviceTask);\n-    } else if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(serviceTask.getImplementationType())) {\n-      createClassDelegateServiceTask(bpmnParse, serviceTask);\n-    } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {\n-      createServiceTaskDelegateExpressionActivityBehavior(bpmnParse, serviceTask);\n-    } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {\n-      createServiceTaskExpressionActivityBehavior(bpmnParse, serviceTask);\n-    } else if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(serviceTask.getImplementationType()) && StringUtils.isNotEmpty(serviceTask.getOperationRef())) {\n-      createWebServiceActivityBehavior(bpmnParse, serviceTask);\n-    } else {\n-      createDefaultServiceTaskActivityBehavior(bpmnParse, serviceTask);\n+    private static Logger logger = LoggerFactory.getLogger(ServiceTaskParseHandler.class);\n+\n+    public Class<? extends BaseElement> getHandledType() {\n+        return ServiceTask.class;\n+    }\n+\n+    protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+\n+        if (StringUtils.isNotEmpty(serviceTask.getType())) {\n+            createActivityBehaviorForServiceTaskType(bpmnParse, serviceTask);\n+        } else if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(serviceTask.getImplementationType())) {\n+            createClassDelegateServiceTask(bpmnParse, serviceTask);\n+        } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {\n+            createServiceTaskDelegateExpressionActivityBehavior(bpmnParse, serviceTask);\n+        } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {\n+            createServiceTaskExpressionActivityBehavior(bpmnParse, serviceTask);\n+        } else if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(serviceTask.getImplementationType()) && StringUtils.isNotEmpty(serviceTask.getOperationRef())) {\n+            createWebServiceActivityBehavior(bpmnParse, serviceTask);\n+        } else {\n+            createDefaultServiceTaskActivityBehavior(bpmnParse, serviceTask);\n+        }\n+\n+    }\n+\n+    protected void createActivityBehaviorForServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        if (serviceTask.getType().equalsIgnoreCase(\"mail\")) {\n+            createMailActivityBehavior(bpmnParse, serviceTask);\n+        } else if (serviceTask.getType().equalsIgnoreCase(\"mule\")) {\n+            createMuleActivityBehavior(bpmnParse, serviceTask);\n+        } else if (serviceTask.getType().equalsIgnoreCase(\"camel\")) {\n+            createCamelActivityBehavior(bpmnParse, serviceTask);\n+        } else if (serviceTask.getType().equalsIgnoreCase(\"shell\")) {\n+            createShellActivityBehavior(bpmnParse, serviceTask);\n+        } else {\n+            createActivityBehaviorForCustomServiceTaskType(bpmnParse, serviceTask);\n+        }\n+    }\n+\n+    protected void createMailActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMailActivityBehavior(serviceTask));\n+    }\n+\n+    protected void createMuleActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMuleActivityBehavior(serviceTask));\n+    }\n+\n+    protected void createCamelActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createCamelActivityBehavior(serviceTask));\n+    }\n+\n+    protected void createShellActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));\n+    }\n+\n+    protected void createActivityBehaviorForCustomServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        logger.warn(\"Invalid service task type: '\" + serviceTask.getType() + \"' \" + \" for service task \" + serviceTask.getId());\n+    }\n+\n+    protected void createClassDelegateServiceTask(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createClassDelegateServiceTask(serviceTask));\n+    }\n+\n+    protected void createServiceTaskDelegateExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createServiceTaskDelegateExpressionActivityBehavior(serviceTask));\n+    }\n+\n+    protected void createServiceTaskExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createServiceTaskExpressionActivityBehavior(serviceTask));\n+    }\n+\n+    protected void createWebServiceActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createWebServiceActivityBehavior(serviceTask));\n     }\n \n-  }\n-  \n-  protected void createActivityBehaviorForServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    if (serviceTask.getType().equalsIgnoreCase(\"mail\")) {\n-      createMailActivityBehavior(bpmnParse, serviceTask);\n-    } else if (serviceTask.getType().equalsIgnoreCase(\"mule\")) {\n-      createMuleActivityBehavior(bpmnParse, serviceTask);\n-    } else if (serviceTask.getType().equalsIgnoreCase(\"camel\")) {\n-      createCamelActivityBehavior(bpmnParse, serviceTask);\n-    } else if (serviceTask.getType().equalsIgnoreCase(\"shell\")) {\n-      createShellActivityBehavior(bpmnParse, serviceTask);\n-    } else {\n-      createActivityBehaviorForCustomServiceTaskType(bpmnParse, serviceTask);\n+    protected void createDefaultServiceTaskActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+        serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createDefaultServiceTaskBehavior(serviceTask));\n     }\n-  }\n-\n-  protected void createMailActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMailActivityBehavior(serviceTask));\n-  }\n-\n-  protected void createMuleActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMuleActivityBehavior(serviceTask));\n-  }\n-\n-  protected void createCamelActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createCamelActivityBehavior(serviceTask));\n-  }\n-\n-  protected void createShellActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));\n-  }\n-  \n-  protected void createActivityBehaviorForCustomServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    logger.warn(\"Invalid service task type: '\" + serviceTask.getType() + \"' \" + \" for service task \" + serviceTask.getId());\n-  }\n-\n-  protected void createClassDelegateServiceTask(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createClassDelegateServiceTask(serviceTask));\n-  }\n-\n-  protected void createServiceTaskDelegateExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createServiceTaskDelegateExpressionActivityBehavior(serviceTask));\n-  }\n-\n-  protected void createServiceTaskExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createServiceTaskExpressionActivityBehavior(serviceTask));\n-  }\n-\n-  protected void createWebServiceActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createWebServiceActivityBehavior(serviceTask));\n-  }\n-\n-  protected void createDefaultServiceTaskActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n-    serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createDefaultServiceTaskBehavior(serviceTask));\n-  }\n }\n",
            "diff_size": 129
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/820/ServiceTaskParseHandler.java\nindex f5ccd76595..55e92d464a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/820/ServiceTaskParseHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.parser.handler;\n \n import org.activiti.bpmn.model.BaseElement;\n@@ -99,4 +100,4 @@ public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<Se\n   protected void createDefaultServiceTaskActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createDefaultServiceTaskBehavior(serviceTask));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/820/ServiceTaskParseHandler.java\nindex f5ccd76595..34353b855f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/820/ServiceTaskParseHandler.java\n@@ -20,83 +20,81 @@ import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<ServiceTask> {\n \n-  private static Logger logger = LoggerFactory.getLogger(ServiceTaskParseHandler.class);\n+public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<ServiceTask> {\n \n-  public Class<? extends BaseElement> getHandledType() {\n+    private static Logger logger = LoggerFactory.getLogger(ServiceTaskParseHandler.class);\n+    public Class<? extends BaseElement> getHandledType() {\n     return ServiceTask.class;\n-  }\n-\n-  protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    }\n \n+    protected void executeParse(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     if (StringUtils.isNotEmpty(serviceTask.getType())) {\n-      createActivityBehaviorForServiceTaskType(bpmnParse, serviceTask);\n+        createActivityBehaviorForServiceTaskType(bpmnParse, serviceTask);\n     } else if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(serviceTask.getImplementationType())) {\n       createClassDelegateServiceTask(bpmnParse, serviceTask);\n     } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {\n       createServiceTaskDelegateExpressionActivityBehavior(bpmnParse, serviceTask);\n-    } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {\n-      createServiceTaskExpressionActivityBehavior(bpmnParse, serviceTask);\n-    } else if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(serviceTask.getImplementationType()) && StringUtils.isNotEmpty(serviceTask.getOperationRef())) {\n-      createWebServiceActivityBehavior(bpmnParse, serviceTask);\n-    } else {\n-      createDefaultServiceTaskActivityBehavior(bpmnParse, serviceTask);\n+           } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(serviceTask.getImplementationType())) {\n+             createServiceTaskExpressionActivityBehavior(bpmnParse, serviceTask);\n+           } else if (ImplementationType.IMPLEMENTATION_TYPE_WEBSERVICE.equalsIgnoreCase(serviceTask.getImplementationType()) && StringUtils.isNotEmpty(serviceTask.getOperationRef())) {\n+             createWebServiceActivityBehavior(bpmnParse, serviceTask);\n+                  } else {\n+                    createDefaultServiceTaskActivityBehavior(bpmnParse, serviceTask);\n+                  }\n     }\n \n-  }\n-  \n-  protected void createActivityBehaviorForServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createActivityBehaviorForServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     if (serviceTask.getType().equalsIgnoreCase(\"mail\")) {\n-      createMailActivityBehavior(bpmnParse, serviceTask);\n+        createMailActivityBehavior(bpmnParse, serviceTask);\n     } else if (serviceTask.getType().equalsIgnoreCase(\"mule\")) {\n       createMuleActivityBehavior(bpmnParse, serviceTask);\n     } else if (serviceTask.getType().equalsIgnoreCase(\"camel\")) {\n       createCamelActivityBehavior(bpmnParse, serviceTask);\n-    } else if (serviceTask.getType().equalsIgnoreCase(\"shell\")) {\n-      createShellActivityBehavior(bpmnParse, serviceTask);\n-    } else {\n-      createActivityBehaviorForCustomServiceTaskType(bpmnParse, serviceTask);\n+           } else if (serviceTask.getType().equalsIgnoreCase(\"shell\")) {\n+             createShellActivityBehavior(bpmnParse, serviceTask);\n+           } else {\n+             createActivityBehaviorForCustomServiceTaskType(bpmnParse, serviceTask);\n+           }\n     }\n-  }\n \n-  protected void createMailActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createMailActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMailActivityBehavior(serviceTask));\n-  }\n+    }\n \n-  protected void createMuleActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createMuleActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createMuleActivityBehavior(serviceTask));\n-  }\n+    }\n \n-  protected void createCamelActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createCamelActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createCamelActivityBehavior(serviceTask));\n-  }\n+    }\n \n-  protected void createShellActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createShellActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));\n-  }\n-  \n-  protected void createActivityBehaviorForCustomServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    }\n+\n+    protected void createActivityBehaviorForCustomServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     logger.warn(\"Invalid service task type: '\" + serviceTask.getType() + \"' \" + \" for service task \" + serviceTask.getId());\n-  }\n+    }\n \n-  protected void createClassDelegateServiceTask(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createClassDelegateServiceTask(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createClassDelegateServiceTask(serviceTask));\n-  }\n+    }\n \n-  protected void createServiceTaskDelegateExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createServiceTaskDelegateExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createServiceTaskDelegateExpressionActivityBehavior(serviceTask));\n-  }\n+    }\n \n-  protected void createServiceTaskExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createServiceTaskExpressionActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createServiceTaskExpressionActivityBehavior(serviceTask));\n-  }\n+    }\n \n-  protected void createWebServiceActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createWebServiceActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createWebServiceActivityBehavior(serviceTask));\n-  }\n+    }\n \n-  protected void createDefaultServiceTaskActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n+    protected void createDefaultServiceTaskActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createDefaultServiceTaskBehavior(serviceTask));\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/820/ServiceTaskParseHandler.java\nindex f5ccd76595..343314618c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/820/ServiceTaskParseHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.parser.handler;\n \n import org.activiti.bpmn.model.BaseElement;\n@@ -45,7 +46,7 @@ public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<Se\n     }\n \n   }\n-  \n+\n   protected void createActivityBehaviorForServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     if (serviceTask.getType().equalsIgnoreCase(\"mail\")) {\n       createMailActivityBehavior(bpmnParse, serviceTask);\n@@ -75,7 +76,7 @@ public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<Se\n   protected void createShellActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));\n   }\n-  \n+\n   protected void createActivityBehaviorForCustomServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     logger.warn(\"Invalid service task type: '\" + serviceTask.getType() + \"' \" + \" for service task \" + serviceTask.getId());\n   }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/820/ServiceTaskParseHandler.java\nindex f5ccd76595..343314618c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/820/ServiceTaskParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/820/ServiceTaskParseHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.parser.handler;\n \n import org.activiti.bpmn.model.BaseElement;\n@@ -45,7 +46,7 @@ public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<Se\n     }\n \n   }\n-  \n+\n   protected void createActivityBehaviorForServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     if (serviceTask.getType().equalsIgnoreCase(\"mail\")) {\n       createMailActivityBehavior(bpmnParse, serviceTask);\n@@ -75,7 +76,7 @@ public class ServiceTaskParseHandler extends AbstractActivityBpmnParseHandler<Se\n   protected void createShellActivityBehavior(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     serviceTask.setBehavior(bpmnParse.getActivityBehaviorFactory().createShellActivityBehavior(serviceTask));\n   }\n-  \n+\n   protected void createActivityBehaviorForCustomServiceTaskType(BpmnParse bpmnParse, ServiceTask serviceTask) {\n     logger.warn(\"Invalid service task type: '\" + serviceTask.getType() + \"' \" + \" for service task \" + serviceTask.getId());\n   }\n",
            "diff_size": 3
        }
    ]
}