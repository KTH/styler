{
    "error_id": "12",
    "information": {
        "errors": [
            {
                "line": "76",
                "severity": "error",
                "message": "Line is longer than 125 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    public RecordDetailsDTO buildRecordDetails(Organization organization,\n        List<ConflictDTO> conflictDTOs, List<OrganizationMatchDTO> orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs) {\n        return new RecordDetailsDTO(\n            mapOrganizationForRecordDetails(organization),\n            partnerOrgs,",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler/12/RecordBuilder.java\nindex 83b55a053e..70ec22e613 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler/12/RecordBuilder.java\n@@ -73,7 +73,9 @@ public class RecordBuilder {\n     }\n \n     public RecordDetailsDTO buildRecordDetails(Organization organization,\n-        List<ConflictDTO> conflictDTOs, List<OrganizationMatchDTO> orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs) {\n+        List<ConflictDTO>conflictDTOs ,List<\n+        OrganizationMatchDTO> orgMatchDTOs, Set< RecordDetailsOrganizationDTO\n+        > partnerOrgs ) {\n         return new RecordDetailsDTO(\n             mapOrganizationForRecordDetails(organization),\n             partnerOrgs,\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": null,
            "diff": null
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/naturalize/12/RecordBuilder.java\nindex 83b55a053e..09d9a4e3f7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/naturalize/12/RecordBuilder.java\n@@ -181,4 +181,4 @@ public class RecordBuilder {\n         }\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_random/12/RecordBuilder.java\nindex 83b55a053e..70ec22e613 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_random/12/RecordBuilder.java\n@@ -73,7 +73,9 @@ public class RecordBuilder {\n     }\n \n     public RecordDetailsDTO buildRecordDetails(Organization organization,\n-        List<ConflictDTO> conflictDTOs, List<OrganizationMatchDTO> orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs) {\n+        List<ConflictDTO>conflictDTOs ,List<\n+        OrganizationMatchDTO> orgMatchDTOs, Set< RecordDetailsOrganizationDTO\n+        > partnerOrgs ) {\n         return new RecordDetailsDTO(\n             mapOrganizationForRecordDetails(organization),\n             partnerOrgs,\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "column": "104",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_three_grams/12/RecordBuilder.java\nindex 83b55a053e..7be255e189 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/12/RecordBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_three_grams/12/RecordBuilder.java\n@@ -72,113 +72,112 @@ public class RecordBuilder {\n             conflictDTOS);\n     }\n \n-    public RecordDetailsDTO buildRecordDetails(Organization organization,\n-        List<ConflictDTO> conflictDTOs, List<OrganizationMatchDTO> orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs) {\n-        return new RecordDetailsDTO(\n-            mapOrganizationForRecordDetails(organization),\n-            partnerOrgs,\n-            orgMatchDTOs,\n-            conflictDTOs\n-        );\n-    }\n-\n-    public ActivityRecordDTO buildFilteredRecord(Organization organization, ZonedDateTime lastUpdated,\n-        List<ConflictDTO> conflictDTOS, Set<FieldExclusion> baseExclusions, Set<LocationExclusion> locationExclusions)\n-        throws IllegalAccessException {\n-        return new ActivityRecordDTO(\n-            mapOrganization(buildObject(organization, Organization.class, baseExclusions)),\n-            lastUpdated,\n-            mapLocations(buildCollection(filterLocations(organization.getLocations(), locationExclusions),\n-                Location.class, baseExclusions)),\n-            mapServices(buildCollection(organization.getServices(), Service.class, baseExclusions)),\n-            mapContacts(buildCollection(organization.getContacts(), Contact.class, baseExclusions)),\n-            mapExclusions(baseExclusions),\n-            conflictDTOS);\n-    }\n+    public RecordDetailsDTO buildRecordDetails(Organization organization, List<ConflictDTO>conflictDTOs,List<OrganizationMatchDTO>orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs) {\n+    return new RecordDetailsDTO(\n+        mapOrganizationForRecordDetails(organization),\n+        partnerOrgs,\n+        orgMatchDTOs,\n+        conflictDTOs\n+    );\n+}\n \n-    public ProviderRecordDTO buildBasicProviderRecord(Organization organization, ZonedDateTime lastUpdated,\n-        Set<LocationExclusion> locationExclusions) {\n-        UserDTO user = this.getUserDtoOfOrganization(organization);\n-        return new ProviderRecordDTO(\n-            mapOrganization(organization),\n-            lastUpdated,\n-            mapLocations(filterLocations(organization.getLocations(), locationExclusions)),\n-            mapServices(organization.getServices()),\n-            user\n-        );\n-    }\n+public ActivityRecordDTO buildFilteredRecord(Organization organization, ZonedDateTime lastUpdated,\n+    List<ConflictDTO> conflictDTOS, Set<FieldExclusion> baseExclusions, Set<LocationExclusion> locationExclusions)\n+    throws IllegalAccessException {\n+    return new ActivityRecordDTO(\n+        mapOrganization(buildObject(organization, Organization.class, baseExclusions)),\n+        lastUpdated,\n+        mapLocations(buildCollection(filterLocations(organization.getLocations(), locationExclusions),\n+            Location.class, baseExclusions)),\n+        mapServices(buildCollection(organization.getServices(), Service.class, baseExclusions)),\n+        mapContacts(buildCollection(organization.getContacts(), Contact.class, baseExclusions)),\n+        mapExclusions(baseExclusions),\n+        conflictDTOS);\n+}\n \n-    public ProviderRecordDTO buildFilteredProviderRecord(Organization organization, ZonedDateTime lastUpdated,\n-        Set<FieldExclusion> baseExclusions, Set<LocationExclusion> locationExclusions)\n-        throws IllegalAccessException {\n-        UserDTO user = this.getUserDtoOfOrganization(organization);\n-        return new ProviderRecordDTO(\n-            mapOrganization(buildObject(organization, Organization.class, baseExclusions)),\n-            lastUpdated,\n-            mapLocations(buildCollection(filterLocations(organization.getLocations(), locationExclusions),\n-                Location.class, baseExclusions)),\n-            mapServices(buildCollection(organization.getServices(), Service.class, baseExclusions)),\n-            user\n-        );\n-    }\n+public ProviderRecordDTO buildBasicProviderRecord(Organization organization, ZonedDateTime lastUpdated,\n+    Set<LocationExclusion> locationExclusions) {\n+    UserDTO user = this.getUserDtoOfOrganization(organization);\n+    return new ProviderRecordDTO(\n+        mapOrganization(organization),\n+        lastUpdated,\n+        mapLocations(filterLocations(organization.getLocations(), locationExclusions)),\n+        mapServices(organization.getServices()),\n+        user\n+    );\n+}\n \n-    private Set<Location> filterLocations(Set<Location> locations, Set<LocationExclusion> locationExclusions) {\n-        if (locationExclusions == null || locationExclusions.isEmpty()) {\n-            return locations;\n-        }\n+public ProviderRecordDTO buildFilteredProviderRecord(Organization organization, ZonedDateTime lastUpdated,\n+    Set<FieldExclusion> baseExclusions, Set<LocationExclusion> locationExclusions)\n+    throws IllegalAccessException {\n+    UserDTO user = this.getUserDtoOfOrganization(organization);\n+    return new ProviderRecordDTO(\n+        mapOrganization(buildObject(organization, Organization.class, baseExclusions)),\n+        lastUpdated,\n+        mapLocations(buildCollection(filterLocations(organization.getLocations(), locationExclusions),\n+            Location.class, baseExclusions)),\n+        mapServices(buildCollection(organization.getServices(), Service.class, baseExclusions)),\n+        user\n+    );\n+}\n \n-        return locations.stream()\n-            .filter(location -> locationExclusions.stream().noneMatch(exclusion -> isExcluded(location, exclusion)))\n-            .collect(Collectors.toSet());\n+private Set<Location> filterLocations(Set<Location> locations, Set<LocationExclusion> locationExclusions) {\n+    if (locationExclusions == null || locationExclusions.isEmpty()) {\n+        return locations;\n     }\n \n-    private boolean isExcluded(Location location, LocationExclusion exclusion) {\n-        return Optional.ofNullable(location.getPhysicalAddress())\n-            .map(address -> (StringUtils.isNotBlank(exclusion.getRegion())\n-                && StringUtils.containsIgnoreCase(address.getRegion(), exclusion.getRegion()))\n-                || (StringUtils.isNotBlank(exclusion.getCity())\n-                && StringUtils.containsIgnoreCase(address.getCity(), exclusion.getCity())))\n-            .orElse(false);\n-    }\n+    return locations.stream()\n+        .filter(location -> locationExclusions.stream().noneMatch(exclusion -> isExcluded(location, exclusion)))\n+        .collect(Collectors.toSet());\n+}\n \n-    private Set<FieldExclusionDTO> mapExclusions(Set<FieldExclusion> exclusions) {\n-        return exclusions.stream()\n-            .map(exclusionMapper::toDto).collect(Collectors.toSet());\n-    }\n+private boolean isExcluded(Location location, LocationExclusion exclusion) {\n+    return Optional.ofNullable(location.getPhysicalAddress())\n+        .map(address -> (StringUtils.isNotBlank(exclusion.getRegion())\n+            && StringUtils.containsIgnoreCase(address.getRegion(), exclusion.getRegion()))\n+            || (StringUtils.isNotBlank(exclusion.getCity())\n+            && StringUtils.containsIgnoreCase(address.getCity(), exclusion.getCity())))\n+        .orElse(false);\n+}\n \n-    private Set<LocationRecordDTO> mapLocations(Set<Location> locations) {\n-        return locations.stream()\n-            .map(locationMapper::toRecord)\n-            .collect(Collectors.toSet());\n-    }\n+private Set<FieldExclusionDTO> mapExclusions(Set<FieldExclusion> exclusions) {\n+    return exclusions.stream()\n+        .map(exclusionMapper::toDto).collect(Collectors.toSet());\n+}\n \n-    private Set<ServiceRecordDTO> mapServices(Set<Service> services) {\n-        return services.stream()\n-            .map(serviceMapper::toRecord)\n-            .collect(Collectors.toSet());\n-    }\n+private Set<LocationRecordDTO> mapLocations(Set<Location> locations) {\n+    return locations.stream()\n+        .map(locationMapper::toRecord)\n+        .collect(Collectors.toSet());\n+}\n \n-    private Set<ContactDTO> mapContacts(Set<Contact> contacts) {\n-        return contacts.stream()\n-            .map(contactMapper::toDto)\n-            .collect(Collectors.toSet());\n-    }\n+private Set<ServiceRecordDTO> mapServices(Set<Service> services) {\n+    return services.stream()\n+        .map(serviceMapper::toRecord)\n+        .collect(Collectors.toSet());\n+}\n \n-    private OrganizationDTO mapOrganization(Organization organization) {\n-        return organizationMapper.toDto(organization);\n-    }\n+private Set<ContactDTO> mapContacts(Set<Contact> contacts) {\n+    return contacts.stream()\n+        .map(contactMapper::toDto)\n+        .collect(Collectors.toSet());\n+}\n \n-    private RecordDetailsOrganizationDTO mapOrganizationForRecordDetails(Organization organization) {\n-        return organizationMapper.toRecordDetailsDto(organization);\n-    }\n+private OrganizationDTO mapOrganization(Organization organization) {\n+    return organizationMapper.toDto(organization);\n+}\n+\n+private RecordDetailsOrganizationDTO mapOrganizationForRecordDetails(Organization organization) {\n+    return organizationMapper.toRecordDetailsDto(organization);\n+}\n \n-    private UserDTO getUserDtoOfOrganization(Organization organization) {\n-        UserDTO result = null;\n-        Set<UserProfile> userProfiles = organization.getUserProfiles();\n-        if (userProfiles.size() > 0) {\n-            UserProfile userProfile = new ArrayList<UserProfile>(userProfiles).get(userProfiles.size() - 1);\n-            result = userService.getUser(userProfile.getLogin());\n-        }\n-        return result;\n+private UserDTO getUserDtoOfOrganization(Organization organization) {\n+    UserDTO result = null;\n+    Set<UserProfile> userProfiles = organization.getUserProfiles();\n+    if (userProfiles.size() > 0) {\n+        UserProfile userProfile = new ArrayList<UserProfile>(userProfiles).get(userProfiles.size() - 1);\n+        result = userService.getUser(userProfile.getLogin());\n     }\n+    return result;\n+}\n }\n",
            "diff_size": 118
        }
    ]
}