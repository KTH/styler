{
    "error_id": "204",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/204/AdaGradDelta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/204/AdaGradDelta.java\nindex 9d0b91a09a..e309f0a4aa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/204/AdaGradDelta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/204/AdaGradDelta.java\n@@ -14,72 +14,73 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.ufuncs.expression;\n \n public class AdaGradDelta extends Binary {\n \n-  private double lambda;\n-  private double eta;\n+    private double lambda;\n+    private double eta;\n \n-  public AdaGradDelta(boolean inplace, double lambda, double eta) {\n-    setInplace(inplace);\n-    setKeepStorage(true);\n-    this.lambda = lambda;\n-    this.eta = eta;\n-  }\n+    public AdaGradDelta(boolean inplace, double lambda, double eta) {\n+        setInplace(inplace);\n+        setKeepStorage(true);\n+        this.lambda = lambda;\n+        this.eta = eta;\n+    }\n \n-  @Override\n-  public OpType getOpType() {\n-    return OpType.INTERSECTION;\n-  }\n+    @Override\n+    public OpType getOpType() {\n+        return OpType.INTERSECTION;\n+    }\n \n-  @Override\n-  public double apply(double ele1, double ele2) {\n-    return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    @Override\n+    public double apply(double ele1, double ele2) {\n+        return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n+    }\n \n-  @Override\n-  public double apply(double ele1, float ele2) {\n-    return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    @Override\n+    public double apply(double ele1, float ele2) {\n+        return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n+    }\n \n-  @Override\n-  public double apply(double ele1, long ele2) {\n-    return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    @Override\n+    public double apply(double ele1, long ele2) {\n+        return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n+    }\n \n-  @Override\n-  public double apply(double ele1, int ele2) {\n-    return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    @Override\n+    public double apply(double ele1, int ele2) {\n+        return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n+    }\n \n-  @Override\n-  public float apply(float ele1, float ele2) {\n-    return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    @Override\n+    public float apply(float ele1, float ele2) {\n+        return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n+    }\n \n-  @Override\n-  public float apply(float ele1, long ele2) {\n-    return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    @Override\n+    public float apply(float ele1, long ele2) {\n+        return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n+    }\n \n-  @Override\n-  public float apply(float ele1, int ele2) {\n-    return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    @Override\n+    public float apply(float ele1, int ele2) {\n+        return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n+    }\n \n-  @Override\n-  public long apply(long ele1, long ele2) {\n-    return (long) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    @Override\n+    public long apply(long ele1, long ele2) {\n+        return (long) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n+    }\n \n-  @Override\n-  public long apply(long ele1, int ele2) {\n-    return (long) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    @Override\n+    public long apply(long ele1, int ele2) {\n+        return (long) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n+    }\n \n-  @Override\n-  public int apply(int ele1, int ele2) {\n-    return (int) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    @Override\n+    public int apply(int ele1, int ele2) {\n+        return (int) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n+    }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/204/AdaGradDelta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/204/AdaGradDelta.java\nindex 9d0b91a09a..abfe2ddfd3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/204/AdaGradDelta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/204/AdaGradDelta.java\n@@ -82,4 +82,4 @@ public class AdaGradDelta extends Binary {\n   public int apply(int ele1, int ele2) {\n     return (int) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/204/AdaGradDelta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/204/AdaGradDelta.java\nindex 9d0b91a09a..2c23e9c85c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/204/AdaGradDelta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/204/AdaGradDelta.java\n@@ -16,70 +16,70 @@\n  */\n package com.tencent.angel.ml.math2.ufuncs.expression;\n \n-public class AdaGradDelta extends Binary {\n \n-  private double lambda;\n-  private double eta;\n+public class AdaGradDelta extends Binary {\n+    private double lambda;\n+    private double eta;\n \n-  public AdaGradDelta(boolean inplace, double lambda, double eta) {\n+    public AdaGradDelta(boolean inplace, double lambda, double eta) {\n     setInplace(inplace);\n     setKeepStorage(true);\n     this.lambda = lambda;\n     this.eta = eta;\n-  }\n+    }\n \n-  @Override\n-  public OpType getOpType() {\n+    @Override\n+    public OpType getOpType() {\n     return OpType.INTERSECTION;\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, double ele2) {\n+    @Override\n+    public double apply(double ele1, double ele2) {\n     return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, float ele2) {\n+    @Override\n+    public double apply(double ele1, float ele2) {\n     return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, long ele2) {\n+    @Override\n+    public double apply(double ele1, long ele2) {\n     return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, int ele2) {\n+    @Override\n+    public double apply(double ele1, int ele2) {\n     return ele1 * eta / (Math.sqrt(ele2) + lambda * eta);\n-  }\n+    }\n \n-  @Override\n-  public float apply(float ele1, float ele2) {\n+    @Override\n+    public float apply(float ele1, float ele2) {\n     return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    }\n \n-  @Override\n-  public float apply(float ele1, long ele2) {\n+    @Override\n+    public float apply(float ele1, long ele2) {\n     return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    }\n \n-  @Override\n-  public float apply(float ele1, int ele2) {\n+    @Override\n+    public float apply(float ele1, int ele2) {\n     return (float) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    }\n \n-  @Override\n-  public long apply(long ele1, long ele2) {\n+    @Override\n+    public long apply(long ele1, long ele2) {\n     return (long) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    }\n \n-  @Override\n-  public long apply(long ele1, int ele2) {\n+    @Override\n+    public long apply(long ele1, int ele2) {\n     return (long) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n+    }\n \n-  @Override\n-  public int apply(int ele1, int ele2) {\n+    @Override\n+    public int apply(int ele1, int ele2) {\n     return (int) (ele1 * eta / (Math.sqrt(ele2) + lambda * eta));\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}