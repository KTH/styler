{
    "error_id": "479",
    "information": {
        "errors": [
            {
                "line": "73",
                "column": "43",
                "severity": "warning",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "                        lobs = Utils.newSmallArrayList();\n                    }\n                    lobs.add((ValueLobFile)v);\n                }\n                buff.checkCapacity(buff.getValueLen(v));\n                buff.writeValue(v);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/479/RowList.java\nindex 847f6f4e93..1951e4447b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/479/RowList.java\n@@ -70,7 +70,7 @@ public class RowList implements AutoCloseable {\n                     if (lobs == null) {\n                         lobs = Utils.newSmallArrayList();\n                     }\n-                    lobs.add((ValueLobFile)v);\n+                    lobs.add((ValueLobFile) v);\n                 }\n                 buff.checkCapacity(buff.getValueLen(v));\n                 buff.writeValue(v);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/479/RowList.java\nindex 847f6f4e93..6ae724a5b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/479/RowList.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.result;\n \n import java.util.ArrayList;\n@@ -23,222 +24,222 @@ import org.h2.value.ValueLobFile;\n  */\n public class RowList implements AutoCloseable {\n \n-    private final Session session;\n-    private final Table table;\n-    private final ArrayList<Row> list = Utils.newSmallArrayList();\n-    private int size;\n-    private int index, listIndex;\n-    private FileStore file;\n-    private Data rowBuff;\n-    private ArrayList<ValueLobFile> lobs;\n-    private final int maxMemory;\n-    private int memory;\n-    private boolean written;\n-\n-    /**\n-     * Construct a new row list for this session.\n-     *\n-     * @param session the session\n-     */\n-    public RowList(Session session, Table table) {\n-        this.session = session;\n-        this.table = table;\n-        if (session.getDatabase().isPersistent()) {\n-            maxMemory = session.getDatabase().getMaxOperationMemory();\n-        } else {\n-            maxMemory = 0;\n-        }\n+  private final Session session;\n+  private final Table table;\n+  private final ArrayList<Row> list = Utils.newSmallArrayList();\n+  private int size;\n+  private int index, listIndex;\n+  private FileStore file;\n+  private Data rowBuff;\n+  private ArrayList<ValueLobFile> lobs;\n+  private final int maxMemory;\n+  private int memory;\n+  private boolean written;\n+\n+  /**\n+   * Construct a new row list for this session.\n+   *\n+   * @param session the session\n+   */\n+  public RowList(Session session, Table table) {\n+    this.session = session;\n+    this.table = table;\n+    if (session.getDatabase().isPersistent()) {\n+      maxMemory = session.getDatabase().getMaxOperationMemory();\n+    } else {\n+      maxMemory = 0;\n     }\n-\n-    private void writeRow(Data buff, Row r) {\n-        buff.checkCapacity(1 + Data.LENGTH_INT * 2 + Data.LENGTH_LONG);\n+  }\n+\n+  private void writeRow(Data buff, Row r) {\n+    buff.checkCapacity(1 + Data.LENGTH_INT * 2 + Data.LENGTH_LONG);\n+    buff.writeByte((byte) 1);\n+    buff.writeInt(r.getMemory());\n+    int columnCount = r.getColumnCount();\n+    buff.writeInt(columnCount);\n+    buff.writeLong(r.getKey());\n+    for (int i = 0; i < columnCount; i++) {\n+      Value v = r.getValue(i);\n+      buff.checkCapacity(1);\n+      if (v == null) {\n+        buff.writeByte((byte) 0);\n+      } else {\n         buff.writeByte((byte) 1);\n-        buff.writeInt(r.getMemory());\n-        int columnCount = r.getColumnCount();\n-        buff.writeInt(columnCount);\n-        buff.writeLong(r.getKey());\n-        for (int i = 0; i < columnCount; i++) {\n-            Value v = r.getValue(i);\n-            buff.checkCapacity(1);\n-            if (v == null) {\n-                buff.writeByte((byte) 0);\n-            } else {\n-                buff.writeByte((byte) 1);\n-                if (v instanceof ValueLobFile) {\n-                    // need to keep a reference to temporary lobs,\n-                    // otherwise the temp file is deleted\n-                    if (lobs == null) {\n-                        lobs = Utils.newSmallArrayList();\n-                    }\n-                    lobs.add((ValueLobFile)v);\n-                }\n-                buff.checkCapacity(buff.getValueLen(v));\n-                buff.writeValue(v);\n-            }\n+        if (v instanceof ValueLobFile) {\n+          // need to keep a reference to temporary lobs,\n+          // otherwise the temp file is deleted\n+          if (lobs == null) {\n+            lobs = Utils.newSmallArrayList();\n+          }\n+          lobs.add((ValueLobFile) v);\n         }\n+        buff.checkCapacity(buff.getValueLen(v));\n+        buff.writeValue(v);\n+      }\n     }\n-\n-    private void writeAllRows() {\n-        if (file == null) {\n-            Database db = session.getDatabase();\n-            String fileName = db.createTempFile();\n-            file = db.openFile(fileName, \"rw\", false);\n-            file.setCheckedWriting(false);\n-            file.seek(FileStore.HEADER_LENGTH);\n-            rowBuff = Data.create(db, Constants.DEFAULT_PAGE_SIZE, true);\n-            file.seek(FileStore.HEADER_LENGTH);\n-        }\n-        Data buff = rowBuff;\n-        initBuffer(buff);\n-        for (int i = 0, size = list.size(); i < size; i++) {\n-            if (i > 0 && buff.length() > Constants.IO_BUFFER_SIZE) {\n-                flushBuffer(buff);\n-                initBuffer(buff);\n-            }\n-            Row r = list.get(i);\n-            writeRow(buff, r);\n-        }\n+  }\n+\n+  private void writeAllRows() {\n+    if (file == null) {\n+      Database db = session.getDatabase();\n+      String fileName = db.createTempFile();\n+      file = db.openFile(fileName, \"rw\", false);\n+      file.setCheckedWriting(false);\n+      file.seek(FileStore.HEADER_LENGTH);\n+      rowBuff = Data.create(db, Constants.DEFAULT_PAGE_SIZE, true);\n+      file.seek(FileStore.HEADER_LENGTH);\n+    }\n+    Data buff = rowBuff;\n+    initBuffer(buff);\n+    for (int i = 0, size = list.size(); i < size; i++) {\n+      if (i > 0 && buff.length() > Constants.IO_BUFFER_SIZE) {\n         flushBuffer(buff);\n-        list.clear();\n-        memory = 0;\n+        initBuffer(buff);\n+      }\n+      Row r = list.get(i);\n+      writeRow(buff, r);\n     }\n-\n-    private static void initBuffer(Data buff) {\n-        buff.reset();\n-        buff.writeInt(0);\n+    flushBuffer(buff);\n+    list.clear();\n+    memory = 0;\n+  }\n+\n+  private static void initBuffer(Data buff) {\n+    buff.reset();\n+    buff.writeInt(0);\n+  }\n+\n+  private void flushBuffer(Data buff) {\n+    buff.checkCapacity(1);\n+    buff.writeByte((byte) 0);\n+    buff.fillAligned();\n+    buff.setInt(0, buff.length() / Constants.FILE_BLOCK_SIZE);\n+    file.write(buff.getBytes(), 0, buff.length());\n+  }\n+\n+  /**\n+   * Add a row to the list.\n+   *\n+   * @param r the row to add\n+   */\n+  public void add(Row r) {\n+    list.add(r);\n+    memory += r.getMemory() + Constants.MEMORY_POINTER;\n+    if (maxMemory > 0 && memory > maxMemory) {\n+      writeAllRows();\n     }\n-\n-    private void flushBuffer(Data buff) {\n-        buff.checkCapacity(1);\n-        buff.writeByte((byte) 0);\n-        buff.fillAligned();\n-        buff.setInt(0, buff.length() / Constants.FILE_BLOCK_SIZE);\n-        file.write(buff.getBytes(), 0, buff.length());\n+    size++;\n+  }\n+\n+  /**\n+   * Remove all rows from the list.\n+   */\n+  public void reset() {\n+    index = 0;\n+    if (file != null) {\n+      listIndex = 0;\n+      if (!written) {\n+        writeAllRows();\n+        written = true;\n+      }\n+      list.clear();\n+      file.seek(FileStore.HEADER_LENGTH);\n     }\n-\n-    /**\n-     * Add a row to the list.\n-     *\n-     * @param r the row to add\n-     */\n-    public void add(Row r) {\n-        list.add(r);\n-        memory += r.getMemory() + Constants.MEMORY_POINTER;\n-        if (maxMemory > 0 && memory > maxMemory) {\n-            writeAllRows();\n-        }\n-        size++;\n+  }\n+\n+  /**\n+   * Check if there are more rows in this list.\n+   *\n+   * @return true it there are more rows\n+   */\n+  public boolean hasNext() {\n+    return index < size;\n+  }\n+\n+  private Row readRow(Data buff) {\n+    if (buff.readByte() == 0) {\n+      return null;\n     }\n-\n-    /**\n-     * Remove all rows from the list.\n-     */\n-    public void reset() {\n-        index = 0;\n-        if (file != null) {\n-            listIndex = 0;\n-            if (!written) {\n-                writeAllRows();\n-                written = true;\n-            }\n-            list.clear();\n-            file.seek(FileStore.HEADER_LENGTH);\n+    int mem = buff.readInt();\n+    int columnCount = buff.readInt();\n+    long key = buff.readLong();\n+    Value[] values = new Value[columnCount];\n+    for (int i = 0; i < columnCount; i++) {\n+      Value v;\n+      if (buff.readByte() == 0) {\n+        v = null;\n+      } else {\n+        v = buff.readValue();\n+        if (v instanceof ValueLobDatabase) {\n+          ValueLobDatabase lob = (ValueLobDatabase) v;\n+          // the table id is 0 if it was linked when writing\n+          // a temporary entry\n+          if (lob.getTableId() == 0) {\n+            session.removeAtCommit(lob);\n+          }\n         }\n+      }\n+      values[i] = v;\n     }\n-\n-    /**\n-     * Check if there are more rows in this list.\n-     *\n-     * @return true it there are more rows\n-     */\n-    public boolean hasNext() {\n-        return index < size;\n-    }\n-\n-    private Row readRow(Data buff) {\n-        if (buff.readByte() == 0) {\n-            return null;\n-        }\n-        int mem = buff.readInt();\n-        int columnCount = buff.readInt();\n-        long key = buff.readLong();\n-        Value[] values = new Value[columnCount];\n-        for (int i = 0; i < columnCount; i++) {\n-            Value v;\n-            if (buff.readByte() == 0) {\n-                v = null;\n-            } else {\n-                v = buff.readValue();\n-                if (v instanceof ValueLobDatabase) {\n-                    ValueLobDatabase lob = (ValueLobDatabase) v;\n-                    // the table id is 0 if it was linked when writing\n-                    // a temporary entry\n-                    if (lob.getTableId() == 0) {\n-                        session.removeAtCommit(lob);\n-                    }\n-                }\n-            }\n-            values[i] = v;\n+    Row row = table.createRow(values, mem, key);\n+    return row;\n+  }\n+\n+  /**\n+   * Get the next row from the list.\n+   *\n+   * @return the next row\n+   */\n+  public Row next() {\n+    Row r;\n+    if (file == null) {\n+      r = list.get(index++);\n+    } else {\n+      if (listIndex >= list.size()) {\n+        list.clear();\n+        listIndex = 0;\n+        Data buff = rowBuff;\n+        buff.reset();\n+        int min = Constants.FILE_BLOCK_SIZE;\n+        file.readFully(buff.getBytes(), 0, min);\n+        int len = buff.readInt() * Constants.FILE_BLOCK_SIZE;\n+        buff.checkCapacity(len);\n+        if (len - min > 0) {\n+          file.readFully(buff.getBytes(), min, len - min);\n         }\n-        Row row = table.createRow(values, mem, key);\n-        return row;\n-    }\n-\n-    /**\n-     * Get the next row from the list.\n-     *\n-     * @return the next row\n-     */\n-    public Row next() {\n-        Row r;\n-        if (file == null) {\n-            r = list.get(index++);\n-        } else {\n-            if (listIndex >= list.size()) {\n-                list.clear();\n-                listIndex = 0;\n-                Data buff = rowBuff;\n-                buff.reset();\n-                int min = Constants.FILE_BLOCK_SIZE;\n-                file.readFully(buff.getBytes(), 0, min);\n-                int len = buff.readInt() * Constants.FILE_BLOCK_SIZE;\n-                buff.checkCapacity(len);\n-                if (len - min > 0) {\n-                    file.readFully(buff.getBytes(), min, len - min);\n-                }\n-                while (true) {\n-                    r = readRow(buff);\n-                    if (r == null) {\n-                        break;\n-                    }\n-                    list.add(r);\n-                }\n-            }\n-            index++;\n-            r = list.get(listIndex++);\n+        while (true) {\n+          r = readRow(buff);\n+          if (r == null) {\n+            break;\n+          }\n+          list.add(r);\n         }\n-        return r;\n+      }\n+      index++;\n+      r = list.get(listIndex++);\n     }\n-\n-    /**\n-     * Get the number of rows in this list.\n-     *\n-     * @return the number of rows\n-     */\n-    public int size() {\n-        return size;\n-    }\n-\n-    /**\n-     * Close the result list and delete the temporary file.\n-     */\n-    @Override\n-    public void close() {\n-        if (file != null) {\n-            file.closeAndDeleteSilently();\n-            file = null;\n-            rowBuff = null;\n-        }\n+    return r;\n+  }\n+\n+  /**\n+   * Get the number of rows in this list.\n+   *\n+   * @return the number of rows\n+   */\n+  public int size() {\n+    return size;\n+  }\n+\n+  /**\n+   * Close the result list and delete the temporary file.\n+   */\n+  @Override\n+  public void close() {\n+    if (file != null) {\n+      file.closeAndDeleteSilently();\n+      file = null;\n+      rowBuff = null;\n     }\n+  }\n \n }\n",
            "diff_size": 263
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "column": "43",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/479/RowList.java\nindex 847f6f4e93..153f682c1b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/479/RowList.java\n@@ -241,4 +241,4 @@ public class RowList implements AutoCloseable {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/479/RowList.java\nindex 847f6f4e93..9ef145ab15 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/479/RowList.java\n@@ -21,6 +21,8 @@ import org.h2.value.ValueLobFile;\n  * A list of rows. If the list grows too large, it is buffered to disk\n  * automatically.\n  */\n+\n+\n public class RowList implements AutoCloseable {\n \n     private final Session session;\n@@ -40,6 +42,7 @@ public class RowList implements AutoCloseable {\n      *\n      * @param session the session\n      */\n+\n     public RowList(Session session, Table table) {\n         this.session = session;\n         this.table = table;\n@@ -70,7 +73,7 @@ public class RowList implements AutoCloseable {\n                     if (lobs == null) {\n                         lobs = Utils.newSmallArrayList();\n                     }\n-                    lobs.add((ValueLobFile)v);\n+                    lobs.add((ValueLobFile) v);\n                 }\n                 buff.checkCapacity(buff.getValueLen(v));\n                 buff.writeValue(v);\n@@ -121,6 +124,8 @@ public class RowList implements AutoCloseable {\n      *\n      * @param r the row to add\n      */\n+\n+\n     public void add(Row r) {\n         list.add(r);\n         memory += r.getMemory() + Constants.MEMORY_POINTER;\n@@ -133,6 +138,8 @@ public class RowList implements AutoCloseable {\n     /**\n      * Remove all rows from the list.\n      */\n+\n+\n     public void reset() {\n         index = 0;\n         if (file != null) {\n@@ -151,6 +158,8 @@ public class RowList implements AutoCloseable {\n      *\n      * @return true it there are more rows\n      */\n+\n+\n     public boolean hasNext() {\n         return index < size;\n     }\n@@ -189,6 +198,8 @@ public class RowList implements AutoCloseable {\n      *\n      * @return the next row\n      */\n+\n+\n     public Row next() {\n         Row r;\n         if (file == null) {\n@@ -225,6 +236,8 @@ public class RowList implements AutoCloseable {\n      *\n      * @return the number of rows\n      */\n+\n+\n     public int size() {\n         return size;\n     }\n@@ -232,6 +245,7 @@ public class RowList implements AutoCloseable {\n     /**\n      * Close the result list and delete the temporary file.\n      */\n+\n     @Override\n     public void close() {\n         if (file != null) {\n@@ -241,4 +255,4 @@ public class RowList implements AutoCloseable {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/479/RowList.java\nindex 847f6f4e93..1951e4447b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/479/RowList.java\n@@ -70,7 +70,7 @@ public class RowList implements AutoCloseable {\n                     if (lobs == null) {\n                         lobs = Utils.newSmallArrayList();\n                     }\n-                    lobs.add((ValueLobFile)v);\n+                    lobs.add((ValueLobFile) v);\n                 }\n                 buff.checkCapacity(buff.getValueLen(v));\n                 buff.writeValue(v);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/479/RowList.java\nindex 847f6f4e93..1951e4447b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/479/RowList.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/479/RowList.java\n@@ -70,7 +70,7 @@ public class RowList implements AutoCloseable {\n                     if (lobs == null) {\n                         lobs = Utils.newSmallArrayList();\n                     }\n-                    lobs.add((ValueLobFile)v);\n+                    lobs.add((ValueLobFile) v);\n                 }\n                 buff.checkCapacity(buff.getValueLen(v));\n                 buff.writeValue(v);\n",
            "diff_size": 1
        }
    ]
}