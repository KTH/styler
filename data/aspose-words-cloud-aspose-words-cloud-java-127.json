{
    "error_id": "127",
    "information": {
        "errors": [
            {
                "line": "255",
                "column": "67",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n    return\n        Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n        Objects.equals(this.encoding, textSaveOptionsData.encoding) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/127/TextSaveOptionsData.java\nindex 767978e2ef..99e1c6a8e8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/127/TextSaveOptionsData.java\n@@ -252,7 +252,7 @@ public class TextSaveOptionsData extends SaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n+    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData) o;\n     return\n         Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n         Objects.equals(this.encoding, textSaveOptionsData.encoding) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/127/TextSaveOptionsData.java\nindex 767978e2ef..6cc3d79072 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/127/TextSaveOptionsData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,221 +50,229 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Container class for text save options.\")\n public class TextSaveOptionsData extends SaveOptionsData {\n-    /**\n-     * Gets or sets specifies whether to output headers and footers when exporting in plain text format.\n-     * default value is TxtExportHeadersFootersMode.PrimaryOnly.\n-     */\n-    @JsonAdapter(ExportHeadersFootersModeEnum.Adapter.class)\n-    public enum ExportHeadersFootersModeEnum {\n-        NONE(\"None\"),\n-        PRIMARYONLY(\"PrimaryOnly\"),\n-        ALLATEND(\"AllAtEnd\");\n-\n-        private String value;\n-\n-        ExportHeadersFootersModeEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets specifies whether to output headers and footers when exporting in plain text format.\n+   * default value is TxtExportHeadersFootersMode.PrimaryOnly.\n+   */\n+  @JsonAdapter(ExportHeadersFootersModeEnum.Adapter.class)\n+  public enum ExportHeadersFootersModeEnum {\n+    NONE(\"None\"),\n+    PRIMARYONLY(\"PrimaryOnly\"),\n+    ALLATEND(\"AllAtEnd\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    ExportHeadersFootersModeEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static ExportHeadersFootersModeEnum fromValue(String text) {\n-            for (ExportHeadersFootersModeEnum b : ExportHeadersFootersModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< ExportHeadersFootersModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final ExportHeadersFootersModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public ExportHeadersFootersModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return ExportHeadersFootersModeEnum.fromValue(String.valueOf(value));\n-            }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static ExportHeadersFootersModeEnum fromValue(String text) {\n+      for (ExportHeadersFootersModeEnum b : ExportHeadersFootersModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"AddBidiMarks\")\n-    private Boolean addBidiMarks = null;\n+    public static class Adapter extends TypeAdapter<ExportHeadersFootersModeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final ExportHeadersFootersModeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public ExportHeadersFootersModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return ExportHeadersFootersModeEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-    @SerializedName(\"Encoding\")\n-    private String encoding = null;\n+  @SerializedName(\"AddBidiMarks\")\n+  private Boolean addBidiMarks = null;\n \n-    @SerializedName(\"ExportHeadersFootersMode\")\n-    private ExportHeadersFootersModeEnum exportHeadersFootersMode = null;\n+  @SerializedName(\"Encoding\")\n+  private String encoding = null;\n \n-    @SerializedName(\"ForcePageBreaks\")\n-    private Boolean forcePageBreaks = null;\n+  @SerializedName(\"ExportHeadersFootersMode\")\n+  private ExportHeadersFootersModeEnum exportHeadersFootersMode = null;\n \n-    @SerializedName(\"ParagraphBreak\")\n-    private String paragraphBreak = null;\n+  @SerializedName(\"ForcePageBreaks\")\n+  private Boolean forcePageBreaks = null;\n \n-    @SerializedName(\"PreserveTableLayout\")\n-    private Boolean preserveTableLayout = null;\n+  @SerializedName(\"ParagraphBreak\")\n+  private String paragraphBreak = null;\n \n-    @SerializedName(\"SimplifyListLabels\")\n-    private Boolean simplifyListLabels = null;\n-    public TextSaveOptionsData addBidiMarks(Boolean addBidiMarks) {\n-        this.addBidiMarks = addBidiMarks;\n-        return this;\n-    }\n+  @SerializedName(\"PreserveTableLayout\")\n+  private Boolean preserveTableLayout = null;\n \n-    /**\n-     * Gets or sets specifies whether to add bi-directional marks before each BiDi run when exporting in plain text format.\n-     * The default value is true.\n-    * @return addBidiMarks\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether to add bi-directional marks before each BiDi run when exporting in plain text format. The default value is true.\")\n-    public Boolean getAddBidiMarks() {\n-        return addBidiMarks;\n-    }\n+  @SerializedName(\"SimplifyListLabels\")\n+  private Boolean simplifyListLabels = null;\n \n-    public void setAddBidiMarks(Boolean addBidiMarks) {\n-        this.addBidiMarks = addBidiMarks;\n-    }\n+  public TextSaveOptionsData addBidiMarks(Boolean addBidiMarks) {\n+    this.addBidiMarks = addBidiMarks;\n+    return this;\n+  }\n \n-    public TextSaveOptionsData encoding(String encoding) {\n-        this.encoding = encoding;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets specifies whether to add bi-directional marks before each BiDi run when exporting in plain text format.\n+   * The default value is true.\n+   *\n+   * @return addBidiMarks\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies whether to add bi-directional marks before each BiDi run when exporting in plain text format. The default value is true.\")\n+  public Boolean getAddBidiMarks() {\n+    return addBidiMarks;\n+  }\n \n-    /**\n-     * Gets or sets specifies the encoding to use when exporting in plain text format.\n-    * @return encoding\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the encoding to use when exporting in plain text format.\")\n-    public String getEncoding() {\n-        return encoding;\n-    }\n+  public void setAddBidiMarks(Boolean addBidiMarks) {\n+    this.addBidiMarks = addBidiMarks;\n+  }\n \n-    public void setEncoding(String encoding) {\n-        this.encoding = encoding;\n-    }\n+  public TextSaveOptionsData encoding(String encoding) {\n+    this.encoding = encoding;\n+    return this;\n+  }\n \n-    public TextSaveOptionsData exportHeadersFootersMode(ExportHeadersFootersModeEnum exportHeadersFootersMode) {\n-        this.exportHeadersFootersMode = exportHeadersFootersMode;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets specifies the encoding to use when exporting in plain text format.\n+   *\n+   * @return encoding\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies the encoding to use when exporting in plain text format.\")\n+  public String getEncoding() {\n+    return encoding;\n+  }\n \n-    /**\n-     * Gets or sets specifies whether to output headers and footers when exporting in plain text format.\n-     * default value is TxtExportHeadersFootersMode.PrimaryOnly.\n-    * @return exportHeadersFootersMode\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether to output headers and footers when exporting in plain text format. default value is TxtExportHeadersFootersMode.PrimaryOnly.\")\n-    public ExportHeadersFootersModeEnum getExportHeadersFootersMode() {\n-        return exportHeadersFootersMode;\n-    }\n+  public void setEncoding(String encoding) {\n+    this.encoding = encoding;\n+  }\n \n-    public void setExportHeadersFootersMode(ExportHeadersFootersModeEnum exportHeadersFootersMode) {\n-        this.exportHeadersFootersMode = exportHeadersFootersMode;\n-    }\n+  public TextSaveOptionsData exportHeadersFootersMode(ExportHeadersFootersModeEnum exportHeadersFootersMode) {\n+    this.exportHeadersFootersMode = exportHeadersFootersMode;\n+    return this;\n+  }\n \n-    public TextSaveOptionsData forcePageBreaks(Boolean forcePageBreaks) {\n-        this.forcePageBreaks = forcePageBreaks;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets specifies whether to output headers and footers when exporting in plain text format.\n+   * default value is TxtExportHeadersFootersMode.PrimaryOnly.\n+   *\n+   * @return exportHeadersFootersMode\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies whether to output headers and footers when exporting in plain text format. default value is TxtExportHeadersFootersMode.PrimaryOnly.\")\n+  public ExportHeadersFootersModeEnum getExportHeadersFootersMode() {\n+    return exportHeadersFootersMode;\n+  }\n \n-    /**\n-     * Gets or sets allows to specify whether the page breaks should be preserved during export.\n-     * The default value is false.\n-    * @return forcePageBreaks\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets allows to specify whether the page breaks should be preserved during export. The default value is false.\")\n-    public Boolean getForcePageBreaks() {\n-        return forcePageBreaks;\n-    }\n+  public void setExportHeadersFootersMode(ExportHeadersFootersModeEnum exportHeadersFootersMode) {\n+    this.exportHeadersFootersMode = exportHeadersFootersMode;\n+  }\n \n-    public void setForcePageBreaks(Boolean forcePageBreaks) {\n-        this.forcePageBreaks = forcePageBreaks;\n-    }\n+  public TextSaveOptionsData forcePageBreaks(Boolean forcePageBreaks) {\n+    this.forcePageBreaks = forcePageBreaks;\n+    return this;\n+  }\n \n-    public TextSaveOptionsData paragraphBreak(String paragraphBreak) {\n-        this.paragraphBreak = paragraphBreak;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets allows to specify whether the page breaks should be preserved during export.\n+   * The default value is false.\n+   *\n+   * @return forcePageBreaks\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets allows to specify whether the page breaks should be preserved during export. The default value is false.\")\n+  public Boolean getForcePageBreaks() {\n+    return forcePageBreaks;\n+  }\n \n-    /**\n-     * Gets or sets specifies the string to use as a paragraph break when exporting in plain text format.\n-    * @return paragraphBreak\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the string to use as a paragraph break when exporting in plain text format.\")\n-    public String getParagraphBreak() {\n-        return paragraphBreak;\n-    }\n+  public void setForcePageBreaks(Boolean forcePageBreaks) {\n+    this.forcePageBreaks = forcePageBreaks;\n+  }\n \n-    public void setParagraphBreak(String paragraphBreak) {\n-        this.paragraphBreak = paragraphBreak;\n-    }\n+  public TextSaveOptionsData paragraphBreak(String paragraphBreak) {\n+    this.paragraphBreak = paragraphBreak;\n+    return this;\n+  }\n \n-    public TextSaveOptionsData preserveTableLayout(Boolean preserveTableLayout) {\n-        this.preserveTableLayout = preserveTableLayout;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets specifies the string to use as a paragraph break when exporting in plain text format.\n+   *\n+   * @return paragraphBreak\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies the string to use as a paragraph break when exporting in plain text format.\")\n+  public String getParagraphBreak() {\n+    return paragraphBreak;\n+  }\n \n-    /**\n-     * Gets or sets specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.\n-    * @return preserveTableLayout\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.\")\n-    public Boolean getPreserveTableLayout() {\n-        return preserveTableLayout;\n-    }\n+  public void setParagraphBreak(String paragraphBreak) {\n+    this.paragraphBreak = paragraphBreak;\n+  }\n \n-    public void setPreserveTableLayout(Boolean preserveTableLayout) {\n-        this.preserveTableLayout = preserveTableLayout;\n-    }\n+  public TextSaveOptionsData preserveTableLayout(Boolean preserveTableLayout) {\n+    this.preserveTableLayout = preserveTableLayout;\n+    return this;\n+  }\n \n-    public TextSaveOptionsData simplifyListLabels(Boolean simplifyListLabels) {\n-        this.simplifyListLabels = simplifyListLabels;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.\n+   *\n+   * @return preserveTableLayout\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.\")\n+  public Boolean getPreserveTableLayout() {\n+    return preserveTableLayout;\n+  }\n \n-    /**\n-     * Gets or sets specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.\n-    * @return simplifyListLabels\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.\")\n-    public Boolean getSimplifyListLabels() {\n-        return simplifyListLabels;\n-    }\n+  public void setPreserveTableLayout(Boolean preserveTableLayout) {\n+    this.preserveTableLayout = preserveTableLayout;\n+  }\n \n-    public void setSimplifyListLabels(Boolean simplifyListLabels) {\n-        this.simplifyListLabels = simplifyListLabels;\n-    }\n+  public TextSaveOptionsData simplifyListLabels(Boolean simplifyListLabels) {\n+    this.simplifyListLabels = simplifyListLabels;\n+    return this;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n+  /**\n+   * Gets or sets specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.\n+   *\n+   * @return simplifyListLabels\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.\")\n+  public Boolean getSimplifyListLabels() {\n+    return simplifyListLabels;\n+  }\n+\n+  public void setSimplifyListLabels(Boolean simplifyListLabels) {\n+    this.simplifyListLabels = simplifyListLabels;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData) o;\n     return\n         Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n-        Objects.equals(this.encoding, textSaveOptionsData.encoding) &&\n-        Objects.equals(this.exportHeadersFootersMode, textSaveOptionsData.exportHeadersFootersMode) &&\n-        Objects.equals(this.forcePageBreaks, textSaveOptionsData.forcePageBreaks) &&\n-        Objects.equals(this.paragraphBreak, textSaveOptionsData.paragraphBreak) &&\n-        Objects.equals(this.preserveTableLayout, textSaveOptionsData.preserveTableLayout) &&\n-        Objects.equals(this.simplifyListLabels, textSaveOptionsData.simplifyListLabels) &&\n-        super.equals(o);\n+            Objects.equals(this.encoding, textSaveOptionsData.encoding) &&\n+            Objects.equals(this.exportHeadersFootersMode, textSaveOptionsData.exportHeadersFootersMode) &&\n+            Objects.equals(this.forcePageBreaks, textSaveOptionsData.forcePageBreaks) &&\n+            Objects.equals(this.paragraphBreak, textSaveOptionsData.paragraphBreak) &&\n+            Objects.equals(this.preserveTableLayout, textSaveOptionsData.preserveTableLayout) &&\n+            Objects.equals(this.simplifyListLabels, textSaveOptionsData.simplifyListLabels) &&\n+            super.equals(o);\n   }\n \n   @Override\n",
            "diff_size": 251
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "259",
                    "column": "63",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/127/TextSaveOptionsData.java\nindex 767978e2ef..c203c1ec47 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/127/TextSaveOptionsData.java\n@@ -54,8 +54,10 @@ public class TextSaveOptionsData extends SaveOptionsData {\n     @JsonAdapter(ExportHeadersFootersModeEnum.Adapter.class)\n     public enum ExportHeadersFootersModeEnum {\n         NONE(\"None\"),\n-        PRIMARYONLY(\"PrimaryOnly\"),\n-        ALLATEND(\"AllAtEnd\");\n+\n+PRIMARYONLY(\"PrimaryOnly\"),\n+\n+ALLATEND(\"AllAtEnd\");\n \n         private String value;\n \n@@ -81,7 +83,7 @@ public class TextSaveOptionsData extends SaveOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< ExportHeadersFootersModeEnum > {\n+        public static class Adapter extends TypeAdapter<ExportHeadersFootersModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final ExportHeadersFootersModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -115,7 +117,8 @@ public class TextSaveOptionsData extends SaveOptionsData {\n \n     @SerializedName(\"SimplifyListLabels\")\n     private Boolean simplifyListLabels = null;\n-    public TextSaveOptionsData addBidiMarks(Boolean addBidiMarks) {\n+\n+public TextSaveOptionsData addBidiMarks(Boolean addBidiMarks) {\n         this.addBidiMarks = addBidiMarks;\n         return this;\n     }\n@@ -248,13 +251,13 @@ public class TextSaveOptionsData extends SaveOptionsData {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n-    return\n-        Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n+\n+TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n+    return Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n         Objects.equals(this.encoding, textSaveOptionsData.encoding) &&\n         Objects.equals(this.exportHeadersFootersMode, textSaveOptionsData.exportHeadersFootersMode) &&\n         Objects.equals(this.forcePageBreaks, textSaveOptionsData.forcePageBreaks) &&\n@@ -295,4 +298,4 @@ public class TextSaveOptionsData extends SaveOptionsData {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/127/TextSaveOptionsData.java\nindex 767978e2ef..a54acf5295 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/127/TextSaveOptionsData.java\n@@ -45,7 +45,10 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Container class for text save options.\n  */\n+\n+\n @ApiModel(description = \"Container class for text save options.\")\n+\n public class TextSaveOptionsData extends SaveOptionsData {\n     /**\n      * Gets or sets specifies whether to output headers and footers when exporting in plain text format.\n@@ -53,47 +56,51 @@ public class TextSaveOptionsData extends SaveOptionsData {\n      */\n     @JsonAdapter(ExportHeadersFootersModeEnum.Adapter.class)\n     public enum ExportHeadersFootersModeEnum {\n-        NONE(\"None\"),\n-        PRIMARYONLY(\"PrimaryOnly\"),\n-        ALLATEND(\"AllAtEnd\");\n+    NONE(\"None\"),\n \n-        private String value;\n+    PRIMARYONLY(\"PrimaryOnly\"),\n \n-        ExportHeadersFootersModeEnum(String value) {\n-            this.value = value;\n-        }\n+    ALLATEND(\"AllAtEnd\");\n \n-        public String getValue() {\n-            return value;\n+    private String value;\n+\n+    ExportHeadersFootersModeEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                                 return String.valueOf(value);\n+    }\n+\n+    public static ExportHeadersFootersModeEnum fromValue(String text) {\n+        for (ExportHeadersFootersModeEnum b : ExportHeadersFootersModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                                                         return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<ExportHeadersFootersModeEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final ExportHeadersFootersModeEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static ExportHeadersFootersModeEnum fromValue(String text) {\n-            for (ExportHeadersFootersModeEnum b : ExportHeadersFootersModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< ExportHeadersFootersModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final ExportHeadersFootersModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public ExportHeadersFootersModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return ExportHeadersFootersModeEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public ExportHeadersFootersModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return ExportHeadersFootersModeEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"AddBidiMarks\")\n     private Boolean addBidiMarks = null;\n@@ -115,9 +122,10 @@ public class TextSaveOptionsData extends SaveOptionsData {\n \n     @SerializedName(\"SimplifyListLabels\")\n     private Boolean simplifyListLabels = null;\n+\n     public TextSaveOptionsData addBidiMarks(Boolean addBidiMarks) {\n-        this.addBidiMarks = addBidiMarks;\n-        return this;\n+    this.addBidiMarks = addBidiMarks;\n+    return this;\n     }\n \n     /**\n@@ -125,36 +133,44 @@ public class TextSaveOptionsData extends SaveOptionsData {\n      * The default value is true.\n     * @return addBidiMarks\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies whether to add bi-directional marks before each BiDi run when exporting in plain text format. The default value is true.\")\n     public Boolean getAddBidiMarks() {\n-        return addBidiMarks;\n+    return addBidiMarks;\n     }\n \n+\n     public void setAddBidiMarks(Boolean addBidiMarks) {\n-        this.addBidiMarks = addBidiMarks;\n+    this.addBidiMarks = addBidiMarks;\n     }\n \n+\n     public TextSaveOptionsData encoding(String encoding) {\n-        this.encoding = encoding;\n-        return this;\n+    this.encoding = encoding;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies the encoding to use when exporting in plain text format.\n     * @return encoding\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies the encoding to use when exporting in plain text format.\")\n     public String getEncoding() {\n-        return encoding;\n+    return encoding;\n     }\n \n+\n     public void setEncoding(String encoding) {\n-        this.encoding = encoding;\n+    this.encoding = encoding;\n     }\n \n+\n     public TextSaveOptionsData exportHeadersFootersMode(ExportHeadersFootersModeEnum exportHeadersFootersMode) {\n-        this.exportHeadersFootersMode = exportHeadersFootersMode;\n-        return this;\n+    this.exportHeadersFootersMode = exportHeadersFootersMode;\n+    return this;\n     }\n \n     /**\n@@ -162,18 +178,22 @@ public class TextSaveOptionsData extends SaveOptionsData {\n      * default value is TxtExportHeadersFootersMode.PrimaryOnly.\n     * @return exportHeadersFootersMode\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies whether to output headers and footers when exporting in plain text format. default value is TxtExportHeadersFootersMode.PrimaryOnly.\")\n     public ExportHeadersFootersModeEnum getExportHeadersFootersMode() {\n-        return exportHeadersFootersMode;\n+    return exportHeadersFootersMode;\n     }\n \n+\n     public void setExportHeadersFootersMode(ExportHeadersFootersModeEnum exportHeadersFootersMode) {\n-        this.exportHeadersFootersMode = exportHeadersFootersMode;\n+    this.exportHeadersFootersMode = exportHeadersFootersMode;\n     }\n \n+\n     public TextSaveOptionsData forcePageBreaks(Boolean forcePageBreaks) {\n-        this.forcePageBreaks = forcePageBreaks;\n-        return this;\n+    this.forcePageBreaks = forcePageBreaks;\n+    return this;\n     }\n \n     /**\n@@ -181,96 +201,123 @@ public class TextSaveOptionsData extends SaveOptionsData {\n      * The default value is false.\n     * @return forcePageBreaks\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets allows to specify whether the page breaks should be preserved during export. The default value is false.\")\n     public Boolean getForcePageBreaks() {\n-        return forcePageBreaks;\n+    return forcePageBreaks;\n     }\n \n+\n     public void setForcePageBreaks(Boolean forcePageBreaks) {\n-        this.forcePageBreaks = forcePageBreaks;\n+    this.forcePageBreaks = forcePageBreaks;\n     }\n \n+\n     public TextSaveOptionsData paragraphBreak(String paragraphBreak) {\n-        this.paragraphBreak = paragraphBreak;\n-        return this;\n+    this.paragraphBreak = paragraphBreak;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies the string to use as a paragraph break when exporting in plain text format.\n     * @return paragraphBreak\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies the string to use as a paragraph break when exporting in plain text format.\")\n     public String getParagraphBreak() {\n-        return paragraphBreak;\n+    return paragraphBreak;\n     }\n \n+\n     public void setParagraphBreak(String paragraphBreak) {\n-        this.paragraphBreak = paragraphBreak;\n+    this.paragraphBreak = paragraphBreak;\n     }\n \n+\n     public TextSaveOptionsData preserveTableLayout(Boolean preserveTableLayout) {\n-        this.preserveTableLayout = preserveTableLayout;\n-        return this;\n+    this.preserveTableLayout = preserveTableLayout;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.\n     * @return preserveTableLayout\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies whether the program should attempt to preserve layout of tables when saving in the plain text format.\")\n     public Boolean getPreserveTableLayout() {\n-        return preserveTableLayout;\n+    return preserveTableLayout;\n     }\n \n+\n     public void setPreserveTableLayout(Boolean preserveTableLayout) {\n-        this.preserveTableLayout = preserveTableLayout;\n+    this.preserveTableLayout = preserveTableLayout;\n     }\n \n+\n     public TextSaveOptionsData simplifyListLabels(Boolean simplifyListLabels) {\n-        this.simplifyListLabels = simplifyListLabels;\n-        return this;\n+    this.simplifyListLabels = simplifyListLabels;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.\n     * @return simplifyListLabels\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies whether the program should simplify list labels in case of complex label formatting not being adequately represented by plain text.\")\n     public Boolean getSimplifyListLabels() {\n-        return simplifyListLabels;\n+    return simplifyListLabels;\n     }\n \n+\n     public void setSimplifyListLabels(Boolean simplifyListLabels) {\n-        this.simplifyListLabels = simplifyListLabels;\n+    this.simplifyListLabels = simplifyListLabels;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n-    return\n-        Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n+\n+        TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData) o;\n+        return Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n         Objects.equals(this.encoding, textSaveOptionsData.encoding) &&\n         Objects.equals(this.exportHeadersFootersMode, textSaveOptionsData.exportHeadersFootersMode) &&\n         Objects.equals(this.forcePageBreaks, textSaveOptionsData.forcePageBreaks) &&\n         Objects.equals(this.paragraphBreak, textSaveOptionsData.paragraphBreak) &&\n         Objects.equals(this.preserveTableLayout, textSaveOptionsData.preserveTableLayout) &&\n-        Objects.equals(this.simplifyListLabels, textSaveOptionsData.simplifyListLabels) &&\n-        super.equals(o);\n-  }\n+            Objects.equals(this.simplifyListLabels, textSaveOptionsData.simplifyListLabels) &&\n+            super.equals(o);\n+    }\n \n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(addBidiMarks, encoding, exportHeadersFootersMode, forcePageBreaks, paragraphBreak, preserveTableLayout, simplifyListLabels, super.hashCode());\n-  }\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public int hashCode() {\n+    return Objects.hash(addBidiMarks,\n+encoding,\n+exportHeadersFootersMode,\n+forcePageBreaks,\n+paragraphBreak,\n+preserveTableLayout,\n+simplifyListLabels,\n+super.hashCode());\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class TextSaveOptionsData {\\n\");\n     sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n@@ -283,16 +330,18 @@ public class TextSaveOptionsData extends SaveOptionsData {\n     sb.append(\"    simplifyListLabels: \").append(toIndentedString(simplifyListLabels)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 149
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/127/TextSaveOptionsData.java\nindex 767978e2ef..99e1c6a8e8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/127/TextSaveOptionsData.java\n@@ -252,7 +252,7 @@ public class TextSaveOptionsData extends SaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n+    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData) o;\n     return\n         Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n         Objects.equals(this.encoding, textSaveOptionsData.encoding) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/127/TextSaveOptionsData.java\nindex 767978e2ef..55976ac32a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/127/TextSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/127/TextSaveOptionsData.java\n@@ -252,7 +252,8 @@ public class TextSaveOptionsData extends SaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData)o;\n+    TextSaveOptionsData textSaveOptionsData = (TextSaveOptionsData\n+) o;\n     return\n         Objects.equals(this.addBidiMarks, textSaveOptionsData.addBidiMarks) &&\n         Objects.equals(this.encoding, textSaveOptionsData.encoding) &&\n",
            "diff_size": 2
        }
    ]
}