{
    "error_id": "361",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/361/DoubleVectorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/361/DoubleVectorTest.java\nindex 7114c5a182..3eaf0d7135 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/361/DoubleVectorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/361/DoubleVectorTest.java\n@@ -29,121 +29,121 @@ import java.util.Random;\n \n public class DoubleVectorTest {\n \n-  @Test\n-  public void timesBySparseTest() {\n-    SparseDoubleVector vector = new SparseDoubleVector(10);\n-    vector.set(1, 1.0);\n-    vector.set(3, 3.0);\n-    vector.set(5, 5.0);\n-\n-    vector.timesBy(2.0);\n-\n-    Assert.assertEquals(2.0, vector.get(1), 0.0);\n-    Assert.assertEquals(6.0, vector.get(3), 0.0);\n-    Assert.assertEquals(10.0, vector.get(5), 0.0);\n-  }\n-\n-  @Test\n-  public void plusBySparseTest() {\n-    SparseDoubleVector vector = new SparseDoubleVector(10);\n-    vector.set(1, 1.0);\n-    vector.set(3, 3.0);\n-    vector.set(5, 5.0);\n-\n-    SparseDummyVector dummyVector = new SparseDummyVector(10);\n-    dummyVector.set(1, 1.0);\n-    dummyVector.set(3, 1.0);\n-\n-    vector.plusBy(dummyVector, 1.0);\n-\n-    Assert.assertEquals(2.0, vector.get(1), 0.0);\n-    Assert.assertEquals(4.0, vector.get(3), 0.0);\n-    Assert.assertEquals(5.0, vector.get(5), 0.0);\n-  }\n-\n-  @Test\n-  public void densePlusBySparseTest() {\n-    DenseDoubleVector vector = new DenseDoubleVector(10);\n-    vector.set(1, 1.0);\n-    vector.set(3, 3.0);\n-    vector.set(5, 5.0);\n-\n-    SparseDoubleVector sparseDoubleVector = new SparseDoubleVector(10);\n-    sparseDoubleVector.set(1, 1.0);\n-    sparseDoubleVector.set(3, 3.0);\n-    sparseDoubleVector.set(7, 7.0);\n-\n-    vector.plusBy(sparseDoubleVector, 1.0);\n-\n-    Assert.assertEquals(2.0, vector.get(1), 0.0);\n-    Assert.assertEquals(6.0, vector.get(3), 0.0);\n-    Assert.assertEquals(5.0, vector.get(5), 0.0);\n-    Assert.assertEquals(7.0, vector.get(7), 0.0);\n-  }\n-\n-  @Test\n-  public void densePlusByDummyTest() {\n-    DenseDoubleVector vector = new DenseDoubleVector(10);\n-    vector.set(1, 1.0);\n-    vector.set(3, 3.0);\n-    vector.set(5, 5.0);\n-\n-    SparseDummyVector dummyVector = new SparseDummyVector(10);\n-    dummyVector.set(1, 1.0);\n-    dummyVector.set(3, 1.0);\n-\n-    vector.plusBy(dummyVector, 1.0);\n-\n-    Assert.assertEquals(2.0, vector.get(1), 0.0);\n-    Assert.assertEquals(4.0, vector.get(3), 0.0);\n-    Assert.assertEquals(5.0, vector.get(5), 0.0);\n-    Assert.assertEquals(0.0, vector.get(7), 0.0);\n-  }\n-\n-  @Test\n-  public void sparseIntVectorTest() {\n-    int dim = 1000;\n-    int[] indices = new int[dim];\n-    int[] values  = new int[dim];\n-\n-    Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n-      indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+    @Test\n+    public void timesBySparseTest() {\n+        SparseDoubleVector vector = new SparseDoubleVector(10);\n+        vector.set(1, 1.0);\n+        vector.set(3, 3.0);\n+        vector.set(5, 5.0);\n+\n+        vector.timesBy(2.0);\n+\n+        Assert.assertEquals(2.0, vector.get(1), 0.0);\n+        Assert.assertEquals(6.0, vector.get(3), 0.0);\n+        Assert.assertEquals(10.0, vector.get(5), 0.0);\n     }\n \n-    SparseIntVector vector = new SparseIntVector(dim, indices, values);\n+    @Test\n+    public void plusBySparseTest() {\n+        SparseDoubleVector vector = new SparseDoubleVector(10);\n+        vector.set(1, 1.0);\n+        vector.set(3, 3.0);\n+        vector.set(5, 5.0);\n \n+        SparseDummyVector dummyVector = new SparseDummyVector(10);\n+        dummyVector.set(1, 1.0);\n+        dummyVector.set(3, 1.0);\n \n-    int[] indices2 = vector.getIndices();\n-    int[] values2  = vector.getValues();\n+        vector.plusBy(dummyVector, 1.0);\n \n-    for (int i = 0; i < indices2.length; i ++) {\n-      Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n+        Assert.assertEquals(2.0, vector.get(1), 0.0);\n+        Assert.assertEquals(4.0, vector.get(3), 0.0);\n+        Assert.assertEquals(5.0, vector.get(5), 0.0);\n     }\n-  }\n \n+    @Test\n+    public void densePlusBySparseTest() {\n+        DenseDoubleVector vector = new DenseDoubleVector(10);\n+        vector.set(1, 1.0);\n+        vector.set(3, 3.0);\n+        vector.set(5, 5.0);\n \n-  @Test\n-  public void sparseDoubleVectorTest() {\n-    int dim = 1000;\n-    int[] indices = new int[dim];\n-    double[] values  = new double[dim];\n+        SparseDoubleVector sparseDoubleVector = new SparseDoubleVector(10);\n+        sparseDoubleVector.set(1, 1.0);\n+        sparseDoubleVector.set(3, 3.0);\n+        sparseDoubleVector.set(7, 7.0);\n \n-    Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n-      indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+        vector.plusBy(sparseDoubleVector, 1.0);\n+\n+        Assert.assertEquals(2.0, vector.get(1), 0.0);\n+        Assert.assertEquals(6.0, vector.get(3), 0.0);\n+        Assert.assertEquals(5.0, vector.get(5), 0.0);\n+        Assert.assertEquals(7.0, vector.get(7), 0.0);\n+    }\n+\n+    @Test\n+    public void densePlusByDummyTest() {\n+        DenseDoubleVector vector = new DenseDoubleVector(10);\n+        vector.set(1, 1.0);\n+        vector.set(3, 3.0);\n+        vector.set(5, 5.0);\n+\n+        SparseDummyVector dummyVector = new SparseDummyVector(10);\n+        dummyVector.set(1, 1.0);\n+        dummyVector.set(3, 1.0);\n+\n+        vector.plusBy(dummyVector, 1.0);\n+\n+        Assert.assertEquals(2.0, vector.get(1), 0.0);\n+        Assert.assertEquals(4.0, vector.get(3), 0.0);\n+        Assert.assertEquals(5.0, vector.get(5), 0.0);\n+        Assert.assertEquals(0.0, vector.get(7), 0.0);\n+    }\n+\n+    @Test\n+    public void sparseIntVectorTest() {\n+        int dim = 1000;\n+        int[] indices = new int[dim];\n+        int[] values = new int[dim];\n+\n+        Random random = new Random(Time.monotonicNow());\n+        for (int i = 0; i < dim; i++) {\n+            indices[i] = random.nextInt(dim);\n+            values[i] = random.nextInt(dim);\n+        }\n+\n+        SparseIntVector vector = new SparseIntVector(dim, indices, values);\n+\n+\n+        int[] indices2 = vector.getIndices();\n+        int[] values2 = vector.getValues();\n+\n+        for (int i = 0; i < indices2.length; i++) {\n+            Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n+        }\n     }\n \n-    SparseDoubleVector vector = new SparseDoubleVector(dim, indices, values);\n \n-    int[] indices2 = vector.getIndices();\n-    double[] values2  = vector.getValues();\n+    @Test\n+    public void sparseDoubleVectorTest() {\n+        int dim = 1000;\n+        int[] indices = new int[dim];\n+        double[] values = new double[dim];\n+\n+        Random random = new Random(Time.monotonicNow());\n+        for (int i = 0; i < dim; i++) {\n+            indices[i] = random.nextInt(dim);\n+            values[i] = random.nextInt(dim);\n+        }\n+\n+        SparseDoubleVector vector = new SparseDoubleVector(dim, indices, values);\n+\n+        int[] indices2 = vector.getIndices();\n+        double[] values2 = vector.getValues();\n \n-    for (int i = 0; i < indices2.length; i ++) {\n-      Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n+        for (int i = 0; i < indices2.length; i++) {\n+            Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 176
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/361/DoubleVectorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/361/DoubleVectorTest.java\nindex 7114c5a182..657175bd56 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/361/DoubleVectorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/361/DoubleVectorTest.java\n@@ -28,7 +28,6 @@ import java.util.Random;\n \n \n public class DoubleVectorTest {\n-\n   @Test\n   public void timesBySparseTest() {\n     SparseDoubleVector vector = new SparseDoubleVector(10);\n@@ -104,46 +103,43 @@ public class DoubleVectorTest {\n   public void sparseIntVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    int[] values  = new int[dim];\n+    int[] values = new int[dim];\n \n     Random random = new Random(Time.monotonicNow());\n     for (int i = 0; i < dim; i ++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseIntVector vector = new SparseIntVector(dim, indices, values);\n-\n-\n-    int[] indices2 = vector.getIndices();\n-    int[] values2  = vector.getValues();\n+int[] indices2 = vector.getIndices();\n+    int[] values2 = vector.getValues();\n \n     for (int i = 0; i < indices2.length; i ++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n     }\n   }\n \n-\n-  @Test\n+@Test\n   public void sparseDoubleVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    double[] values  = new double[dim];\n+    double[] values = new double[dim];\n \n     Random random = new Random(Time.monotonicNow());\n     for (int i = 0; i < dim; i ++) {\n       indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+      values[i] = random.nextInt(dim);\n     }\n \n     SparseDoubleVector vector = new SparseDoubleVector(dim, indices, values);\n \n     int[] indices2 = vector.getIndices();\n-    double[] values2  = vector.getValues();\n+    double[] values2 = vector.getValues();\n \n     for (int i = 0; i < indices2.length; i ++) {\n       Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/361/DoubleVectorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/361/DoubleVectorTest.java\nindex 7114c5a182..c26457a849 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/361/DoubleVectorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/361/DoubleVectorTest.java\n@@ -23,127 +23,107 @@ import com.tencent.angel.ml.math.vector.SparseIntVector;\n import com.tencent.angel.utils.Time;\n import junit.framework.Assert;\n import org.junit.Test;\n-\n import java.util.Random;\n \n-\n public class DoubleVectorTest {\n \n-  @Test\n-  public void timesBySparseTest() {\n+\n+    @Test\n+    public void timesBySparseTest() {\n     SparseDoubleVector vector = new SparseDoubleVector(10);\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     vector.timesBy(2.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(6.0, vector.get(3), 0.0);\n     Assert.assertEquals(10.0, vector.get(5), 0.0);\n-  }\n+    }\n \n-  @Test\n-  public void plusBySparseTest() {\n+    @Test\n+    public void plusBySparseTest() {\n     SparseDoubleVector vector = new SparseDoubleVector(10);\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     SparseDummyVector dummyVector = new SparseDummyVector(10);\n     dummyVector.set(1, 1.0);\n     dummyVector.set(3, 1.0);\n-\n     vector.plusBy(dummyVector, 1.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(4.0, vector.get(3), 0.0);\n     Assert.assertEquals(5.0, vector.get(5), 0.0);\n-  }\n+    }\n \n-  @Test\n-  public void densePlusBySparseTest() {\n+    @Test\n+    public void densePlusBySparseTest() {\n     DenseDoubleVector vector = new DenseDoubleVector(10);\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     SparseDoubleVector sparseDoubleVector = new SparseDoubleVector(10);\n     sparseDoubleVector.set(1, 1.0);\n     sparseDoubleVector.set(3, 3.0);\n     sparseDoubleVector.set(7, 7.0);\n-\n     vector.plusBy(sparseDoubleVector, 1.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(6.0, vector.get(3), 0.0);\n     Assert.assertEquals(5.0, vector.get(5), 0.0);\n     Assert.assertEquals(7.0, vector.get(7), 0.0);\n-  }\n+    }\n \n-  @Test\n-  public void densePlusByDummyTest() {\n+    @Test\n+    public void densePlusByDummyTest() {\n     DenseDoubleVector vector = new DenseDoubleVector(10);\n     vector.set(1, 1.0);\n     vector.set(3, 3.0);\n     vector.set(5, 5.0);\n-\n     SparseDummyVector dummyVector = new SparseDummyVector(10);\n     dummyVector.set(1, 1.0);\n     dummyVector.set(3, 1.0);\n-\n     vector.plusBy(dummyVector, 1.0);\n-\n     Assert.assertEquals(2.0, vector.get(1), 0.0);\n     Assert.assertEquals(4.0, vector.get(3), 0.0);\n     Assert.assertEquals(5.0, vector.get(5), 0.0);\n     Assert.assertEquals(0.0, vector.get(7), 0.0);\n-  }\n+    }\n \n-  @Test\n-  public void sparseIntVectorTest() {\n+    @Test\n+    public void sparseIntVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    int[] values  = new int[dim];\n-\n+    int[] values = new int[dim];\n     Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n-      indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+    for (int i = 0; i < dim; i++) {\n+        indices[i] = random.nextInt(dim);\n+        values[i] = random.nextInt(dim);\n     }\n \n     SparseIntVector vector = new SparseIntVector(dim, indices, values);\n-\n-\n     int[] indices2 = vector.getIndices();\n-    int[] values2  = vector.getValues();\n-\n-    for (int i = 0; i < indices2.length; i ++) {\n-      Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n+    int[] values2 = vector.getValues();\n+    for (int i = 0; i < indices2.length; i++) {\n+        Assert.assertEquals(vector.get(indices2[i]), values2[i]);\n+    }\n     }\n-  }\n-\n \n-  @Test\n-  public void sparseDoubleVectorTest() {\n+    @Test\n+    public void sparseDoubleVectorTest() {\n     int dim = 1000;\n     int[] indices = new int[dim];\n-    double[] values  = new double[dim];\n-\n+    double[] values = new double[dim];\n     Random random = new Random(Time.monotonicNow());\n-    for (int i = 0; i < dim; i ++) {\n-      indices[i] = random.nextInt(dim);\n-      values[i]  = random.nextInt(dim);\n+    for (int i = 0; i < dim; i++) {\n+        indices[i] = random.nextInt(dim);\n+        values[i] = random.nextInt(dim);\n     }\n \n     SparseDoubleVector vector = new SparseDoubleVector(dim, indices, values);\n-\n     int[] indices2 = vector.getIndices();\n-    double[] values2  = vector.getValues();\n-\n-    for (int i = 0; i < indices2.length; i ++) {\n-      Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n+    double[] values2 = vector.getValues();\n+    for (int i = 0; i < indices2.length; i++) {\n+        Assert.assertEquals(vector.get(indices2[i]), values2[i], 0.0);\n+    }\n     }\n-  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}