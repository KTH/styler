{
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 01. October 2003 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/71/ColorConverter.java\nindex 648138e004..24fc0dad26 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/71/ColorConverter.java\n@@ -1,81 +1,80 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Copyright (C) 2003, 2004, 2005 Joe Walnes.\r\n- * Copyright (C) 2006, 2007 XStream Committers.\r\n- * All rights reserved.\r\n- *\r\n- * The software in this package is published under the terms of the BSD\r\n- * style license a copy of which has been included with this distribution in\r\n- * the LICENSE.txt file.\r\n- * \r\n- * Created on 01. October 2003 by Joe Walnes\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\r\n-\r\n-import java.awt.Color;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-/**\r\n- * Converts a java.awt.Color to XML, using four nested elements:\r\n- * red, green, blue, alpha.\r\n- *\r\n- * @author Joe Walnes\r\n- */\r\n-public class ColorConverter implements Converter {\r\n-\r\n-    public boolean canConvert(Class type) {\r\n-        // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\r\n-        // which is nasty if you don't want it.\r\n-        return type.getName().equals(\"java.awt.Color\");\r\n-    }\r\n-\r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Color color = (Color) source;\r\n-        write(\"red\", color.getRed(), writer);\r\n-        write(\"green\", color.getGreen(), writer);\r\n-        write(\"blue\", color.getBlue(), writer);\r\n-        write(\"alpha\", color.getAlpha(), writer);\r\n-    }\r\n-\r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        Map elements = new HashMap();\r\n-        while (reader.hasMoreChildren()) {\r\n-            reader.moveDown();\r\n-            elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\r\n-            reader.moveUp();\r\n-        }\r\n-        return new Color(((Integer) elements.get(\"red\")).intValue(),\r\n-                ((Integer) elements.get(\"green\")).intValue(),\r\n-                ((Integer) elements.get(\"blue\")).intValue(),\r\n-                ((Integer) elements.get(\"alpha\")).intValue());\r\n-    }\r\n-\r\n-    private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\r\n-        ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\r\n-        writer.setValue(String.valueOf(value));\r\n-        writer.endNode();\r\n-    }\r\n-\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Copyright (C) 2003, 2004, 2005 Joe Walnes.\n+ * Copyright (C) 2006, 2007 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 01. October 2003 by Joe Walnes\n+ */ package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+\n+import java.awt.Color;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Converts a java.awt.Color to XML, using four nested elements:\n+ * red, green, blue, alpha.\n+ *\n+ * @author Joe Walnes\n+ */\n+public class ColorConverter implements Converter {\n+\n+    public boolean canConvert(Class type) {\n+        // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\n+        // which is nasty if you don't want it.\n+        return type.getName().equals(\"java.awt.Color\");\n+    }\n+\n+    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n+        Color color = (Color) source;\n+        write(\"red\", color.getRed(), writer);\n+        write(\"green\", color.getGreen(), writer);\n+        write(\"blue\", color.getBlue(), writer);\n+        write(\"alpha\", color.getAlpha(), writer);\n+    }\n+\n+    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n+        Map elements = new HashMap();\n+        while (reader.hasMoreChildren()) {\n+            reader.moveDown();\n+            elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\n+            reader.moveUp();\n+        }\n+        return new Color(((Integer) elements.get(\"red\")).intValue(),\n+                ((Integer) elements.get(\"green\")).intValue(),\n+                ((Integer) elements.get(\"blue\")).intValue(),\n+                ((Integer) elements.get(\"alpha\")).intValue());\n+    }\n+\n+    private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\n+        ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\n+        writer.setValue(String.valueOf(value));\n+        writer.endNode();\n+    }\n+\n+}\n",
            "diff_size": 81
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/71/ColorConverter.java\nindex 648138e004..f21e4771cc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/71/ColorConverter.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 01. October 2003 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n \r\n import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n@@ -45,37 +46,37 @@ import java.util.Map;\n  */\r\n public class ColorConverter implements Converter {\r\n \r\n-    public boolean canConvert(Class type) {\r\n-        // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\r\n-        // which is nasty if you don't want it.\r\n-        return type.getName().equals(\"java.awt.Color\");\r\n-    }\r\n+  public boolean canConvert(Class type) {\r\n+    // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\r\n+    // which is nasty if you don't want it.\r\n+    return type.getName().equals(\"java.awt.Color\");\r\n+  }\r\n \r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Color color = (Color) source;\r\n-        write(\"red\", color.getRed(), writer);\r\n-        write(\"green\", color.getGreen(), writer);\r\n-        write(\"blue\", color.getBlue(), writer);\r\n-        write(\"alpha\", color.getAlpha(), writer);\r\n-    }\r\n+  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n+    Color color = (Color) source;\r\n+    write(\"red\", color.getRed(), writer);\r\n+    write(\"green\", color.getGreen(), writer);\r\n+    write(\"blue\", color.getBlue(), writer);\r\n+    write(\"alpha\", color.getAlpha(), writer);\r\n+  }\r\n \r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        Map elements = new HashMap();\r\n-        while (reader.hasMoreChildren()) {\r\n-            reader.moveDown();\r\n-            elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\r\n-            reader.moveUp();\r\n-        }\r\n-        return new Color(((Integer) elements.get(\"red\")).intValue(),\r\n-                ((Integer) elements.get(\"green\")).intValue(),\r\n-                ((Integer) elements.get(\"blue\")).intValue(),\r\n-                ((Integer) elements.get(\"alpha\")).intValue());\r\n+  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n+    Map elements = new HashMap();\r\n+    while (reader.hasMoreChildren()) {\r\n+      reader.moveDown();\r\n+      elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\r\n+      reader.moveUp();\r\n     }\r\n+    return new Color(((Integer) elements.get(\"red\")).intValue(),\r\n+      ((Integer) elements.get(\"green\")).intValue(),\r\n+      ((Integer) elements.get(\"blue\")).intValue(),\r\n+      ((Integer) elements.get(\"alpha\")).intValue());\r\n+  }\r\n \r\n-    private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\r\n-        ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\r\n-        writer.setValue(String.valueOf(value));\r\n-        writer.endNode();\r\n-    }\r\n+  private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\r\n+    ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\r\n+    writer.setValue(String.valueOf(value));\r\n+    writer.endNode();\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/71/ColorConverter.java\nindex 648138e004..c79418cc76 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/71/ColorConverter.java\n@@ -43,9 +43,8 @@ import java.util.Map;\n  *\r\n  * @author Joe Walnes\r\n  */\r\n-public class ColorConverter implements Converter {\r\n-\r\n-    public boolean canConvert(Class type) {\r\n+public class ColorConverter implements Converter {\n+  public boolean canConvert(Class type) {\r\n         // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\r\n         // which is nasty if you don't want it.\r\n         return type.getName().equals(\"java.awt.Color\");\r\n@@ -66,8 +65,7 @@ public class ColorConverter implements Converter {\n             elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\r\n             reader.moveUp();\r\n         }\r\n-        return new Color(((Integer) elements.get(\"red\")).intValue(),\r\n-                ((Integer) elements.get(\"green\")).intValue(),\r\n+        return new Color(((Integer) elements.get(\"red\")).intValue(), ((Integer) elements.get(\"green\")).intValue(),\r\n                 ((Integer) elements.get(\"blue\")).intValue(),\r\n                 ((Integer) elements.get(\"alpha\")).intValue());\r\n     }\r\n@@ -78,4 +76,4 @@ public class ColorConverter implements Converter {\n         writer.endNode();\r\n     }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/71/ColorConverter.java\nindex 648138e004..4fd1bcac1a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/71/ColorConverter.java\n@@ -24,17 +24,16 @@\n  * \r\n  * Created on 01. October 2003 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\r\n-\r\n-import java.awt.Color;\r\n-import java.util.HashMap;\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+import java.awt.Color;\n+import java.util.HashMap;\n import java.util.Map;\r\n \r\n /**\r\n@@ -42,40 +41,40 @@ import java.util.Map;\n  * red, green, blue, alpha.\r\n  *\r\n  * @author Joe Walnes\r\n- */\r\n-public class ColorConverter implements Converter {\r\n-\r\n+ */\n+\n+\n+public class ColorConverter implements Converter {\n     public boolean canConvert(Class type) {\r\n         // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\r\n-        // which is nasty if you don't want it.\r\n-        return type.getName().equals(\"java.awt.Color\");\r\n-    }\r\n-\r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Color color = (Color) source;\r\n-        write(\"red\", color.getRed(), writer);\r\n-        write(\"green\", color.getGreen(), writer);\r\n-        write(\"blue\", color.getBlue(), writer);\r\n-        write(\"alpha\", color.getAlpha(), writer);\r\n-    }\r\n-\r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        Map elements = new HashMap();\r\n-        while (reader.hasMoreChildren()) {\r\n-            reader.moveDown();\r\n-            elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\r\n-            reader.moveUp();\r\n-        }\r\n-        return new Color(((Integer) elements.get(\"red\")).intValue(),\r\n-                ((Integer) elements.get(\"green\")).intValue(),\r\n-                ((Integer) elements.get(\"blue\")).intValue(),\r\n-                ((Integer) elements.get(\"alpha\")).intValue());\r\n-    }\r\n-\r\n-    private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\r\n-        ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\r\n-        writer.setValue(String.valueOf(value));\r\n-        writer.endNode();\r\n-    }\r\n-\r\n-}\r\n+        // which is nasty if you don't want it.\n+        return type.getName().equals(\"java.awt.Color\");\n+    }\n+\n+\n+    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n+        Color color = (Color) source;\n+        write(\"red\", color.getRed(), writer);\n+        write(\"green\", color.getGreen(), writer);\n+        write(\"blue\", color.getBlue(), writer);\n+        write(\"alpha\", color.getAlpha(), writer);\n+    }\n+\n+\n+    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n+        Map elements = new HashMap();\n+\n+        while (reader.hasMoreChildren()) {\n+            reader.moveDown();\n+            elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\n+            reader.moveUp();\n+        }\n+        return new Color(((Integer) elements.get(\"red\")).intValue(), ((Integer) elements.get(\"green\")).intValue(), ((Integer) elements.get(\"blue\")).intValue(), ((Integer) elements.get(\"alpha\")).intValue());\n+    }\n+\n+    private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\n+        ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\n+        writer.setValue(String.valueOf(value));\n+        writer.endNode();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/71/ColorConverter.java\nindex 648138e004..24fc0dad26 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/71/ColorConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/71/ColorConverter.java\n@@ -1,81 +1,80 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Copyright (C) 2003, 2004, 2005 Joe Walnes.\r\n- * Copyright (C) 2006, 2007 XStream Committers.\r\n- * All rights reserved.\r\n- *\r\n- * The software in this package is published under the terms of the BSD\r\n- * style license a copy of which has been included with this distribution in\r\n- * the LICENSE.txt file.\r\n- * \r\n- * Created on 01. October 2003 by Joe Walnes\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\r\n-\r\n-import java.awt.Color;\r\n-import java.util.HashMap;\r\n-import java.util.Map;\r\n-\r\n-/**\r\n- * Converts a java.awt.Color to XML, using four nested elements:\r\n- * red, green, blue, alpha.\r\n- *\r\n- * @author Joe Walnes\r\n- */\r\n-public class ColorConverter implements Converter {\r\n-\r\n-    public boolean canConvert(Class type) {\r\n-        // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\r\n-        // which is nasty if you don't want it.\r\n-        return type.getName().equals(\"java.awt.Color\");\r\n-    }\r\n-\r\n-    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\r\n-        Color color = (Color) source;\r\n-        write(\"red\", color.getRed(), writer);\r\n-        write(\"green\", color.getGreen(), writer);\r\n-        write(\"blue\", color.getBlue(), writer);\r\n-        write(\"alpha\", color.getAlpha(), writer);\r\n-    }\r\n-\r\n-    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\r\n-        Map elements = new HashMap();\r\n-        while (reader.hasMoreChildren()) {\r\n-            reader.moveDown();\r\n-            elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\r\n-            reader.moveUp();\r\n-        }\r\n-        return new Color(((Integer) elements.get(\"red\")).intValue(),\r\n-                ((Integer) elements.get(\"green\")).intValue(),\r\n-                ((Integer) elements.get(\"blue\")).intValue(),\r\n-                ((Integer) elements.get(\"alpha\")).intValue());\r\n-    }\r\n-\r\n-    private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\r\n-        ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\r\n-        writer.setValue(String.valueOf(value));\r\n-        writer.endNode();\r\n-    }\r\n-\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Copyright (C) 2003, 2004, 2005 Joe Walnes.\n+ * Copyright (C) 2006, 2007 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 01. October 2003 by Joe Walnes\n+ */ package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.Converter;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.MarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n+\n+import java.awt.Color;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Converts a java.awt.Color to XML, using four nested elements:\n+ * red, green, blue, alpha.\n+ *\n+ * @author Joe Walnes\n+ */\n+public class ColorConverter implements Converter {\n+\n+    public boolean canConvert(Class type) {\n+        // String comparison is used here because Color.class loads the class which in turns instantiates AWT,\n+        // which is nasty if you don't want it.\n+        return type.getName().equals(\"java.awt.Color\");\n+    }\n+\n+    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n+        Color color = (Color) source;\n+        write(\"red\", color.getRed(), writer);\n+        write(\"green\", color.getGreen(), writer);\n+        write(\"blue\", color.getBlue(), writer);\n+        write(\"alpha\", color.getAlpha(), writer);\n+    }\n+\n+    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n+        Map elements = new HashMap();\n+        while (reader.hasMoreChildren()) {\n+            reader.moveDown();\n+            elements.put(reader.getNodeName(), Integer.valueOf(reader.getValue()));\n+            reader.moveUp();\n+        }\n+        return new Color(((Integer) elements.get(\"red\")).intValue(),\n+                ((Integer) elements.get(\"green\")).intValue(),\n+                ((Integer) elements.get(\"blue\")).intValue(),\n+                ((Integer) elements.get(\"alpha\")).intValue());\n+    }\n+\n+    private void write(String fieldName, int value, HierarchicalStreamWriter writer) {\n+        ExtendedHierarchicalStreamWriterHelper.startNode(writer, fieldName, int.class);\n+        writer.setValue(String.valueOf(value));\n+        writer.endNode();\n+    }\n+\n+}\n",
            "diff_size": 81
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}