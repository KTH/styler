{
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "warning",
                "message": "Use of @author javadoc keyword is prohibited.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * <=,\n *\n * @author tnine\n */\npublic abstract class EqualityOperand extends Operand {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "92",
                    "column": "13",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "21",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "13",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "23",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/14/EqualityOperand.java\nindex 6458e9f0c0..9f1d312be1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/14/EqualityOperand.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.query.tree;\n \n \n@@ -28,62 +29,74 @@ import org.antlr.runtime.Token;\n  */\n public abstract class EqualityOperand extends Operand {\n \n-    /**\n-     * @param property\n-     * @param literal\n-     */\n-    public EqualityOperand( Token t ) {\n-        super( t );\n-    }\n+  /**\n+   * @param property\n+   * @param literal\n+   */\n+  public EqualityOperand(Token t) {\n+    super(t);\n+  }\n \n \n-    public EqualityOperand( String propName, Literal<?> value ) {\n-        super( null );\n-    }\n+  public EqualityOperand(String propName, Literal<?> value) {\n+    super(null);\n+  }\n \n \n-    /** Set the property on this operand */\n-    public void setProperty( String name ) {\n-        setAtIndex( 0, newProperty( name ) );\n-    }\n+  /**\n+   * Set the property on this operand\n+   */\n+  public void setProperty(String name) {\n+    setAtIndex(0, newProperty(name));\n+  }\n \n \n-    /** Get the property to set into the equality. Allows subclasses to override the type */\n-    protected Property newProperty( String name ) {\n-        return new Property( name );\n-    }\n+  /**\n+   * Get the property to set into the equality. Allows subclasses to override the type\n+   */\n+  protected Property newProperty(String name) {\n+    return new Property(name);\n+  }\n \n \n-    /** Set the literal on this operand from the given value */\n-    public void setLiteral( Object value ) {\n-        setAtIndex( 1, LiteralFactory.getLiteral( value ) );\n-    }\n+  /**\n+   * Set the literal on this operand from the given value\n+   */\n+  public void setLiteral(Object value) {\n+    setAtIndex(1, LiteralFactory.getLiteral(value));\n+  }\n \n \n-    /** Set the child at the specified index. If it doesn't exist, it's added until it does */\n-    @SuppressWarnings(\"unchecked\")\n-    private void setAtIndex( int index, Literal<?> value ) {\n+  /**\n+   * Set the child at the specified index. If it doesn't exist, it's added until it does\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  private void setAtIndex(int index, Literal<?> value) {\n \n-        if ( children == null ) {\n-            children = createChildrenList();\n-        }\n-\n-        while ( children.size() - 1 < index ) {\n-            children.add( null );\n-        }\n+    if (children == null) {\n+      children = createChildrenList();\n+    }\n \n-        setChild( index, value );\n+    while (children.size() - 1 < index) {\n+      children.add(null);\n     }\n \n+    setChild(index, value);\n+  }\n \n-    /** @return the property */\n-    public Property getProperty() {\n-        return ( Property ) this.children.get( 0 );\n-    }\n \n+  /**\n+   * @return the property\n+   */\n+  public Property getProperty() {\n+    return (Property) this.children.get(0);\n+  }\n \n-    /** @return the literal */\n-    public Literal<?> getLiteral() {\n-        return ( Literal<?> ) this.children.get( 1 );\n-    }\n+\n+  /**\n+   * @return the literal\n+   */\n+  public Literal<?> getLiteral() {\n+    return (Literal<?>) this.children.get(1);\n+  }\n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/14/EqualityOperand.java\nindex 6458e9f0c0..fb49b2ce8b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/14/EqualityOperand.java\n@@ -86,4 +86,4 @@ public abstract class EqualityOperand extends Operand {\n     public Literal<?> getLiteral() {\n         return ( Literal<?> ) this.children.get( 1 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/14/EqualityOperand.java\nindex 6458e9f0c0..1e86989e49 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/14/EqualityOperand.java\n@@ -26,12 +26,15 @@ import org.antlr.runtime.Token;\n  *\n  * @author tnine\n  */\n+\n+\n public abstract class EqualityOperand extends Operand {\n \n     /**\n      * @param property\n      * @param literal\n      */\n+\n     public EqualityOperand( Token t ) {\n         super( t );\n     }\n@@ -43,27 +46,34 @@ public abstract class EqualityOperand extends Operand {\n \n \n     /** Set the property on this operand */\n+\n+\n     public void setProperty( String name ) {\n         setAtIndex( 0, newProperty( name ) );\n     }\n \n \n     /** Get the property to set into the equality. Allows subclasses to override the type */\n+\n+\n     protected Property newProperty( String name ) {\n         return new Property( name );\n     }\n \n \n     /** Set the literal on this operand from the given value */\n+\n+\n     public void setLiteral( Object value ) {\n         setAtIndex( 1, LiteralFactory.getLiteral( value ) );\n     }\n \n \n     /** Set the child at the specified index. If it doesn't exist, it's added until it does */\n+\n+\n     @SuppressWarnings(\"unchecked\")\n     private void setAtIndex( int index, Literal<?> value ) {\n-\n         if ( children == null ) {\n             children = createChildrenList();\n         }\n@@ -71,19 +81,22 @@ public abstract class EqualityOperand extends Operand {\n         while ( children.size() - 1 < index ) {\n             children.add( null );\n         }\n-\n         setChild( index, value );\n     }\n \n \n     /** @return the property */\n+\n+\n     public Property getProperty() {\n         return ( Property ) this.children.get( 0 );\n     }\n \n \n     /** @return the literal */\n+\n+\n     public Literal<?> getLiteral() {\n         return ( Literal<?> ) this.children.get( 1 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/14/EqualityOperand.java\nindex 6458e9f0c0..ff99af426d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/14/EqualityOperand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/14/EqualityOperand.java\n@@ -19,7 +19,6 @@ package org.apache.usergrid.persistence.query.tree;\n \n import org.antlr.runtime.Token;\n \n-\n /**\n  * A base class for any equality expression. Expressions must have a property and a value. Examples are >=, >, =, <,\n  * <=,\n",
            "diff_size": 1
        }
    ]
}