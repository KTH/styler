{
    "error_id": "173",
    "information": {
        "errors": [
            {
                "line": "94",
                "severity": "warning",
                "message": "trailing whitespaces",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "\t\t\tif (!translateable.collectRequiredQueries().stream()\n\t\t\t\t.allMatch(qid -> user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n\t\t\t\tcontinue;\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttry {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/173/QueryProcessor.java\nindex 6d70696f47..3209562b87 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/173/QueryProcessor.java\n@@ -36,7 +36,7 @@ public class QueryProcessor {\n \t * intended dataset.\n \t */\n \tpublic ExecutionStatus postQuery(Dataset dataset, SubmittedQuery query, URLBuilder urlb, User user) {\n-\t\t\n+\n \t\t// Initialize checks that need to traverse the query tree\n \t\tExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();\n \t\tSingleReusedChecker singleReusedChecker = new QueryUtils.SingleReusedChecker();\n@@ -57,16 +57,16 @@ public class QueryProcessor {\n \n \t\t\t\treturn getStatus(dataset, mq, urlb, user);\n \t\t\t}\n-\t\t\t\n+\n \t\t\t// Check if the query contains parts that require to resolve external ids. If so the user must have the preserve_id permission on the dataset.\n \t\t\tif(externalIdChecker.resolvesExternalIds()) {\n \t\t\t\tuser.checkPermission(DatasetPermission.onInstance(Ability.PRESERVE_ID, dataset.getId()));\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\t// Run the query on behalf of the user\n \t\tManagedExecution<?> mq = ExecutionManager.runQuery(storage, namespaces, query, user.getId(), dataset.getId());\n-\t\t\n+\n \t\t// Set abilities for submitted query\n \t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mq.getId()));\n \n@@ -86,19 +86,19 @@ public class QueryProcessor {\n \t\t\t\t|| targetNamespace.getDataset().equals(dataset)) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\t\n+\n \t\t\t// Ensure that user is allowed to read all sub-queries of the actual query.\n-\t\t\t\n+\n \t\t\tif (!translateable.collectRequiredQueries().stream()\n \t\t\t\t.allMatch(qid -> user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n-\t\t\t\tcontinue;\t\t\t\t\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t\t\n+\n \t\t\ttry {\n \t\t\t\tDatasetId targetDataset = targetNamespace.getDataset().getId();\n \t\t\t\tIQuery translated = QueryTranslator.replaceDataset(namespaces, translateable, targetDataset);\n \t\t\t\tfinal ManagedExecution<?> mqTranslated = ExecutionManager.createQuery(storage, namespaces, translated, mq.getQueryId(), user.getId(), targetDataset);\n-\t\t\t\t\n+\n \t\t\t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mqTranslated.getId()));\n \t\t\t}\n \t\t\tcatch (Exception e) {\n",
            "diff_size": 9
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/173/QueryProcessor.java\nindex 6d70696f47..33ab2264f2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/173/QueryProcessor.java\n@@ -22,97 +22,97 @@ import com.bakdata.conquery.util.QueryUtils.SingleReusedChecker;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n+\n @Slf4j\n @RequiredArgsConstructor\n public class QueryProcessor {\n \n-\t@Getter\n-\tprivate final Namespaces namespaces;\n-\tprivate final MasterMetaStorage storage;\n-\n-\n-\t/**\n-\t * Creates a query for all datasets, then submits it for execution on the\n-\t * intended dataset.\n-\t */\n-\tpublic ExecutionStatus postQuery(Dataset dataset, SubmittedQuery query, URLBuilder urlb, User user) {\n-\t\t\n-\t\t// Initialize checks that need to traverse the query tree\n-\t\tExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();\n-\t\tSingleReusedChecker singleReusedChecker = new QueryUtils.SingleReusedChecker();\n-\n-\t\t// Chain the checks and apply them to the tree\n-\t\tquery.visit(externalIdChecker.andThen(singleReusedChecker));\n-\n-\t\t// Evaluate the checks and take action\n-\t\t{\n-\t\t\t// If this is only a re-executing query, execute the underlying query instead.\n-\t\t\tfinal ManagedExecutionId executionId = singleReusedChecker.getOnlyReused();\n-\n-\t\t\tif (executionId != null) {\n-\t\t\t\tlog.info(\"Re-executing Query {}\", executionId);\n-\n-\n-\t\t\t\tfinal ManagedExecution<?> mq = ExecutionManager.executeQuery( namespaces, storage.getExecution(executionId));\n-\n-\t\t\t\treturn getStatus(dataset, mq, urlb, user);\n-\t\t\t}\n-\t\t\t\n-\t\t\t// Check if the query contains parts that require to resolve external ids. If so the user must have the preserve_id permission on the dataset.\n-\t\t\tif(externalIdChecker.resolvesExternalIds()) {\n-\t\t\t\tuser.checkPermission(DatasetPermission.onInstance(Ability.PRESERVE_ID, dataset.getId()));\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t// Run the query on behalf of the user\n-\t\tManagedExecution<?> mq = ExecutionManager.runQuery(storage, namespaces, query, user.getId(), dataset.getId());\n-\t\t\n-\t\t// Set abilities for submitted query\n-\t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mq.getId()));\n-\n-\t\tif(query instanceof IQuery) {\n-\t\t\ttranslateToOtherDatasets(dataset, query, user, mq);\n-\t\t}\n-\n-\t\t// return status\n-\t\treturn getStatus(dataset, mq, urlb, user);\n-\t}\n-\n-\tprivate void translateToOtherDatasets(Dataset dataset, SubmittedQuery query, User user, ManagedExecution<?> mq) {\n-\t\tIQuery translateable = (IQuery) query;\n-\t\t// translate the query for all other datasets of user and submit it.\n-\t\tfor (Namespace targetNamespace : namespaces.getNamespaces()) {\n-\t\t\tif (!user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), targetNamespace.getDataset().getId()))\n-\t\t\t\t|| targetNamespace.getDataset().equals(dataset)) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\t\n-\t\t\t// Ensure that user is allowed to read all sub-queries of the actual query.\n-\t\t\t\n-\t\t\tif (!translateable.collectRequiredQueries().stream()\n-\t\t\t\t.allMatch(qid -> user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n-\t\t\t\tcontinue;\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tDatasetId targetDataset = targetNamespace.getDataset().getId();\n-\t\t\t\tIQuery translated = QueryTranslator.replaceDataset(namespaces, translateable, targetDataset);\n-\t\t\t\tfinal ManagedExecution<?> mqTranslated = ExecutionManager.createQuery(storage, namespaces, translated, mq.getQueryId(), user.getId(), targetDataset);\n-\t\t\t\t\n-\t\t\t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mqTranslated.getId()));\n-\t\t\t}\n-\t\t\tcatch (Exception e) {\n-\t\t\t\tlog.trace(\"Could not translate \" + query + \" to dataset \" + targetNamespace.getDataset(), e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic ExecutionStatus getStatus(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb, User user) {\n-\t\treturn query.buildStatus(urlb, user);\n-\t}\n-\n-\tpublic ExecutionStatus cancel(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb) {\n-\n-\t\treturn null;\n-\t}\n+    @Getter\n+    private final Namespaces namespaces;\n+    private final MasterMetaStorage storage;\n+\n+\n+    /**\n+     * Creates a query for all datasets, then submits it for execution on the\n+     * intended dataset.\n+     */\n+    public ExecutionStatus postQuery(Dataset dataset, SubmittedQuery query, URLBuilder urlb, User user) {\n+\n+        // Initialize checks that need to traverse the query tree\n+        ExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();\n+        SingleReusedChecker singleReusedChecker = new QueryUtils.SingleReusedChecker();\n+\n+        // Chain the checks and apply them to the tree\n+        query.visit(externalIdChecker.andThen(singleReusedChecker));\n+\n+        // Evaluate the checks and take action\n+        {\n+            // If this is only a re-executing query, execute the underlying query instead.\n+            final ManagedExecutionId executionId = singleReusedChecker.getOnlyReused();\n+\n+            if (executionId != null) {\n+                log.info(\"Re-executing Query {}\", executionId);\n+\n+\n+                final ManagedExecution<?> mq = ExecutionManager.executeQuery(namespaces, storage.getExecution(executionId));\n+\n+                return getStatus(dataset, mq, urlb, user);\n+            }\n+\n+            // Check if the query contains parts that require to resolve external ids. If so the user must have the preserve_id permission on the dataset.\n+            if (externalIdChecker.resolvesExternalIds()) {\n+                user.checkPermission(DatasetPermission.onInstance(Ability.PRESERVE_ID, dataset.getId()));\n+            }\n+        }\n+\n+        // Run the query on behalf of the user\n+        ManagedExecution<?> mq = ExecutionManager.runQuery(storage, namespaces, query, user.getId(), dataset.getId());\n+\n+        // Set abilities for submitted query\n+        user.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mq.getId()));\n+\n+        if (query instanceof IQuery) {\n+            translateToOtherDatasets(dataset, query, user, mq);\n+        }\n+\n+        // return status\n+        return getStatus(dataset, mq, urlb, user);\n+    }\n+\n+    private void translateToOtherDatasets(Dataset dataset, SubmittedQuery query, User user, ManagedExecution<?> mq) {\n+        IQuery translateable = (IQuery) query;\n+        // translate the query for all other datasets of user and submit it.\n+        for (Namespace targetNamespace : namespaces.getNamespaces()) {\n+            if (!user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), targetNamespace.getDataset().getId()))\n+                || targetNamespace.getDataset().equals(dataset)) {\n+                continue;\n+            }\n+\n+            // Ensure that user is allowed to read all sub-queries of the actual query.\n+\n+            if (!translateable.collectRequiredQueries().stream()\n+                .allMatch(qid -> user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n+                continue;\n+            }\n+\n+            try {\n+                DatasetId targetDataset = targetNamespace.getDataset().getId();\n+                IQuery translated = QueryTranslator.replaceDataset(namespaces, translateable, targetDataset);\n+                final ManagedExecution<?> mqTranslated = ExecutionManager.createQuery(storage, namespaces, translated, mq.getQueryId(), user.getId(), targetDataset);\n+\n+                user.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mqTranslated.getId()));\n+            } catch (Exception e) {\n+                log.trace(\"Could not translate \" + query + \" to dataset \" + targetNamespace.getDataset(), e);\n+            }\n+        }\n+    }\n+\n+    public ExecutionStatus getStatus(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb, User user) {\n+        return query.buildStatus(urlb, user);\n+    }\n+\n+    public ExecutionStatus cancel(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb) {\n+\n+        return null;\n+    }\n }\n",
            "diff_size": 90
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "column": "13",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 12, expected is 108, indentation should be the same level as line 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 108, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 108, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 112, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 112, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 112, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 108, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 12, expected is 108, indentation should be the same level as line 61.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 108, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 112, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 108, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'block rcurly' has incorrect indentation level 104, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/173/QueryProcessor.java\nindex 6d70696f47..e19ee5aaec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/173/QueryProcessor.java\n@@ -22,97 +22,99 @@ import com.bakdata.conquery.util.QueryUtils.SingleReusedChecker;\n import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n+\n @Slf4j\n @RequiredArgsConstructor\n public class QueryProcessor {\n \n-\t@Getter\n-\tprivate final Namespaces namespaces;\n-\tprivate final MasterMetaStorage storage;\n-\n-\n-\t/**\n-\t * Creates a query for all datasets, then submits it for execution on the\n-\t * intended dataset.\n-\t */\n-\tpublic ExecutionStatus postQuery(Dataset dataset, SubmittedQuery query, URLBuilder urlb, User user) {\n-\t\t\n-\t\t// Initialize checks that need to traverse the query tree\n-\t\tExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();\n-\t\tSingleReusedChecker singleReusedChecker = new QueryUtils.SingleReusedChecker();\n-\n-\t\t// Chain the checks and apply them to the tree\n-\t\tquery.visit(externalIdChecker.andThen(singleReusedChecker));\n-\n-\t\t// Evaluate the checks and take action\n-\t\t{\n-\t\t\t// If this is only a re-executing query, execute the underlying query instead.\n-\t\t\tfinal ManagedExecutionId executionId = singleReusedChecker.getOnlyReused();\n-\n-\t\t\tif (executionId != null) {\n-\t\t\t\tlog.info(\"Re-executing Query {}\", executionId);\n-\n-\n-\t\t\t\tfinal ManagedExecution<?> mq = ExecutionManager.executeQuery( namespaces, storage.getExecution(executionId));\n-\n-\t\t\t\treturn getStatus(dataset, mq, urlb, user);\n-\t\t\t}\n-\t\t\t\n-\t\t\t// Check if the query contains parts that require to resolve external ids. If so the user must have the preserve_id permission on the dataset.\n-\t\t\tif(externalIdChecker.resolvesExternalIds()) {\n-\t\t\t\tuser.checkPermission(DatasetPermission.onInstance(Ability.PRESERVE_ID, dataset.getId()));\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t// Run the query on behalf of the user\n-\t\tManagedExecution<?> mq = ExecutionManager.runQuery(storage, namespaces, query, user.getId(), dataset.getId());\n-\t\t\n-\t\t// Set abilities for submitted query\n-\t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mq.getId()));\n-\n-\t\tif(query instanceof IQuery) {\n-\t\t\ttranslateToOtherDatasets(dataset, query, user, mq);\n-\t\t}\n-\n-\t\t// return status\n-\t\treturn getStatus(dataset, mq, urlb, user);\n-\t}\n-\n-\tprivate void translateToOtherDatasets(Dataset dataset, SubmittedQuery query, User user, ManagedExecution<?> mq) {\n-\t\tIQuery translateable = (IQuery) query;\n-\t\t// translate the query for all other datasets of user and submit it.\n-\t\tfor (Namespace targetNamespace : namespaces.getNamespaces()) {\n-\t\t\tif (!user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), targetNamespace.getDataset().getId()))\n-\t\t\t\t|| targetNamespace.getDataset().equals(dataset)) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\t\n-\t\t\t// Ensure that user is allowed to read all sub-queries of the actual query.\n-\t\t\t\n-\t\t\tif (!translateable.collectRequiredQueries().stream()\n-\t\t\t\t.allMatch(qid -> user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n-\t\t\t\tcontinue;\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tDatasetId targetDataset = targetNamespace.getDataset().getId();\n-\t\t\t\tIQuery translated = QueryTranslator.replaceDataset(namespaces, translateable, targetDataset);\n-\t\t\t\tfinal ManagedExecution<?> mqTranslated = ExecutionManager.createQuery(storage, namespaces, translated, mq.getQueryId(), user.getId(), targetDataset);\n-\t\t\t\t\n-\t\t\t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mqTranslated.getId()));\n-\t\t\t}\n-\t\t\tcatch (Exception e) {\n-\t\t\t\tlog.trace(\"Could not translate \" + query + \" to dataset \" + targetNamespace.getDataset(), e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic ExecutionStatus getStatus(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb, User user) {\n-\t\treturn query.buildStatus(urlb, user);\n-\t}\n-\n-\tpublic ExecutionStatus cancel(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb) {\n-\n-\t\treturn null;\n-\t}\n-}\n+    @Getter\n+    private final Namespaces namespaces;\n+    private final MasterMetaStorage storage;\n+\n+\n+    /**\n+     * Creates a query for all datasets, then submits it for execution on the\n+     * intended dataset.\n+     */\n+\n+    public ExecutionStatus postQuery(Dataset dataset, SubmittedQuery query, URLBuilder urlb, User user) {\n+        \n+        // Initialize checks that need to traverse the query tree\n+        ExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();\n+        SingleReusedChecker singleReusedChecker = new QueryUtils.SingleReusedChecker();\n+\n+        // Chain the checks and apply them to the tree\n+        query.visit(externalIdChecker.andThen(singleReusedChecker));\n+\n+        // Evaluate the checks and take action\n+        {\n+            // If this is only a re-executing query, execute the underlying query instead.\n+                                                                                                            final ManagedExecutionId executionId = singleReusedChecker.getOnlyReused();\n+                                                                                                            if(executionId != null) {\n+                                                                                                                log.info(\"Re-executing Query {}\", executionId);\n+                                                                                                                final ManagedExecution<?> mq = ExecutionManager.executeQuery(namespaces, storage.getExecution(executionId));\n+                                                                                                                return getStatus(dataset, mq, urlb, user);\n+                                                                                                            }\n+            \n+            // Check if the query contains parts that require to resolve external ids. If so the user must have the preserve_id permission on the dataset.\n+\n+                                                                                                            if(externalIdChecker.resolvesExternalIds()) {\n+                                                                                                                user.checkPermission(DatasetPermission.onInstance(Ability.PRESERVE_ID, dataset.getId()));\n+                                                                                                            }\n+                                                                                                        }\n+        \n+        // Run the query on behalf of the user\n+\n+        ManagedExecution<?> mq = ExecutionManager.runQuery(storage, namespaces, query, user.getId(), dataset.getId());\n+        \n+        // Set abilities for submitted query\n+        user.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mq.getId()));\n+\n+        if(query instanceof IQuery) {\n+            translateToOtherDatasets(dataset, query, user, mq);\n+        }\n+\n+        // return status\n+        return getStatus(dataset, mq, urlb, user);\n+    }\n+\n+    private void translateToOtherDatasets(Dataset dataset, SubmittedQuery query, User user, ManagedExecution<?> mq) {\n+        IQuery translateable = (IQuery)query;\n+        // translate the query for all other datasets of user and submit it.\n+        for(Namespace targetNamespace : namespaces.getNamespaces()) {\n+            if(!user.isPermitted(DatasetPermission.onInstance(Ability.READ.asSet(), targetNamespace.getDataset().getId())) || targetNamespace.getDataset().equals(dataset)) {\n+                continue;\n+            }\n+            \n+            // Ensure that user is allowed to read all sub-queries of the actual query.\n+\n+            if(!translateable.collectRequiredQueries().stream()\n+                                                      .allMatch(qid->user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n+                continue;\n+            }\n+            try {\n+                DatasetId targetDataset = targetNamespace.getDataset().getId();\n+                IQuery translated = QueryTranslator.replaceDataset(namespaces, translateable, targetDataset);\n+\n+                final ManagedExecution<?> mqTranslated = ExecutionManager.createQuery(storage, namespaces, translated, mq.getQueryId(), user.getId(), targetDataset);\n+                user.addPermission(\n+                    storage,\n+                    QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mqTranslated.getId())\n+                );\n+            }\n+            catch (Exception e) {\n+                log.trace(\"Could not translate \"+query+\" to dataset \"+targetNamespace.getDataset(),\n+                          e\n+                );\n+            }\n+        }\n+    }\n+\n+    public ExecutionStatus getStatus(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb, User user) {\n+        return query.buildStatus(urlb, user);\n+    }\n+\n+    public ExecutionStatus cancel(Dataset dataset, ManagedExecution<?> query, URLBuilder urlb) {\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 92
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/173/QueryProcessor.java\nindex 6d70696f47..3209562b87 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/173/QueryProcessor.java\n@@ -36,7 +36,7 @@ public class QueryProcessor {\n \t * intended dataset.\n \t */\n \tpublic ExecutionStatus postQuery(Dataset dataset, SubmittedQuery query, URLBuilder urlb, User user) {\n-\t\t\n+\n \t\t// Initialize checks that need to traverse the query tree\n \t\tExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();\n \t\tSingleReusedChecker singleReusedChecker = new QueryUtils.SingleReusedChecker();\n@@ -57,16 +57,16 @@ public class QueryProcessor {\n \n \t\t\t\treturn getStatus(dataset, mq, urlb, user);\n \t\t\t}\n-\t\t\t\n+\n \t\t\t// Check if the query contains parts that require to resolve external ids. If so the user must have the preserve_id permission on the dataset.\n \t\t\tif(externalIdChecker.resolvesExternalIds()) {\n \t\t\t\tuser.checkPermission(DatasetPermission.onInstance(Ability.PRESERVE_ID, dataset.getId()));\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\t// Run the query on behalf of the user\n \t\tManagedExecution<?> mq = ExecutionManager.runQuery(storage, namespaces, query, user.getId(), dataset.getId());\n-\t\t\n+\n \t\t// Set abilities for submitted query\n \t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mq.getId()));\n \n@@ -86,19 +86,19 @@ public class QueryProcessor {\n \t\t\t\t|| targetNamespace.getDataset().equals(dataset)) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\t\n+\n \t\t\t// Ensure that user is allowed to read all sub-queries of the actual query.\n-\t\t\t\n+\n \t\t\tif (!translateable.collectRequiredQueries().stream()\n \t\t\t\t.allMatch(qid -> user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n-\t\t\t\tcontinue;\t\t\t\t\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t\t\n+\n \t\t\ttry {\n \t\t\t\tDatasetId targetDataset = targetNamespace.getDataset().getId();\n \t\t\t\tIQuery translated = QueryTranslator.replaceDataset(namespaces, translateable, targetDataset);\n \t\t\t\tfinal ManagedExecution<?> mqTranslated = ExecutionManager.createQuery(storage, namespaces, translated, mq.getQueryId(), user.getId(), targetDataset);\n-\t\t\t\t\n+\n \t\t\t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mqTranslated.getId()));\n \t\t\t}\n \t\t\tcatch (Exception e) {\n",
            "diff_size": 9
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/173/QueryProcessor.java\nindex 6d70696f47..3209562b87 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/173/QueryProcessor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/173/QueryProcessor.java\n@@ -36,7 +36,7 @@ public class QueryProcessor {\n \t * intended dataset.\n \t */\n \tpublic ExecutionStatus postQuery(Dataset dataset, SubmittedQuery query, URLBuilder urlb, User user) {\n-\t\t\n+\n \t\t// Initialize checks that need to traverse the query tree\n \t\tExternalIdChecker externalIdChecker = new QueryUtils.ExternalIdChecker();\n \t\tSingleReusedChecker singleReusedChecker = new QueryUtils.SingleReusedChecker();\n@@ -57,16 +57,16 @@ public class QueryProcessor {\n \n \t\t\t\treturn getStatus(dataset, mq, urlb, user);\n \t\t\t}\n-\t\t\t\n+\n \t\t\t// Check if the query contains parts that require to resolve external ids. If so the user must have the preserve_id permission on the dataset.\n \t\t\tif(externalIdChecker.resolvesExternalIds()) {\n \t\t\t\tuser.checkPermission(DatasetPermission.onInstance(Ability.PRESERVE_ID, dataset.getId()));\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\t// Run the query on behalf of the user\n \t\tManagedExecution<?> mq = ExecutionManager.runQuery(storage, namespaces, query, user.getId(), dataset.getId());\n-\t\t\n+\n \t\t// Set abilities for submitted query\n \t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mq.getId()));\n \n@@ -86,19 +86,19 @@ public class QueryProcessor {\n \t\t\t\t|| targetNamespace.getDataset().equals(dataset)) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\t\n+\n \t\t\t// Ensure that user is allowed to read all sub-queries of the actual query.\n-\t\t\t\n+\n \t\t\tif (!translateable.collectRequiredQueries().stream()\n \t\t\t\t.allMatch(qid -> user.isPermitted(QueryPermission.onInstance(Ability.READ.asSet(), qid)))) {\n-\t\t\t\tcontinue;\t\t\t\t\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t\t\n+\n \t\t\ttry {\n \t\t\t\tDatasetId targetDataset = targetNamespace.getDataset().getId();\n \t\t\t\tIQuery translated = QueryTranslator.replaceDataset(namespaces, translateable, targetDataset);\n \t\t\t\tfinal ManagedExecution<?> mqTranslated = ExecutionManager.createQuery(storage, namespaces, translated, mq.getQueryId(), user.getId(), targetDataset);\n-\t\t\t\t\n+\n \t\t\t\tuser.addPermission(storage, QueryPermission.onInstance(AbilitySets.QUERY_CREATOR, mqTranslated.getId()));\n \t\t\t}\n \t\t\tcatch (Exception e) {\n",
            "diff_size": 9
        }
    ]
}