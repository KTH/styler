{
    "error_id": "183",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/183/VirtualInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/intellij/183/VirtualInstance.java\nindex f8e8d571d4..5ca8d603dc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/183/VirtualInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/intellij/183/VirtualInstance.java\n@@ -20,98 +20,111 @@ package com.cloudera.director.client.v1.model;\n \n \n public class VirtualInstance {\n-  /* Virtual instance id */\n-  private String id;\n-  /* Instance template */\n-  private InstanceTemplate template;\n-  public VirtualInstance() { }\n-\n-  private VirtualInstance(String id, InstanceTemplate template) {\n-    this.id = id;\n-    this.template = template;\n-  }\n-\n-  private VirtualInstance(VirtualInstanceBuilder builder) {\n-    this.id = builder.id;\n-    this.template = builder.template;\n-  }\n-\n-  public static VirtualInstanceBuilder builder() {\n-    return new VirtualInstanceBuilder();\n-  }\n-\n-  public static class VirtualInstanceBuilder {\n-    private String id = null;\n-    private InstanceTemplate template = null;\n-\n-    public VirtualInstanceBuilder id(String id) {\n-      this.id = id;\n-      return this;\n+    /* Virtual instance id */\n+    private String id;\n+    /* Instance template */\n+    private InstanceTemplate template;\n+\n+    public VirtualInstance() {\n+    }\n+\n+    private VirtualInstance(String id, InstanceTemplate template) {\n+        this.id = id;\n+        this.template = template;\n+    }\n+\n+    private VirtualInstance(VirtualInstanceBuilder builder) {\n+        this.id = builder.id;\n+        this.template = builder.template;\n+    }\n+\n+    public static VirtualInstanceBuilder builder() {\n+        return new VirtualInstanceBuilder();\n+    }\n+\n+    public static class VirtualInstanceBuilder {\n+        private String id = null;\n+        private InstanceTemplate template = null;\n+\n+        public VirtualInstanceBuilder id(String id) {\n+            this.id = id;\n+            return this;\n+        }\n+\n+        public VirtualInstanceBuilder template(InstanceTemplate template) {\n+            this.template = template;\n+            return this;\n+        }\n+\n+        public VirtualInstance build() {\n+            return new VirtualInstance(this);\n+        }\n+    }\n+\n+    public VirtualInstanceBuilder toBuilder() {\n+        return builder()\n+            .id(id)\n+            .template(template)\n+            ;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    public InstanceTemplate getTemplate() {\n+        return template;\n+    }\n+\n+    public void setTemplate(InstanceTemplate template) {\n+        this.template = template;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        VirtualInstance other = (VirtualInstance) o; // NOPMD\n+\n+        if (id != null ?\n+            !id.equals(other.id) :\n+            other.id != null) {\n+            return false;\n+        }\n+        if (template != null ?\n+            !template.equals(other.template) :\n+            other.template != null) {\n+            return false;\n+        }\n+        return true;\n     }\n \n-    public VirtualInstanceBuilder template(InstanceTemplate template) {\n-      this.template = template;\n-      return this;\n+    @Override\n+    public int hashCode() {\n+        int result = 0;\n+        result = 31 * result + (id != null ? id.hashCode() : 0);\n+        result = 31 * result + (template != null ? template.hashCode() : 0);\n+        return result;\n     }\n \n-    public VirtualInstance build() {\n-      return new VirtualInstance(this);\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        String newLine = System.getProperty(\"line.separator\");\n+        sb.append(\"class VirtualInstance {\" + newLine);\n+        sb.append(\"  id: \").append(id).append(newLine);\n+        sb.append(\"  template: \").append(template).append(newLine);\n+        sb.append(\"}\" + newLine);\n+        return sb.toString();\n     }\n-  }\n-\n-  public VirtualInstanceBuilder toBuilder() {\n-    return builder()\n-      .id(id)\n-      .template(template)\n-      ;\n-  }\n-  public String getId() {\n-    return id;\n-  }\n-  public void setId(String id) {\n-    this.id = id;\n-  }\n-\n-  public InstanceTemplate getTemplate() {\n-    return template;\n-  }\n-  public void setTemplate(InstanceTemplate template) {\n-    this.template = template;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    VirtualInstance other = (VirtualInstance) o; // NOPMD\n-\n-    if (id != null ?\n-        !id.equals(other.id) :\n-        other.id != null) return false;\n-    if (template != null ?\n-        !template.equals(other.template) :\n-        other.template != null) return false;\n-    return true;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    int result = 0;\n-    result = 31 * result + (id != null ? id.hashCode() : 0);\n-    result = 31 * result + (template != null ? template.hashCode() : 0);\n-    return result;\n-  }\n-\n-  @Override\n-  public String toString()  {\n-    StringBuilder sb = new StringBuilder();\n-    String newLine = System.getProperty(\"line.separator\");\n-    sb.append(\"class VirtualInstance {\" + newLine);\n-    sb.append(\"  id: \").append(id).append(newLine);\n-    sb.append(\"  template: \").append(template).append(newLine);\n-    sb.append(\"}\" + newLine);\n-    return sb.toString();\n-  }\n }\n \n",
            "diff_size": 157
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "77",
                    "column": "20",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/183/VirtualInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/naturalize/183/VirtualInstance.java\nindex f8e8d571d4..6bfc7de3cb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/183/VirtualInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/naturalize/183/VirtualInstance.java\n@@ -1,30 +1,15 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.v1.model;\n \n-\n public class VirtualInstance {\n   /* Virtual instance id */\n   private String id;\n   /* Instance template */\n   private InstanceTemplate template;\n-  public VirtualInstance() { }\n+\n+public VirtualInstance() { }\n \n   private VirtualInstance(String id, InstanceTemplate template) {\n     this.id = id;\n@@ -41,7 +26,8 @@ public class VirtualInstance {\n   }\n \n   public static class VirtualInstanceBuilder {\n-    private String id = null;\n+\n+  private String id = null;\n     private InstanceTemplate template = null;\n \n     public VirtualInstanceBuilder id(String id) {\n@@ -60,12 +46,11 @@ public class VirtualInstance {\n   }\n \n   public VirtualInstanceBuilder toBuilder() {\n-    return builder()\n-      .id(id)\n-      .template(template)\n-      ;\n+    return builder().id(id)\n+      .template(template);\n   }\n-  public String getId() {\n+\n+public String getId() {\n     return id;\n   }\n   public void setId(String id) {\n@@ -82,16 +67,16 @@ public class VirtualInstance {\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (o == null ||\n+getClass() != o.getClass()) return false;\n+\n+    VirtualInstance other = (VirtualInstance) o;\n \n-    VirtualInstance other = (VirtualInstance) o; // NOPMD\n+// NOPMD\n \n-    if (id != null ?\n-        !id.equals(other.id) :\n-        other.id != null) return false;\n-    if (template != null ?\n-        !template.equals(other.template) :\n-        other.template != null) return false;\n+    if (id != null ?!id.equals(other.id) : other.id != null) return false;\n+\n+if (template != null ?!template.equals(other.template) : other.template != null) return false;\n     return true;\n   }\n \n@@ -104,7 +89,7 @@ public class VirtualInstance {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class VirtualInstance {\" + newLine);\n@@ -113,5 +98,4 @@ public class VirtualInstance {\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "30",
                    "column": "30",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "30",
                    "column": "31",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "96",
                    "column": "45",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "98",
                    "column": "19",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "19",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "40",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "100",
                    "column": "25",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "100",
                    "column": "25",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "100",
                    "column": "58",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "column": "17",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "column": "38",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "column": "53",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "17",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "44",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "65",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/183/VirtualInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/codebuff/183/VirtualInstance.java\nindex f8e8d571d4..583e99ef1f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/183/VirtualInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/codebuff/183/VirtualInstance.java\n@@ -18,93 +18,101 @@\n \n package com.cloudera.director.client.v1.model;\n \n-\n public class VirtualInstance {\n   /* Virtual instance id */\n-  private String id;\n+\n+    private String id;\n   /* Instance template */\n-  private InstanceTemplate template;\n-  public VirtualInstance() { }\n \n-  private VirtualInstance(String id, InstanceTemplate template) {\n-    this.id = id;\n-    this.template = template;\n-  }\n+    private InstanceTemplate template;\n \n-  private VirtualInstance(VirtualInstanceBuilder builder) {\n-    this.id = builder.id;\n-    this.template = builder.template;\n-  }\n \n-  public static VirtualInstanceBuilder builder() {\n+    public VirtualInstance() {}\n+\n+    private VirtualInstance(String id, InstanceTemplate template) {\n+                                                                  this.id = id;\n+                                                                  this.template = template;\n+                             }\n+\n+    private VirtualInstance(VirtualInstanceBuilder builder) {\n+                                                            this.id = builder.id;\n+                                                            this.template = builder.template;\n+                             }\n+\n+    public static VirtualInstanceBuilder builder() {\n     return new VirtualInstanceBuilder();\n-  }\n+    }\n+\n+    public static class VirtualInstanceBuilder {\n \n-  public static class VirtualInstanceBuilder {\n     private String id = null;\n+\n     private InstanceTemplate template = null;\n \n     public VirtualInstanceBuilder id(String id) {\n-      this.id = id;\n-      return this;\n+        this.id = id;\n+        return this;\n     }\n \n     public VirtualInstanceBuilder template(InstanceTemplate template) {\n-      this.template = template;\n-      return this;\n+        this.template = template;\n+        return this;\n     }\n \n     public VirtualInstance build() {\n-      return new VirtualInstance(this);\n+        return new VirtualInstance(this);\n     }\n-  }\n-\n-  public VirtualInstanceBuilder toBuilder() {\n-    return builder()\n-      .id(id)\n-      .template(template)\n-      ;\n-  }\n-  public String getId() {\n+    }\n+\n+    public VirtualInstanceBuilder toBuilder() {\n+    return builder().id(id)\n+                    .template(template);\n+    }\n+\n+    public String getId() {\n     return id;\n-  }\n-  public void setId(String id) {\n+    }\n+\n+    public void setId(String id) {\n     this.id = id;\n-  }\n+    }\n \n-  public InstanceTemplate getTemplate() {\n+    public InstanceTemplate getTemplate() {\n     return template;\n-  }\n-  public void setTemplate(InstanceTemplate template) {\n+    }\n+\n+    public void setTemplate(InstanceTemplate template) {\n     this.template = template;\n-  }\n+    }\n+\n \n-  @Override\n-  public boolean equals(Object o) {\n+    @Override\n+    public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n \n-    VirtualInstance other = (VirtualInstance) o; // NOPMD\n+    if (o == null ||\n+        getClass() != o.getClass()) return false;\n+\n+    VirtualInstance other = (VirtualInstance)o; // NOPMD\n \n-    if (id != null ?\n-        !id.equals(other.id) :\n-        other.id != null) return false;\n-    if (template != null ?\n-        !template.equals(other.template) :\n-        other.template != null) return false;\n+    if (id != null?!id.equals(other.id): other.id != null) return false;\n+\n+    if (template != null?!template.equals(other.template): other.template != null) return false;\n     return true;\n-  }\n+    }\n \n-  @Override\n-  public int hashCode() {\n+\n+    @Override\n+    public int hashCode() {\n     int result = 0;\n-    result = 31 * result + (id != null ? id.hashCode() : 0);\n-    result = 31 * result + (template != null ? template.hashCode() : 0);\n+    result = 31 *result + (id != null? id.hashCode(): 0);\n+    result = 31 *result + (template != null? template.hashCode(): 0);\n     return result;\n-  }\n+    }\n \n-  @Override\n-  public String toString()  {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class VirtualInstance {\" + newLine);\n@@ -112,6 +120,5 @@ public class VirtualInstance {\n     sb.append(\"  template: \").append(template).append(newLine);\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n-  }\n-}\n-\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 81
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}