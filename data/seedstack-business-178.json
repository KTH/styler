{
    "error_id": "178",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.data;\n\nimport static java.util.stream.Collectors.toSet;\nimport static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/178/DataPlugin.java\nindex 56c3a29c01..89c90cd8f9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/178/DataPlugin.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.data;\n+\n+package org .seedstack.business.internal.data;\n \n import static java.util.stream.Collectors.toSet;\n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/178/DataPlugin.java\nindex 56c3a29c01..812a555771 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/178/DataPlugin.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.data;\n \n import static java.util.stream.Collectors.toSet;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 8, indentation should be the same level as line 109.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "135",
                    "column": "38",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "157",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "158",
                    "column": "38",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/178/DataPlugin.java\nindex 56c3a29c01..601bd85ac0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/178/DataPlugin.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.data;\n \n import static java.util.stream.Collectors.toSet;\n@@ -89,8 +90,7 @@ public class DataPlugin extends AbstractSeedPlugin {\n                 .forEach(exporterClasses::add);\n         LOGGER.debug(\"Data exporters => {}\", exporterClasses);\n \n-        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_SET), Object.class).forEach(\n-                dataClasses::add);\n+        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_SET), Object.class).forEach(dataClasses::add);\n         LOGGER.debug(\"DTO classes with default importer/exporter => {}\", dataClasses);\n \n         // Add bindings for explicit data importers/exporters\n@@ -105,12 +105,10 @@ public class DataPlugin extends AbstractSeedPlugin {\n         Set<Class<?>> classesWithExplicitExporter = exporterClasses.stream()\n                 .map(exporterClass -> (Class<?>) BusinessUtils.resolveGenerics(DataExporter.class, exporterClass)[0])\n                 .collect(toSet());\n-\n-        // Then add bindings for default data importers/exporters\n+// Then add bindings for default data importers/exporters\n         bindingStrategies.addAll(new DefaultDataCollector(classesWithExplicitImporter, classesWithExplicitExporter)\n                 .collect(dataClasses));\n-\n-        buildImporterDefs(classesWithExplicitImporter);\n+buildImporterDefs(classesWithExplicitImporter);\n         buildExporterDefs(classesWithExplicitExporter);\n \n         return InitState.INITIALIZED;\n@@ -121,8 +119,7 @@ public class DataPlugin extends AbstractSeedPlugin {\n         dataClasses.stream()\n                 .filter(dataSetClass -> !classesWithExplicitImporter.contains(dataSetClass))\n                 .forEach(this::buildImporterDef);\n-\n-        for (Class<? extends DataImporter> importerClass : importerClasses) {\n+    for (Class<? extends DataImporter> importerClass : importerClasses) {\n             Class<?> importedClass = (Class<?>) BusinessUtils.resolveGenerics(DataImporter.class, importerClass)[0];\n             if (importedClass == null) {\n                 throw SeedException.createNew(DataErrorCode.MISSING_TYPE_PARAMETER)\n@@ -134,13 +131,10 @@ public class DataPlugin extends AbstractSeedPlugin {\n \n     private void buildImporterDef(Class<?> importedClass) {\n         DataSet dataSet = importedClass.getAnnotation(DataSet.class);\n-        String group = dataSet == null ? getPackageName(importedClass) : dataSet.group();\n-        String name = dataSet == null ? importedClass.getSimpleName() : dataSet.name();\n+        String group = dataSet == null? getPackageName(importedClass) : dataSet.group();\n+        String name = dataSet == null? importedClass.getSimpleName() : dataSet.name();\n         importerDefs.computeIfAbsent(group, k -> new HashMap<>())\n-                .put(name, new DataImporterDefinition<>(\n-                        group,\n-                        name,\n-                        importedClass));\n+                .put(name, new DataImporterDefinition<>(group, name, importedClass));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -148,8 +142,7 @@ public class DataPlugin extends AbstractSeedPlugin {\n         dataClasses.stream()\n                 .filter(dataSetClass -> !classesWithExplicitExporter.contains(dataSetClass))\n                 .forEach(this::buildExporterDef);\n-\n-        for (Class<? extends DataExporter> exporterClass : exporterClasses) {\n+    for (Class<? extends DataExporter> exporterClass : exporterClasses) {\n             Class<?> exportedClass = (Class<?>) BusinessUtils.resolveGenerics(DataExporter.class, exporterClass)[0];\n             if (exportedClass == null) {\n                 throw SeedException.createNew(DataErrorCode.MISSING_TYPE_PARAMETER)\n@@ -161,13 +154,10 @@ public class DataPlugin extends AbstractSeedPlugin {\n \n     private void buildExporterDef(Class<?> exportedClass) {\n         DataSet dataSet = exportedClass.getAnnotation(DataSet.class);\n-        String group = dataSet == null ? getPackageName(exportedClass) : dataSet.group();\n-        String name = dataSet == null ? exportedClass.getSimpleName() : dataSet.name();\n+        String group = dataSet == null? getPackageName(exportedClass) : dataSet.group();\n+        String name = dataSet == null? exportedClass.getSimpleName() : dataSet.name();\n         exporterDefs.computeIfAbsent(group, k -> new HashMap<>())\n-                .put(name, new DataExporterDefinition<>(\n-                        group,\n-                        name,\n-                        exportedClass));\n+                .put(name, new DataExporterDefinition<>(group, name, exportedClass));\n     }\n \n     private String getPackageName(Class<?> someClass) {\n@@ -193,18 +183,16 @@ public class DataPlugin extends AbstractSeedPlugin {\n     public void start(Context context) {\n         BusinessConfig.DataConfig dataConfig = getConfiguration(BusinessConfig.DataConfig.class);\n         ClassLoader classLoader = ClassLoaders.findMostCompleteClassLoader(DataPlugin.class);\n-\n-        if (dataConfig.isImportOnStart()) {\n+if (dataConfig.isImportOnStart()) {\n             for (Map<String, DataImporterDefinition<?>> dataImporterDefinitionMap : importerDefs.values()) {\n                 for (DataImporterDefinition<?> dataImporterDefinition : dataImporterDefinitionMap.values()) {\n                     String dataPath = String.format(\"META-INF/data/%s/%s.json\", dataImporterDefinition.getGroup(),\n                             dataImporterDefinition.getName());\n                     InputStream dataStream = classLoader.getResourceAsStream(dataPath);\n-\n-                    if (dataStream != null) {\n+if (dataStream != null) {\n                         if (!dataManager.isInitialized(dataImporterDefinition.getGroup(),\n                                 dataImporterDefinition.getName()) || dataConfig.isForceImport()) {\n-                            LOGGER.info(\"Importing initialization data for {}.{}\", dataImporterDefinition.getGroup(),\n+    LOGGER.info(\"Importing initialization data for {}.{}\", dataImporterDefinition.getGroup(),\n                                     dataImporterDefinition.getName());\n                             dataManager.importData(dataStream, dataImporterDefinition.getGroup(),\n                                     dataImporterDefinition.getName());\n@@ -220,4 +208,4 @@ public class DataPlugin extends AbstractSeedPlugin {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "column": "120",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "column": "120",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "column": "95",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "column": "95",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "column": "49",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "127",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "38",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "column": "46",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "134",
                    "column": "49",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "137",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "150",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "column": "38",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "column": "46",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "182",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "182",
                    "column": "106",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "17",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "183",
                    "column": "107",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'dataImporterDefinition' has incorrect indentation level 24, expected level should be 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "column": "125",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "'dataImporterDefinition' has incorrect indentation level 0, expected level should be 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "'dataImporterDefinition' has incorrect indentation level 0, expected level should be 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "'dataImporterDefinition' has incorrect indentation level 0, expected level should be 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "196",
                    "severity": "warning",
                    "message": "'dataImporterDefinition' has incorrect indentation level 0, expected level should be 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "202",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "202",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/178/DataPlugin.java\nindex 56c3a29c01..c133a2f71c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/178/DataPlugin.java\n@@ -8,9 +8,10 @@\n package org.seedstack.business.internal.data;\n \n import static java.util.stream.Collectors.toSet;\n+\n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n-import static org.seedstack.business.internal.utils.PluginUtils.associateInterfaceToImplementations;\n \n+import static org.seedstack.business.internal.utils.PluginUtils.associateInterfaceToImplementations;\n import com.google.common.collect.Lists;\n import com.google.inject.Key;\n import io.nuun.kernel.api.plugin.InitState;\n@@ -42,7 +43,9 @@ import org.seedstack.shed.ClassLoaders;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public class DataPlugin extends AbstractSeedPlugin {\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(DataPlugin.class);\n     private final Map<String, Map<String, DataImporterDefinition<?>>> importerDefs = new HashMap<>();\n     private final Map<String, Map<String, DataExporterDefinition<?>>> exporterDefs = new HashMap<>();\n@@ -54,7 +57,6 @@ public class DataPlugin extends AbstractSeedPlugin {\n     private final Collection<BindingStrategy> bindingStrategies = new ArrayList<>();\n     @Inject\n     private DataManager dataManager;\n-\n     @Override\n     public String name() {\n         return \"business-data\";\n@@ -67,30 +69,24 @@ public class DataPlugin extends AbstractSeedPlugin {\n \n     @Override\n     public Collection<ClasspathScanRequest> classpathScanRequests() {\n-        return classpathScanRequestBuilder()\n-                .specification(BusinessSpecifications.DATA_IMPORTER)\n-                .specification(BusinessSpecifications.DATA_EXPORTER)\n-                .specification(BusinessSpecifications.DATA_SET)\n-                .build();\n+        return classpathScanRequestBuilder().specification(BusinessSpecifications.DATA_IMPORTER)\n+.specification(BusinessSpecifications.DATA_EXPORTER)\n+.specification(BusinessSpecifications.DATA_SET)\n+.build();\n     }\n \n-    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-    @Override\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"}) @Override\n     public InitState initialize(InitContext initContext) {\n         Map<Specification, Collection<Class<?>>> classesBySpec = initContext.scannedTypesBySpecification();\n-\n-        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_IMPORTER), DataImporter.class)\n-                .filter(importerClass -> !DefaultDataImporter.class.isAssignableFrom(importerClass))\n-                .forEach(importerClasses::add);\n+        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_IMPORTER), DataImporter.class).filter(importerClass->\n+                                                                                                          ! DefaultDataImporter.class\n+                                                                                                              .isAssignableFrom(importerClass)).forEach(importerClasses::add);\n         LOGGER.debug(\"Data importers => {}\", importerClasses);\n-\n-        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_EXPORTER), DataExporter.class)\n-                .filter(exporterClass -> !DefaultDataExporter.class.isAssignableFrom(exporterClass))\n-                .forEach(exporterClasses::add);\n+        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_EXPORTER), DataExporter.class).filter(exporterClass->\n+                                                                                                          ! DefaultDataExporter.class\n+                                                                                                              .isAssignableFrom(exporterClass)).forEach(exporterClasses::add);\n         LOGGER.debug(\"Data exporters => {}\", exporterClasses);\n-\n-        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_SET), Object.class).forEach(\n-                dataClasses::add);\n+        streamClasses(classesBySpec.get(BusinessSpecifications.DATA_SET), Object.class).forEach(dataClasses::add);\n         LOGGER.debug(\"DTO classes with default importer/exporter => {}\", dataClasses);\n \n         // Add bindings for explicit data importers/exporters\n@@ -98,78 +94,66 @@ public class DataPlugin extends AbstractSeedPlugin {\n         overridingBindings.putAll(associateInterfaceToImplementations(DataImporter.class, importerClasses, true));\n         bindings.putAll(associateInterfaceToImplementations(DataExporter.class, exporterClasses, false));\n         overridingBindings.putAll(associateInterfaceToImplementations(DataExporter.class, exporterClasses, true));\n+        Set<Class<?>> classesWithExplicitImporter = importerClasses.stream().map(importerClass-> (Class<?>) BusinessUtils.resolveGenerics(DataImporter.class, importerClass)[0])\n+.collect(toSet());\n \n-        Set<Class<?>> classesWithExplicitImporter = importerClasses.stream()\n-                .map(importerClass -> (Class<?>) BusinessUtils.resolveGenerics(DataImporter.class, importerClass)[0])\n-                .collect(toSet());\n-        Set<Class<?>> classesWithExplicitExporter = exporterClasses.stream()\n-                .map(exporterClass -> (Class<?>) BusinessUtils.resolveGenerics(DataExporter.class, exporterClass)[0])\n-                .collect(toSet());\n+        Set<Class<?>> classesWithExplicitExporter = exporterClasses.stream().map(exporterClass-> (Class<?>) BusinessUtils.resolveGenerics(DataExporter.class, exporterClass)[0])\n+.collect(toSet());\n \n         // Then add bindings for default data importers/exporters\n-        bindingStrategies.addAll(new DefaultDataCollector(classesWithExplicitImporter, classesWithExplicitExporter)\n-                .collect(dataClasses));\n-\n+        bindingStrategies.addAll(new DefaultDataCollector(classesWithExplicitImporter, classesWithExplicitExporter).collect(dataClasses));\n         buildImporterDefs(classesWithExplicitImporter);\n         buildExporterDefs(classesWithExplicitExporter);\n-\n         return InitState.INITIALIZED;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private void buildImporterDefs(Set<Class<?>> classesWithExplicitImporter) {\n-        dataClasses.stream()\n-                .filter(dataSetClass -> !classesWithExplicitImporter.contains(dataSetClass))\n-                .forEach(this::buildImporterDef);\n-\n-        for (Class<? extends DataImporter> importerClass : importerClasses) {\n+    @SuppressWarnings(\"unchecked\") private void buildImporterDefs(Set<Class<?>> classesWithExplicitImporter) {\n+        dataClasses.stream().filter(dataSetClass->\n+                                    ! classesWithExplicitImporter.contains(dataSetClass)).forEach(this\n+                                        ::buildImporterDef);\n+        for(Class<? extends DataImporter> importerClass : importerClasses) {\n             Class<?> importedClass = (Class<?>) BusinessUtils.resolveGenerics(DataImporter.class, importerClass)[0];\n             if (importedClass == null) {\n-                throw SeedException.createNew(DataErrorCode.MISSING_TYPE_PARAMETER)\n-                        .put(\"class\", importerClass);\n+                throw SeedException.createNew(DataErrorCode.MISSING_TYPE_PARAMETER).put(\"class\", importerClass);\n             }\n             buildImporterDef(importedClass);\n         }\n     }\n \n+\n     private void buildImporterDef(Class<?> importedClass) {\n         DataSet dataSet = importedClass.getAnnotation(DataSet.class);\n-        String group = dataSet == null ? getPackageName(importedClass) : dataSet.group();\n-        String name = dataSet == null ? importedClass.getSimpleName() : dataSet.name();\n-        importerDefs.computeIfAbsent(group, k -> new HashMap<>())\n-                .put(name, new DataImporterDefinition<>(\n-                        group,\n-                        name,\n-                        importedClass));\n-    }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private void buildExporterDefs(Set<Class<?>> classesWithExplicitExporter) {\n-        dataClasses.stream()\n-                .filter(dataSetClass -> !classesWithExplicitExporter.contains(dataSetClass))\n-                .forEach(this::buildExporterDef);\n+        String group = dataSet == null? getPackageName(importedClass) : dataSet.group();\n+\n+        String name = dataSet == null? importedClass.getSimpleName() : dataSet.name();\n+        importerDefs.computeIfAbsent(group, k-> new HashMap<>()).put(name, new DataImporterDefinition<>(group, name, importedClass));\n+    }\n \n-        for (Class<? extends DataExporter> exporterClass : exporterClasses) {\n+    @SuppressWarnings(\"unchecked\") private void buildExporterDefs(Set<Class<?>> classesWithExplicitExporter) {\n+        dataClasses.stream().filter(dataSetClass->\n+                                    ! classesWithExplicitExporter.contains(dataSetClass)).forEach(this\n+                                        ::buildExporterDef);\n+        for(Class<? extends DataExporter> exporterClass : exporterClasses) {\n             Class<?> exportedClass = (Class<?>) BusinessUtils.resolveGenerics(DataExporter.class, exporterClass)[0];\n             if (exportedClass == null) {\n-                throw SeedException.createNew(DataErrorCode.MISSING_TYPE_PARAMETER)\n-                        .put(\"class\", exporterClass);\n+                throw SeedException.createNew(DataErrorCode.MISSING_TYPE_PARAMETER).put(\"class\", exporterClass);\n             }\n             buildExporterDef(exportedClass);\n         }\n     }\n \n+\n     private void buildExporterDef(Class<?> exportedClass) {\n         DataSet dataSet = exportedClass.getAnnotation(DataSet.class);\n-        String group = dataSet == null ? getPackageName(exportedClass) : dataSet.group();\n-        String name = dataSet == null ? exportedClass.getSimpleName() : dataSet.name();\n-        exporterDefs.computeIfAbsent(group, k -> new HashMap<>())\n-                .put(name, new DataExporterDefinition<>(\n-                        group,\n-                        name,\n-                        exportedClass));\n+\n+        String group = dataSet == null? getPackageName(exportedClass) : dataSet.group();\n+\n+        String name = dataSet == null? exportedClass.getSimpleName() : dataSet.name();\n+        exporterDefs.computeIfAbsent(group, k-> new HashMap<>()).put(name, new DataExporterDefinition<>(group, name, exportedClass));\n     }\n \n+\n     private String getPackageName(Class<?> someClass) {\n         String className = someClass.getName();\n         if (className.contains(\".\")) {\n@@ -192,27 +176,30 @@ public class DataPlugin extends AbstractSeedPlugin {\n     @Override\n     public void start(Context context) {\n         BusinessConfig.DataConfig dataConfig = getConfiguration(BusinessConfig.DataConfig.class);\n-        ClassLoader classLoader = ClassLoaders.findMostCompleteClassLoader(DataPlugin.class);\n \n+        ClassLoader classLoader = ClassLoaders.findMostCompleteClassLoader(DataPlugin.class);\n         if (dataConfig.isImportOnStart()) {\n-            for (Map<String, DataImporterDefinition<?>> dataImporterDefinitionMap : importerDefs.values()) {\n-                for (DataImporterDefinition<?> dataImporterDefinition : dataImporterDefinitionMap.values()) {\n-                    String dataPath = String.format(\"META-INF/data/%s/%s.json\", dataImporterDefinition.getGroup(),\n+            for(Map<String, DataImporterDefinition<?>> dataImporterDefinitionMap : importerDefs.values() ) {\n+                for(DataImporterDefinition<?> dataImporterDefinition : dataImporterDefinitionMap.values() ) {\n+                    String dataPath = String.format(\"META-INF/data/%s/%s.json\",\n+                        dataImporterDefinition.getGroup(),\n                             dataImporterDefinition.getName());\n-                    InputStream dataStream = classLoader.getResourceAsStream(dataPath);\n \n+                    InputStream dataStream = classLoader.getResourceAsStream(dataPath);\n                     if (dataStream != null) {\n-                        if (!dataManager.isInitialized(dataImporterDefinition.getGroup(),\n-                                dataImporterDefinition.getName()) || dataConfig.isForceImport()) {\n-                            LOGGER.info(\"Importing initialization data for {}.{}\", dataImporterDefinition.getGroup(),\n-                                    dataImporterDefinition.getName());\n-                            dataManager.importData(dataStream, dataImporterDefinition.getGroup(),\n-                                    dataImporterDefinition.getName());\n+                        if (! dataManager.isInitialized(dataImporterDefinition.getGroup(), dataImporterDefinition.getName())|| dataConfig.isForceImport()) {\n+                            LOGGER.info(\"Importing initialization data for {}.{}\",\n+dataImporterDefinition.getGroup(),\n+dataImporterDefinition.getName());\n+                            dataManager.importData(dataStream,\n+dataImporterDefinition.getGroup(),\n+dataImporterDefinition.getName());\n                         }\n-\n                         try {\n                             dataStream.close();\n-                        } catch (IOException e) {\n+                        }\n+\n+catch(IOException e) {\n                             LOGGER.warn(\"Unable to close data resource \" + dataPath, e);\n                         }\n                     }\n@@ -220,4 +207,4 @@ public class DataPlugin extends AbstractSeedPlugin {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 95
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/178/DataPlugin.java\nindex 56c3a29c01..89c90cd8f9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/178/DataPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/178/DataPlugin.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.data;\n+\n+package org .seedstack.business.internal.data;\n \n import static java.util.stream.Collectors.toSet;\n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}