{
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.domain;\n\nimport static javassist.bytecode.annotation.Annotation.createMemberValue;\nimport static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/41/DefaultRepositoryGenerator.java\nindex 3e2ea70d21..d952589edb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/41/DefaultRepositoryGenerator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static javassist.bytecode.annotation.Annotation.createMemberValue;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/41/DefaultRepositoryGenerator.java\nindex 3e2ea70d21..c20280c896 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/41/DefaultRepositoryGenerator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static javassist.bytecode.annotation.Annotation.createMemberValue;\n@@ -63,7 +64,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n \n             cc.setModifiers(Modifier.PUBLIC);\n \n-            cc.setInterfaces(new CtClass[]{classPool.getCtClass(repositoryInterface.getName())});\n+            cc.setInterfaces(new CtClass[] {classPool.getCtClass(repositoryInterface.getName())});\n \n             if (hasGenericConstructor(baseImpl)) {\n                 cc.addConstructor(createConstructor(constPool, cc));\n@@ -86,7 +87,8 @@ class DefaultRepositoryGenerator<T extends Repository> {\n     }\n \n     private AnnotationsAttribute createQualifierAttribute(ConstPool constPool,\n-            java.lang.annotation.Annotation qualifier) throws NotFoundException {\n+                                                          java.lang.annotation.Annotation qualifier)\n+            throws NotFoundException {\n         AnnotationsAttribute attr = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n         attr.setAnnotation(copyAnnotation(constPool, qualifier));\n         return attr;\n@@ -107,7 +109,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n     }\n \n     private Annotation copyAnnotation(ConstPool constPool,\n-            java.lang.annotation.Annotation annotation) throws NotFoundException {\n+                                      java.lang.annotation.Annotation annotation) throws NotFoundException {\n         // Create annotation from specified type\n         Annotation byteCodeAnnotation = createAnnotation(\n                 constPool,\n@@ -123,7 +125,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n             );\n \n             invoke(from(memberValue.getClass())\n-                            .method(\"setValue\", new Class[]{value.getClass()})\n+                            .method(\"setValue\", new Class[] {value.getClass()})\n                             .orElseThrow(() -> new NotFoundException(\"Cannot copy value of qualifier parameter \"\n                                     + m.getName())),\n                     memberValue,\n@@ -139,7 +141,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n     }\n \n     private Annotation createAnnotation(ConstPool constPool,\n-            Class<? extends java.lang.annotation.Annotation> annotationType) {\n+                                        Class<? extends java.lang.annotation.Annotation> annotationType) {\n         return new Annotation(\n                 annotationType.getName(),\n                 constPool\n@@ -161,7 +163,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n \n     private CtConstructor createConstructor(ConstPool constPool, CtClass declaringClass) throws NotFoundException,\n             CannotCompileException {\n-        CtConstructor cc = new CtConstructor(new CtClass[]{\n+        CtConstructor cc = new CtConstructor(new CtClass[] {\n                 declaringClass.getClassPool().getCtClass(Object.class.getName() + \"[]\")\n         }, declaringClass);\n \n@@ -187,7 +189,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n     private void addAssistedAnnotation(ConstPool constPool, CtConstructor cc) {\n         ParameterAnnotationsAttribute attribute = new ParameterAnnotationsAttribute(constPool,\n                 ParameterAnnotationsAttribute.visibleTag);\n-        attribute.setAnnotations(new Annotation[][]{{createAnnotation(constPool, Assisted.class)}});\n+        attribute.setAnnotations(new Annotation[][] {{createAnnotation(constPool, Assisted.class)}});\n         cc.getMethodInfo().addAttribute(attribute);\n     }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'baseImpl' has incorrect indentation level 8, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 102.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'declaringClass' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "163",
                    "severity": "warning",
                    "message": "'array initialization rcurly' has incorrect indentation level 4, expected level should be one of the following: 8, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/41/DefaultRepositoryGenerator.java\nindex 3e2ea70d21..e9becc5888 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/41/DefaultRepositoryGenerator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static javassist.bytecode.annotation.Annotation.createMemberValue;\n@@ -54,18 +55,15 @@ class DefaultRepositoryGenerator<T extends Repository> {\n \n     Class<? extends T> generate(Class<? extends Repository> baseImpl) {\n         try {\n-            CtClass cc = createClass(\n-                    getClassName(baseImpl, getCounter(repositoryInterface).incrementAndGet()),\n-                    baseImpl\n-            );\n+            CtClass cc = createClass(getClassName(baseImpl, getCounter(repositoryInterface).incrementAndGet()),\n+        baseImpl);\n             ClassFile cf = cc.getClassFile();\n             ConstPool constPool = cf.getConstPool();\n \n             cc.setModifiers(Modifier.PUBLIC);\n \n             cc.setInterfaces(new CtClass[]{classPool.getCtClass(repositoryInterface.getName())});\n-\n-            if (hasGenericConstructor(baseImpl)) {\n+if (hasGenericConstructor(baseImpl)) {\n                 cc.addConstructor(createConstructor(constPool, cc));\n             } else {\n                 cc.addConstructor(createDefaultConstructor(cc));\n@@ -74,10 +72,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n             cf.addAttribute(createQualifierAttribute(constPool, getQualifier(baseImpl)\n                     .orElseThrow(() -> new NotFoundException(\"Qualifier annotation not found\"))));\n \n-            return cast(cc.toClass(\n-                    classLoader,\n-                    DefaultRepositoryCollector.class.getProtectionDomain())\n-            );\n+return cast(cc.toClass(classLoader, DefaultRepositoryCollector.class.getProtectionDomain()));\n         } catch (CannotCompileException | NotFoundException e) {\n             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_CREATE_DEFAULT_IMPLEMENTATION)\n                     .put(\"interface\", repositoryInterface)\n@@ -87,7 +82,7 @@ class DefaultRepositoryGenerator<T extends Repository> {\n \n     private AnnotationsAttribute createQualifierAttribute(ConstPool constPool,\n             java.lang.annotation.Annotation qualifier) throws NotFoundException {\n-        AnnotationsAttribute attr = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n+    AnnotationsAttribute attr = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n         attr.setAnnotation(copyAnnotation(constPool, qualifier));\n         return attr;\n     }\n@@ -97,53 +92,33 @@ class DefaultRepositoryGenerator<T extends Repository> {\n     }\n \n     private String getClassName(Class<? extends Repository> defaultRepositoryImplementation, int generation) {\n-        return GENERATED_PACKAGE_NAME\n-                + \".\"\n-                + repositoryInterface.getSimpleName()\n-                + \"_\"\n-                + defaultRepositoryImplementation.getSimpleName()\n-                + \"_\"\n-                + generation;\n+        return GENERATED_PACKAGE_NAME + \".\" + repositoryInterface.getSimpleName() + \"_\" + defaultRepositoryImplementation.getSimpleName() + \"_\" + generation;\n     }\n \n     private Annotation copyAnnotation(ConstPool constPool,\n             java.lang.annotation.Annotation annotation) throws NotFoundException {\n-        // Create annotation from specified type\n-        Annotation byteCodeAnnotation = createAnnotation(\n-                constPool,\n-                annotation.annotationType()\n-        );\n+\n+    // Create annotation from specified type\n+        Annotation byteCodeAnnotation = createAnnotation(constPool, annotation.annotationType());\n \n         // Copy annotation methods\n         for (Method m : annotation.annotationType().getDeclaredMethods()) {\n             Object value = invoke(m, annotation);\n-            MemberValue memberValue = createMemberValue(\n-                    constPool,\n-                    classPool.get(value.getClass().getName())\n-            );\n-\n-            invoke(from(memberValue.getClass())\n-                            .method(\"setValue\", new Class[]{value.getClass()})\n-                            .orElseThrow(() -> new NotFoundException(\"Cannot copy value of qualifier parameter \"\n-                                    + m.getName())),\n-                    memberValue,\n-                    value);\n-\n-            byteCodeAnnotation.addMemberValue(\n-                    m.getName(),\n-                    memberValue\n-            );\n+            MemberValue memberValue = createMemberValue(constPool, classPool.get(value.getClass().getName()));\n+\n+            invoke(from(memberValue.getClass()).method(\"setValue\", new Class[]{value.getClass()})\n+                            .orElseThrow(() -> new NotFoundException(\"Cannot copy value of qualifier parameter \" + m.getName())),\n+        memberValue, value);\n+        byteCodeAnnotation.addMemberValue(m.getName(),\n+        memberValue);\n         }\n \n         return byteCodeAnnotation;\n     }\n \n-    private Annotation createAnnotation(ConstPool constPool,\n-            Class<? extends java.lang.annotation.Annotation> annotationType) {\n-        return new Annotation(\n-                annotationType.getName(),\n-                constPool\n-        );\n+    private Annotation createAnnotation(ConstPool constPool, Class<? extends java.lang.annotation.Annotation> annotationType) {\n+    return new Annotation(annotationType.getName(),\n+        constPool);\n     }\n \n     private boolean hasGenericConstructor(Class<? extends Repository> baseImpl) {\n@@ -154,16 +129,13 @@ class DefaultRepositoryGenerator<T extends Repository> {\n             return false;\n         }\n     }\n-\n-    private CtConstructor createDefaultConstructor(CtClass declaringClass) throws CannotCompileException {\n+private CtConstructor createDefaultConstructor(CtClass declaringClass) throws CannotCompileException {\n         return CtNewConstructor.defaultConstructor(declaringClass);\n     }\n \n-    private CtConstructor createConstructor(ConstPool constPool, CtClass declaringClass) throws NotFoundException,\n-            CannotCompileException {\n-        CtConstructor cc = new CtConstructor(new CtClass[]{\n-                declaringClass.getClassPool().getCtClass(Object.class.getName() + \"[]\")\n-        }, declaringClass);\n+    private CtConstructor createConstructor(ConstPool constPool, CtClass declaringClass) throws NotFoundException, CannotCompileException {\n+    CtConstructor cc = new CtConstructor(new CtClass[]{\n+    declaringClass.getClassPool().getCtClass(Object.class.getName() + \"[]\")}, declaringClass);\n \n         // Define the constructor behavior\n         cc.setBody(\"super($1);\");\n@@ -187,11 +159,12 @@ class DefaultRepositoryGenerator<T extends Repository> {\n     private void addAssistedAnnotation(ConstPool constPool, CtConstructor cc) {\n         ParameterAnnotationsAttribute attribute = new ParameterAnnotationsAttribute(constPool,\n                 ParameterAnnotationsAttribute.visibleTag);\n-        attribute.setAnnotations(new Annotation[][]{{createAnnotation(constPool, Assisted.class)}});\n+        attribute.setAnnotations(new Annotation[][]{{createAnnotation(constPool, Assisted.class)}\n+    });\n         cc.getMethodInfo().addAttribute(attribute);\n     }\n \n     private static AtomicInteger getCounter(Class<?> repositoryInterface) {\n         return counters.computeIfAbsent(repositoryInterface.getName(), key -> new AtomicInteger());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'baseImpl' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'getQualifier' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "column": "54",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "41",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "column": "38",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "81",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "136",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "113",
                    "column": "73",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "column": "16",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "'declaringClass' has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "column": "75",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/41/DefaultRepositoryGenerator.java\nindex 3e2ea70d21..3fa6561f5b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/41/DefaultRepositoryGenerator.java\n@@ -8,11 +8,14 @@\n package org.seedstack.business.internal.domain;\n \n import static javassist.bytecode.annotation.Annotation.createMemberValue;\n+\n import static org.seedstack.business.internal.utils.BusinessUtils.getQualifier;\n+\n import static org.seedstack.shed.reflect.Classes.cast;\n+\n import static org.seedstack.shed.reflect.Classes.from;\n-import static org.seedstack.shed.reflect.ReflectUtils.invoke;\n \n+import static org.seedstack.shed.reflect.ReflectUtils.invoke;\n import com.google.inject.assistedinject.Assisted;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n@@ -38,132 +41,115 @@ import org.seedstack.business.internal.BusinessErrorCode;\n import org.seedstack.business.internal.BusinessException;\n import org.seedstack.shed.ClassLoaders;\n \n+\n class DefaultRepositoryGenerator<T extends Repository> {\n+\n     private static final String GENERATED_PACKAGE_NAME = \"org.seedstack.business.__generated.repository\";\n     private static final ConcurrentMap<String, AtomicInteger> counters = new ConcurrentHashMap<>();\n     private final ClassPool classPool;\n     private final Class<T> repositoryInterface;\n     private final ClassLoader classLoader;\n \n+\n     DefaultRepositoryGenerator(Class<T> repositoryInterface) {\n         this.repositoryInterface = repositoryInterface;\n         this.classLoader = ClassLoaders.findMostCompleteClassLoader(DefaultRepositoryCollector.class);\n         this.classPool = new ClassPool(false);\n-        this.classPool.appendClassPath(new LoaderClassPath(this.classLoader));\n+        this.classPool.appendClassPath(new LoaderClassPath(this\n+            .classLoader));\n     }\n \n     Class<? extends T> generate(Class<? extends Repository> baseImpl) {\n         try {\n-            CtClass cc = createClass(\n-                    getClassName(baseImpl, getCounter(repositoryInterface).incrementAndGet()),\n-                    baseImpl\n-            );\n+            CtClass cc = createClass(getClassName(baseImpl, getCounter(repositoryInterface).incrementAndGet()),\n+                baseImpl);\n+\n             ClassFile cf = cc.getClassFile();\n-            ConstPool constPool = cf.getConstPool();\n \n+            ConstPool constPool = cf.getConstPool();\n             cc.setModifiers(Modifier.PUBLIC);\n-\n-            cc.setInterfaces(new CtClass[]{classPool.getCtClass(repositoryInterface.getName())});\n-\n+            cc.setInterfaces(new CtClass [] {\n+                                 classPool.getCtClass(repositoryInterface.getName())});\n             if (hasGenericConstructor(baseImpl)) {\n                 cc.addConstructor(createConstructor(constPool, cc));\n             } else {\n                 cc.addConstructor(createDefaultConstructor(cc));\n             }\n+            cf.addAttribute(createQualifierAttribute(constPool,\n+                getQualifier(baseImpl).orElseThrow(()-> new NotFoundException(\"Qualifier annotation not found\"))));\n+            return cast(cc.toClass(classLoader, DefaultRepositoryCollector.class\n+                .getProtectionDomain()));\n+        }\n \n-            cf.addAttribute(createQualifierAttribute(constPool, getQualifier(baseImpl)\n-                    .orElseThrow(() -> new NotFoundException(\"Qualifier annotation not found\"))));\n-\n-            return cast(cc.toClass(\n-                    classLoader,\n-                    DefaultRepositoryCollector.class.getProtectionDomain())\n-            );\n-        } catch (CannotCompileException | NotFoundException e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_CREATE_DEFAULT_IMPLEMENTATION)\n-                    .put(\"interface\", repositoryInterface)\n-                    .put(\"base\", baseImpl);\n+            catch(CannotCompileException| NotFoundException e) {\n+            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_CREATE_DEFAULT_IMPLEMENTATION).put(\"interface\", repositoryInterface)\n+.put(\"base\", baseImpl);\n         }\n     }\n \n-    private AnnotationsAttribute createQualifierAttribute(ConstPool constPool,\n-            java.lang.annotation.Annotation qualifier) throws NotFoundException {\n+\n+    private AnnotationsAttribute createQualifierAttribute(ConstPool constPool, java.lang.annotation.Annotation qualifier) throws NotFoundException {\n         AnnotationsAttribute attr = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n         attr.setAnnotation(copyAnnotation(constPool, qualifier));\n         return attr;\n     }\n \n+\n     private CtClass createClass(String className, Class<? extends Repository> baseClassName) throws NotFoundException {\n         return classPool.makeClass(className, classPool.getCtClass(baseClassName.getName()));\n     }\n \n+\n     private String getClassName(Class<? extends Repository> defaultRepositoryImplementation, int generation) {\n-        return GENERATED_PACKAGE_NAME\n-                + \".\"\n-                + repositoryInterface.getSimpleName()\n-                + \"_\"\n-                + defaultRepositoryImplementation.getSimpleName()\n-                + \"_\"\n-                + generation;\n+        return GENERATED_PACKAGE_NAME+ \".\" + repositoryInterface.getSimpleName()+ \"_\" + defaultRepositoryImplementation.getSimpleName()+ \"_\" + generation;\n     }\n \n-    private Annotation copyAnnotation(ConstPool constPool,\n-            java.lang.annotation.Annotation annotation) throws NotFoundException {\n+\n+    private Annotation copyAnnotation(ConstPool constPool, java.lang.annotation.Annotation annotation) throws NotFoundException {\n         // Create annotation from specified type\n-        Annotation byteCodeAnnotation = createAnnotation(\n-                constPool,\n-                annotation.annotationType()\n-        );\n+        Annotation byteCodeAnnotation = createAnnotation(constPool, annotation.annotationType());\n \n         // Copy annotation methods\n-        for (Method m : annotation.annotationType().getDeclaredMethods()) {\n+        for(Method m : annotation.annotationType().getDeclaredMethods() ) {\n             Object value = invoke(m, annotation);\n-            MemberValue memberValue = createMemberValue(\n-                    constPool,\n-                    classPool.get(value.getClass().getName())\n-            );\n-\n-            invoke(from(memberValue.getClass())\n-                            .method(\"setValue\", new Class[]{value.getClass()})\n-                            .orElseThrow(() -> new NotFoundException(\"Cannot copy value of qualifier parameter \"\n-                                    + m.getName())),\n-                    memberValue,\n-                    value);\n-\n-            byteCodeAnnotation.addMemberValue(\n-                    m.getName(),\n-                    memberValue\n-            );\n-        }\n \n+            MemberValue memberValue = createMemberValue(constPool, classPool.get(value.getClass().getName()));\n+            invoke(from(memberValue.getClass()).method(\"setValue\", new Class [] {\n+                                                                       value.getClass()})\n+.orElseThrow(()-> new NotFoundException(\"Cannot copy value of qualifier parameter \" + m.getName())), memberValue, value);\n+            byteCodeAnnotation.addMemberValue(m.getName(), memberValue);\n+        }\n         return byteCodeAnnotation;\n     }\n \n-    private Annotation createAnnotation(ConstPool constPool,\n-            Class<? extends java.lang.annotation.Annotation> annotationType) {\n-        return new Annotation(\n-                annotationType.getName(),\n-                constPool\n-        );\n+\n+    private Annotation createAnnotation(ConstPool constPool, Class<? extends java.lang.annotation.Annotation> annotationType) {\n+        return new Annotation(annotationType.getName(), constPool);\n     }\n \n+\n     private boolean hasGenericConstructor(Class<? extends Repository> baseImpl) {\n         try {\n             baseImpl.getDeclaredConstructor(Object[].class);\n             return true;\n-        } catch (NoSuchMethodException e) {\n+        }\n+\n+            catch(NoSuchMethodException e) {\n             return false;\n         }\n     }\n \n+\n     private CtConstructor createDefaultConstructor(CtClass declaringClass) throws CannotCompileException {\n         return CtNewConstructor.defaultConstructor(declaringClass);\n     }\n \n-    private CtConstructor createConstructor(ConstPool constPool, CtClass declaringClass) throws NotFoundException,\n-            CannotCompileException {\n-        CtConstructor cc = new CtConstructor(new CtClass[]{\n-                declaringClass.getClassPool().getCtClass(Object.class.getName() + \"[]\")\n-        }, declaringClass);\n+\n+    private CtConstructor createConstructor(ConstPool constPool, CtClass declaringClass) throws NotFoundException, CannotCompileException {\n+        CtConstructor cc = new CtConstructor(new CtClass [] {\n+                                                 declaringClass.getClassPool().getCtClass(Object.class\n+                                                     .getName() + \"[]\")},\n+declaringClass);\n \n         // Define the constructor behavior\n         cc.setBody(\"super($1);\");\n@@ -174,24 +160,26 @@ class DefaultRepositoryGenerator<T extends Repository> {\n \n         // Add the @Assisted annotation to the constructor parameter\n         addAssistedAnnotation(constPool, cc);\n-\n         return cc;\n     }\n \n+\n     private void addInjectAnnotation(ConstPool constPool, CtConstructor cc) {\n         AnnotationsAttribute attribute = new AnnotationsAttribute(constPool, AnnotationsAttribute.visibleTag);\n         attribute.setAnnotation(createAnnotation(constPool, Inject.class));\n         cc.getMethodInfo().addAttribute(attribute);\n     }\n \n+\n     private void addAssistedAnnotation(ConstPool constPool, CtConstructor cc) {\n-        ParameterAnnotationsAttribute attribute = new ParameterAnnotationsAttribute(constPool,\n-                ParameterAnnotationsAttribute.visibleTag);\n-        attribute.setAnnotations(new Annotation[][]{{createAnnotation(constPool, Assisted.class)}});\n+        ParameterAnnotationsAttribute attribute = new ParameterAnnotationsAttribute(constPool, ParameterAnnotationsAttribute.visibleTag);\n+        attribute.setAnnotations(new Annotation [][] { {\n+                                                         createAnnotation(constPool, Assisted.class)}});\n         cc.getMethodInfo().addAttribute(attribute);\n     }\n \n+\n     private static AtomicInteger getCounter(Class<?> repositoryInterface) {\n-        return counters.computeIfAbsent(repositoryInterface.getName(), key -> new AtomicInteger());\n+        return counters.computeIfAbsent(repositoryInterface.getName(), key-> new AtomicInteger());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 102
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/41/DefaultRepositoryGenerator.java\nindex 3e2ea70d21..d952589edb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/41/DefaultRepositoryGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/41/DefaultRepositoryGenerator.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static javassist.bytecode.annotation.Annotation.createMemberValue;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}