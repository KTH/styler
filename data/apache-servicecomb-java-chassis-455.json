{
    "error_id": "455",
    "information": {
        "errors": [
            {
                "line": "29",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n\n  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n\n  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/455/LoginResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/455/LoginResponse.java\nindex a27fc7d5c8..4a39154452 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/455/LoginResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/455/LoginResponse.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.transport.highway.message;\n \n import org.apache.servicecomb.foundation.protobuf.ProtoMapperFactory;\n@@ -26,8 +27,9 @@ public class LoginResponse {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootDeserializer<LoginResponse> rootDeserializer =\n+      protoMapperFactory.createFromName(\"LoginResponse.proto\")\n+          .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n       .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/455/LoginResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/455/LoginResponse.java\nindex a27fc7d5c8..de40a5bdb2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/455/LoginResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/455/LoginResponse.java\n@@ -60,4 +60,4 @@ public class LoginResponse {\n   public void setZipName(String zipName) {\n     this.zipName = zipName;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "column": "34",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "column": "18",
                    "severity": "warning",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/455/LoginResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/455/LoginResponse.java\nindex a27fc7d5c8..81c1e2fcbf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/455/LoginResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/455/LoginResponse.java\n@@ -26,38 +26,38 @@ public class LoginResponse {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<LoginResponse> rootDeserializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n+  private static RootDeserializer <\n+    LoginResponse > rootDeserializer = protoMapperFactory .createFromName(\"LoginResponse.proto\").createRootDeserializer(\"LoginResponse\", LoginResponse.class);\n \n-  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n-      .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n+private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"LoginResponse.proto\")\n+    .createRootSerializer(\"LoginResponse\", LoginResponse.class);\n \n-  public static RootSerializer getRootSerializer() {\n-    return rootSerializer;\n-  }\n+public static RootSerializer getRootSerializer() {\n+  return rootSerializer;\n+}\n \n-  public static LoginResponse readObject(Buffer bodyBuffer) throws Exception {\n-    return rootDeserializer.deserialize(bodyBuffer.getBytes());\n-  }\n+public static LoginResponse readObject(Buffer bodyBuffer) throws Exception {\n+  return rootDeserializer.deserialize(bodyBuffer.getBytes());\n+}\n \n-  private String protocol;\n+private String protocol;\n \n-  // \u538b\u7f29\u7b97\u6cd5\u540d\u5b57\n-  private String zipName;\n+// \u538b\u7f29\u7b97\u6cd5\u540d\u5b57\n+private String zipName;\n \n-  public String getProtocol() {\n-    return protocol;\n-  }\n+public String getProtocol() {\n+  return protocol;\n+}\n \n-  public void setProtocol(String protocol) {\n-    this.protocol = protocol;\n-  }\n+public void setProtocol(String protocol) {\n+  this.protocol = protocol;\n+}\n \n-  public String getZipName() {\n-    return zipName;\n-  }\n+public String getZipName() {\n+  return zipName;\n+}\n \n-  public void setZipName(String zipName) {\n-    this.zipName = zipName;\n-  }\n+public void setZipName(String zipName) {\n+  this.zipName = zipName;\n+}\n }\n",
            "diff_size": 25
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}