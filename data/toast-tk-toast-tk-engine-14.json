{
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "info",
                "message": "La ligne correspond au motif ill\u00e9gal 'more than one blank line'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "import com.google.gson.reflect.TypeToken;\n\nimport io.toast.tk.runtime.bean.ActionItem;\n\n\npublic class ActionItemDescriptionCollector {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/styler/14/ActionItemDescriptionCollector.java\nindex e29201a9cc..91d30b7c12 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/styler/14/ActionItemDescriptionCollector.java\n@@ -1,37 +1,36 @@\n-package io.toast.tk.runtime;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.lang.reflect.Type;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.apache.commons.io.IOUtils;\r\n-import org.apache.logging.log4j.LogManager;\r\n-import org.apache.logging.log4j.Logger;\r\n-\r\n-import com.google.gson.Gson;\r\n-import com.google.gson.reflect.TypeToken;\r\n-\r\n-import io.toast.tk.runtime.bean.ActionItem;\r\n-\r\n-\r\n-public class ActionItemDescriptionCollector {\r\n-\r\n-\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic static List<ActionItem> initActionItems() {\r\n-\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\r\n-\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\r\n-\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\r\n-\t\t\tfinal Gson g = new Gson();\r\n-\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\r\n-\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\r\n-\t\t}\r\n-\t\tcatch(final IOException e) {\r\n-\t\t\tLOG.error(e.getMessage(), e);\r\n-\t\t}\r\n-\t\treturn actionItems;\r\n-\t}\r\n+package io.toast.tk.runtime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import io.toast.tk.runtime.bean.ActionItem;\n+\n+public class ActionItemDescriptionCollector {\n+\n+\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static List<ActionItem> initActionItems() {\n+\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\n+\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\n+\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\n+\t\t\tfinal Gson g = new Gson();\n+\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\n+\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\n+\t\t}\n+\t\tcatch(final IOException e) {\n+\t\t\tLOG.error(e.getMessage(), e);\n+\t\t}\n+\t\treturn actionItems;\n+\t}\n }\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "16",
                    "severity": "info",
                    "message": "La ligne correspond au motif ill\u00e9gal 'more than one blank line'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/intellij/14/ActionItemDescriptionCollector.java\nindex e29201a9cc..831ad7edd8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/intellij/14/ActionItemDescriptionCollector.java\n@@ -18,20 +18,21 @@ import io.toast.tk.runtime.bean.ActionItem;\n \r\n public class ActionItemDescriptionCollector {\r\n \r\n-\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic static List<ActionItem> initActionItems() {\r\n-\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\r\n-\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\r\n-\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\r\n-\t\t\tfinal Gson g = new Gson();\r\n-\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\r\n-\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\r\n-\t\t}\r\n-\t\tcatch(final IOException e) {\r\n-\t\t\tLOG.error(e.getMessage(), e);\r\n-\t\t}\r\n-\t\treturn actionItems;\r\n-\t}\r\n+    private static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public static List<ActionItem> initActionItems() {\r\n+        final List<ActionItem> actionItems = new ArrayList<>();\r\n+        try (final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader()\r\n+            .getResourceAsStream(\"type_descriptor.json\");) {\r\n+            final String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\r\n+            final Gson g = new Gson();\r\n+            final Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/\r\n+            }.getType();\r\n+            actionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\r\n+        } catch (final IOException e) {\r\n+            LOG.error(e.getMessage(), e);\r\n+        }\r\n+        return actionItems;\r\n+    }\r\n }\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/codebuff/14/ActionItemDescriptionCollector.java\nindex e29201a9cc..750ce5b49d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/codebuff/14/ActionItemDescriptionCollector.java\n@@ -1,37 +1,36 @@\n-package io.toast.tk.runtime;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.lang.reflect.Type;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.apache.commons.io.IOUtils;\r\n-import org.apache.logging.log4j.LogManager;\r\n-import org.apache.logging.log4j.Logger;\r\n-\r\n-import com.google.gson.Gson;\r\n-import com.google.gson.reflect.TypeToken;\r\n-\r\n-import io.toast.tk.runtime.bean.ActionItem;\r\n-\r\n-\r\n-public class ActionItemDescriptionCollector {\r\n-\r\n-\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic static List<ActionItem> initActionItems() {\r\n-\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\r\n-\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\r\n-\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\r\n-\t\t\tfinal Gson g = new Gson();\r\n-\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\r\n-\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\r\n-\t\t}\r\n-\t\tcatch(final IOException e) {\r\n-\t\t\tLOG.error(e.getMessage(), e);\r\n-\t\t}\r\n-\t\treturn actionItems;\r\n-\t}\r\n+package io.toast.tk.runtime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+import io.toast.tk.runtime.bean.ActionItem;\n+\n+public class ActionItemDescriptionCollector {\n+\n+    private static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static List<ActionItem> initActionItems() {\n+    final List<ActionItem> actionItems = new ArrayList<>();\n+    try (\n+        final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");\n+    ) {\n+      final String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\n+      final Gson g = new Gson();\n+      final Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/\n+      }.getType();\n+      actionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\n+    }\n+    catch(final IOException e) {\n+        LOG.error(e.getMessage(), e);\n+    }\n+    return actionItems;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/styler_random/14/ActionItemDescriptionCollector.java\nindex e29201a9cc..91d30b7c12 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/styler_random/14/ActionItemDescriptionCollector.java\n@@ -1,37 +1,36 @@\n-package io.toast.tk.runtime;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.lang.reflect.Type;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.apache.commons.io.IOUtils;\r\n-import org.apache.logging.log4j.LogManager;\r\n-import org.apache.logging.log4j.Logger;\r\n-\r\n-import com.google.gson.Gson;\r\n-import com.google.gson.reflect.TypeToken;\r\n-\r\n-import io.toast.tk.runtime.bean.ActionItem;\r\n-\r\n-\r\n-public class ActionItemDescriptionCollector {\r\n-\r\n-\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic static List<ActionItem> initActionItems() {\r\n-\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\r\n-\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\r\n-\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\r\n-\t\t\tfinal Gson g = new Gson();\r\n-\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\r\n-\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\r\n-\t\t}\r\n-\t\tcatch(final IOException e) {\r\n-\t\t\tLOG.error(e.getMessage(), e);\r\n-\t\t}\r\n-\t\treturn actionItems;\r\n-\t}\r\n+package io.toast.tk.runtime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import io.toast.tk.runtime.bean.ActionItem;\n+\n+public class ActionItemDescriptionCollector {\n+\n+\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static List<ActionItem> initActionItems() {\n+\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\n+\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\n+\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\n+\t\t\tfinal Gson g = new Gson();\n+\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\n+\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\n+\t\t}\n+\t\tcatch(final IOException e) {\n+\t\t\tLOG.error(e.getMessage(), e);\n+\t\t}\n+\t\treturn actionItems;\n+\t}\n }\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/styler_three_grams/14/ActionItemDescriptionCollector.java\nindex e29201a9cc..91d30b7c12 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/errored/1/14/ActionItemDescriptionCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/toast-tk-toast-tk-engine/styler_three_grams/14/ActionItemDescriptionCollector.java\n@@ -1,37 +1,36 @@\n-package io.toast.tk.runtime;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.lang.reflect.Type;\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.apache.commons.io.IOUtils;\r\n-import org.apache.logging.log4j.LogManager;\r\n-import org.apache.logging.log4j.Logger;\r\n-\r\n-import com.google.gson.Gson;\r\n-import com.google.gson.reflect.TypeToken;\r\n-\r\n-import io.toast.tk.runtime.bean.ActionItem;\r\n-\r\n-\r\n-public class ActionItemDescriptionCollector {\r\n-\r\n-\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\r\n-\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tpublic static List<ActionItem> initActionItems() {\r\n-\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\r\n-\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\r\n-\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\r\n-\t\t\tfinal Gson g = new Gson();\r\n-\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\r\n-\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\r\n-\t\t}\r\n-\t\tcatch(final IOException e) {\r\n-\t\t\tLOG.error(e.getMessage(), e);\r\n-\t\t}\r\n-\t\treturn actionItems;\r\n-\t}\r\n+package io.toast.tk.runtime;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import io.toast.tk.runtime.bean.ActionItem;\n+\n+public class ActionItemDescriptionCollector {\n+\n+\tprivate static final Logger LOG = LogManager.getLogger(ActionItemDescriptionCollector.class);\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static List<ActionItem> initActionItems() {\n+\t\tfinal List<ActionItem> actionItems = new ArrayList<>();\n+\t\ttry(final InputStream actionItemsSource = ActionItemDescriptionCollector.class.getClassLoader().getResourceAsStream(\"type_descriptor.json\");) {\n+\t\t\tfinal String json = IOUtils.toString(actionItemsSource, \"UTF-8\");\n+\t\t\tfinal Gson g = new Gson();\n+\t\t\tfinal Type typeOfT = new TypeToken<List<ActionItem>>() {/*NOOP*/}.getType();\n+\t\t\tactionItems.addAll((List<ActionItem>) g.fromJson(json, typeOfT));\n+\t\t}\n+\t\tcatch(final IOException e) {\n+\t\t\tLOG.error(e.getMessage(), e);\n+\t\t}\n+\t\treturn actionItems;\n+\t}\n }\n\\ No newline at end of file\n",
            "diff_size": 36
        }
    ]
}