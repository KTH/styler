{
    "error_id": "235",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.bpmn.listener;\n\nimport org.activiti.engine.delegate.DelegateExecution;\nimport org.activiti.engine.delegate.ExecutionListener;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/235/ScriptExecutionListener.java\nindex 41b74b4645..62f2d47eaa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/235/ScriptExecutionListener.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.DelegateExecution;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/235/ScriptExecutionListener.java\nindex 41b74b4645..78d25b2a98 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/235/ScriptExecutionListener.java\n@@ -25,46 +25,46 @@ import org.activiti.engine.impl.scripting.ScriptingEngines;\n \n public class ScriptExecutionListener implements ExecutionListener {\n \n-  private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n \n-  protected Expression script;\n+    protected Expression script;\n \n-  protected Expression language;\n+    protected Expression language;\n \n-  protected Expression resultVariable;\n+    protected Expression resultVariable;\n \n-  @Override\n-  public void notify(DelegateExecution execution) {\n+    @Override\n+    public void notify(DelegateExecution execution) {\n \n-    validateParameters();\n+        validateParameters();\n \n-    ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n-    Object result = scriptingEngines.evaluate(script.getExpressionText(), language.getExpressionText(), execution);\n+        ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n+        Object result = scriptingEngines.evaluate(script.getExpressionText(), language.getExpressionText(), execution);\n \n-    if (resultVariable != null) {\n-      execution.setVariable(resultVariable.getExpressionText(), result);\n+        if (resultVariable != null) {\n+            execution.setVariable(resultVariable.getExpressionText(), result);\n+        }\n     }\n-  }\n \n-  protected void validateParameters() {\n-    if (script == null) {\n-      throw new IllegalArgumentException(\"The field 'script' should be set on the ExecutionListener\");\n-    }\n+    protected void validateParameters() {\n+        if (script == null) {\n+            throw new IllegalArgumentException(\"The field 'script' should be set on the ExecutionListener\");\n+        }\n \n-    if (language == null) {\n-      throw new IllegalArgumentException(\"The field 'language' should be set on the ExecutionListener\");\n+        if (language == null) {\n+            throw new IllegalArgumentException(\"The field 'language' should be set on the ExecutionListener\");\n+        }\n     }\n-  }\n \n-  public void setScript(Expression script) {\n-    this.script = script;\n-  }\n+    public void setScript(Expression script) {\n+        this.script = script;\n+    }\n \n-  public void setLanguage(Expression language) {\n-    this.language = language;\n-  }\n+    public void setLanguage(Expression language) {\n+        this.language = language;\n+    }\n \n-  public void setResultVariable(Expression resultVariable) {\n-    this.resultVariable = resultVariable;\n-  }\n+    public void setResultVariable(Expression resultVariable) {\n+        this.resultVariable = resultVariable;\n+    }\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/235/ScriptExecutionListener.java\nindex 41b74b4645..a970a39f4c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/235/ScriptExecutionListener.java\n@@ -23,48 +23,47 @@ import org.activiti.engine.delegate.Expression;\n import org.activiti.engine.impl.context.Context;\n import org.activiti.engine.impl.scripting.ScriptingEngines;\n \n-public class ScriptExecutionListener implements ExecutionListener {\n-\n-  private static final long serialVersionUID = 1L;\n-\n-  protected Expression script;\n \n-  protected Expression language;\n-\n-  protected Expression resultVariable;\n+public class ScriptExecutionListener implements ExecutionListener {\n \n-  @Override\n-  public void notify(DelegateExecution execution) {\n+    private static final long serialVersionUID = 1L;\n+    protected Expression script;\n+    protected Expression language;\n+    protected Expression resultVariable;\n \n+    @Override\n+    public void notify(DelegateExecution execution) {\n     validateParameters();\n \n-    ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n-    Object result = scriptingEngines.evaluate(script.getExpressionText(), language.getExpressionText(), execution);\n \n+    ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n+    Object result = scriptingEngines.evaluate(script.getExpressionText(),\n+                                              language.getExpressionText(),\n+                                              execution);\n     if (resultVariable != null) {\n-      execution.setVariable(resultVariable.getExpressionText(), result);\n+        execution.setVariable(resultVariable.getExpressionText(), result);\n+    }\n     }\n-  }\n \n-  protected void validateParameters() {\n+    protected void validateParameters() {\n     if (script == null) {\n-      throw new IllegalArgumentException(\"The field 'script' should be set on the ExecutionListener\");\n+        throw new IllegalArgumentException(\"The field 'script' should be set on the ExecutionListener\");\n     }\n \n     if (language == null) {\n-      throw new IllegalArgumentException(\"The field 'language' should be set on the ExecutionListener\");\n+        throw new IllegalArgumentException(\"The field 'language' should be set on the ExecutionListener\");\n+    }\n     }\n-  }\n \n-  public void setScript(Expression script) {\n+    public void setScript(Expression script) {\n     this.script = script;\n-  }\n+    }\n \n-  public void setLanguage(Expression language) {\n+    public void setLanguage(Expression language) {\n     this.language = language;\n-  }\n+    }\n \n-  public void setResultVariable(Expression resultVariable) {\n+    public void setResultVariable(Expression resultVariable) {\n     this.resultVariable = resultVariable;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/235/ScriptExecutionListener.java\nindex 41b74b4645..62f2d47eaa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/235/ScriptExecutionListener.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.DelegateExecution;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/235/ScriptExecutionListener.java\nindex 41b74b4645..62f2d47eaa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/235/ScriptExecutionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/235/ScriptExecutionListener.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.DelegateExecution;\n",
            "diff_size": 1
        }
    ]
}