{
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "28",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 149).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Created by ecoolper on 2017/5/5.\n */\npublic class ApacheMaterialVoiceAndImageDownloadRequestExecutor extends MaterialVoiceAndImageDownloadRequestExecutor<CloseableHttpClient, HttpHost> {\n  public ApacheMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n    super(requestHttp, tmpDirFile);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\nindex b1011a5282..bc4690dd90 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\n@@ -25,7 +25,8 @@ import java.util.Map;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class ApacheMaterialVoiceAndImageDownloadRequestExecutor extends MaterialVoiceAndImageDownloadRequestExecutor<CloseableHttpClient, HttpHost> {\n+public class ApacheMaterialVoiceAndImageDownloadRequestExecutor\n+    extends MaterialVoiceAndImageDownloadRequestExecutor<CloseableHttpClient, HttpHost> {\n   public ApacheMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n     super(requestHttp, tmpDirFile);\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\nindex b1011a5282..9430f9a628 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\n@@ -43,7 +43,7 @@ public class ApacheMaterialVoiceAndImageDownloadRequestExecutor extends Material\n     httpPost.setEntity(new StringEntity(WxGsonBuilder.create().toJson(params)));\n     try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost);\n          InputStream inputStream = InputStreamResponseHandler.INSTANCE.handleResponse(response)) {\n-      // \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n+  // \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n       byte[] responseContent = IOUtils.toByteArray(inputStream);\n       String responseContentString = new String(responseContent, StandardCharsets.UTF_8);\n       if (responseContentString.length() < 100) {\n@@ -61,4 +61,4 @@ public class ApacheMaterialVoiceAndImageDownloadRequestExecutor extends Material\n       httpPost.releaseConnection();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\nindex b1011a5282..88ec8c2f92 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/5/ApacheMaterialVoiceAndImageDownloadRequestExecutor.java\n@@ -13,7 +13,6 @@ import org.apache.http.client.methods.CloseableHttpResponse;\n import org.apache.http.client.methods.HttpPost;\n import org.apache.http.entity.StringEntity;\n import org.apache.http.impl.client.CloseableHttpClient;\n-\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n@@ -25,17 +24,20 @@ import java.util.Map;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n+\n+\n public class ApacheMaterialVoiceAndImageDownloadRequestExecutor extends MaterialVoiceAndImageDownloadRequestExecutor<CloseableHttpClient, HttpHost> {\n-  public ApacheMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n+\n+    public ApacheMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n     super(requestHttp, tmpDirFile);\n-  }\n+    }\n \n-  @Override\n-  public InputStream execute(String uri, String materialId) throws WxErrorException, IOException {\n+    @Override\n+    public InputStream execute(String uri, String materialId) throws WxErrorException, IOException {\n     HttpPost httpPost = new HttpPost(uri);\n     if (requestHttp.getRequestHttpProxy() != null) {\n-      RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n-      httpPost.setConfig(config);\n+        RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n+        httpPost.setConfig(config);\n     }\n \n     Map<String, String> params = new HashMap<>();\n@@ -44,21 +46,21 @@ public class ApacheMaterialVoiceAndImageDownloadRequestExecutor extends Material\n     try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost);\n          InputStream inputStream = InputStreamResponseHandler.INSTANCE.handleResponse(response)) {\n       // \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n-      byte[] responseContent = IOUtils.toByteArray(inputStream);\n-      String responseContentString = new String(responseContent, StandardCharsets.UTF_8);\n-      if (responseContentString.length() < 100) {\n+        byte[] responseContent = IOUtils.toByteArray(inputStream);\n+        String responseContentString = new String(responseContent, StandardCharsets.UTF_8);\n+        if (responseContentString.length() < 100) {\n         try {\n-          WxError wxError = WxGsonBuilder.create().fromJson(responseContentString, WxError.class);\n-          if (wxError.getErrorCode() != 0) {\n+                                                      WxError wxError = WxGsonBuilder.create().fromJson(responseContentString, WxError.class);\n+                                                      if (wxError.getErrorCode() != 0) {\n             throw new WxErrorException(wxError);\n-          }\n+                                                      }\n         } catch (com.google.gson.JsonSyntaxException ex) {\n           return new ByteArrayInputStream(responseContent);\n         }\n-      }\n-      return new ByteArrayInputStream(responseContent);\n+        }\n+        return new ByteArrayInputStream(responseContent);\n     } finally {\n       httpPost.releaseConnection();\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}