{
    "error_id": "811",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/811/GetNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/811/GetNodeFeatsParam.java\nindex 2b9135777c..16b3f2757f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/811/GetNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/811/GetNodeFeatsParam.java\n@@ -29,61 +29,62 @@ import java.util.List;\n \n public class GetNodeFeatsParam extends GetParam {\n \n-  /**\n-   * Node ids\n-   */\n-  private final long[] nodeIds;\n+    /**\n+     * Node ids\n+     */\n+    private final long[] nodeIds;\n \n-  private final List<PartitionGetParam> partParams;\n+    private final List<PartitionGetParam> partParams;\n \n-  public GetNodeFeatsParam(int matrixId, long[] nodeIds) {\n-    super(matrixId);\n-    this.nodeIds = nodeIds;\n-    partParams = new ArrayList<>();\n-  }\n+    public GetNodeFeatsParam(int matrixId, long[] nodeIds) {\n+        super(matrixId);\n+        this.nodeIds = nodeIds;\n+        partParams = new ArrayList<>();\n+    }\n \n-  public GetNodeFeatsParam() {\n-    this(-1, null);\n-  }\n+    public GetNodeFeatsParam() {\n+        this(-1, null);\n+    }\n \n-  public long[] getNodeIds() {\n-    return nodeIds;\n-  }\n+    public long[] getNodeIds() {\n+        return nodeIds;\n+    }\n \n-  public List<PartitionGetParam> getPartParams() {\n-    return partParams;\n-  }\n+    public List<PartitionGetParam> getPartParams() {\n+        return partParams;\n+    }\n \n-  @Override\n-  public List<PartitionGetParam> split() {\n-    Arrays.sort(nodeIds);\n+    @Override\n+    public List<PartitionGetParam> split() {\n+        Arrays.sort(nodeIds);\n \n-    List<PartitionKey> partitions =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n+        List<PartitionKey> partitions =\n+                PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n-    if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n-              .get(partitions.size() - 1).getEndCol());\n-    }\n+        if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n+            throw new AngelException(\n+                    \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" +\n+                            partitions\n+                                    .get(partitions.size() - 1).getEndCol());\n+        }\n \n-    int nodeIndex = 0;\n-    int partIndex = 0;\n-    while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n-      int length = 0;\n-      long endOffset = partitions.get(partIndex).getEndCol();\n-      while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n+        int nodeIndex = 0;\n+        int partIndex = 0;\n+        while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n+            int length = 0;\n+            long endOffset = partitions.get(partIndex).getEndCol();\n+            while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n+                nodeIndex++;\n+                length++;\n+            }\n \n-      if (length > 0) {\n-        partParams.add(new PartGetNodeFeatsParam(matrixId,\n-            partitions.get(partIndex), nodeIds, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n-    }\n+            if (length > 0) {\n+                partParams.add(new PartGetNodeFeatsParam(matrixId,\n+                        partitions.get(partIndex), nodeIds, nodeIndex - length, nodeIndex));\n+            }\n+            partIndex++;\n+        }\n \n-    return partParams;\n-  }\n+        return partParams;\n+    }\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/811/GetNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/811/GetNodeFeatsParam.java\nindex 2b9135777c..ae8c4fb6e7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/811/GetNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/811/GetNodeFeatsParam.java\n@@ -62,10 +62,9 @@ public class GetNodeFeatsParam extends GetParam {\n         PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n+      throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n               .get(partitions.size() - 1).getEndCol());\n-    }\n+  }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n@@ -80,10 +79,11 @@ public class GetNodeFeatsParam extends GetParam {\n       if (length > 0) {\n         partParams.add(new PartGetNodeFeatsParam(matrixId,\n             partitions.get(partIndex), nodeIds, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n+  }\n+\n+partIndex++;\n     }\n \n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/811/GetNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/811/GetNodeFeatsParam.java\nindex 2b9135777c..7104c5ad7d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/811/GetNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/811/GetNodeFeatsParam.java\n@@ -32,58 +32,51 @@ public class GetNodeFeatsParam extends GetParam {\n   /**\n    * Node ids\n    */\n-  private final long[] nodeIds;\n+    private final long[] nodeIds;\n+    private final List<PartitionGetParam> partParams;\n \n-  private final List<PartitionGetParam> partParams;\n-\n-  public GetNodeFeatsParam(int matrixId, long[] nodeIds) {\n+    public GetNodeFeatsParam(int matrixId, long[] nodeIds) {\n     super(matrixId);\n     this.nodeIds = nodeIds;\n     partParams = new ArrayList<>();\n-  }\n+    }\n \n-  public GetNodeFeatsParam() {\n+    public GetNodeFeatsParam() {\n     this(-1, null);\n-  }\n+    }\n \n-  public long[] getNodeIds() {\n+    public long[] getNodeIds() {\n     return nodeIds;\n-  }\n+    }\n \n-  public List<PartitionGetParam> getPartParams() {\n+    public List<PartitionGetParam> getPartParams() {\n     return partParams;\n-  }\n+    }\n \n-  @Override\n-  public List<PartitionGetParam> split() {\n+    @Override\n+    public List<PartitionGetParam> split() {\n     Arrays.sort(nodeIds);\n-\n-    List<PartitionKey> partitions =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n+    List<PartitionKey> partitions = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n-              .get(partitions.size() - 1).getEndCol());\n+        throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions.get(partitions.size() - 1).getEndCol());\n     }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n     while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n-      int length = 0;\n-      long endOffset = partitions.get(partIndex).getEndCol();\n-      while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n+        int length = 0;\n+        long endOffset = partitions.get(partIndex).getEndCol();\n+        while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n+                                                                            nodeIndex++;\n+                                                                            length++;\n+        }\n \n-      if (length > 0) {\n-        partParams.add(new PartGetNodeFeatsParam(matrixId,\n-            partitions.get(partIndex), nodeIds, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n+        if (length > 0) {\n+        partParams.add(new PartGetNodeFeatsParam(matrixId, partitions.get(partIndex), nodeIds, nodeIndex - length, nodeIndex));\n+        }\n+        partIndex++;\n     }\n-\n     return partParams;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}