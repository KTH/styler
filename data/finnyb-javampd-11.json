{
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "310",
                "severity": "error",
                "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "            when(mockedBufferedReader.readLine()).thenReturn(\"OK MPD 0.18.0\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        socket = new TestSocket(inetAddress, 9999, 10);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/11/MPDSocketTest.java\nindex 58053d0440..c821abb68c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/11/MPDSocketTest.java\n@@ -307,7 +307,7 @@ public class MPDSocketTest {\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(\"OK MPD 0.18.0\");\n         } catch (IOException e) {\n-            e.printStackTrace();\n+    e .printStackTrace();\n         }\n \n         socket = new TestSocket(inetAddress, 9999, 10);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/intellij/11/MPDSocketTest.java\nindex 58053d0440..5dd9eb294c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/intellij/11/MPDSocketTest.java\n@@ -47,8 +47,8 @@ public class MPDSocketTest {\n         int port = 9999;\n \n         doThrow(new RuntimeException())\n-                .when(mockSocket)\n-                .connect(new InetSocketAddress(inetAddress, port), timeout);\n+            .when(mockSocket)\n+            .connect(new InetSocketAddress(inetAddress, port), timeout);\n \n         socket = new TestSocket(inetAddress, port, timeout);\n     }\n@@ -75,9 +75,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n@@ -90,9 +90,9 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(\"OK\")\n+            .thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n@@ -109,11 +109,11 @@ public class MPDSocketTest {\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK MPD 0.18.0\")\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK MPD 0.18.0\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK MPD 0.18.0\")\n+            .thenThrow(new SocketException())\n+            .thenReturn(\"OK MPD 0.18.0\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n@@ -130,9 +130,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -146,9 +146,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -162,9 +162,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -174,7 +174,7 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenThrow(new RuntimeException());\n+            .thenThrow(new RuntimeException());\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -184,8 +184,8 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new RuntimeException());\n+            .thenReturn(\"OK\")\n+            .thenThrow(new RuntimeException());\n \n         socket.sendCommand(new MPDCommand(\"command\", \"param\"));\n     }\n@@ -196,13 +196,13 @@ public class MPDSocketTest {\n \n         mockedInputStream = new ByteArrayInputStream(\"OK MPD 0.18.0\".getBytes());\n         when(mockSocket.getInputStream())\n-                .thenThrow(new SocketException())\n-                .thenReturn(mockedInputStream);\n+            .thenThrow(new SocketException())\n+            .thenReturn(mockedInputStream);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n+            .thenReturn(\"OK\")\n+            .thenThrow(new SocketException())\n+            .thenReturn(\"OK\");\n \n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n@@ -211,13 +211,13 @@ public class MPDSocketTest {\n     public void testSendCommandExceptionWithMaxConnectExceptions() throws Exception {\n         createValidSocket();\n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n+            .thenReturn(\"OK\")\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenReturn(\"OK\");\n \n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n@@ -227,8 +227,8 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(null);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 130 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 130 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/11/MPDSocketTest.java\nindex 58053d0440..51e7cfb6bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/11/MPDSocketTest.java\n@@ -3,7 +3,6 @@ package org.bff.javampd.server;\n import org.bff.javampd.command.MPDCommand;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n-\n import java.io.*;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n@@ -12,19 +11,17 @@ import java.net.SocketException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-\n import static org.junit.Assert.*;\n+\n import static org.mockito.Mockito.*;\n \n public class MPDSocketTest {\n \n     private MPDSocket socket;\n-\n     private Socket mockSocket;\n     private InputStream mockedInputStream;\n     private OutputStream mockedOutputStream;\n     private BufferedReader mockedBufferedReader;\n-\n     private ArgumentCaptor<byte[]> byteArgumentCaptor;\n \n     @Test(expected = MPDConnectionException.class)\n@@ -34,6 +31,7 @@ public class MPDSocketTest {\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n \n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n+\n         socket = new TestSocket(inetAddress, 9999, 10);\n     }\n \n@@ -43,13 +41,12 @@ public class MPDSocketTest {\n         mockedInputStream = mock(InputStream.class);\n \n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n+\n         int timeout = 10;\n-        int port = 9999;\n \n-        doThrow(new RuntimeException())\n-                .when(mockSocket)\n-                .connect(new InetSocketAddress(inetAddress, port), timeout);\n+        int port = 9999;\n \n+        doThrow(new RuntimeException()).when(mockSocket).connect(new InetSocketAddress(inetAddress, port), timeout);\n         socket = new TestSocket(inetAddress, port, timeout);\n     }\n \n@@ -57,202 +54,160 @@ public class MPDSocketTest {\n     public void testSocketCreationWithBadResponse() throws Exception {\n         mockSocket = mock(Socket.class);\n         mockedBufferedReader = mock(BufferedReader.class);\n-\n         mockedInputStream = new ByteArrayInputStream(\"NOTOK MPD 0.18.0\".getBytes());\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n-\n         when(mockedBufferedReader.readLine()).thenReturn(\"Bad\");\n+\n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n+\n         socket = new TestSocket(inetAddress, 9999, 10);\n     }\n \n     @Test\n     public void testSendCommand() throws Exception {\n         String testResponse = \"testResponse\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n \n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n         List<String> response = new ArrayList<>(socket.sendCommand(command));\n+\n         assertEquals(testResponse, response.get(0));\n     }\n \n     @Test\n     public void testSendCommandOKButNoResponse() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(\"OK\").thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n         List<String> response = new ArrayList<>(socket.sendCommand(command));\n+\n         assertEquals(0, response.size());\n     }\n \n     @Test\n     public void testSendCommandSocketException() throws Exception {\n         String testResponse = \"testResponse\";\n-        createValidSocket();\n \n+        createValidSocket();\n         mockedInputStream = new ByteArrayInputStream(\"OK MPD 0.18.0\".getBytes());\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK MPD 0.18.0\")\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK MPD 0.18.0\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK MPD 0.18.0\").thenThrow(new SocketException()).thenReturn(\"OK MPD 0.18.0\").thenReturn(testResponse).thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n         List<String> response = new ArrayList<>(socket.sendCommand(command));\n+\n         assertEquals(testResponse, response.get(0));\n     }\n \n     @Test(expected = MPDSecurityException.class)\n     public void testSendCommandNoPermissionException() throws Exception {\n         String testResponse = \"ACK: you don't have permission\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandError() throws Exception {\n         String testResponse = \"ACK: error\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandEmptyError() throws Exception {\n         String testResponse = \"ACK\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandGeneralException() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenThrow(new RuntimeException());\n-\n+        when(mockedBufferedReader.readLine()).thenThrow(new RuntimeException());\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = Exception.class)\n     public void testSendCommandException() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new RuntimeException());\n-\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new RuntimeException());\n         socket.sendCommand(new MPDCommand(\"command\", \"param\"));\n     }\n \n     @Test\n     public void testSendCommandExceptionWithConnectException() throws Exception {\n         createValidSocket();\n-\n         mockedInputStream = new ByteArrayInputStream(\"OK MPD 0.18.0\".getBytes());\n-        when(mockSocket.getInputStream())\n-                .thenThrow(new SocketException())\n-                .thenReturn(mockedInputStream);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n-\n+        when(mockSocket.getInputStream()).thenThrow(new SocketException()).thenReturn(mockedInputStream);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new SocketException()).thenReturn(\"OK\");\n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandExceptionWithMaxConnectExceptions() throws Exception {\n         createValidSocket();\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n-\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new SocketException()).thenThrow(new SocketException()).thenThrow(new SocketException()).thenThrow(new SocketException()).thenThrow(new SocketException()).thenReturn(\"OK\");\n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n \n     @Test\n     public void testSendCommands() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(null);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n         MPDCommand command1 = new MPDCommand(\"command1\");\n+\n         MPDCommand command2 = new MPDCommand(\"command2\", \"param2\");\n+\n         MPDCommand command3 = new MPDCommand(\"command3\");\n \n         commands.add(command1);\n         commands.add(command2);\n         commands.add(command3);\n-\n         mockedOutputStream = mock(OutputStream.class);\n         when(mockSocket.getOutputStream()).thenReturn(mockedOutputStream);\n         socket.sendCommands(commands);\n \n         ServerProperties serverProperties = new ServerProperties();\n+\n         StringBuilder sb = new StringBuilder();\n+\n         sb.append(convertCommand(new MPDCommand(serverProperties.getStartBulk())));\n-        commands.forEach(command -> sb.append(convertCommand(command)));\n+        commands.forEach(command->sb.append(convertCommand(command)));\n         sb.append(convertCommand(new MPDCommand(serverProperties.getEndBulk())));\n-\n         verify(mockedOutputStream, times(2)).write(byteArgumentCaptor.capture());\n-\n-        assertTrue(Arrays.equals(sb.toString().getBytes(), byteArgumentCaptor.getAllValues().get(1)));\n+        assertTrue(Arrays.equals(sb.toString().getBytes(),\n+                                 byteArgumentCaptor.getAllValues().get(1)));\n     }\n \n     @Test\n@@ -270,7 +225,6 @@ public class MPDSocketTest {\n     @Test(expected = MPDConnectionException.class)\n     public void testCloseException() throws Exception {\n         createValidSocket();\n-\n         doThrow(new IOException()).when(mockSocket).close();\n         socket.close();\n     }\n@@ -298,12 +252,10 @@ public class MPDSocketTest {\n         mockedOutputStream = new ByteArrayOutputStream();\n         mockedBufferedReader = mock(BufferedReader.class);\n         byteArgumentCaptor = ArgumentCaptor.forClass(byte[].class);\n-\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n         when(mockSocket.getOutputStream()).thenReturn(mockedOutputStream);\n \n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n-\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(\"OK MPD 0.18.0\");\n         } catch (IOException e) {\n@@ -316,6 +268,7 @@ public class MPDSocketTest {\n     }\n \n     private class TestSocket extends MPDSocket {\n+\n         public TestSocket(InetAddress server, int port, int timeout) {\n             super(server, port, timeout);\n         }\n",
            "diff_size": 111
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "310",
                    "column": "35",
                    "severity": "error",
                    "message": "'}' at column 35 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/11/MPDSocketTest.java\nindex 58053d0440..48b3a6d067 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/11/MPDSocketTest.java\n@@ -307,30 +307,27 @@ public class MPDSocketTest {\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(\"OK MPD 0.18.0\");\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            e.printStackTrace( ) ;}socket= new TestSocket(inetAddress, 9999, 10);\n+            socket.setReader(mockedBufferedReader);\n+            when(mockSocket.isConnected()).thenReturn(true);\n         }\n \n-        socket = new TestSocket(inetAddress, 9999, 10);\n-        socket.setReader(mockedBufferedReader);\n-        when(mockSocket.isConnected()).thenReturn(true);\n-    }\n+        private class TestSocket extends MPDSocket {\n+            public TestSocket(InetAddress server, int port, int timeout) {\n+                super(server, port, timeout);\n+            }\n \n-    private class TestSocket extends MPDSocket {\n-        public TestSocket(InetAddress server, int port, int timeout) {\n-            super(server, port, timeout);\n-        }\n+            @Override\n+            protected Socket createSocket() {\n+                return mockSocket;\n+            }\n \n-        @Override\n-        protected Socket createSocket() {\n-            return mockSocket;\n-        }\n+            public void setReader(BufferedReader reader) {\n+                super.setReader(mockedBufferedReader);\n+            }\n \n-        public void setReader(BufferedReader reader) {\n-            super.setReader(mockedBufferedReader);\n+            public Socket createParentSocket() {\n+                return super.createSocket();\n+            }\n         }\n-\n-        public Socket createParentSocket() {\n-            return super.createSocket();\n-        }\n-    }\n-}\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/11/MPDSocketTest.java\nindex 58053d0440..c821abb68c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/11/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/11/MPDSocketTest.java\n@@ -307,7 +307,7 @@ public class MPDSocketTest {\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(\"OK MPD 0.18.0\");\n         } catch (IOException e) {\n-            e.printStackTrace();\n+    e .printStackTrace();\n         }\n \n         socket = new TestSocket(inetAddress, 9999, 10);\n",
            "diff_size": 1
        }
    ]
}