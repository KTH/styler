{
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class ValueAsBytesSerializerTest {\n\n  Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve());\n  EntityDescriptor event = repo.getEntity(\"event\");\n  EntityDescriptor gateway = repo.getEntity(\"gateway\");\n  long now = System.currentTimeMillis();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "column": "53",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/13/ValueAsBytesSerializerTest.java\nindex d4954378d8..0d1549b79f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/13/ValueAsBytesSerializerTest.java\n@@ -31,8 +31,8 @@ import org.junit.Test;\n /** Test {@link ValueAsBytesSerializer}. */\n public class ValueAsBytesSerializerTest {\n \n-  Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve());\n-  EntityDescriptor event = repo.getEntity(\"event\");\n+  Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve())\n+  ; EntityDescriptor event = repo.getEntity(\"event\");\n   EntityDescriptor gateway = repo.getEntity(\"gateway\");\n   long now = System.currentTimeMillis();\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/13/ValueAsBytesSerializerTest.java\nindex d4954378d8..ab70044465 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/13/ValueAsBytesSerializerTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2020 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.kafka.serializer;\n \n import static org.junit.Assert.*;\n@@ -31,7 +32,8 @@ import org.junit.Test;\n /** Test {@link ValueAsBytesSerializer}. */\n public class ValueAsBytesSerializerTest {\n \n-  Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve());\n+  Repository repo =\n+      Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve());\n   EntityDescriptor event = repo.getEntity(\"event\");\n   EntityDescriptor gateway = repo.getEntity(\"gateway\");\n   long now = System.currentTimeMillis();\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/13/ValueAsBytesSerializerTest.java\nindex d4954378d8..cd20dafb5e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/13/ValueAsBytesSerializerTest.java\n@@ -43,7 +43,8 @@ public class ValueAsBytesSerializerTest {\n     StreamElement parsed =\n         serializer.parseValue(\n             event, (\"my-input-string\").getBytes(StandardCharsets.UTF_8), 1, 2, now);\n-    assertNotNull(parsed);\n+\n+assertNotNull(parsed);\n     assertTrue(parsed.getParsed().isPresent());\n     assertEquals(now, parsed.getStamp());\n   }\n@@ -90,13 +91,10 @@ public class ValueAsBytesSerializerTest {\n             1,\n             2,\n             now,\n-            TimestampType.CREATE_TIME,\n-            -1L,\n-            -1,\n-            -1,\n-            null,\n+            TimestampType.CREATE_TIME, -1L, -1, -1, null,\n             (\"my-input-string\").getBytes(StandardCharsets.UTF_8));\n-    StreamElement parsed = serializer.read(record, event);\n+\n+        StreamElement parsed = serializer.read(record, event);\n     assertNotNull(parsed);\n     assertTrue(parsed.getParsed().isPresent());\n     assertEquals(now, parsed.getStamp());\n@@ -113,16 +111,13 @@ public class ValueAsBytesSerializerTest {\n             1,\n             2,\n             now,\n-            TimestampType.CREATE_TIME,\n-            -1L,\n-            -1,\n-            -1,\n-            null,\n+            TimestampType.CREATE_TIME, -1L, -1, -1, null,\n             (\"my-input-string\").getBytes(StandardCharsets.UTF_8));\n-    StreamElement parsed = serializer.read(record, event);\n+\n+        StreamElement parsed = serializer.read(record, event);\n     assertNotNull(parsed);\n     assertTrue(parsed.getParsed().isPresent());\n     assertEquals(now, parsed.getStamp());\n     assertEquals(\"device.1:2\", parsed.getAttribute());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'member def type' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'member def type' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'member def type' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'member def type' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/13/ValueAsBytesSerializerTest.java\nindex d4954378d8..55ac6fa738 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/13/ValueAsBytesSerializerTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.direct.kafka.serializer;\n \n import static org.junit.Assert.*;\n-\n import com.typesafe.config.ConfigFactory;\n import cz.o2.proxima.repository.EntityDescriptor;\n import cz.o2.proxima.repository.Repository;\n@@ -29,27 +28,29 @@ import org.apache.kafka.common.serialization.Serdes;\n import org.junit.Test;\n \n /** Test {@link ValueAsBytesSerializer}. */\n+\n+\n public class ValueAsBytesSerializerTest {\n \n-  Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve());\n-  EntityDescriptor event = repo.getEntity(\"event\");\n-  EntityDescriptor gateway = repo.getEntity(\"gateway\");\n-  long now = System.currentTimeMillis();\n+    Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve());\n+\n+    EntityDescriptor event = repo.getEntity(\"event\");\n+\n+    EntityDescriptor gateway = repo.getEntity(\"gateway\");\n+    long now = System.currentTimeMillis();\n \n-  @Test\n-  public void testDeserializer() {\n+    @Test\n+    public void testDeserializer() {\n     ValueAsBytesSerializer serializer = new ValueAsBytesSerializer(\"data\");\n     serializer.setup(event);\n-    StreamElement parsed =\n-        serializer.parseValue(\n-            event, (\"my-input-string\").getBytes(StandardCharsets.UTF_8), 1, 2, now);\n+    StreamElement parsed = serializer.parseValue(event, (\"my-input-string\").getBytes(StandardCharsets.UTF_8), 1, 2, now);\n     assertNotNull(parsed);\n     assertTrue(parsed.getParsed().isPresent());\n     assertEquals(now, parsed.getStamp());\n-  }\n+    }\n \n-  @Test\n-  public void testDeserializerWithNullValue() {\n+    @Test\n+    public void testDeserializerWithNullValue() {\n     ValueAsBytesSerializer serializer = new ValueAsBytesSerializer(\"data\");\n     serializer.setup(event);\n     StreamElement parsed = serializer.parseValue(event, null, 1, 2, now);\n@@ -57,72 +58,42 @@ public class ValueAsBytesSerializerTest {\n     assertFalse(parsed.getParsed().isPresent());\n     assertEquals(now, parsed.getStamp());\n     assertTrue(parsed.isDelete());\n-  }\n+    }\n \n-  @Test(expected = UnsupportedOperationException.class)\n-  public void testWriteFails() {\n+    @Test(expected = UnsupportedOperationException.class )\n+    public void testWriteFails() {\n     ValueAsBytesSerializer serializer = new ValueAsBytesSerializer(\"data\");\n-    serializer.write(\n-        StreamElement.upsert(\n-            event,\n-            event.getAttribute(\"data\"),\n-            UUID.randomUUID().toString(),\n-            \"key\",\n-            \"data\",\n-            now,\n-            new byte[] {}));\n-  }\n+    serializer.write(StreamElement.upsert(event, event.getAttribute(\"data\"), UUID.randomUUID().toString(), \"key\", \"data\", now, new byte[] {}));\n+    }\n \n-  @Test\n-  public void testSerdes() {\n+    @Test\n+    public void testSerdes() {\n     ValueAsBytesSerializer serializer = new ValueAsBytesSerializer(\"data\");\n     assertEquals(Serdes.ByteArray().getClass(), serializer.keySerde().getClass());\n     assertEquals(Serdes.ByteArray().getClass(), serializer.valueSerde().getClass());\n-  }\n+    }\n \n-  @Test\n-  public void tsetParseValue() {\n+    @Test\n+    public void tsetParseValue() {\n     ValueAsBytesSerializer serializer = new ValueAsBytesSerializer(\"data\");\n     serializer.setup(event);\n-    ConsumerRecord<byte[], byte[]> record =\n-        new ConsumerRecord<byte[], byte[]>(\n-            \"topic\",\n-            1,\n-            2,\n-            now,\n-            TimestampType.CREATE_TIME,\n-            -1L,\n-            -1,\n-            -1,\n-            null,\n-            (\"my-input-string\").getBytes(StandardCharsets.UTF_8));\n+    ConsumerRecord<byte[], byte[]> record = new ConsumerRecord<byte[], byte[]>(\"topic\", 1, 2, now, TimestampType.CREATE_TIME, -1L, -1, -1, null, (\"my-input-string\").getBytes(StandardCharsets.UTF_8));\n     StreamElement parsed = serializer.read(record, event);\n     assertNotNull(parsed);\n     assertTrue(parsed.getParsed().isPresent());\n     assertEquals(now, parsed.getStamp());\n     assertEquals(\"data\", parsed.getAttribute());\n-  }\n+    }\n \n-  @Test\n-  public void tsetParseValueWildcard() {\n+    @Test\n+    public void tsetParseValueWildcard() {\n     ValueAsBytesSerializer serializer = new ValueAsBytesSerializer(\"device.*\");\n     serializer.setup(gateway);\n-    ConsumerRecord<byte[], byte[]> record =\n-        new ConsumerRecord<byte[], byte[]>(\n-            \"topic\",\n-            1,\n-            2,\n-            now,\n-            TimestampType.CREATE_TIME,\n-            -1L,\n-            -1,\n-            -1,\n-            null,\n-            (\"my-input-string\").getBytes(StandardCharsets.UTF_8));\n+    ConsumerRecord<byte[], byte[]> record = new ConsumerRecord<byte[], byte[]>(\"topic\", 1, 2, now, TimestampType.CREATE_TIME, -1L, -1, -1, null, (\"my-input-string\").getBytes(StandardCharsets.UTF_8));\n     StreamElement parsed = serializer.read(record, event);\n     assertNotNull(parsed);\n     assertTrue(parsed.getParsed().isPresent());\n     assertEquals(now, parsed.getStamp());\n     assertEquals(\"device.1:2\", parsed.getAttribute());\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "column": "53",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/13/ValueAsBytesSerializerTest.java\nindex d4954378d8..0d1549b79f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/13/ValueAsBytesSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/13/ValueAsBytesSerializerTest.java\n@@ -31,8 +31,8 @@ import org.junit.Test;\n /** Test {@link ValueAsBytesSerializer}. */\n public class ValueAsBytesSerializerTest {\n \n-  Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve());\n-  EntityDescriptor event = repo.getEntity(\"event\");\n+  Repository repo = Repository.of(() -> ConfigFactory.load(\"test-reference.conf\").resolve())\n+  ; EntityDescriptor event = repo.getEntity(\"event\");\n   EntityDescriptor gateway = repo.getEntity(\"gateway\");\n   long now = System.currentTimeMillis();\n \n",
            "diff_size": 2
        }
    ]
}