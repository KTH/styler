{
    "error_id": "67",
    "information": {
        "errors": [
            {
                "line": "33",
                "column": "71",
                "severity": "warning",
                "message": "WhitespaceAround: '{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "  public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n    List<CoverageRequirementRule> ruleList = new ArrayList<>();\n    for (CoverageRequirementRule rule :repository.findRules(criteria)){\n      ruleList.add(rule);\n    }\n    if (ruleList.size() == 0) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/styler/67/CoverageRequirementRuleFinderDatabase.java\nindex 502f372d78..fa8402a0b5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/styler/67/CoverageRequirementRuleFinderDatabase.java\n@@ -30,7 +30,7 @@ public class CoverageRequirementRuleFinderDatabase implements CoverageRequiremen\n    */\n   public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n     List<CoverageRequirementRule> ruleList = new ArrayList<>();\n-    for (CoverageRequirementRule rule :repository.findRules(criteria)){\n+    for (CoverageRequirementRule rule :repository.findRules(criteria)) {\n       ruleList.add(rule);\n     }\n     if (ruleList.size() == 0) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/intellij/67/CoverageRequirementRuleFinderDatabase.java\nindex 502f372d78..ac00ef556e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/intellij/67/CoverageRequirementRuleFinderDatabase.java\n@@ -30,7 +30,7 @@ public class CoverageRequirementRuleFinderDatabase implements CoverageRequiremen\n    */\n   public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n     List<CoverageRequirementRule> ruleList = new ArrayList<>();\n-    for (CoverageRequirementRule rule :repository.findRules(criteria)){\n+    for (CoverageRequirementRule rule : repository.findRules(criteria)) {\n       ruleList.add(rule);\n     }\n     if (ruleList.size() == 0) {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/naturalize/67/CoverageRequirementRuleFinderDatabase.java\nindex 502f372d78..d5d161b55b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/naturalize/67/CoverageRequirementRuleFinderDatabase.java\n@@ -20,8 +20,7 @@ public class CoverageRequirementRuleFinderDatabase implements CoverageRequiremen\n   @Autowired\n   DataRepository repository;\n \n-  public CoverageRequirementRuleFinderDatabase() {\n-  }\n+  public CoverageRequirementRuleFinderDatabase() {}\n \n   /**\n    * Find and return the relevant coverage rule in the database.\n@@ -30,7 +29,7 @@ public class CoverageRequirementRuleFinderDatabase implements CoverageRequiremen\n    */\n   public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n     List<CoverageRequirementRule> ruleList = new ArrayList<>();\n-    for (CoverageRequirementRule rule :repository.findRules(criteria)){\n+    for (CoverageRequirementRule rule : repository.findRules(criteria)) {\n       ruleList.add(rule);\n     }\n     if (ruleList.size() == 0) {\n@@ -38,4 +37,4 @@ public class CoverageRequirementRuleFinderDatabase implements CoverageRequiremen\n     }\n     return ruleList;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 8, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 8, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 8, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 2, expected is 8, indentation should be the same level as line 32.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 8, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 12, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 12, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 8, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/codebuff/67/CoverageRequirementRuleFinderDatabase.java\nindex 502f372d78..51842499b2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/codebuff/67/CoverageRequirementRuleFinderDatabase.java\n@@ -10,32 +10,33 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Profile;\n import org.springframework.stereotype.Component;\n \n+\n @Component\n @Profile(\"localDb\")\n-public class CoverageRequirementRuleFinderDatabase implements CoverageRequirementRuleFinder {\n+public class CoverageRequirementRuleFinderDatabase\n+    implements CoverageRequirementRuleFinder {\n+        static final Logger logger = LoggerFactory.getLogger(CoverageRequirementRuleFinderDatabase.class);\n \n-  static final Logger logger =\n-      LoggerFactory.getLogger(CoverageRequirementRuleFinderDatabase.class);\n \n-  @Autowired\n-  DataRepository repository;\n+        @Autowired DataRepository repository;\n \n-  public CoverageRequirementRuleFinderDatabase() {\n-  }\n+        public CoverageRequirementRuleFinderDatabase() {}\n \n   /**\n    * Find and return the relevant coverage rule in the database.\n    *\n    * @param criteria The search criteria object\n    */\n-  public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n+\n+\n+        public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n     List<CoverageRequirementRule> ruleList = new ArrayList<>();\n-    for (CoverageRequirementRule rule :repository.findRules(criteria)){\n-      ruleList.add(rule);\n+    for (CoverageRequirementRule rule : repository.findRules(criteria)) {\n+            ruleList.add(rule);\n     }\n     if (ruleList.size() == 0) {\n-      logger.debug(\"RuleFinder returned no results for query: \" + criteria.toString());\n+            logger.debug(\"RuleFinder returned no results for query: \" + criteria.toString());\n     }\n     return ruleList;\n-  }\n-}\n+        }\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/styler_random/67/CoverageRequirementRuleFinderDatabase.java\nindex 502f372d78..fa8402a0b5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/styler_random/67/CoverageRequirementRuleFinderDatabase.java\n@@ -30,7 +30,7 @@ public class CoverageRequirementRuleFinderDatabase implements CoverageRequiremen\n    */\n   public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n     List<CoverageRequirementRule> ruleList = new ArrayList<>();\n-    for (CoverageRequirementRule rule :repository.findRules(criteria)){\n+    for (CoverageRequirementRule rule :repository.findRules(criteria)) {\n       ruleList.add(rule);\n     }\n     if (ruleList.size() == 0) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/styler_three_grams/67/CoverageRequirementRuleFinderDatabase.java\nindex 502f372d78..fa8402a0b5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/67/CoverageRequirementRuleFinderDatabase.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/styler_three_grams/67/CoverageRequirementRuleFinderDatabase.java\n@@ -30,7 +30,7 @@ public class CoverageRequirementRuleFinderDatabase implements CoverageRequiremen\n    */\n   public List<CoverageRequirementRule> findRules(CoverageRequirementRuleCriteria criteria) {\n     List<CoverageRequirementRule> ruleList = new ArrayList<>();\n-    for (CoverageRequirementRule rule :repository.findRules(criteria)){\n+    for (CoverageRequirementRule rule :repository.findRules(criteria)) {\n       ruleList.add(rule);\n     }\n     if (ruleList.size() == 0) {\n",
            "diff_size": 1
        }
    ]
}