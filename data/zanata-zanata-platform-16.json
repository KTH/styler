{
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "323",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "\n    public void validateSuppliedId() {\n        getInstance(); // this will raise an EntityNotFound exception\n        // when id is invalid and conversation will not\n        // start\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "323",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/16/VersionHome.java\nindex 3fc2a6ac92..b29cb58eb6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/16/VersionHome.java\n@@ -320,7 +320,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n+    getInstance(); // this will raise an EntityNotFound exception\n         // when id is invalid and conversation will not\n         // start\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "324",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/16/VersionHome.java\nindex 3fc2a6ac92..cd3a3dfa80 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/16/VersionHome.java\n@@ -19,6 +19,7 @@\n  *  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  *  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.action;\n \n import static com.google.common.base.Strings.isNullOrEmpty;\n@@ -85,9 +86,9 @@ import java.util.stream.Collectors;\n @Model\n @Transactional\n public class VersionHome extends SlugHome<HProjectIteration>\n-        implements HasLanguageSettings, Serializable {\n+    implements HasLanguageSettings, Serializable {\n     private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(VersionHome.class);\n+        org.slf4j.LoggerFactory.getLogger(VersionHome.class);\n     private static final long serialVersionUID = 1L;\n \n     /**\n@@ -128,7 +129,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     private WebhookServiceImpl webhookServiceImpl;\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n     private Map<ValidationId, ValidationAction> availableValidations =\n-            Maps.newHashMap();\n+        Maps.newHashMap();\n     private boolean isNewInstance = false;\n     private String selectedProjectType;\n     private boolean copyFromVersion = true;\n@@ -137,9 +138,9 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     private void setDefaultCopyFromVersion() {\n         List<VersionItem> otherVersions = getOtherVersions();\n         if (!otherVersions.isEmpty()\n-                && isEmpty(copyFromVersionSlug)) {\n+            && isEmpty(copyFromVersionSlug)) {\n             this.copyFromVersionSlug =\n-                    otherVersions.get(0).getVersion().getSlug();\n+                otherVersions.get(0).getVersion().getSlug();\n             copyFromVersion = true;\n         } else {\n             copyFromVersion = false;\n@@ -201,12 +202,12 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         HProject project = getProject();\n         if (project != null) {\n             List<HProjectIteration> versionList =\n-                    projectIterationDAO.getByProjectSlug(getProjectSlug(),\n-                            EntityStatus.ACTIVE, EntityStatus.READONLY);\n+                projectIterationDAO.getByProjectSlug(getProjectSlug(),\n+                    EntityStatus.ACTIVE, EntityStatus.READONLY);\n             versionList.sort(ComparatorUtil.VERSION_CREATION_DATE_COMPARATOR);\n             List<VersionItem> versionItems =\n-                    versionList.stream().map(this::makeVersionItem)\n-                            .collect(Collectors.toList());\n+                versionList.stream().map(this::makeVersionItem)\n+                    .collect(Collectors.toList());\n             if (isEmpty(copyFromVersionSlug) && !versionItems.isEmpty()) {\n                 versionItems.get(0).setSelected(true);\n             }\n@@ -217,7 +218,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     private VersionItem makeVersionItem(HProjectIteration iter) {\n         boolean selected = StringUtils.isNotEmpty(copyFromVersionSlug) &&\n-                copyFromVersionSlug.equals(iter.getSlug());\n+            copyFromVersionSlug.equals(iter.getSlug());\n         return new VersionItem(selected, iter);\n     }\n \n@@ -241,9 +242,9 @@ public class VersionHome extends SlugHome<HProjectIteration>\n             this.version = version;\n         }\n \n-        @java.beans.ConstructorProperties({ \"selected\", \"version\" })\n+        @java.beans.ConstructorProperties({\"selected\", \"version\"})\n         public VersionItem(final boolean selected,\n-                final HProjectIteration version) {\n+                           final HProjectIteration version) {\n             this.selected = selected;\n             this.version = version;\n         }\n@@ -253,22 +254,22 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     protected HProjectIteration loadInstance() {\n         Session session = (Session) getEntityManager().getDelegate();\n         HProject project = (HProject) session.byNaturalId(HProject.class)\n-                .using(\"slug\", getProjectSlug()).load();\n+            .using(\"slug\", getProjectSlug()).load();\n         validateProjectState(project);\n         if (versionId == null) {\n             HProject targetProject = projectDAO.getBySlug(getProjectSlug());\n             validateProjectState(targetProject);\n             HProjectIteration iteration = (HProjectIteration) session\n-                    .byNaturalId(HProjectIteration.class)\n-                    .using(\"slug\", getSlug())\n-                    .using(\"project\", targetProject)\n-                    .load();\n+                .byNaturalId(HProjectIteration.class)\n+                .using(\"slug\", getSlug())\n+                .using(\"project\", targetProject)\n+                .load();\n             validateIterationState(iteration);\n             versionId = iteration.getId();\n             return iteration;\n         } else {\n             HProjectIteration iteration = (HProjectIteration) session\n-                    .load(HProjectIteration.class, versionId);\n+                .load(HProjectIteration.class, versionId);\n             validateIterationState(iteration);\n             return iteration;\n         }\n@@ -276,10 +277,10 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     private void validateIterationState(HProjectIteration iteration) {\n         if (iteration == null\n-                || iteration.getStatus() == EntityStatus.OBSOLETE) {\n+            || iteration.getStatus() == EntityStatus.OBSOLETE) {\n             log.warn(\n-                    \"Project version [id={}, slug={}], does not exist or is soft deleted: {}\",\n-                    versionId, getSlug(), iteration);\n+                \"Project version [id={}, slug={}], does not exist or is soft deleted: {}\",\n+                versionId, getSlug(), iteration);\n             throw new VersionNotFoundException(getProjectSlug(), getSlug());\n         }\n     }\n@@ -287,7 +288,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     private void validateProjectState(HProject project) {\n         if (project == null || project.getStatus() == EntityStatus.OBSOLETE) {\n             log.warn(\"Project [slug={}], does not exist or is soft deleted: {}\",\n-                    getProjectSlug(), project);\n+                getProjectSlug(), project);\n             throw new ProjectNotFoundException(getProjectSlug());\n         }\n     }\n@@ -295,25 +296,25 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     @SuppressWarnings(\"deprecation\")\n     private void setMessage(String message) {\n         conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                message);\n+            message);\n     }\n \n     public List<ValidationAction> getValidationList() {\n         List<ValidationAction> sortedList =\n-                Lists.newArrayList(getValidations().values());\n+            Lists.newArrayList(getValidations().values());\n         Collections.sort(sortedList,\n-                ValidationFactory.ValidationActionComparator);\n+            ValidationFactory.ValidationActionComparator);\n         return sortedList;\n     }\n \n     private Map<ValidationId, ValidationAction> getValidations() {\n         if (availableValidations.isEmpty()) {\n             Collection<ValidationAction> validationList =\n-                    validationServiceImpl.getValidationActions(getProjectSlug(),\n-                            getInstance().getSlug());\n+                validationServiceImpl.getValidationActions(getProjectSlug(),\n+                    getInstance().getSlug());\n             for (ValidationAction validationAction : validationList) {\n                 availableValidations.put(validationAction.getId(),\n-                        validationAction);\n+                    validationAction);\n             }\n         }\n         return availableValidations;\n@@ -328,7 +329,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public ProjectType getProjectType() {\n         if (getInstance().getProjectType() == null) {\n             getInstance().setProjectType(\n-                    getInstance().getProject().getDefaultProjectType());\n+                getInstance().getProject().getDefaultProjectType());\n         }\n         return getInstance().getProjectType();\n     }\n@@ -341,7 +342,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void validateProjectSlug() {\n         if (projectDAO.getBySlug(getProjectSlug()) == null) {\n             throw new EntityNotFoundException(\n-                    \"no entity with slug \" + getProjectSlug());\n+                \"no entity with slug \" + getProjectSlug());\n         }\n     }\n \n@@ -353,14 +354,14 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public boolean validateSlug(String slug, String componentId) {\n         if (!isSlugAvailable(slug)) {\n             facesMessages.addToControl(componentId,\n-                    \"This Version ID has been used in this project\");\n+                \"This Version ID has been used in this project\");\n             return false;\n         }\n         boolean valid = new SlugValidator().isValid(slug, null);\n         if (!valid) {\n             String validationMessages =\n-                    ResourceBundle.getBundle(\"ValidationMessages\").getString(\n-                            \"javax.validation.constraints.Slug.message\");\n+                ResourceBundle.getBundle(\"ValidationMessages\").getString(\n+                    \"javax.validation.constraints.Slug.message\");\n             facesMessages.addToControl(componentId, validationMessages);\n             return false;\n         }\n@@ -369,13 +370,14 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     public boolean isSlugAvailable(String slug) {\n         return slugEntityServiceImpl.isProjectIterationSlugAvailable(slug,\n-                getProjectSlug());\n+            getProjectSlug());\n     }\n \n     @Transactional\n     public String createVersion() {\n-        if (!validateSlug(inputSlugValue, \"slug\"))\n+        if (!validateSlug(inputSlugValue, \"slug\")) {\n             return \"invalid-slug\";\n+        }\n         if (copyFromVersion) {\n             copyVersion();\n             return \"copy-version\";\n@@ -387,9 +389,9 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     @Transactional\n     public void copyVersion() {\n         copyVersionManager.startCopyVersion(getProjectSlug(),\n-                copyFromVersionSlug, inputSlugValue);\n+            copyFromVersionSlug, inputSlugValue);\n         setMessage(msgs.format(\"jsf.copyVersion.started\", inputSlugValue,\n-                copyFromVersionSlug));\n+            copyFromVersionSlug));\n     }\n \n     public void setSlug(String slug) {\n@@ -413,14 +415,14 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         // and all enabled locales and locale alias data if it is\n         // overriding.\n         List<HLocale> projectLocales = localeServiceImpl\n-                .getSupportedLanguageByProject(getProjectSlug());\n+            .getSupportedLanguageByProject(getProjectSlug());\n         getInstance().getCustomizedLocales().addAll(projectLocales);\n         getInstance().getCustomizedValidations()\n-                .putAll(project.getCustomizedValidations());\n+            .putAll(project.getCustomizedValidations());\n         String result = super.persist();\n         webhookServiceImpl.processWebhookVersionChanged(getProjectSlug(), slug,\n-                getProject().getWebHooks(),\n-                VersionChangedEvent.ChangeType.CREATE);\n+            getProject().getWebHooks(),\n+            VersionChangedEvent.ChangeType.CREATE);\n         return result;\n     }\n \n@@ -432,7 +434,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     @Override\n     public NaturalIdentifier getNaturalId() {\n         return Restrictions.naturalId().set(\"slug\", getSlug()).set(\"project\",\n-                projectDAO.getBySlug(getProjectSlug()));\n+            projectDAO.getBySlug(getProjectSlug()));\n     }\n \n     @Override\n@@ -442,9 +444,9 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     public boolean isValidationsSameAsProject() {\n         Collection<ValidationAction> versionValidations = validationServiceImpl\n-                .getValidationActions(getProjectSlug(), getSlug());\n+            .getValidationActions(getProjectSlug(), getSlug());\n         Collection<ValidationAction> projectValidations =\n-                validationServiceImpl.getValidationActions(getProjectSlug());\n+            validationServiceImpl.getValidationActions(getProjectSlug());\n         return versionValidations.equals(projectValidations);\n     }\n \n@@ -452,7 +454,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void copyValidationFromProject() {\n         getInstance().getCustomizedValidations().clear();\n         getInstance().getCustomizedValidations()\n-                .putAll(getInstance().getProject().getCustomizedValidations());\n+            .putAll(getInstance().getProject().getCustomizedValidations());\n         availableValidations.clear();\n         update();\n         setMessage(msgs.get(\"jsf.iteration.CopyProjectValidations.message\"));\n@@ -469,11 +471,11 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public String update() {\n         identity.checkPermission(getInstance(), \"update\");\n         if (!getSlug().equals(getInputSlugValue())\n-                && !validateSlug(getInputSlugValue(), \"slug\")) {\n+            && !validateSlug(getInputSlugValue(), \"slug\")) {\n             return null;\n         }\n         if (getInputSlugValue() != null\n-                && !getSlug().equals(getInputSlugValue())) {\n+            && !getSlug().equals(getInputSlugValue())) {\n             getInstance().setSlug(getInputSlugValue());\n         }\n         boolean softDeleted = false;\n@@ -491,7 +493,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n             return state;\n         }\n         facesMessages.addGlobal(SEVERITY_INFO,\n-                msgs.get(\"jsf.version.settings.updated\"));\n+            msgs.get(\"jsf.version.settings.updated\"));\n         if (!getSlug().equals(getInstance().getSlug())) {\n             projectAndVersionSlug.setVersionSlug(getInstance().getSlug());\n             return \"version-slug-updated\";\n@@ -509,11 +511,11 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         identity.checkPermission(getInstance(), \"update\");\n         if (getProject().getStatus() == EntityStatus.READONLY) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    \"Parent project is read-only!\");\n+                \"Parent project is read-only!\");\n             return;\n         }\n         String message = msgs.format(\"jsf.iteration.status.updated\",\n-                EntityStatus.valueOf(initial));\n+            EntityStatus.valueOf(initial));\n         getInstance().setStatus(EntityStatus.valueOf(initial));\n         if (getInstance().getStatus() == EntityStatus.OBSOLETE) {\n             message = msgs.get(\"jsf.iteration.deleted\");\n@@ -527,8 +529,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         String slug = getInstance().getSlug();\n         updateStatus('O');\n         webhookServiceImpl.processWebhookVersionChanged(getProjectSlug(), slug,\n-                getProject().getWebHooks(),\n-                VersionChangedEvent.ChangeType.DELETE);\n+            getProject().getWebHooks(),\n+            VersionChangedEvent.ChangeType.DELETE);\n     }\n \n     @Transactional\n@@ -540,39 +542,39 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     @Transactional\n     public void copyProjectTypeFromProject() {\n         getInstance().setProjectType(\n-                getInstance().getProject().getDefaultProjectType());\n+            getInstance().getProject().getDefaultProjectType());\n         update();\n         setMessage(msgs.get(\"jsf.iteration.CopyProjectType.message\"));\n     }\n \n     /**\n      * @return comma-separated list of accepted file extensions. May be an empty\n-     *         string\n+     * string\n      */\n     @SuppressWarnings(\"deprecation\")\n     public String getAcceptedSourceFileExtensions() {\n         List<String> supportedTypes =\n-                ProjectType.getSupportedSourceFileTypes(getProjectType())\n-                        .stream().map(docType -> Joiner.on(\",\")\n-                        .join(docType.getSourceExtensions()))\n-                        .collect(Collectors.toList());\n+            ProjectType.getSupportedSourceFileTypes(getProjectType())\n+                .stream().map(docType -> Joiner.on(\",\")\n+                .join(docType.getSourceExtensions()))\n+                .collect(Collectors.toList());\n         return Joiner.on(\", \").join(supportedTypes);\n     }\n \n     @SuppressWarnings(\"deprecation\")\n     public String getAcceptedSourceFile() {\n         List<String> supportedTypes =\n-                ProjectType.getSupportedSourceFileTypes(getProjectType())\n-                        .stream()\n-                        .map(docType -> docType.name() + \"[\" + Joiner.on(\",\")\n-                                .join(docType.getSourceExtensions()) + \"]\")\n-                        .collect(Collectors.toList());\n+            ProjectType.getSupportedSourceFileTypes(getProjectType())\n+                .stream()\n+                .map(docType -> docType.name() + \"[\" + Joiner.on(\",\")\n+                    .join(docType.getSourceExtensions()) + \"]\")\n+                .collect(Collectors.toList());\n         return Joiner.on(\", \").join(supportedTypes);\n     }\n \n     private void updateProjectType() {\n         if (!isEmpty(selectedProjectType)\n-                && !selectedProjectType.equals(\"null\")) {\n+            && !selectedProjectType.equals(\"null\")) {\n             ProjectType projectType = ProjectType.valueOf(selectedProjectType);\n             getInstance().setProjectType(projectType);\n         } else {\n@@ -589,20 +591,20 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         identity.checkPermission(getInstance(), \"update\");\n         ValidationId validationId = ValidationId.valueOf(name);\n         for (Map.Entry<ValidationId, ValidationAction> entry : getValidations()\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getKey().name().equals(name)) {\n                 getValidations().get(validationId)\n-                        .setState(ValidationAction.State.valueOf(state));\n+                    .setState(ValidationAction.State.valueOf(state));\n                 getInstance().getCustomizedValidations().put(\n-                        entry.getKey().name(),\n-                        entry.getValue().getState().name());\n+                    entry.getKey().name(),\n+                    entry.getValue().getState().name());\n                 ensureMutualExclusivity(getValidations().get(validationId));\n                 break;\n             }\n         }\n         update();\n         setMessage(msgs.format(\"jsf.validation.updated\",\n-                validationId.getDisplayName(), state));\n+            validationId.getDisplayName(), state));\n     }\n \n     /**\n@@ -610,15 +612,15 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * validation will be turn off\n      */\n     private void\n-            ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n+    ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n         if (selectedValidationAction.getState() != ValidationAction.State.Off) {\n             for (ValidationAction exclusiveValAction : selectedValidationAction\n-                    .getExclusiveValidations()) {\n+                .getExclusiveValidations()) {\n                 getInstance().getCustomizedValidations().put(\n-                        exclusiveValAction.getId().name(),\n-                        ValidationAction.State.Off.name());\n+                    exclusiveValAction.getId().name(),\n+                    ValidationAction.State.Off.name());\n                 getValidations().get(exclusiveValAction.getId())\n-                        .setState(ValidationAction.State.Off);\n+                    .setState(ValidationAction.State.Off);\n             }\n         }\n     }\n@@ -648,7 +650,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n         List<LocaleId> aliasedLocales =\n-                new ArrayList<>(getLocaleAliases().keySet());\n+            new ArrayList<>(getLocaleAliases().keySet());\n         if (!aliasedLocales.isEmpty()) {\n             ensureOverridingLocales();\n             for (LocaleId aliasedLocale : aliasedLocales) {\n@@ -705,7 +707,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n         for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getValue()) {\n                 boolean hadAlias = removeAliasSilently(entry.getKey());\n                 if (hadAlias) {\n@@ -720,20 +722,19 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * Show an appropriate message for the removal of aliases from locales with\n      * the given IDs.\n      *\n-     * @param removed\n-     *            ids of locales that had aliases removed\n+     * @param removed ids of locales that had aliases removed\n      */\n     private void showRemovedAliasesMessage(List<LocaleId> removed) {\n         if (removed.isEmpty()) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n+                msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n         } else if (removed.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n+                .format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n-                            StringUtils.join(removed, \", \")));\n+                msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n+                    StringUtils.join(removed, \", \")));\n         }\n     }\n \n@@ -769,24 +770,22 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         if (isNullOrEmpty(alias)) {\n             if (hadAlias) {\n                 facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                        msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n+                    msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n             } else {\n                 facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                        .format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n+                    .format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n             }\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n+                msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n         }\n     }\n \n     /**\n      * Set or remove a locale alias without showing any message.\n      *\n-     * @param localeId\n-     *            for which to set alias\n-     * @param alias\n-     *            new alias to use. Use empty string to remove alias.\n+     * @param localeId for which to set alias\n+     * @param alias    new alias to use. Use empty string to remove alias.\n      * @return true if there was already an alias, otherwise false.\n      */\n     private boolean setLocaleAliasSilently(LocaleId localeId, String alias) {\n@@ -800,7 +799,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n             }\n         } else {\n             final boolean sameAlias =\n-                    hadAlias && alias.equals(aliases.get(localeId));\n+                hadAlias && alias.equals(aliases.get(localeId));\n             if (!sameAlias) {\n                 ensureOverridingLocales();\n                 aliases.put(localeId, alias);\n@@ -822,10 +821,10 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     public List<HLocale> getEnabledLocales() {\n         if (StringUtils.isNotEmpty(getProjectSlug())\n-                && StringUtils.isNotEmpty(getSlug())) {\n+            && StringUtils.isNotEmpty(getSlug())) {\n             List<HLocale> locales =\n-                    localeServiceImpl.getSupportedLanguageByProjectIteration(\n-                            getProjectSlug(), getSlug());\n+                localeServiceImpl.getSupportedLanguageByProjectIteration(\n+                    getProjectSlug(), getSlug());\n             locales.sort(ComparatorUtil.LOCALE_COMPARATOR);\n             return locales;\n         }\n@@ -851,7 +850,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> toRemove = Lists.newArrayList();\n         for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getValue()) {\n                 toRemove.add(entry.getKey());\n             }\n@@ -869,11 +868,11 @@ public class VersionHome extends SlugHome<HProjectIteration>\n             // users are editing it.\n         } else if (removed.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                    \"jsf.languageSettings.LanguageDisabled\", removed.get(0)));\n+                \"jsf.languageSettings.LanguageDisabled\", removed.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n-                            StringUtils.join(removed, \", \")));\n+                msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n+                    StringUtils.join(removed, \", \")));\n         }\n     }\n \n@@ -889,8 +888,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         update();\n         if (wasEnabled) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n-                            locale.getLocaleId()));\n+                msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n+                    locale.getLocaleId()));\n         }\n         // TODO consider showing a message like \"Locale {0} was already\n         // disabled.\"\n@@ -899,8 +898,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     /**\n      * Disable a locale without printing any message.\n      *\n-     * @param locale\n-     *            to disable\n+     * @param locale to disable\n      * @return true if the locale was enabled before this call, false otherwise.\n      */\n     private boolean disableLocaleSilently(HLocale locale) {\n@@ -936,9 +934,9 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         List<HLocale> activeLocales = localeDAO.findAllActive();\n         // only include those not already in the project version\n         List<HLocale> filteredList = activeLocales.stream()\n-                .filter(hLocale -> !getEnabledLocales().contains(hLocale))\n-                .sorted(ComparatorUtil.LOCALE_COMPARATOR)\n-                .collect(Collectors.toList());\n+            .filter(hLocale -> !getEnabledLocales().contains(hLocale))\n+            .sorted(ComparatorUtil.LOCALE_COMPARATOR)\n+            .collect(Collectors.toList());\n         return filteredList;\n     }\n \n@@ -949,7 +947,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> enabled = new ArrayList<>();\n         for (Map.Entry<LocaleId, Boolean> entry : selectedDisabledLocales\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getValue()) {\n                 boolean wasDisabled = enableLocaleSilently(entry.getKey());\n                 if (wasDisabled) {\n@@ -964,11 +962,11 @@ public class VersionHome extends SlugHome<HProjectIteration>\n             // users are editing it.\n         } else if (enabled.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                    \"jsf.languageSettings.LanguageEnabled\", enabled.get(0)));\n+                \"jsf.languageSettings.LanguageEnabled\", enabled.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n-                            StringUtils.join(enabled, \", \")));\n+                msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n+                    StringUtils.join(enabled, \", \")));\n         }\n     }\n \n@@ -979,7 +977,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         if (wasDisabled) {\n             LocaleId localeId = locale.getLocaleId();\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n+                .format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n         }\n         // TODO consider printing message like \"Locale {0} was already enabled\"\n     }\n@@ -995,7 +993,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n             ensureOverridingLocales();\n             getInstance().getCustomizedLocales().add(locale);\n             getSelectedEnabledLocales().put(locale.getLocaleId(),\n-                    Boolean.FALSE);\n+                Boolean.FALSE);\n             refreshDisabledLocales();\n         }\n         // else locale already enabled, nothing to do.\n@@ -1066,7 +1064,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * for a row is not automatically updated when a different row is submitted.\n      */\n     public void setEnteredLocaleAliases(\n-            final Map<LocaleId, String> enteredLocaleAliases) {\n+        final Map<LocaleId, String> enteredLocaleAliases) {\n         this.enteredLocaleAliases = enteredLocaleAliases;\n     }\n \n@@ -1087,7 +1085,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     }\n \n     public void setSelectedEnabledLocales(\n-            final Map<LocaleId, Boolean> selectedEnabledLocales) {\n+        final Map<LocaleId, Boolean> selectedEnabledLocales) {\n         this.selectedEnabledLocales = selectedEnabledLocales;\n     }\n \n@@ -1096,7 +1094,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     }\n \n     public void setSelectedDisabledLocales(\n-            final Map<LocaleId, Boolean> selectedDisabledLocales) {\n+        final Map<LocaleId, Boolean> selectedDisabledLocales) {\n         this.selectedDisabledLocales = selectedDisabledLocales;\n     }\n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "327",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/16/VersionHome.java\nindex 3fc2a6ac92..ff927830cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/16/VersionHome.java\n@@ -80,66 +80,79 @@ import java.util.ResourceBundle;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n \n+\n @Named(\"versionHome\")\n @ViewScoped\n @Model\n @Transactional\n public class VersionHome extends SlugHome<HProjectIteration>\n-        implements HasLanguageSettings, Serializable {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(VersionHome.class);\n+    implements HasLanguageSettings, Serializable {\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(VersionHome.class);\n     private static final long serialVersionUID = 1L;\n \n     /**\n      * This field is set from form input which can differ from original slug\n      */\n+\n     @Nullable\n     private String inputSlugValue;\n     private Long versionId;\n+\n     @Inject\n     @Any\n     private ProjectAndVersionSlug projectAndVersionSlug;\n+\n     @Inject\n     private FacesMessages facesMessages;\n+\n     @Inject\n     private ProjectIterationDAO projectIterationDAO;\n+\n     @Inject\n     private LocaleDAO localeDAO;\n+\n     @Inject\n     @SuppressWarnings(\"deprecation\")\n     private org.zanata.seam.scope.ConversationScopeMessages conversationScopeMessages;\n+\n     @Inject\n     private LocaleService localeServiceImpl;\n+\n     @Inject\n     private ValidationService validationServiceImpl;\n+\n     @Inject\n     private SlugEntityService slugEntityServiceImpl;\n+\n     @Inject\n     private ProjectDAO projectDAO;\n+\n     @Inject\n     private Messages msgs;\n+\n     @Inject\n     private CopyVersionManager copyVersionManager;\n+\n     @Inject\n     private UrlUtil urlUtil;\n+\n     @Inject\n     private ZanataIdentity identity;\n+\n     @Inject\n     private WebhookServiceImpl webhookServiceImpl;\n+\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n-    private Map<ValidationId, ValidationAction> availableValidations =\n-            Maps.newHashMap();\n+    private Map<ValidationId, ValidationAction> availableValidations = Maps.newHashMap();\n     private boolean isNewInstance = false;\n     private String selectedProjectType;\n     private boolean copyFromVersion = true;\n     private String copyFromVersionSlug;\n-\n     private void setDefaultCopyFromVersion() {\n         List<VersionItem> otherVersions = getOtherVersions();\n-        if (!otherVersions.isEmpty()\n-                && isEmpty(copyFromVersionSlug)) {\n-            this.copyFromVersionSlug =\n-                    otherVersions.get(0).getVersion().getSlug();\n+        if (!otherVersions.isEmpty() && isEmpty(copyFromVersionSlug)) {\n+            this.copyFromVersionSlug = otherVersions.get(0).getVersion()\n+                                                           .getSlug();\n             copyFromVersion = true;\n         } else {\n             copyFromVersion = false;\n@@ -200,13 +213,12 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public List<VersionItem> getOtherVersions() {\n         HProject project = getProject();\n         if (project != null) {\n-            List<HProjectIteration> versionList =\n-                    projectIterationDAO.getByProjectSlug(getProjectSlug(),\n-                            EntityStatus.ACTIVE, EntityStatus.READONLY);\n+            List<HProjectIteration> versionList = projectIterationDAO.getByProjectSlug(getProjectSlug(),\n+                                                                                       EntityStatus.ACTIVE,\n+                                                                                       EntityStatus.READONLY);\n             versionList.sort(ComparatorUtil.VERSION_CREATION_DATE_COMPARATOR);\n-            List<VersionItem> versionItems =\n-                    versionList.stream().map(this::makeVersionItem)\n-                            .collect(Collectors.toList());\n+            List<VersionItem> versionItems = versionList.stream().map(this::makeVersionItem)\n+                                                                 .collect(Collectors.toList());\n             if (isEmpty(copyFromVersionSlug) && !versionItems.isEmpty()) {\n                 versionItems.get(0).setSelected(true);\n             }\n@@ -216,8 +228,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     }\n \n     private VersionItem makeVersionItem(HProjectIteration iter) {\n-        boolean selected = StringUtils.isNotEmpty(copyFromVersionSlug) &&\n-                copyFromVersionSlug.equals(iter.getSlug());\n+        boolean selected = StringUtils.isNotEmpty(copyFromVersionSlug) && copyFromVersionSlug.equals(iter.getSlug());\n         return new VersionItem(selected, iter);\n     }\n \n@@ -243,7 +254,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n         @java.beans.ConstructorProperties({ \"selected\", \"version\" })\n         public VersionItem(final boolean selected,\n-                final HProjectIteration version) {\n+        final HProjectIteration version) {\n             this.selected = selected;\n             this.version = version;\n         }\n@@ -252,34 +263,31 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     @Override\n     protected HProjectIteration loadInstance() {\n         Session session = (Session) getEntityManager().getDelegate();\n-        HProject project = (HProject) session.byNaturalId(HProject.class)\n-                .using(\"slug\", getProjectSlug()).load();\n+        HProject project = (HProject) session.byNaturalId(HProject.class).using(\"slug\", getProjectSlug())\n+                                                                         .load();\n         validateProjectState(project);\n         if (versionId == null) {\n             HProject targetProject = projectDAO.getBySlug(getProjectSlug());\n             validateProjectState(targetProject);\n-            HProjectIteration iteration = (HProjectIteration) session\n-                    .byNaturalId(HProjectIteration.class)\n-                    .using(\"slug\", getSlug())\n-                    .using(\"project\", targetProject)\n-                    .load();\n+            HProjectIteration iteration = (HProjectIteration) session.byNaturalId(HProjectIteration.class).using(\"slug\", getSlug())\n+                                                                                                          .using(\"project\", targetProject)\n+                                                                                                          .load();\n             validateIterationState(iteration);\n             versionId = iteration.getId();\n             return iteration;\n         } else {\n-            HProjectIteration iteration = (HProjectIteration) session\n-                    .load(HProjectIteration.class, versionId);\n+            HProjectIteration iteration = (HProjectIteration) session.load(HProjectIteration.class, versionId);\n             validateIterationState(iteration);\n             return iteration;\n         }\n     }\n \n     private void validateIterationState(HProjectIteration iteration) {\n-        if (iteration == null\n-                || iteration.getStatus() == EntityStatus.OBSOLETE) {\n-            log.warn(\n-                    \"Project version [id={}, slug={}], does not exist or is soft deleted: {}\",\n-                    versionId, getSlug(), iteration);\n+        if (iteration == null || iteration.getStatus() == EntityStatus.OBSOLETE) {\n+            log.warn(\"Project version [id={}, slug={}], does not exist or is soft deleted: {}\",\n+versionId,\n+getSlug(),\n+iteration);\n             throw new VersionNotFoundException(getProjectSlug(), getSlug());\n         }\n     }\n@@ -287,33 +295,29 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     private void validateProjectState(HProject project) {\n         if (project == null || project.getStatus() == EntityStatus.OBSOLETE) {\n             log.warn(\"Project [slug={}], does not exist or is soft deleted: {}\",\n-                    getProjectSlug(), project);\n+getProjectSlug(),\n+project);\n             throw new ProjectNotFoundException(getProjectSlug());\n         }\n     }\n \n     @SuppressWarnings(\"deprecation\")\n     private void setMessage(String message) {\n-        conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                message);\n+        conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO, message);\n     }\n \n     public List<ValidationAction> getValidationList() {\n-        List<ValidationAction> sortedList =\n-                Lists.newArrayList(getValidations().values());\n+        List<ValidationAction> sortedList = Lists.newArrayList(getValidations().values());\n         Collections.sort(sortedList,\n-                ValidationFactory.ValidationActionComparator);\n+ValidationFactory.ValidationActionComparator);\n         return sortedList;\n     }\n \n     private Map<ValidationId, ValidationAction> getValidations() {\n         if (availableValidations.isEmpty()) {\n-            Collection<ValidationAction> validationList =\n-                    validationServiceImpl.getValidationActions(getProjectSlug(),\n-                            getInstance().getSlug());\n+            Collection<ValidationAction> validationList = validationServiceImpl.getValidationActions(getProjectSlug(), getInstance().getSlug());\n             for (ValidationAction validationAction : validationList) {\n-                availableValidations.put(validationAction.getId(),\n-                        validationAction);\n+                availableValidations.put(validationAction.getId(), validationAction);\n             }\n         }\n         return availableValidations;\n@@ -327,8 +331,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     public ProjectType getProjectType() {\n         if (getInstance().getProjectType() == null) {\n-            getInstance().setProjectType(\n-                    getInstance().getProject().getDefaultProjectType());\n+            getInstance().setProjectType(getInstance().getProject()\n+                                                      .getDefaultProjectType());\n         }\n         return getInstance().getProjectType();\n     }\n@@ -340,8 +344,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     public void validateProjectSlug() {\n         if (projectDAO.getBySlug(getProjectSlug()) == null) {\n-            throw new EntityNotFoundException(\n-                    \"no entity with slug \" + getProjectSlug());\n+            throw new EntityNotFoundException(\"no entity with slug \" + getProjectSlug());\n         }\n     }\n \n@@ -353,14 +356,12 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public boolean validateSlug(String slug, String componentId) {\n         if (!isSlugAvailable(slug)) {\n             facesMessages.addToControl(componentId,\n-                    \"This Version ID has been used in this project\");\n+                \"This Version ID has been used in this project\");\n             return false;\n         }\n         boolean valid = new SlugValidator().isValid(slug, null);\n         if (!valid) {\n-            String validationMessages =\n-                    ResourceBundle.getBundle(\"ValidationMessages\").getString(\n-                            \"javax.validation.constraints.Slug.message\");\n+            String validationMessages = ResourceBundle.getBundle(\"ValidationMessages\").getString(\"javax.validation.constraints.Slug.message\");\n             facesMessages.addToControl(componentId, validationMessages);\n             return false;\n         }\n@@ -368,8 +369,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     }\n \n     public boolean isSlugAvailable(String slug) {\n-        return slugEntityServiceImpl.isProjectIterationSlugAvailable(slug,\n-                getProjectSlug());\n+        return slugEntityServiceImpl.isProjectIterationSlugAvailable(slug, getProjectSlug());\n     }\n \n     @Transactional\n@@ -386,10 +386,10 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     @Transactional\n     public void copyVersion() {\n-        copyVersionManager.startCopyVersion(getProjectSlug(),\n-                copyFromVersionSlug, inputSlugValue);\n-        setMessage(msgs.format(\"jsf.copyVersion.started\", inputSlugValue,\n-                copyFromVersionSlug));\n+        copyVersionManager.startCopyVersion(getProjectSlug(), copyFromVersionSlug, inputSlugValue);\n+        setMessage(msgs.format(\"jsf.copyVersion.started\",\n+                               inputSlugValue,\n+                               copyFromVersionSlug));\n     }\n \n     public void setSlug(String slug) {\n@@ -412,15 +412,14 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         // so it should copy the setting for isOverrideLocales,\n         // and all enabled locales and locale alias data if it is\n         // overriding.\n-        List<HLocale> projectLocales = localeServiceImpl\n-                .getSupportedLanguageByProject(getProjectSlug());\n+        List<HLocale> projectLocales = localeServiceImpl.getSupportedLanguageByProject(getProjectSlug());\n         getInstance().getCustomizedLocales().addAll(projectLocales);\n-        getInstance().getCustomizedValidations()\n-                .putAll(project.getCustomizedValidations());\n+        getInstance().getCustomizedValidations().putAll(project.getCustomizedValidations());\n         String result = super.persist();\n-        webhookServiceImpl.processWebhookVersionChanged(getProjectSlug(), slug,\n-                getProject().getWebHooks(),\n-                VersionChangedEvent.ChangeType.CREATE);\n+        webhookServiceImpl.processWebhookVersionChanged(getProjectSlug(),\n+slug,\n+getProject().getWebHooks(),\n+VersionChangedEvent.ChangeType.CREATE);\n         return result;\n     }\n \n@@ -431,8 +430,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     @Override\n     public NaturalIdentifier getNaturalId() {\n-        return Restrictions.naturalId().set(\"slug\", getSlug()).set(\"project\",\n-                projectDAO.getBySlug(getProjectSlug()));\n+        return Restrictions.naturalId().set(\"slug\", getSlug())\n+                                       .set(\"project\", projectDAO.getBySlug(getProjectSlug()));\n     }\n \n     @Override\n@@ -441,18 +440,16 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     }\n \n     public boolean isValidationsSameAsProject() {\n-        Collection<ValidationAction> versionValidations = validationServiceImpl\n-                .getValidationActions(getProjectSlug(), getSlug());\n-        Collection<ValidationAction> projectValidations =\n-                validationServiceImpl.getValidationActions(getProjectSlug());\n+        Collection<ValidationAction> versionValidations = validationServiceImpl.getValidationActions(getProjectSlug(), getSlug());\n+        Collection<ValidationAction> projectValidations = validationServiceImpl.getValidationActions(getProjectSlug());\n         return versionValidations.equals(projectValidations);\n     }\n \n     @Transactional\n     public void copyValidationFromProject() {\n         getInstance().getCustomizedValidations().clear();\n-        getInstance().getCustomizedValidations()\n-                .putAll(getInstance().getProject().getCustomizedValidations());\n+        getInstance().getCustomizedValidations().putAll(getInstance().getProject()\n+                                                                     .getCustomizedValidations());\n         availableValidations.clear();\n         update();\n         setMessage(msgs.get(\"jsf.iteration.CopyProjectValidations.message\"));\n@@ -464,16 +461,15 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      *\n      * @return the String \"updated\"\n      */\n+\n     @Override\n     @Transactional\n     public String update() {\n         identity.checkPermission(getInstance(), \"update\");\n-        if (!getSlug().equals(getInputSlugValue())\n-                && !validateSlug(getInputSlugValue(), \"slug\")) {\n+        if (!getSlug().equals(getInputSlugValue()) && !validateSlug(getInputSlugValue(), \"slug\")) {\n             return null;\n         }\n-        if (getInputSlugValue() != null\n-                && !getSlug().equals(getInputSlugValue())) {\n+        if (getInputSlugValue() != null && !getSlug().equals(getInputSlugValue())) {\n             getInstance().setSlug(getInputSlugValue());\n         }\n         boolean softDeleted = false;\n@@ -491,7 +487,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n             return state;\n         }\n         facesMessages.addGlobal(SEVERITY_INFO,\n-                msgs.get(\"jsf.version.settings.updated\"));\n+msgs.get(\"jsf.version.settings.updated\"));\n         if (!getSlug().equals(getInstance().getSlug())) {\n             projectAndVersionSlug.setVersionSlug(getInstance().getSlug());\n             return \"version-slug-updated\";\n@@ -509,11 +505,11 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         identity.checkPermission(getInstance(), \"update\");\n         if (getProject().getStatus() == EntityStatus.READONLY) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    \"Parent project is read-only!\");\n+                \"Parent project is read-only!\");\n             return;\n         }\n         String message = msgs.format(\"jsf.iteration.status.updated\",\n-                EntityStatus.valueOf(initial));\n+                                     EntityStatus.valueOf(initial));\n         getInstance().setStatus(EntityStatus.valueOf(initial));\n         if (getInstance().getStatus() == EntityStatus.OBSOLETE) {\n             message = msgs.get(\"jsf.iteration.deleted\");\n@@ -526,9 +522,10 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void deleteSelf() {\n         String slug = getInstance().getSlug();\n         updateStatus('O');\n-        webhookServiceImpl.processWebhookVersionChanged(getProjectSlug(), slug,\n-                getProject().getWebHooks(),\n-                VersionChangedEvent.ChangeType.DELETE);\n+        webhookServiceImpl.processWebhookVersionChanged(getProjectSlug(),\n+slug,\n+getProject().getWebHooks(),\n+VersionChangedEvent.ChangeType.DELETE);\n     }\n \n     @Transactional\n@@ -539,8 +536,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     @Transactional\n     public void copyProjectTypeFromProject() {\n-        getInstance().setProjectType(\n-                getInstance().getProject().getDefaultProjectType());\n+        getInstance().setProjectType(getInstance().getProject()\n+                                                  .getDefaultProjectType());\n         update();\n         setMessage(msgs.get(\"jsf.iteration.CopyProjectType.message\"));\n     }\n@@ -549,30 +546,26 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * @return comma-separated list of accepted file extensions. May be an empty\n      *         string\n      */\n+\n     @SuppressWarnings(\"deprecation\")\n     public String getAcceptedSourceFileExtensions() {\n-        List<String> supportedTypes =\n-                ProjectType.getSupportedSourceFileTypes(getProjectType())\n-                        .stream().map(docType -> Joiner.on(\",\")\n-                        .join(docType.getSourceExtensions()))\n-                        .collect(Collectors.toList());\n+        List<String> supportedTypes = ProjectType.getSupportedSourceFileTypes(getProjectType()).stream()\n+                                                                                               .map(docType -> Joiner.on(\",\").join(docType.getSourceExtensions()))\n+                                                                                               .collect(Collectors.toList());\n         return Joiner.on(\", \").join(supportedTypes);\n     }\n \n     @SuppressWarnings(\"deprecation\")\n     public String getAcceptedSourceFile() {\n-        List<String> supportedTypes =\n-                ProjectType.getSupportedSourceFileTypes(getProjectType())\n-                        .stream()\n-                        .map(docType -> docType.name() + \"[\" + Joiner.on(\",\")\n-                                .join(docType.getSourceExtensions()) + \"]\")\n-                        .collect(Collectors.toList());\n+        List<String> supportedTypes = ProjectType.getSupportedSourceFileTypes(getProjectType()).stream()\n+                                                                                               .map(docType -> docType.name() + \"[\"\n+                                                                                               + Joiner.on(\",\").join(docType.getSourceExtensions()) + \"]\")\n+                                                                                               .collect(Collectors.toList());\n         return Joiner.on(\", \").join(supportedTypes);\n     }\n \n     private void updateProjectType() {\n-        if (!isEmpty(selectedProjectType)\n-                && !selectedProjectType.equals(\"null\")) {\n+        if (!isEmpty(selectedProjectType) && !selectedProjectType.equals(\"null\")) {\n             ProjectType projectType = ProjectType.valueOf(selectedProjectType);\n             getInstance().setProjectType(projectType);\n         } else {\n@@ -588,37 +581,34 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void updateValidationOption(String name, String state) {\n         identity.checkPermission(getInstance(), \"update\");\n         ValidationId validationId = ValidationId.valueOf(name);\n-        for (Map.Entry<ValidationId, ValidationAction> entry : getValidations()\n-                .entrySet()) {\n-            if (entry.getKey().name().equals(name)) {\n-                getValidations().get(validationId)\n-                        .setState(ValidationAction.State.valueOf(state));\n-                getInstance().getCustomizedValidations().put(\n-                        entry.getKey().name(),\n-                        entry.getValue().getState().name());\n+        for (Map.Entry<ValidationId, ValidationAction> entry : getValidations().entrySet()) {\n+            if (entry.getKey().name()\n+                              .equals(name)) {\n+                getValidations().get(validationId).setState(ValidationAction.State.valueOf(state));\n+                getInstance().getCustomizedValidations().put(entry.getKey().name(),\n+                    entry.getValue().getState()\n+                                    .name());\n                 ensureMutualExclusivity(getValidations().get(validationId));\n                 break;\n             }\n         }\n         update();\n         setMessage(msgs.format(\"jsf.validation.updated\",\n-                validationId.getDisplayName(), state));\n+                               validationId.getDisplayName(),\n+                               state));\n     }\n \n     /**\n      * If this action is enabled(Warning or Error), then it's exclusive\n      * validation will be turn off\n      */\n-    private void\n-            ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n+\n+    private void ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n         if (selectedValidationAction.getState() != ValidationAction.State.Off) {\n-            for (ValidationAction exclusiveValAction : selectedValidationAction\n-                    .getExclusiveValidations()) {\n-                getInstance().getCustomizedValidations().put(\n-                        exclusiveValAction.getId().name(),\n-                        ValidationAction.State.Off.name());\n-                getValidations().get(exclusiveValAction.getId())\n-                        .setState(ValidationAction.State.Off);\n+            for (ValidationAction exclusiveValAction : selectedValidationAction.getExclusiveValidations()) {\n+                getInstance().getCustomizedValidations().put(exclusiveValAction.getId().name(),\n+                    ValidationAction.State.Off.name());\n+                getValidations().get(exclusiveValAction.getId()).setState(ValidationAction.State.Off);\n             }\n         }\n     }\n@@ -647,8 +637,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void removeAllLocaleAliases() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n-        List<LocaleId> aliasedLocales =\n-                new ArrayList<>(getLocaleAliases().keySet());\n+        List<LocaleId> aliasedLocales = new ArrayList<>(getLocaleAliases().keySet());\n         if (!aliasedLocales.isEmpty()) {\n             ensureOverridingLocales();\n             for (LocaleId aliasedLocale : aliasedLocales) {\n@@ -665,6 +654,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     /**\n      * Ensure that isOverrideLocales is true, and copy data if necessary.\n      */\n+\n     private void ensureOverridingLocales() {\n         if (!isOverrideLocales()) {\n             startOverridingLocales();\n@@ -675,6 +665,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * Copy locale data from project and set overrideLocales, in preparation for\n      * making customizations to the locales.\n      */\n+\n     private void startOverridingLocales() {\n         // Copied before setOverrideLocales(true) so that the currently returned\n         // values will be used as the basis for any customization.\n@@ -695,6 +686,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     /**\n      * Update disabled locales to be consistent with enabled locales.\n      */\n+\n     private void refreshDisabledLocales() {\n         // will be re-generated with correct values next time it is fetched.\n         disabledLocales = null;\n@@ -704,8 +696,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void removeSelectedLocaleAliases() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n-        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales().entrySet()) {\n             if (entry.getValue()) {\n                 boolean hadAlias = removeAliasSilently(entry.getKey());\n                 if (hadAlias) {\n@@ -723,17 +714,18 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * @param removed\n      *            ids of locales that had aliases removed\n      */\n+\n     private void showRemovedAliasesMessage(List<LocaleId> removed) {\n         if (removed.isEmpty()) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n+msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n         } else if (removed.size() == 1) {\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n-                            StringUtils.join(removed, \", \")));\n+msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n+           StringUtils.join(removed, \", \")));\n         }\n     }\n \n@@ -755,6 +747,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * map in every form submission, and so that a value entered in the field\n      * for a row is not automatically updated when a different row is submitted.\n      */\n+\n     private Map<LocaleId, String> enteredLocaleAliases = Maps.newHashMap();\n \n     @Transactional\n@@ -769,14 +762,14 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         if (isNullOrEmpty(alias)) {\n             if (hadAlias) {\n                 facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                        msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n+msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n             } else {\n-                facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                        .format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n+                facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n             }\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n+msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n         }\n     }\n \n@@ -789,6 +782,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      *            new alias to use. Use empty string to remove alias.\n      * @return true if there was already an alias, otherwise false.\n      */\n+\n     private boolean setLocaleAliasSilently(LocaleId localeId, String alias) {\n         HProjectIteration instance = getInstance();\n         Map<LocaleId, String> aliases = instance.getLocaleAliases();\n@@ -799,8 +793,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n                 aliases.remove(localeId);\n             }\n         } else {\n-            final boolean sameAlias =\n-                    hadAlias && alias.equals(aliases.get(localeId));\n+            final boolean sameAlias = hadAlias && alias.equals(aliases.get(localeId));\n             if (!sameAlias) {\n                 ensureOverridingLocales();\n                 aliases.put(localeId, alias);\n@@ -821,11 +814,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     private String disabledLocalesFilter;\n \n     public List<HLocale> getEnabledLocales() {\n-        if (StringUtils.isNotEmpty(getProjectSlug())\n-                && StringUtils.isNotEmpty(getSlug())) {\n-            List<HLocale> locales =\n-                    localeServiceImpl.getSupportedLanguageByProjectIteration(\n-                            getProjectSlug(), getSlug());\n+        if (StringUtils.isNotEmpty(getProjectSlug()) && StringUtils.isNotEmpty(getSlug())) {\n+            List<HLocale> locales = localeServiceImpl.getSupportedLanguageByProjectIteration(getProjectSlug(), getSlug());\n             locales.sort(ComparatorUtil.LOCALE_COMPARATOR);\n             return locales;\n         }\n@@ -850,8 +840,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void disableSelectedLocales() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> toRemove = Lists.newArrayList();\n-        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales().entrySet()) {\n             if (entry.getValue()) {\n                 toRemove.add(entry.getKey());\n             }\n@@ -867,13 +856,14 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         if (removed.isEmpty()) {\n             // This should not be possible in the UI, but maybe if multiple\n             // users are editing it.\n+\n         } else if (removed.size() == 1) {\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                    \"jsf.languageSettings.LanguageDisabled\", removed.get(0)));\n-        } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n-                            StringUtils.join(removed, \", \")));\n+msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n+           removed.get(0)));\n+        } else {\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n+                                                                            StringUtils.join(removed, \", \")));\n         }\n     }\n \n@@ -889,8 +879,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         update();\n         if (wasEnabled) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n-                            locale.getLocaleId()));\n+msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n+           locale.getLocaleId()));\n         }\n         // TODO consider showing a message like \"Locale {0} was already\n         // disabled.\"\n@@ -903,11 +893,13 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      *            to disable\n      * @return true if the locale was enabled before this call, false otherwise.\n      */\n+\n     private boolean disableLocaleSilently(HLocale locale) {\n         boolean wasEnabled;\n         if (getEnabledLocales().contains(locale)) {\n             ensureOverridingLocales();\n-            wasEnabled = getInstance().getCustomizedLocales().remove(locale);\n+            wasEnabled = getInstance().getCustomizedLocales()\n+                                      .remove(locale);\n             refreshDisabledLocales();\n             // TODO consider using alias from project as default rather than\n             // none.\n@@ -932,13 +924,13 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * Populate the list of available locales after filtering out the locales\n      * already in the project.\n      */\n+\n     private List<HLocale> findActiveNotEnabledLocales() {\n         List<HLocale> activeLocales = localeDAO.findAllActive();\n         // only include those not already in the project version\n-        List<HLocale> filteredList = activeLocales.stream()\n-                .filter(hLocale -> !getEnabledLocales().contains(hLocale))\n-                .sorted(ComparatorUtil.LOCALE_COMPARATOR)\n-                .collect(Collectors.toList());\n+        List<HLocale> filteredList = activeLocales.stream().filter(hLocale -> !getEnabledLocales().contains(hLocale))\n+                                                           .sorted(ComparatorUtil.LOCALE_COMPARATOR)\n+                                                           .collect(Collectors.toList());\n         return filteredList;\n     }\n \n@@ -948,8 +940,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     public void enableSelectedLocales() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> enabled = new ArrayList<>();\n-        for (Map.Entry<LocaleId, Boolean> entry : selectedDisabledLocales\n-                .entrySet()) {\n+        for (Map.Entry<LocaleId, Boolean> entry : selectedDisabledLocales.entrySet()) {\n             if (entry.getValue()) {\n                 boolean wasDisabled = enableLocaleSilently(entry.getKey());\n                 if (wasDisabled) {\n@@ -962,13 +953,14 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         if (enabled.isEmpty()) {\n             // This should not be possible in the UI, but maybe if multiple\n             // users are editing it.\n+\n         } else if (enabled.size() == 1) {\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                    \"jsf.languageSettings.LanguageEnabled\", enabled.get(0)));\n-        } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n-                            StringUtils.join(enabled, \", \")));\n+msgs.format(\"jsf.languageSettings.LanguageEnabled\",\n+           enabled.get(0)));\n+        } else {\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n+                                                                            StringUtils.join(enabled, \", \")));\n         }\n     }\n \n@@ -978,8 +970,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         boolean wasDisabled = enableLocaleSilently(locale);\n         if (wasDisabled) {\n             LocaleId localeId = locale.getLocaleId();\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n         }\n         // TODO consider printing message like \"Locale {0} was already enabled\"\n     }\n@@ -994,8 +986,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         if (wasDisabled) {\n             ensureOverridingLocales();\n             getInstance().getCustomizedLocales().add(locale);\n-            getSelectedEnabledLocales().put(locale.getLocaleId(),\n-                    Boolean.FALSE);\n+            getSelectedEnabledLocales().put(locale.getLocaleId(), Boolean.FALSE);\n             refreshDisabledLocales();\n         }\n         // else locale already enabled, nothing to do.\n@@ -1005,6 +996,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     /**\n      * This field is set from form input which can differ from original slug\n      */\n+\n     public void setInputSlugValue(@Nullable final String inputSlugValue) {\n         this.inputSlugValue = inputSlugValue;\n     }\n@@ -1012,6 +1004,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     /**\n      * This field is set from form input which can differ from original slug\n      */\n+\n     @Nullable\n     public String getInputSlugValue() {\n         return this.inputSlugValue;\n@@ -1055,6 +1048,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * map in every form submission, and so that a value entered in the field\n      * for a row is not automatically updated when a different row is submitted.\n      */\n+\n     public Map<LocaleId, String> getEnteredLocaleAliases() {\n         return this.enteredLocaleAliases;\n     }\n@@ -1065,8 +1059,8 @@ public class VersionHome extends SlugHome<HProjectIteration>\n      * map in every form submission, and so that a value entered in the field\n      * for a row is not automatically updated when a different row is submitted.\n      */\n-    public void setEnteredLocaleAliases(\n-            final Map<LocaleId, String> enteredLocaleAliases) {\n+\n+    public void setEnteredLocaleAliases(final Map<LocaleId, String> enteredLocaleAliases) {\n         this.enteredLocaleAliases = enteredLocaleAliases;\n     }\n \n@@ -1086,8 +1080,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         this.disabledLocalesFilter = disabledLocalesFilter;\n     }\n \n-    public void setSelectedEnabledLocales(\n-            final Map<LocaleId, Boolean> selectedEnabledLocales) {\n+    public void setSelectedEnabledLocales(final Map<LocaleId, Boolean> selectedEnabledLocales) {\n         this.selectedEnabledLocales = selectedEnabledLocales;\n     }\n \n@@ -1095,8 +1088,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n         return this.selectedDisabledLocales;\n     }\n \n-    public void setSelectedDisabledLocales(\n-            final Map<LocaleId, Boolean> selectedDisabledLocales) {\n+    public void setSelectedDisabledLocales(final Map<LocaleId, Boolean> selectedDisabledLocales) {\n         this.selectedDisabledLocales = selectedDisabledLocales;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 211
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "323",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/16/VersionHome.java\nindex 3fc2a6ac92..78fb618f66 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/16/VersionHome.java\n@@ -321,9 +321,9 @@ public class VersionHome extends SlugHome<HProjectIteration>\n \n     public void validateSuppliedId() {\n         getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n+            // when id is invalid and conversation will not\n         // start\n-    }\n+        }\n \n     public ProjectType getProjectType() {\n         if (getInstance().getProjectType() == null) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "323",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/16/VersionHome.java\nindex 3fc2a6ac92..b29cb58eb6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/16/VersionHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/16/VersionHome.java\n@@ -320,7 +320,7 @@ public class VersionHome extends SlugHome<HProjectIteration>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n+    getInstance(); // this will raise an EntityNotFound exception\n         // when id is invalid and conversation will not\n         // start\n     }\n",
            "diff_size": 1
        }
    ]
}