{
    "error_id": "820",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/820/SparseDoubleRowUpdateSplit.java\nindex 832be5aa29..e40086eb3b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/820/SparseDoubleRowUpdateSplit.java\n@@ -1,135 +1,135 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/Apache-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- *\r\n- */\r\n-\r\n-\r\n-package com.tencent.angel.psagent.matrix.oplog.cache;\r\n-\r\n-import com.tencent.angel.ml.math2.VFactory;\r\n-import com.tencent.angel.ml.math2.vector.IntDoubleVector;\r\n-import com.tencent.angel.ml.matrix.RowType;\r\n-import io.netty.buffer.ByteBuf;\r\n-\r\n-/**\r\n- * Row split of sparse double row update\r\n- */\r\n-public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\r\n-\r\n-  /**\r\n-   * indexes\r\n-   */\r\n-  private final int[] offsets;\r\n-\r\n-  /**\r\n-   * values of row\r\n-   */\r\n-  private final double[] values;\r\n-\r\n-  /**\r\n-   * Create a new sparse double row split update\r\n-   *\r\n-   * @param start start position\r\n-   * @param end end position\r\n-   * @param offsets values indexes\r\n-   * @param values values of row update\r\n-   */\r\n-  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      double[] values) {\r\n-    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\r\n-    this.offsets = offsets;\r\n-    this.values = values;\r\n-  }\r\n-\r\n-  public SparseDoubleRowUpdateSplit() {\r\n-    this(-1, -1, -1, null, null);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get indexes of row values\r\n-   *\r\n-   * @return int[] indexes of row values\r\n-   */\r\n-  public int[] getOffsets() {\r\n-    return offsets;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get row values\r\n-   *\r\n-   * @return double[] row values\r\n-   */\r\n-  public double[] getValues() {\r\n-    return values;\r\n-  }\r\n-\r\n-  @Override\r\n-  public void serialize(ByteBuf buf) {\r\n-    super.serialize(buf);\r\n-    int startCol = (int) splitContext.getPartKey().getStartCol();\r\n-    if (splitContext.isEnableFilter()) {\r\n-      double filterValue = splitContext.getFilterThreshold();\r\n-      int position = buf.writerIndex();\r\n-      buf.writeInt(0);\r\n-      int needUpdateItemNum = 0;\r\n-      for (int i = start; i < end; i++) {\r\n-        if (Math.abs(values[i]) > filterValue) {\r\n-          buf.writeInt(offsets[i] - startCol);\r\n-          buf.writeDouble(values[i]);\r\n-          needUpdateItemNum++;\r\n-        }\r\n-      }\r\n-      buf.setInt(position, needUpdateItemNum);\r\n-    } else {\r\n-      buf.writeInt(end - start);\r\n-      for (int i = start; i < end; i++) {\r\n-        buf.writeInt(offsets[i] - startCol);\r\n-        buf.writeDouble(values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public void deserialize(ByteBuf buf) {\r\n-    super.deserialize(buf);\r\n-    int size = buf.readInt();\r\n-    vector = VFactory.sparseDoubleVector(\r\n-        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n-        size);\r\n-    for (int i = 0; i < size; i++) {\r\n-      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n-    }\r\n-  }\r\n-\r\n-  private int getNeedUpdateItemNum() {\r\n-    int needUpdateItemNum = 0;\r\n-    double filterValue = splitContext.getFilterThreshold();\r\n-    for (int i = start; i < end; i++) {\r\n-      if (Math.abs(values[i]) > filterValue) {\r\n-        needUpdateItemNum++;\r\n-      }\r\n-    }\r\n-    return needUpdateItemNum;\r\n-  }\r\n-\r\n-  @Override\r\n-  public int bufferLen() {\r\n-    if (splitContext != null && splitContext.isEnableFilter()) {\r\n-      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\r\n-    } else {\r\n-      return 4 + super.bufferLen() + (end - start) * 12;\r\n-    }\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/Apache-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+\n+package com.tencent.angel.psagent.matrix.oplog.cache;\n+\n+import com.tencent.angel.ml.math2.VFactory;\n+import com.tencent.angel.ml.math2.vector.IntDoubleVector;\n+import com.tencent.angel.ml.matrix.RowType;\n+import io.netty.buffer.ByteBuf;\n+\n+/**\n+ * Row split of sparse double row update\n+ */\n+public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\n+\n+  /**\n+   * indexes\n+   */\n+  private final int[] offsets;\n+\n+  /**\n+   * values of row\n+   */\n+  private final double[] values;\n+\n+  /**\n+   * Create a new sparse double row split update\n+   *\n+   * @param start start position\n+   * @param end end position\n+   * @param offsets values indexes\n+   * @param values values of row update\n+   */\n+  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\n+      double[] values) {\n+    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\n+    this.offsets = offsets;\n+    this.values = values;\n+  }\n+\n+  public SparseDoubleRowUpdateSplit() {\n+    this(-1, -1, -1, null, null);\n+  }\n+\n+  /**\n+   * Get indexes of row values\n+   *\n+   * @return int[] indexes of row values\n+   */\n+  public int[] getOffsets() {\n+    return offsets;\n+  }\n+\n+  /**\n+   * Get row values\n+   *\n+   * @return double[] row values\n+   */\n+  public double[] getValues() {\n+    return values;\n+  }\n+\n+  @Override\n+  public void serialize(ByteBuf buf) {\n+    super.serialize(buf);\n+    int startCol = (int) splitContext.getPartKey().getStartCol();\n+    if (splitContext.isEnableFilter()) {\n+      double filterValue = splitContext.getFilterThreshold();\n+      int position = buf.writerIndex();\n+      buf.writeInt(0);\n+      int needUpdateItemNum = 0;\n+      for (int i = start; i < end; i++) {\n+        if (Math.abs(values[i]) > filterValue) {\n+          buf.writeInt(offsets[i] - startCol);\n+          buf.writeDouble(values[i]);\n+          needUpdateItemNum++;\n+        }\n+      }\n+      buf.setInt(position, needUpdateItemNum);\n+    } else {\n+      buf.writeInt(end - start);\n+      for (int i = start; i < end; i++) {\n+        buf.writeInt(offsets[i] - startCol);\n+        buf.writeDouble(values[i]);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+    int size = buf.readInt();\n+    vector = VFactory.sparseDoubleVector(\n+        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\n+        size);\n+    for (int i = 0; i < size; i++) {\n+      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\n+    }\n+  }\n+\n+  private int getNeedUpdateItemNum() {\n+    int needUpdateItemNum = 0;\n+    double filterValue = splitContext.getFilterThreshold();\n+    for (int i = start; i < end; i++) {\n+      if (Math.abs(values[i]) > filterValue) {\n+        needUpdateItemNum++;\n+      }\n+    }\n+    return needUpdateItemNum;\n+  }\n+\n+  @Override\n+  public int bufferLen() {\n+    if (splitContext != null && splitContext.isEnableFilter()) {\n+      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\n+    } else {\n+      return 4 + super.bufferLen() + (end - start) * 12;\n+    }\n+  }\n+}\n",
            "diff_size": 135
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/820/SparseDoubleRowUpdateSplit.java\nindex 832be5aa29..2156a7b1e8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/820/SparseDoubleRowUpdateSplit.java\n@@ -28,108 +28,109 @@ import io.netty.buffer.ByteBuf;\n  */\r\n public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\r\n \r\n-  /**\r\n-   * indexes\r\n-   */\r\n-  private final int[] offsets;\r\n+    /**\r\n+     * indexes\r\n+     */\r\n+    private final int[] offsets;\r\n \r\n-  /**\r\n-   * values of row\r\n-   */\r\n-  private final double[] values;\r\n+    /**\r\n+     * values of row\r\n+     */\r\n+    private final double[] values;\r\n \r\n-  /**\r\n-   * Create a new sparse double row split update\r\n-   *\r\n-   * @param start start position\r\n-   * @param end end position\r\n-   * @param offsets values indexes\r\n-   * @param values values of row update\r\n-   */\r\n-  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      double[] values) {\r\n-    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\r\n-    this.offsets = offsets;\r\n-    this.values = values;\r\n-  }\r\n+    /**\r\n+     * Create a new sparse double row split update\r\n+     *\r\n+     * @param start   start position\r\n+     * @param end     end position\r\n+     * @param offsets values indexes\r\n+     * @param values  values of row update\r\n+     */\r\n+    public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n+                                      double[] values) {\r\n+        super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\r\n+        this.offsets = offsets;\r\n+        this.values = values;\r\n+    }\r\n \r\n-  public SparseDoubleRowUpdateSplit() {\r\n-    this(-1, -1, -1, null, null);\r\n-  }\r\n+    public SparseDoubleRowUpdateSplit() {\r\n+        this(-1, -1, -1, null, null);\r\n+    }\r\n \r\n-  /**\r\n-   * Get indexes of row values\r\n-   *\r\n-   * @return int[] indexes of row values\r\n-   */\r\n-  public int[] getOffsets() {\r\n-    return offsets;\r\n-  }\r\n+    /**\r\n+     * Get indexes of row values\r\n+     *\r\n+     * @return int[] indexes of row values\r\n+     */\r\n+    public int[] getOffsets() {\r\n+        return offsets;\r\n+    }\r\n \r\n-  /**\r\n-   * Get row values\r\n-   *\r\n-   * @return double[] row values\r\n-   */\r\n-  public double[] getValues() {\r\n-    return values;\r\n-  }\r\n+    /**\r\n+     * Get row values\r\n+     *\r\n+     * @return double[] row values\r\n+     */\r\n+    public double[] getValues() {\r\n+        return values;\r\n+    }\r\n \r\n-  @Override\r\n-  public void serialize(ByteBuf buf) {\r\n-    super.serialize(buf);\r\n-    int startCol = (int) splitContext.getPartKey().getStartCol();\r\n-    if (splitContext.isEnableFilter()) {\r\n-      double filterValue = splitContext.getFilterThreshold();\r\n-      int position = buf.writerIndex();\r\n-      buf.writeInt(0);\r\n-      int needUpdateItemNum = 0;\r\n-      for (int i = start; i < end; i++) {\r\n-        if (Math.abs(values[i]) > filterValue) {\r\n-          buf.writeInt(offsets[i] - startCol);\r\n-          buf.writeDouble(values[i]);\r\n-          needUpdateItemNum++;\r\n+    @Override\r\n+    public void serialize(ByteBuf buf) {\r\n+        super.serialize(buf);\r\n+        int startCol = (int) splitContext.getPartKey().getStartCol();\r\n+        if (splitContext.isEnableFilter()) {\r\n+            double filterValue = splitContext.getFilterThreshold();\r\n+            int position = buf.writerIndex();\r\n+            buf.writeInt(0);\r\n+            int needUpdateItemNum = 0;\r\n+            for (int i = start; i < end; i++) {\r\n+                if (Math.abs(values[i]) > filterValue) {\r\n+                    buf.writeInt(offsets[i] - startCol);\r\n+                    buf.writeDouble(values[i]);\r\n+                    needUpdateItemNum++;\r\n+                }\r\n+            }\r\n+            buf.setInt(position, needUpdateItemNum);\r\n+        } else {\r\n+            buf.writeInt(end - start);\r\n+            for (int i = start; i < end; i++) {\r\n+                buf.writeInt(offsets[i] - startCol);\r\n+                buf.writeDouble(values[i]);\r\n+            }\r\n         }\r\n-      }\r\n-      buf.setInt(position, needUpdateItemNum);\r\n-    } else {\r\n-      buf.writeInt(end - start);\r\n-      for (int i = start; i < end; i++) {\r\n-        buf.writeInt(offsets[i] - startCol);\r\n-        buf.writeDouble(values[i]);\r\n-      }\r\n     }\r\n-  }\r\n \r\n-  @Override\r\n-  public void deserialize(ByteBuf buf) {\r\n-    super.deserialize(buf);\r\n-    int size = buf.readInt();\r\n-    vector = VFactory.sparseDoubleVector(\r\n-        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n-        size);\r\n-    for (int i = 0; i < size; i++) {\r\n-      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n+    @Override\r\n+    public void deserialize(ByteBuf buf) {\r\n+        super.deserialize(buf);\r\n+        int size = buf.readInt();\r\n+        vector = VFactory.sparseDoubleVector(\r\n+                (int) (splitContext.getPartKey().getEndCol() -\r\n+                        splitContext.getPartKey().getStartCol()),\r\n+                size);\r\n+        for (int i = 0; i < size; i++) {\r\n+            ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n+        }\r\n     }\r\n-  }\r\n \r\n-  private int getNeedUpdateItemNum() {\r\n-    int needUpdateItemNum = 0;\r\n-    double filterValue = splitContext.getFilterThreshold();\r\n-    for (int i = start; i < end; i++) {\r\n-      if (Math.abs(values[i]) > filterValue) {\r\n-        needUpdateItemNum++;\r\n-      }\r\n+    private int getNeedUpdateItemNum() {\r\n+        int needUpdateItemNum = 0;\r\n+        double filterValue = splitContext.getFilterThreshold();\r\n+        for (int i = start; i < end; i++) {\r\n+            if (Math.abs(values[i]) > filterValue) {\r\n+                needUpdateItemNum++;\r\n+            }\r\n+        }\r\n+        return needUpdateItemNum;\r\n     }\r\n-    return needUpdateItemNum;\r\n-  }\r\n \r\n-  @Override\r\n-  public int bufferLen() {\r\n-    if (splitContext != null && splitContext.isEnableFilter()) {\r\n-      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\r\n-    } else {\r\n-      return 4 + super.bufferLen() + (end - start) * 12;\r\n+    @Override\r\n+    public int bufferLen() {\r\n+        if (splitContext != null && splitContext.isEnableFilter()) {\r\n+            return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\r\n+        } else {\r\n+            return 4 + super.bufferLen() + (end - start) * 12;\r\n+        }\r\n     }\r\n-  }\r\n }\r\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/820/SparseDoubleRowUpdateSplit.java\nindex 832be5aa29..cafe8ee2cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/820/SparseDoubleRowUpdateSplit.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.psagent.matrix.oplog.cache;\r\n \r\n import com.tencent.angel.ml.math2.VFactory;\r\n@@ -46,8 +45,7 @@ public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\n    * @param offsets values indexes\r\n    * @param values values of row update\r\n    */\r\n-  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      double[] values) {\r\n+  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets, double[] values) {\r\n     super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\r\n     this.offsets = offsets;\r\n     this.values = values;\r\n@@ -105,8 +103,7 @@ public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\n   public void deserialize(ByteBuf buf) {\r\n     super.deserialize(buf);\r\n     int size = buf.readInt();\r\n-    vector = VFactory.sparseDoubleVector(\r\n-        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n+    vector = VFactory.sparseDoubleVector((int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n         size);\r\n     for (int i = 0; i < size; i++) {\r\n       ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n@@ -132,4 +129,4 @@ public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\n       return 4 + super.bufferLen() + (end - start) * 12;\r\n     }\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 40.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 51.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 67.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 77.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/820/SparseDoubleRowUpdateSplit.java\nindex 832be5aa29..2f8ded4db1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/820/SparseDoubleRowUpdateSplit.java\n@@ -16,27 +16,28 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.psagent.matrix.oplog.cache;\r\n-\r\n-import com.tencent.angel.ml.math2.VFactory;\r\n-import com.tencent.angel.ml.math2.vector.IntDoubleVector;\r\n-import com.tencent.angel.ml.matrix.RowType;\r\n+package com.tencent.angel.psagent.matrix.oplog.cache;\n+\n+import com.tencent.angel.ml.math2.VFactory;\n+import com.tencent.angel.ml.math2.vector.IntDoubleVector;\n+import com.tencent.angel.ml.matrix.RowType;\n import io.netty.buffer.ByteBuf;\r\n \r\n /**\r\n  * Row split of sparse double row update\r\n- */\r\n+ */\n+\n public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\r\n \r\n   /**\r\n    * indexes\r\n-   */\r\n-  private final int[] offsets;\r\n+   */\n+    private final int[] offsets;\r\n \r\n   /**\r\n    * values of row\r\n-   */\r\n-  private final double[] values;\r\n+   */\n+    private final double[] values;\r\n \r\n   /**\r\n    * Create a new sparse double row split update\r\n@@ -45,91 +46,94 @@ public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\n    * @param end end position\r\n    * @param offsets values indexes\r\n    * @param values values of row update\r\n-   */\r\n-  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      double[] values) {\r\n-    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\r\n-    this.offsets = offsets;\r\n-    this.values = values;\r\n-  }\r\n-\r\n-  public SparseDoubleRowUpdateSplit() {\r\n-    this(-1, -1, -1, null, null);\r\n-  }\r\n+   */\n+\n+    public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets, double[] values) {\n+    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\n+    this.offsets = offsets;\n+    this.values = values;\n+    }\n+\n+    public SparseDoubleRowUpdateSplit() {\n+    this(-1, -1, -1, null, null);\n+    }\r\n \r\n   /**\r\n    * Get indexes of row values\r\n    *\r\n    * @return int[] indexes of row values\r\n-   */\r\n-  public int[] getOffsets() {\r\n-    return offsets;\r\n-  }\r\n+   */\n+\n+    public int[] getOffsets() {\n+    return offsets;\n+    }\r\n \r\n   /**\r\n    * Get row values\r\n    *\r\n    * @return double[] row values\r\n-   */\r\n-  public double[] getValues() {\r\n-    return values;\r\n-  }\r\n-\r\n-  @Override\r\n-  public void serialize(ByteBuf buf) {\r\n-    super.serialize(buf);\r\n-    int startCol = (int) splitContext.getPartKey().getStartCol();\r\n-    if (splitContext.isEnableFilter()) {\r\n-      double filterValue = splitContext.getFilterThreshold();\r\n-      int position = buf.writerIndex();\r\n-      buf.writeInt(0);\r\n-      int needUpdateItemNum = 0;\r\n-      for (int i = start; i < end; i++) {\r\n-        if (Math.abs(values[i]) > filterValue) {\r\n-          buf.writeInt(offsets[i] - startCol);\r\n-          buf.writeDouble(values[i]);\r\n-          needUpdateItemNum++;\r\n-        }\r\n-      }\r\n-      buf.setInt(position, needUpdateItemNum);\r\n-    } else {\r\n-      buf.writeInt(end - start);\r\n-      for (int i = start; i < end; i++) {\r\n-        buf.writeInt(offsets[i] - startCol);\r\n-        buf.writeDouble(values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public void deserialize(ByteBuf buf) {\r\n-    super.deserialize(buf);\r\n-    int size = buf.readInt();\r\n-    vector = VFactory.sparseDoubleVector(\r\n-        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n-        size);\r\n-    for (int i = 0; i < size; i++) {\r\n-      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n-    }\r\n-  }\r\n-\r\n-  private int getNeedUpdateItemNum() {\r\n-    int needUpdateItemNum = 0;\r\n-    double filterValue = splitContext.getFilterThreshold();\r\n-    for (int i = start; i < end; i++) {\r\n-      if (Math.abs(values[i]) > filterValue) {\r\n-        needUpdateItemNum++;\r\n-      }\r\n-    }\r\n-    return needUpdateItemNum;\r\n-  }\r\n-\r\n-  @Override\r\n-  public int bufferLen() {\r\n-    if (splitContext != null && splitContext.isEnableFilter()) {\r\n-      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\r\n-    } else {\r\n-      return 4 + super.bufferLen() + (end - start) * 12;\r\n-    }\r\n-  }\r\n-}\r\n+   */\n+\n+    public double[] getValues() {\n+    return values;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+    super.serialize(buf);\n+\n+    int startCol = (int) splitContext.getPartKey().getStartCol();\n+    if (splitContext.isEnableFilter()) {\n+        double filterValue = splitContext.getFilterThreshold();\n+        int position = buf.writerIndex();\n+        buf.writeInt(0);\n+\n+        int needUpdateItemNum = 0;\n+        for (int i = start; i < end; i++) {\n+                                           if (Math.abs(values[i]) > filterValue) {\n+            buf.writeInt(offsets[i] - startCol);\n+            buf.writeDouble(values[i]);\n+            needUpdateItemNum++;\n+                                           }\n+        }\n+        buf.setInt(position, needUpdateItemNum);\n+    } else {\n+      buf.writeInt(end - start);\n+      for (int i = start; i < end; i++) {\n+               buf.writeInt(offsets[i] - startCol);\n+               buf.writeDouble(values[i]);\n+      }\n+    }\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+\n+    int size = buf.readInt();\n+    vector = VFactory.sparseDoubleVector((int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()), size);\n+    for (int i = 0; i < size; i++) {\n+        ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\n+    }\n+    }\n+\n+    private int getNeedUpdateItemNum() {\n+    int needUpdateItemNum = 0;\n+    double filterValue = splitContext.getFilterThreshold();\n+    for (int i = start; i < end; i++) {\n+        if (Math.abs(values[i]) > filterValue) {\n+        needUpdateItemNum++;\n+        }\n+    }\n+    return needUpdateItemNum;\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+    if (splitContext != null && splitContext.isEnableFilter()) {\n+        return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\n+    } else {\n+      return 4 + super.bufferLen() + (end - start) * 12;\n+    }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 92
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/820/SparseDoubleRowUpdateSplit.java\nindex 832be5aa29..e40086eb3b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/820/SparseDoubleRowUpdateSplit.java\n@@ -1,135 +1,135 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/Apache-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- *\r\n- */\r\n-\r\n-\r\n-package com.tencent.angel.psagent.matrix.oplog.cache;\r\n-\r\n-import com.tencent.angel.ml.math2.VFactory;\r\n-import com.tencent.angel.ml.math2.vector.IntDoubleVector;\r\n-import com.tencent.angel.ml.matrix.RowType;\r\n-import io.netty.buffer.ByteBuf;\r\n-\r\n-/**\r\n- * Row split of sparse double row update\r\n- */\r\n-public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\r\n-\r\n-  /**\r\n-   * indexes\r\n-   */\r\n-  private final int[] offsets;\r\n-\r\n-  /**\r\n-   * values of row\r\n-   */\r\n-  private final double[] values;\r\n-\r\n-  /**\r\n-   * Create a new sparse double row split update\r\n-   *\r\n-   * @param start start position\r\n-   * @param end end position\r\n-   * @param offsets values indexes\r\n-   * @param values values of row update\r\n-   */\r\n-  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      double[] values) {\r\n-    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\r\n-    this.offsets = offsets;\r\n-    this.values = values;\r\n-  }\r\n-\r\n-  public SparseDoubleRowUpdateSplit() {\r\n-    this(-1, -1, -1, null, null);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get indexes of row values\r\n-   *\r\n-   * @return int[] indexes of row values\r\n-   */\r\n-  public int[] getOffsets() {\r\n-    return offsets;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get row values\r\n-   *\r\n-   * @return double[] row values\r\n-   */\r\n-  public double[] getValues() {\r\n-    return values;\r\n-  }\r\n-\r\n-  @Override\r\n-  public void serialize(ByteBuf buf) {\r\n-    super.serialize(buf);\r\n-    int startCol = (int) splitContext.getPartKey().getStartCol();\r\n-    if (splitContext.isEnableFilter()) {\r\n-      double filterValue = splitContext.getFilterThreshold();\r\n-      int position = buf.writerIndex();\r\n-      buf.writeInt(0);\r\n-      int needUpdateItemNum = 0;\r\n-      for (int i = start; i < end; i++) {\r\n-        if (Math.abs(values[i]) > filterValue) {\r\n-          buf.writeInt(offsets[i] - startCol);\r\n-          buf.writeDouble(values[i]);\r\n-          needUpdateItemNum++;\r\n-        }\r\n-      }\r\n-      buf.setInt(position, needUpdateItemNum);\r\n-    } else {\r\n-      buf.writeInt(end - start);\r\n-      for (int i = start; i < end; i++) {\r\n-        buf.writeInt(offsets[i] - startCol);\r\n-        buf.writeDouble(values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public void deserialize(ByteBuf buf) {\r\n-    super.deserialize(buf);\r\n-    int size = buf.readInt();\r\n-    vector = VFactory.sparseDoubleVector(\r\n-        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n-        size);\r\n-    for (int i = 0; i < size; i++) {\r\n-      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n-    }\r\n-  }\r\n-\r\n-  private int getNeedUpdateItemNum() {\r\n-    int needUpdateItemNum = 0;\r\n-    double filterValue = splitContext.getFilterThreshold();\r\n-    for (int i = start; i < end; i++) {\r\n-      if (Math.abs(values[i]) > filterValue) {\r\n-        needUpdateItemNum++;\r\n-      }\r\n-    }\r\n-    return needUpdateItemNum;\r\n-  }\r\n-\r\n-  @Override\r\n-  public int bufferLen() {\r\n-    if (splitContext != null && splitContext.isEnableFilter()) {\r\n-      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\r\n-    } else {\r\n-      return 4 + super.bufferLen() + (end - start) * 12;\r\n-    }\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/Apache-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+\n+package com.tencent.angel.psagent.matrix.oplog.cache;\n+\n+import com.tencent.angel.ml.math2.VFactory;\n+import com.tencent.angel.ml.math2.vector.IntDoubleVector;\n+import com.tencent.angel.ml.matrix.RowType;\n+import io.netty.buffer.ByteBuf;\n+\n+/**\n+ * Row split of sparse double row update\n+ */\n+public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\n+\n+  /**\n+   * indexes\n+   */\n+  private final int[] offsets;\n+\n+  /**\n+   * values of row\n+   */\n+  private final double[] values;\n+\n+  /**\n+   * Create a new sparse double row split update\n+   *\n+   * @param start start position\n+   * @param end end position\n+   * @param offsets values indexes\n+   * @param values values of row update\n+   */\n+  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\n+      double[] values) {\n+    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\n+    this.offsets = offsets;\n+    this.values = values;\n+  }\n+\n+  public SparseDoubleRowUpdateSplit() {\n+    this(-1, -1, -1, null, null);\n+  }\n+\n+  /**\n+   * Get indexes of row values\n+   *\n+   * @return int[] indexes of row values\n+   */\n+  public int[] getOffsets() {\n+    return offsets;\n+  }\n+\n+  /**\n+   * Get row values\n+   *\n+   * @return double[] row values\n+   */\n+  public double[] getValues() {\n+    return values;\n+  }\n+\n+  @Override\n+  public void serialize(ByteBuf buf) {\n+    super.serialize(buf);\n+    int startCol = (int) splitContext.getPartKey().getStartCol();\n+    if (splitContext.isEnableFilter()) {\n+      double filterValue = splitContext.getFilterThreshold();\n+      int position = buf.writerIndex();\n+      buf.writeInt(0);\n+      int needUpdateItemNum = 0;\n+      for (int i = start; i < end; i++) {\n+        if (Math.abs(values[i]) > filterValue) {\n+          buf.writeInt(offsets[i] - startCol);\n+          buf.writeDouble(values[i]);\n+          needUpdateItemNum++;\n+        }\n+      }\n+      buf.setInt(position, needUpdateItemNum);\n+    } else {\n+      buf.writeInt(end - start);\n+      for (int i = start; i < end; i++) {\n+        buf.writeInt(offsets[i] - startCol);\n+        buf.writeDouble(values[i]);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+    int size = buf.readInt();\n+    vector = VFactory.sparseDoubleVector(\n+        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\n+        size);\n+    for (int i = 0; i < size; i++) {\n+      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\n+    }\n+  }\n+\n+  private int getNeedUpdateItemNum() {\n+    int needUpdateItemNum = 0;\n+    double filterValue = splitContext.getFilterThreshold();\n+    for (int i = start; i < end; i++) {\n+      if (Math.abs(values[i]) > filterValue) {\n+        needUpdateItemNum++;\n+      }\n+    }\n+    return needUpdateItemNum;\n+  }\n+\n+  @Override\n+  public int bufferLen() {\n+    if (splitContext != null && splitContext.isEnableFilter()) {\n+      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\n+    } else {\n+      return 4 + super.bufferLen() + (end - start) * 12;\n+    }\n+  }\n+}\n",
            "diff_size": 135
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/820/SparseDoubleRowUpdateSplit.java\nindex 832be5aa29..0ecf1c66bd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/820/SparseDoubleRowUpdateSplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/820/SparseDoubleRowUpdateSplit.java\n@@ -1,135 +1,133 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/Apache-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- *\r\n- */\r\n-\r\n-\r\n-package com.tencent.angel.psagent.matrix.oplog.cache;\r\n-\r\n-import com.tencent.angel.ml.math2.VFactory;\r\n-import com.tencent.angel.ml.math2.vector.IntDoubleVector;\r\n-import com.tencent.angel.ml.matrix.RowType;\r\n-import io.netty.buffer.ByteBuf;\r\n-\r\n-/**\r\n- * Row split of sparse double row update\r\n- */\r\n-public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\r\n-\r\n-  /**\r\n-   * indexes\r\n-   */\r\n-  private final int[] offsets;\r\n-\r\n-  /**\r\n-   * values of row\r\n-   */\r\n-  private final double[] values;\r\n-\r\n-  /**\r\n-   * Create a new sparse double row split update\r\n-   *\r\n-   * @param start start position\r\n-   * @param end end position\r\n-   * @param offsets values indexes\r\n-   * @param values values of row update\r\n-   */\r\n-  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\r\n-      double[] values) {\r\n-    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\r\n-    this.offsets = offsets;\r\n-    this.values = values;\r\n-  }\r\n-\r\n-  public SparseDoubleRowUpdateSplit() {\r\n-    this(-1, -1, -1, null, null);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get indexes of row values\r\n-   *\r\n-   * @return int[] indexes of row values\r\n-   */\r\n-  public int[] getOffsets() {\r\n-    return offsets;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get row values\r\n-   *\r\n-   * @return double[] row values\r\n-   */\r\n-  public double[] getValues() {\r\n-    return values;\r\n-  }\r\n-\r\n-  @Override\r\n-  public void serialize(ByteBuf buf) {\r\n-    super.serialize(buf);\r\n-    int startCol = (int) splitContext.getPartKey().getStartCol();\r\n-    if (splitContext.isEnableFilter()) {\r\n-      double filterValue = splitContext.getFilterThreshold();\r\n-      int position = buf.writerIndex();\r\n-      buf.writeInt(0);\r\n-      int needUpdateItemNum = 0;\r\n-      for (int i = start; i < end; i++) {\r\n-        if (Math.abs(values[i]) > filterValue) {\r\n-          buf.writeInt(offsets[i] - startCol);\r\n-          buf.writeDouble(values[i]);\r\n-          needUpdateItemNum++;\r\n-        }\r\n-      }\r\n-      buf.setInt(position, needUpdateItemNum);\r\n-    } else {\r\n-      buf.writeInt(end - start);\r\n-      for (int i = start; i < end; i++) {\r\n-        buf.writeInt(offsets[i] - startCol);\r\n-        buf.writeDouble(values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public void deserialize(ByteBuf buf) {\r\n-    super.deserialize(buf);\r\n-    int size = buf.readInt();\r\n-    vector = VFactory.sparseDoubleVector(\r\n-        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\r\n-        size);\r\n-    for (int i = 0; i < size; i++) {\r\n-      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\r\n-    }\r\n-  }\r\n-\r\n-  private int getNeedUpdateItemNum() {\r\n-    int needUpdateItemNum = 0;\r\n-    double filterValue = splitContext.getFilterThreshold();\r\n-    for (int i = start; i < end; i++) {\r\n-      if (Math.abs(values[i]) > filterValue) {\r\n-        needUpdateItemNum++;\r\n-      }\r\n-    }\r\n-    return needUpdateItemNum;\r\n-  }\r\n-\r\n-  @Override\r\n-  public int bufferLen() {\r\n-    if (splitContext != null && splitContext.isEnableFilter()) {\r\n-      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\r\n-    } else {\r\n-      return 4 + super.bufferLen() + (end - start) * 12;\r\n-    }\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/Apache-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+package com.tencent.angel.psagent.matrix.oplog.cache;\n+\n+import com.tencent.angel.ml.math2.VFactory;\n+import com.tencent.angel.ml.math2.vector.IntDoubleVector;\n+import com.tencent.angel.ml.matrix.RowType;\n+import io.netty.buffer.ByteBuf;\n+\n+/**\n+ * Row split of sparse double row update\n+ */\n+public class SparseDoubleRowUpdateSplit extends RowUpdateSplit {\n+\n+  /**\n+   * indexes\n+   */\n+  private final int[] offsets;\n+\n+  /**\n+   * values of row\n+   */\n+  private final double[] values;\n+\n+  /**\n+   * Create a new sparse double row split update\n+   *\n+   * @param start start position\n+   * @param end end position\n+   * @param offsets values indexes\n+   * @param values values of row update\n+   */\n+  public SparseDoubleRowUpdateSplit(int rowIndex, int start, int end, int[] offsets,\n+      double[] values) {\n+    super(rowIndex, RowType.T_DOUBLE_SPARSE, start, end);\n+    this.offsets = offsets;\n+    this.values = values;\n+  }\n+\n+  public SparseDoubleRowUpdateSplit() {\n+    this(-1, -1, -1, null, null);\n+  }\n+\n+  /**\n+   * Get indexes of row values\n+   *\n+   * @return int[] indexes of row values\n+   */\n+  public int[] getOffsets() {\n+    return offsets;\n+  }\n+\n+  /**\n+   * Get row values\n+   *\n+   * @return double[] row values\n+   */\n+  public double[] getValues() {\n+    return values;\n+  }\n+\n+  @Override\n+  public void serialize(ByteBuf buf) {\n+    super.serialize(buf);\n+    int startCol = (int) splitContext.getPartKey().getStartCol();\n+    if (splitContext.isEnableFilter()) {\n+      double filterValue = splitContext.getFilterThreshold();\n+      int position = buf.writerIndex();\n+      buf.writeInt(0);\n+      int needUpdateItemNum = 0;\n+      for (int i = start; i < end; i++) {\n+        if (Math.abs(values[i]) > filterValue) {\n+          buf.writeInt(offsets[i] - startCol);\n+          buf.writeDouble(values[i]);\n+          needUpdateItemNum++;\n+        }\n+      }\n+      buf.setInt(position, needUpdateItemNum);\n+    } else {\n+      buf.writeInt(end - start);\n+      for (int i = start; i < end; i++) {\n+        buf.writeInt(offsets[i] - startCol);\n+        buf.writeDouble(values[i]);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+    int size = buf.readInt();\n+    vector = VFactory.sparseDoubleVector(\n+        (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\n+        size);\n+    for (int i = 0; i < size; i++) {\n+      ((IntDoubleVector) vector).set(buf.readInt(), buf.readDouble());\n+    }\n+  }\n+\n+  private int getNeedUpdateItemNum() {\n+    int needUpdateItemNum = 0;\n+    double filterValue = splitContext.getFilterThreshold();\n+    for (int i = start; i < end; i++) {\n+      if (Math.abs(values[i]) > filterValue) {\n+        needUpdateItemNum++;\n+      }\n+    }\n+    return needUpdateItemNum;\n+  }\n+\n+  @Override\n+  public int bufferLen() {\n+    if (splitContext != null && splitContext.isEnableFilter()) {\n+      return 4 + super.bufferLen() + getNeedUpdateItemNum() * 12;\n+    } else {\n+      return 4 + super.bufferLen() + (end - start) * 12;\n+    }\n+  }\n+}\n",
            "diff_size": 135
        }
    ]
}