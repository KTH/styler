{
    "error_id": "144",
    "information": {
        "errors": [
            {
                "line": "140",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * <p>As the process of instance registry is asynchronous, the {@code AFTER_REGISTRY}\n   * event should not be sent immediately after {@link RegistryUtils#run()} is invoked.\n   * When the instance registry succeeds, {@link MicroserviceInstanceRegisterTask} will be posted in {@link EventManager},\n   * register a subscriber to watch this event and send {@code AFTER_REGISTRY}.</p>\n   *\n   * <p>This method should be called before {@link RegistryUtils#run()} to avoid that the registry process is too quick",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/144/SCBEngine.java\nindex 4d2f157029..f73fac1061 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/144/SCBEngine.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.core;\n \n import java.util.Collection;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/144/SCBEngine.java\nindex 4d2f157029..fcf3bf21ee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/144/SCBEngine.java\n@@ -185,8 +185,7 @@ public class SCBEngine {\n     }\n   }\n \n-\n-  private void doInit() throws Exception {\n+private void doInit() throws Exception {\n     status = SCBStatus.STARTING;\n \n     eventBus.register(this);\n@@ -292,4 +291,4 @@ public class SCBEngine {\n \n     return consumerProviderManager.getReferenceConfig(microserviceName);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "272",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/144/SCBEngine.java\nindex 4d2f157029..0d79f47c2f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/144/SCBEngine.java\n@@ -19,7 +19,6 @@ package org.apache.servicecomb.core;\n import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n-\n import org.apache.servicecomb.config.ConfigUtil;\n import org.apache.servicecomb.core.BootListener.BootEvent;\n import org.apache.servicecomb.core.BootListener.EventType;\n@@ -39,100 +38,100 @@ import org.apache.servicecomb.serviceregistry.task.MicroserviceInstanceRegisterT\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.google.common.eventbus.AllowConcurrentEvents;\n import com.google.common.eventbus.EventBus;\n import com.google.common.eventbus.Subscribe;\n \n // TODO: should not depend on spring, that will make integration more flexible\n+\n public class SCBEngine {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(SCBEngine.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SCBEngine.class);\n \n-  private ProducerProviderManager producerProviderManager;\n+    private ProducerProviderManager producerProviderManager;\n \n-  private ConsumerProviderManager consumerProviderManager;\n+    private ConsumerProviderManager consumerProviderManager;\n \n-  private TransportManager transportManager;\n+    private TransportManager transportManager;\n \n-  private SchemaListenerManager schemaListenerManager;\n+    private SchemaListenerManager schemaListenerManager;\n \n-  private Collection<BootListener> bootListenerList;\n+    private Collection<BootListener> bootListenerList;\n \n-  private final AtomicLong invocationStartedCounter = new AtomicLong();\n+    private final AtomicLong invocationStartedCounter = new AtomicLong();\n \n-  private final AtomicLong invocationFinishedCounter = new AtomicLong();\n+    private final AtomicLong invocationFinishedCounter = new AtomicLong();\n \n-  private volatile SCBStatus status = SCBStatus.DOWN;\n+    private volatile SCBStatus status = SCBStatus.DOWN;\n \n-  public void setStatus(SCBStatus status) {\n+    public void setStatus(SCBStatus status) {\n     this.status = status;\n-  }\n+    }\n \n-  public SCBStatus getStatus() {\n+    public SCBStatus getStatus() {\n     return status;\n-  }\n+    }\n \n-  private EventBus eventBus = EventManager.getEventBus();\n+    private EventBus eventBus = EventManager.getEventBus();\n \n-  private static final SCBEngine INSTANCE = new SCBEngine();\n+    private static final SCBEngine INSTANCE = new SCBEngine();\n \n-  public static SCBEngine getInstance() {\n+    public static SCBEngine getInstance() {\n     return INSTANCE;\n-  }\n+    }\n \n-  public void setProducerProviderManager(\n-      ProducerProviderManager producerProviderManager) {\n+    public void setProducerProviderManager(ProducerProviderManager producerProviderManager) {\n     this.producerProviderManager = producerProviderManager;\n-  }\n+    }\n \n-  public void setConsumerProviderManager(\n-      ConsumerProviderManager consumerProviderManager) {\n+    public void setConsumerProviderManager(ConsumerProviderManager consumerProviderManager) {\n     this.consumerProviderManager = consumerProviderManager;\n-  }\n+    }\n \n-  public TransportManager getTransportManager() {\n+    public TransportManager getTransportManager() {\n     return transportManager;\n-  }\n+    }\n \n-  public void setTransportManager(TransportManager transportManager) {\n+    public void setTransportManager(TransportManager transportManager) {\n     this.transportManager = transportManager;\n-  }\n+    }\n \n-  public void setSchemaListenerManager(\n-      SchemaListenerManager schemaListenerManager) {\n+    public void setSchemaListenerManager(SchemaListenerManager schemaListenerManager) {\n     this.schemaListenerManager = schemaListenerManager;\n-  }\n+    }\n \n-  public Collection<BootListener> getBootListenerList() {\n+    public Collection<BootListener> getBootListenerList() {\n     return bootListenerList;\n-  }\n+    }\n \n-  public void setBootListenerList(Collection<BootListener> bootListenerList) {\n+    public void setBootListenerList(Collection<BootListener> bootListenerList) {\n     this.bootListenerList = bootListenerList;\n-  }\n+    }\n \n-  protected void triggerEvent(EventType eventType) {\n+    protected void triggerEvent(EventType eventType) {\n     BootEvent event = new BootEvent();\n     event.setEventType(eventType);\n-\n     for (BootListener listener : bootListenerList) {\n-      listener.onBootEvent(event);\n+        listener.onBootEvent(event);\n+    }\n     }\n-  }\n \n-  protected void safeTriggerEvent(EventType eventType) {\n+    protected void safeTriggerEvent(EventType eventType) {\n     BootEvent event = new BootEvent();\n     event.setEventType(eventType);\n-\n     for (BootListener listener : bootListenerList) {\n-      try {\n+        try {\n         listener.onBootEvent(event);\n-        LOGGER.info(\"BootListener {} succeed to process {}.\", listener.getClass().getName(), eventType);\n-      } catch (Throwable e) {\n-        LOGGER.error(\"BootListener {} failed to process {}.\", listener.getClass().getName(), eventType, e);\n-      }\n+        LOGGER.info(\"BootListener {} succeed to process {}.\",\n+listener.getClass().getName(),\n+eventType);\n+        } catch (Throwable e) {\n+          LOGGER.error(\"BootListener {} failed to process {}.\",\n+listener.getClass().getName(),\n+eventType,\n+e);\n+        }\n+    }\n     }\n-  }\n \n   /**\n    * <p>As the process of instance registry is asynchronous, the {@code AFTER_REGISTRY}\n@@ -145,96 +144,86 @@ public class SCBEngine {\n    *\n    * <p>Check if {@code InstanceId} is null to judge whether the instance registry has succeeded.</p>\n    */\n-  private void triggerAfterRegistryEvent() {\n+\n+    private void triggerAfterRegistryEvent() {\n     EventManager.register(new Object() {\n-      @Subscribe\n-      public void afterRegistryInstance(MicroserviceInstanceRegisterTask microserviceInstanceRegisterTask) {\n-        LOGGER.info(\"receive MicroserviceInstanceRegisterTask event, check instance Id...\");\n-        if (!StringUtils.isEmpty(RegistryUtils.getMicroserviceInstance().getInstanceId())) {\n-          LOGGER.info(\"instance registry succeeds for the first time, will send AFTER_REGISTRY event.\");\n-          status = SCBStatus.UP;\n-          triggerEvent(EventType.AFTER_REGISTRY);\n-          EventManager.unregister(this);\n-        }\n-      }\n-    });\n-  }\n+                                                 @Subscribe\n+                                                 public void afterRegistryInstance(MicroserviceInstanceRegisterTask microserviceInstanceRegisterTask) {\n+                              LOGGER.info(\"receive MicroserviceInstanceRegisterTask event, check instance Id...\");\n+                              if (!StringUtils.isEmpty(RegistryUtils.getMicroserviceInstance().getInstanceId())) {\n+                                                     LOGGER.info(\"instance registry succeeds for the first time, will send AFTER_REGISTRY event.\");\n+                                                     status = SCBStatus.UP;\n+                                                     triggerEvent(EventType.AFTER_REGISTRY);\n+                                                     EventManager.unregister(this);\n+                              }\n+                                                 }\n+});\n+    }\n \n-  @AllowConcurrentEvents\n-  @Subscribe\n-  public void onInvocationStart(InvocationStartEvent event) {\n+    @AllowConcurrentEvents\n+    @Subscribe\n+    public void onInvocationStart(InvocationStartEvent event) {\n     invocationStartedCounter.incrementAndGet();\n-  }\n+    }\n \n-  @AllowConcurrentEvents\n-  @Subscribe\n-  public void onInvocationFinish(InvocationFinishEvent event) {\n+    @AllowConcurrentEvents\n+    @Subscribe\n+    public void onInvocationFinish(InvocationFinishEvent event) {\n     invocationFinishedCounter.incrementAndGet();\n-  }\n+    }\n \n-  public synchronized void init() {\n+    public synchronized void init() {\n     if (SCBStatus.DOWN.equals(status)) {\n-      try {\n+        try {\n         doInit();\n         status = SCBStatus.UP;\n-      } catch (Exception e) {\n-        destroy();\n-        status = SCBStatus.FAILED;\n-        throw new IllegalStateException(\"ServiceComb init failed.\", e);\n-      }\n+        } catch (Exception e) {\n+          destroy();\n+          status = SCBStatus.FAILED;\n+          throw new IllegalStateException(\"ServiceComb init failed.\", e);\n+        }\n+    }\n     }\n-  }\n-\n \n-  private void doInit() throws Exception {\n+    private void doInit() throws Exception {\n     status = SCBStatus.STARTING;\n-\n     eventBus.register(this);\n-\n     consumerProviderManager.setAppManager(RegistryUtils.getServiceRegistry().getAppManager());\n     AbstractEndpointsCache.init(RegistryUtils.getInstanceCacheManager(), transportManager);\n-\n     triggerEvent(EventType.BEFORE_HANDLER);\n     HandlerConfigUtils.init();\n     triggerEvent(EventType.AFTER_HANDLER);\n-\n     triggerEvent(EventType.BEFORE_PRODUCER_PROVIDER);\n     producerProviderManager.init();\n     triggerEvent(EventType.AFTER_PRODUCER_PROVIDER);\n-\n     triggerEvent(EventType.BEFORE_CONSUMER_PROVIDER);\n     consumerProviderManager.init();\n     triggerEvent(EventType.AFTER_CONSUMER_PROVIDER);\n-\n     triggerEvent(EventType.BEFORE_TRANSPORT);\n     transportManager.init();\n     triggerEvent(EventType.AFTER_TRANSPORT);\n-\n     schemaListenerManager.notifySchemaListener();\n-\n     triggerEvent(EventType.BEFORE_REGISTRY);\n-\n     triggerAfterRegistryEvent();\n-\n     RegistryUtils.run();\n-\n     Runtime.getRuntime().addShutdownHook(new Thread(this::destroy));\n-  }\n+    }\n \n   /**\n    * not allow throw any exception\n    * even some step throw exception, must catch it and go on, otherwise shutdown process will be broken.\n    */\n-  public synchronized void destroy() {\n+\n+    public synchronized void destroy() {\n     if (SCBStatus.UP.equals(status)) {\n-      LOGGER.info(\"ServiceComb is closing now...\");\n-      doDestroy();\n-      status = SCBStatus.DOWN;\n-      LOGGER.info(\"ServiceComb had closed\");\n+        LOGGER.info(\"ServiceComb is closing now...\");\n+        doDestroy();\n+        status = SCBStatus.DOWN;\n+        LOGGER.info(\"ServiceComb had closed\");\n+    }\n     }\n-  }\n \n-  private void doDestroy() {\n+    private void doDestroy() {\n     //Step 1: notify all component stop invoke via BEFORE_CLOSE Event\n     safeTriggerEvent(EventType.BEFORE_CLOSE);\n \n@@ -248,7 +237,7 @@ public class SCBEngine {\n \n     //Step 4: wait all invocation finished\n     try {\n-      validAllInvocationFinished();\n+        validAllInvocationFinished();\n     } catch (InterruptedException e) {\n       LOGGER.error(\"wait all invocation finished interrupted\", e);\n     }\n@@ -262,34 +251,31 @@ public class SCBEngine {\n \n     //Step 7: notify all component do clean works via AFTER_CLOSE Event\n     safeTriggerEvent(EventType.AFTER_CLOSE);\n-  }\n+    }\n \n-  private void validAllInvocationFinished() throws InterruptedException {\n+    private void validAllInvocationFinished() throws InterruptedException {\n     while (true) {\n-      if (invocationFinishedCounter.get() == invocationStartedCounter.get()) {\n-        return;\n-      }\n-      TimeUnit.SECONDS.sleep(1);\n+        if (invocationFinishedCounter.get() == invocationStartedCounter.get()) {\n+                     return;\n+        }\n+        TimeUnit.SECONDS.sleep(1);\n+    }\n     }\n-  }\n \n-  protected void ensureStatusUp() {\n+    protected void ensureStatusUp() {\n     SCBStatus currentStatus = getStatus();\n     if (!SCBStatus.UP.equals(currentStatus)) {\n-      throw new IllegalStateException(\n-          \"System is starting and not ready for remote calls or shutting down in progress, STATUS = \" + currentStatus);\n+        throw new IllegalStateException(\"System is starting and not ready for remote calls or shutting down in progress, STATUS = \" + currentStatus);\n+    }\n     }\n-  }\n \n-  public ReferenceConfig createReferenceConfigForInvoke(String microserviceName, String versionRule, String transport) {\n+    public ReferenceConfig createReferenceConfigForInvoke(String microserviceName, String versionRule, String transport) {\n     ensureStatusUp();\n-\n     return consumerProviderManager.createReferenceConfig(microserviceName, versionRule, transport);\n-  }\n+    }\n \n-  public ReferenceConfig getReferenceConfigForInvoke(String microserviceName) {\n+    public ReferenceConfig getReferenceConfigForInvoke(String microserviceName) {\n     ensureStatusUp();\n-\n     return consumerProviderManager.getReferenceConfig(microserviceName);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 130
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/144/SCBEngine.java\nindex 4d2f157029..0df3c828b7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/144/SCBEngine.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/144/SCBEngine.java\n@@ -144,8 +144,7 @@ public class SCBEngine {\n    * that the event is not watched by this subscriber.</p>\n    *\n    * <p>Check if {@code InstanceId} is null to judge whether the instance registry has succeeded.</p>\n-   */\n-  private void triggerAfterRegistryEvent() {\n+   */ private void triggerAfterRegistryEvent() {\n     EventManager.register(new Object() {\n       @Subscribe\n       public void afterRegistryInstance(MicroserviceInstanceRegisterTask microserviceInstanceRegisterTask) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}