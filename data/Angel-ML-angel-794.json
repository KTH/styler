{
    "error_id": "794",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/794/AggrParam.java\nindex ac042927f7..d5d7e98d02 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/794/AggrParam.java\n@@ -26,45 +26,45 @@ import java.util.List;\n  * The parameter for aggregation.\n  */\n public class AggrParam {\n-  /**\n-   * The Matrix id.\n-   */\n-  protected final int matrixId;\n+    /**\n+     * The Matrix id.\n+     */\n+    protected final int matrixId;\n \n-  /**\n-   * Create a new aggregation parameter.\n-   *\n-   * @param matrixId the matrix id\n-   */\n-  public AggrParam(int matrixId) {\n-    this.matrixId = matrixId;\n-  }\n+    /**\n+     * Create a new aggregation parameter.\n+     *\n+     * @param matrixId the matrix id\n+     */\n+    public AggrParam(int matrixId) {\n+        this.matrixId = matrixId;\n+    }\n+\n+    /**\n+     * Gets matrix id.\n+     *\n+     * @return the matrix id\n+     */\n+    public int getMatrixId() {\n+        return matrixId;\n+    }\n \n-  /**\n-   * Gets matrix id.\n-   *\n-   * @return the matrix id\n-   */\n-  public int getMatrixId() {\n-    return matrixId;\n-  }\n+    /**\n+     * Split list.\n+     *\n+     * @return the partition parameters\n+     */\n+    public List<PartitionAggrParam> split() {\n+        List<PartitionKey> parts =\n+                PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n+        int size = parts.size();\n \n-  /**\n-   * Split list.\n-   *\n-   * @return the partition parameters\n-   */\n-  public List<PartitionAggrParam> split() {\n-    List<PartitionKey> parts =\n-        PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n-    int size = parts.size();\n+        List<PartitionAggrParam> partParams = new ArrayList<PartitionAggrParam>(size);\n \n-    List<PartitionAggrParam> partParams = new ArrayList<PartitionAggrParam>(size);\n+        for (int i = 0; i < size; i++) {\n+            partParams.add(new PartitionAggrParam(matrixId, parts.get(i)));\n+        }\n \n-    for (int i = 0; i < size; i++) {\n-      partParams.add(new PartitionAggrParam(matrixId, parts.get(i)));\n+        return partParams;\n     }\n-\n-    return partParams;\n-  }\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/794/AggrParam.java\nindex ac042927f7..7bbe463d5b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/794/AggrParam.java\n@@ -67,4 +67,4 @@ public class AggrParam {\n \n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 33.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 51.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 61.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/794/AggrParam.java\nindex ac042927f7..ef1e63402b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/794/AggrParam.java\n@@ -18,53 +18,54 @@ package com.tencent.angel.ml.matrix.udf.aggr;\n \n import com.tencent.angel.PartitionKey;\n import com.tencent.angel.psagent.PSAgentContext;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n  * The parameter for aggregation.\n  */\n+\n public class AggrParam {\n   /**\n    * The Matrix id.\n    */\n-  protected final int matrixId;\n+\n+    protected final int matrixId;\n \n   /**\n    * Create a new aggregation parameter.\n    *\n    * @param matrixId the matrix id\n    */\n-  public AggrParam(int matrixId) {\n+\n+    public AggrParam(int matrixId) {\n     this.matrixId = matrixId;\n-  }\n+    }\n \n   /**\n    * Gets matrix id.\n    *\n    * @return the matrix id\n    */\n-  public int getMatrixId() {\n+\n+    public int getMatrixId() {\n     return matrixId;\n-  }\n+    }\n \n   /**\n    * Split list.\n    *\n    * @return the partition parameters\n    */\n-  public List<PartitionAggrParam> split() {\n-    List<PartitionKey> parts =\n-        PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n-    int size = parts.size();\n \n+    public List<PartitionAggrParam> split() {\n+    List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n+    int size = parts.size();\n     List<PartitionAggrParam> partParams = new ArrayList<PartitionAggrParam>(size);\n-\n     for (int i = 0; i < size; i++) {\n-      partParams.add(new PartitionAggrParam(matrixId, parts.get(i)));\n+        partParams.add(new PartitionAggrParam(matrixId, parts.get(i)));\n     }\n-\n     return partParams;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 15.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/794/AggrParam.java\nindex ac042927f7..b48b4c440c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/794/AggrParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/794/AggrParam.java\n@@ -12,9 +12,7 @@\n  * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n- */\n-\n-package com.tencent.angel.ml.matrix.udf.aggr;\n+ */ package com.tencent.angel.ml.matrix.udf.aggr;\n \n import com.tencent.angel.PartitionKey;\n import com.tencent.angel.psagent.PSAgentContext;\n",
            "diff_size": 3
        }
    ]
}