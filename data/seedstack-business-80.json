{
    "error_id": "80",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.specification;\n\nimport org.seedstack.business.specification.AttributeSpecification;\nimport org.seedstack.business.specification.EqualSpecification;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/80/SpecificationPickerImpl.java\nindex 68c7131607..6b22d3b6b3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/80/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/80/SpecificationPickerImpl.java\nindex 68c7131607..9b790d6e88 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/80/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n@@ -94,7 +95,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue,\n-            boolean leftInclusive, boolean rightInclusive) {\n+                                                                          boolean leftInclusive,\n+                                                                          boolean rightInclusive) {\n         Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n         if (leftInclusive) {\n             gt = gt.or(new EqualSpecification<>(leftValue));\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/80/SpecificationPickerImpl.java\nindex 68c7131607..55f6d26629 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/80/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n@@ -69,9 +70,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new GreaterThanSpecification<>(value))));\n-        return new OperatorPickerImpl<>(context);\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value).or(new GreaterThanSpecification<>(value))));\n+return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n@@ -82,9 +82,8 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public <V extends Comparable<? super V>> OperatorPicker<T, S> lessThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new LessThanSpecification<>(value))));\n-        return new OperatorPickerImpl<>(context);\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value).or(new LessThanSpecification<>(value))));\n+return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n@@ -93,13 +92,11 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue,\n-            boolean leftInclusive, boolean rightInclusive) {\n-        Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n+    public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive, boolean rightInclusive) {\n+    Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n         if (leftInclusive) {\n             gt = gt.or(new EqualSpecification<>(leftValue));\n-        }\n-        Specification<V> lt = new LessThanSpecification<>(rightValue);\n+        } Specification<V> lt = new LessThanSpecification<>(rightValue);\n         if (rightInclusive) {\n             lt = lt.or(new EqualSpecification<>(rightValue));\n         }\n@@ -117,4 +114,4 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n         }\n         return not ? result.negate() : result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "24",
                    "column": "31",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "column": "19",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/80/SpecificationPickerImpl.java\nindex 68c7131607..3e4eb46506 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/80/SpecificationPickerImpl.java\n@@ -20,18 +20,20 @@ import org.seedstack.business.specification.dsl.OperatorPicker;\n import org.seedstack.business.specification.dsl.SpecificationPicker;\n import org.seedstack.business.specification.dsl.StringOptionPicker;\n \n-class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements SpecificationPicker<T, S> {\n+\n+class SpecificationPickerImpl <T, S extends BaseSelector<T, S>> implements SpecificationPicker<T, S> {\n \n     private final SpecificationBuilderContext<T, S> context;\n     private boolean not;\n \n+\n     SpecificationPickerImpl(SpecificationBuilderContext<T, S> context) {\n         this.context = context;\n     }\n \n     @Override\n     public SpecificationPicker<T, S> not() {\n-        not = !not;\n+        not = ! not;\n         return this;\n     }\n \n@@ -43,14 +45,14 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n \n     @Override\n     public StringOptionPicker<T, S> matching(String pattern) {\n-        StringSpecification.Options stringValueOptions = new StringSpecification.Options();\n+        StringSpecification.Options stringValueOptions = new StringSpecification. Options();\n         context.addSpecification(processSpecification(new StringMatchingSpecification(pattern, stringValueOptions)));\n         return new StringOptionPickerImpl<>(context, stringValueOptions);\n     }\n \n     @Override\n     public StringOptionPicker<T, S> equalTo(String value) {\n-        StringSpecification.Options stringValueOptions = new StringSpecification.Options();\n+        StringSpecification.Options stringValueOptions = new StringSpecification. Options();\n         context.addSpecification(processSpecification(new StringEqualSpecification(value, stringValueOptions)));\n         return new StringOptionPickerImpl<>(context, stringValueOptions);\n     }\n@@ -62,39 +64,42 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThan(V value) {\n+    public <V extends Comparable<?\n+                                    super V>> OperatorPicker<T, S> greaterThan(V value) {\n         context.addSpecification(processSpecification(new GreaterThanSpecification<>(value)));\n         return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new GreaterThanSpecification<>(value))));\n+    public <V extends Comparable<?\n+                                    super V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value) {\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value).or(new GreaterThanSpecification<>(value))));\n         return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> lessThan(V value) {\n+    public <V extends Comparable<?\n+                                    super V>> OperatorPicker<T, S> lessThan(V value) {\n         context.addSpecification(processSpecification(new LessThanSpecification<>(value)));\n         return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> lessThanOrEqualTo(V value) {\n-        context.addSpecification(\n-                processSpecification(new EqualSpecification<>(value).or(new LessThanSpecification<>(value))));\n+    public <V extends Comparable<?\n+                                    super V>> OperatorPicker<T, S> lessThanOrEqualTo(V value) {\n+        context.addSpecification(processSpecification(new EqualSpecification<>(value).or(new LessThanSpecification<>(value))));\n         return new OperatorPickerImpl<>(context);\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue) {\n+    public <V extends Comparable<?\n+                                    super V>> OperatorPicker<T, S> between(V leftValue, V rightValue) {\n         return between(leftValue, rightValue, false, false);\n     }\n \n     @Override\n-    public <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue,\n-            boolean leftInclusive, boolean rightInclusive) {\n+    public <V extends Comparable<?\n+                                    super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive, boolean rightInclusive) {\n         Specification<V> gt = new GreaterThanSpecification<>(leftValue);\n         if (leftInclusive) {\n             gt = gt.or(new EqualSpecification<>(leftValue));\n@@ -107,14 +112,13 @@ class SpecificationPickerImpl<T, S extends BaseSelector<T, S>> implements Specif\n         return new OperatorPickerImpl<>(context);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private Specification<T> processSpecification(Specification<?> specification) {\n+    @SuppressWarnings(\"unchecked\") private Specification<T> processSpecification(Specification<?> specification) {\n         Specification<T> result;\n         if (context.hasProperty()) {\n             result = new AttributeSpecification<>(context.pickProperty(), specification);\n         } else {\n             result = (Specification<T>) specification;\n         }\n-        return not ? result.negate() : result;\n+        return not? result.negate() : result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/80/SpecificationPickerImpl.java\nindex 68c7131607..6b22d3b6b3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/80/SpecificationPickerImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/80/SpecificationPickerImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import org.seedstack.business.specification.AttributeSpecification;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}