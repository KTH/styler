{
    "error_id": "707",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/707/HashPSPartitioner.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/707/HashPSPartitioner.java\nindex da501271d7..30119e10d3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/707/HashPSPartitioner.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/707/HashPSPartitioner.java\n@@ -23,13 +23,15 @@ import com.tencent.angel.protobuf.generated.MLProtos.Partition;\n  */\n public class HashPSPartitioner extends PSPartitioner {\n \n-  public HashPSPartitioner() {\n-    super();\n-  }\n+    public HashPSPartitioner() {\n+        super();\n+    }\n \n-  /** partition by id mod the num of parameter servers  */\n-  @Override\n-  public int getServerIndex(Partition partition, int numServer) {\n-    return partition.getPartitionId() % numServer;\n-  }\n+    /**\n+     * partition by id mod the num of parameter servers\n+     */\n+    @Override\n+    public int getServerIndex(Partition partition, int numServer) {\n+        return partition.getPartitionId() % numServer;\n+    }\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/707/HashPSPartitioner.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/707/HashPSPartitioner.java\nindex da501271d7..85444439c5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/707/HashPSPartitioner.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/707/HashPSPartitioner.java\n@@ -32,4 +32,4 @@ public class HashPSPartitioner extends PSPartitioner {\n   public int getServerIndex(Partition partition, int numServer) {\n     return partition.getPartitionId() % numServer;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 33.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/707/HashPSPartitioner.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/707/HashPSPartitioner.java\nindex da501271d7..f075506748 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/707/HashPSPartitioner.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/707/HashPSPartitioner.java\n@@ -21,15 +21,17 @@ import com.tencent.angel.protobuf.generated.MLProtos.Partition;\n /**\n  * Partitions by partition id mod the num of parameter servers.\n  */\n+\n public class HashPSPartitioner extends PSPartitioner {\n \n-  public HashPSPartitioner() {\n+    public HashPSPartitioner() {\n     super();\n-  }\n+    }\n \n   /** partition by id mod the num of parameter servers  */\n-  @Override\n-  public int getServerIndex(Partition partition, int numServer) {\n+\n+    @Override\n+    public int getServerIndex(Partition partition, int numServer) {\n     return partition.getPartitionId() % numServer;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}