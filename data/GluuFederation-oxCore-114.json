{
    "error_id": "114",
    "information": {
        "errors": [
            {
                "line": "98",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    }\n\n\t@Override\n\tpublic boolean hasKey(String key) {\n        Boolean hasKey = pool.getResource().exists(key);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "99",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/114/RedisShardedProvider.java\nindex ab8587b332..c6865500da 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/114/RedisShardedProvider.java\n@@ -95,7 +95,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+    @Override\n \tpublic boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/114/RedisShardedProvider.java\nindex ab8587b332..383925d9cb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/114/RedisShardedProvider.java\n@@ -63,8 +63,8 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n                     if (configuration.getUseSSL()) {\n                         if (StringUtils.isNotBlank(configuration.getSslTrustStoreFilePath())) {\n                             shardInfo = new JedisShardInfo(host, port, true,\n-                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n-                                    new SSLParameters(), new DefaultHostnameVerifier());\n+                                RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n+                                new SSLParameters(), new DefaultHostnameVerifier());\n                         } else {\n                             shardInfo = new JedisShardInfo(host, port, true);\n                         }\n@@ -95,12 +95,12 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n-\tpublic boolean hasKey(String key) {\n+    @Override\n+    public boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n         return Boolean.TRUE.equals(hasKey);\n-\t}\n+    }\n \n     @Override\n     public Object get(String key) {\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/114/RedisShardedProvider.java\nindex ab8587b332..7a3538d9f9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/114/RedisShardedProvider.java\n@@ -63,8 +63,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n                     if (configuration.getUseSSL()) {\n                         if (StringUtils.isNotBlank(configuration.getSslTrustStoreFilePath())) {\n                             shardInfo = new JedisShardInfo(host, port, true,\n-                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n-                                    new SSLParameters(), new DefaultHostnameVerifier());\n+                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())), new SSLParameters(), new DefaultHostnameVerifier());\n                         } else {\n                             shardInfo = new JedisShardInfo(host, port, true);\n                         }\n@@ -95,14 +94,14 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+@Override\n \tpublic boolean hasKey(String key) {\n-        Boolean hasKey = pool.getResource().exists(key);\n+    Boolean hasKey = pool.getResource().exists(key);\n \n         return Boolean.TRUE.equals(hasKey);\n-\t}\n+    }\n \n-    @Override\n+@Override\n     public Object get(String key) {\n         ShardedJedis jedis = pool.getResource();\n         try {\n@@ -154,4 +153,4 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n     public void clear() {\n         LOG.trace(\"clear not supported by sharded implemented\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/114/RedisShardedProvider.java\nindex ab8587b332..97cf8c761d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/114/RedisShardedProvider.java\n@@ -9,7 +9,6 @@ import redis.clients.jedis.JedisPoolConfig;\n import redis.clients.jedis.JedisShardInfo;\n import redis.clients.jedis.ShardedJedis;\n import redis.clients.jedis.ShardedJedisPool;\n-\n import javax.net.ssl.SSLParameters;\n import java.io.File;\n import java.io.Serializable;\n@@ -21,10 +20,11 @@ import java.util.List;\n  *\n  * @author yuriyz on 02/23/2017.\n  */\n+\n+\n public class RedisShardedProvider extends AbstractRedisProvider {\n \n     private static final Logger LOG = LoggerFactory.getLogger(RedisShardedProvider.class);\n-\n     private ShardedJedisPool pool;\n \n     public RedisShardedProvider(RedisConfiguration redisConfiguration) {\n@@ -34,11 +34,8 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n     public void create() {\n         try {\n             LOG.debug(\"Starting RedisShardedProvider ... configuration:\" + redisConfiguration);\n-\n             JedisPoolConfig poolConfig = createPoolConfig();\n-\n             pool = new ShardedJedisPool(poolConfig, shards(redisConfiguration));\n-\n             testConnection();\n             LOG.debug(\"RedisShardedProvider started.\");\n         } catch (Exception e) {\n@@ -49,22 +46,19 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n \n     private static List<JedisShardInfo> shards(RedisConfiguration configuration) {\n         final String[] serverWithPorts = StringUtils.split(configuration.getServers().trim(), \",\");\n-\n         List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();\n         for (String serverWithPort : serverWithPorts) {\n             serverWithPort = serverWithPort.trim();\n+\n             if (serverWithPort.contains(\":\") && !serverWithPort.contains(\"@\") && !configuration.getServers().contains(\"//\")) {\n                 final String[] split = serverWithPort.trim().split(\":\");\n                 String host = split[0];\n                 int port = Integer.parseInt(split[1].trim());\n-\n                 try {\n                     final JedisShardInfo shardInfo;\n                     if (configuration.getUseSSL()) {\n                         if (StringUtils.isNotBlank(configuration.getSslTrustStoreFilePath())) {\n-                            shardInfo = new JedisShardInfo(host, port, true,\n-                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n-                                    new SSLParameters(), new DefaultHostnameVerifier());\n+                            shardInfo = new JedisShardInfo(host, port, true, RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())), new SSLParameters(), new DefaultHostnameVerifier());\n                         } else {\n                             shardInfo = new JedisShardInfo(host, port, true);\n                         }\n@@ -79,14 +73,13 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n                 shards.add(new JedisShardInfo(serverWithPort));\n             }\n         }\n+\n         return shards;\n     }\n \n     public void destroy() {\n         LOG.debug(\"Destroying RedisShardedProvider\");\n-\n         pool.close();\n-\n         LOG.debug(\"Destroyed RedisShardedProvider\");\n     }\n \n@@ -95,12 +88,12 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n-\tpublic boolean hasKey(String key) {\n+    @Override\n+    public boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n         return Boolean.TRUE.equals(hasKey);\n-\t}\n+    }\n \n     @Override\n     public Object get(String key) {\n@@ -111,6 +104,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n             if (value != null && value.length > 0) {\n                 deserialized = SerializationUtils.deserialize(value);\n             }\n+\n             return deserialized;\n         } finally {\n             jedis.close();\n@@ -121,7 +115,9 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n     public void put(int expirationInSeconds, String key, Object object) {\n         ShardedJedis jedis = pool.getResource();\n         try {\n-            String status = jedis.setex(key.getBytes(), expirationInSeconds, SerializationUtils.serialize((Serializable) object));\n+            String status = jedis.setex(key.getBytes(),\n+                expirationInSeconds,\n+                    SerializationUtils.serialize((Serializable) object));\n             LOG.trace(\"put - key: \" + key + \", status: \" + status);\n         } finally {\n             jedis.close();\n@@ -154,4 +150,5 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n     public void clear() {\n         LOG.trace(\"clear not supported by sharded implemented\");\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "99",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/114/RedisShardedProvider.java\nindex ab8587b332..c6865500da 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/114/RedisShardedProvider.java\n@@ -95,7 +95,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+    @Override\n \tpublic boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "99",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/114/RedisShardedProvider.java\nindex ab8587b332..3853e891f3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/114/RedisShardedProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/114/RedisShardedProvider.java\n@@ -95,7 +95,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+    @ Override\n \tpublic boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n",
            "diff_size": 1
        }
    ]
}