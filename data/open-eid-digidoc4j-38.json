{
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "134",
                "column": "13",
                "severity": "error",
                "message": "'(' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "      if (in == null) {\n        throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n            (\"Keystore not found by location <%s>\", keystoreLocation)));\n      }\n      FileUtils.copyInputStreamToFile(in, tempFile);\n      return tempFile;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "134",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "134",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/38/TslLoader.java\nindex af5eca1d52..71a8f0243a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/38/TslLoader.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.tsl;\n \n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/38/TslLoader.java\nindex af5eca1d52..8a3fce0fa1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/38/TslLoader.java\n@@ -116,7 +116,7 @@ public class TslLoader implements Serializable {\n     try {\n       return new KeyStoreCertificateSource(tslKeystoreFile, DEFAULT_KEYSTORE_TYPE,\n           this.configuration.getTslKeyStorePassword());\n-    } catch (IOException e) {\n+  } catch (IOException e) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve keystore\", e);\n     }\n   }\n@@ -130,8 +130,7 @@ public class TslLoader implements Serializable {\n       File tempFile = File.createTempFile(\"temp-tsl-keystore\", \".jks\");\n       InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n       if (in == null) {\n-        throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-            (\"Keystore not found by location <%s>\", keystoreLocation)));\n+        throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format(\"Keystore not found by location <%s>\", keystoreLocation)));\n       }\n       FileUtils.copyInputStreamToFile(in, tempFile);\n       return tempFile;\n@@ -160,4 +159,4 @@ public class TslLoader implements Serializable {\n     return tslRepository;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/38/TslLoader.java\nindex af5eca1d52..d8ab30f730 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/38/TslLoader.java\n@@ -16,7 +16,6 @@ import java.io.InputStream;\n import java.io.Serializable;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n-\n import eu.europa.esig.dss.service.http.commons.FileCacheDataLoader;\n import org.apache.commons.io.FileUtils;\n import org.digidoc4j.Configuration;\n@@ -26,7 +25,6 @@ import org.digidoc4j.exceptions.TslKeyStoreNotFoundException;\n import org.digidoc4j.impl.asic.DataLoaderDecorator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.model.DSSException;\n import eu.europa.esig.dss.spi.client.http.DataLoader;\n import eu.europa.esig.dss.spi.client.http.Protocol;\n@@ -38,49 +36,56 @@ import eu.europa.esig.dss.spi.x509.KeyStoreCertificateSource;\n /**\n  * TSL loader\n  */\n+\n+\n public class TslLoader implements Serializable {\n \n-  public static final File fileCacheDirectory = new File(System.getProperty(\"java.io.tmpdir\") + \"/digidoc4jTSLCache\");\n-  private static final Logger logger = LoggerFactory.getLogger(TslLoader.class);\n-  private static final String DEFAULT_KEYSTORE_TYPE = \"JKS\";\n-  private transient TSLRepository tslRepository;\n-  private transient TSLCertificateSourceImpl tslCertificateSource;\n-  private transient TSLValidationJob tslValidationJob;\n-  private Configuration configuration;\n-  private boolean checkSignature = true;\n+    public static final File fileCacheDirectory = new File(System.getProperty(\"java.io.tmpdir\") + \"/digidoc4jTSLCache\");\n+    private static final Logger logger = LoggerFactory.getLogger(TslLoader.class);\n+    private static final String DEFAULT_KEYSTORE_TYPE = \"JKS\";\n+    private transient TSLRepository tslRepository;\n+    private transient TSLCertificateSourceImpl tslCertificateSource;\n+    private transient TSLValidationJob tslValidationJob;\n+    private Configuration configuration;\n+    private boolean checkSignature = true;\n \n   /**\n    * @param configuration configuration context\n    */\n-  public TslLoader(Configuration configuration) {\n+\n+\n+    public TslLoader(Configuration configuration) {\n     this.configuration = configuration;\n-  }\n+    }\n+\n \n-  public static void invalidateCache() {\n-    logger.info(\"Cleaning TSL cache directory at {}\", TslLoader.fileCacheDirectory.getPath());\n+    public static void invalidateCache() {\n+    logger.info(\"Cleaning TSL cache directory at {}\",\n+        TslLoader.fileCacheDirectory.getPath());\n     try {\n-      if (TslLoader.fileCacheDirectory.exists()) {\n+        if (TslLoader.fileCacheDirectory.exists()) {\n         FileUtils.cleanDirectory(TslLoader.fileCacheDirectory);\n-      } else {\n-        logger.debug(\"TSL cache directory doesn't exist\");\n-      }\n+        } else {\n+          logger.debug(\"TSL cache directory doesn't exist\");\n+        }\n     } catch (Exception e) {\n       throw new DigiDoc4JException(e);\n     }\n-  }\n+    }\n \n-  public void prepareTsl() {\n+\n+    public void prepareTsl() {\n     try {\n-      this.tslCertificateSource = new TSLCertificateSourceImpl();\n-      this.tslRepository = new TSLRepository();\n-      this.tslRepository.setTrustedListsCertificateSource(this.tslCertificateSource);\n-      this.tslValidationJob = this.createTslValidationJob(this.tslRepository);\n+        this.tslCertificateSource = new TSLCertificateSourceImpl();\n+        this.tslRepository = new TSLRepository();\n+        this.tslRepository.setTrustedListsCertificateSource(this.tslCertificateSource);\n+        this.tslValidationJob = this.createTslValidationJob(this.tslRepository);\n     } catch (DSSException e) {\n       throw new TslCertificateSourceInitializationException(\"Failed to initialize TSL: \" + e.getMessage(), e);\n     }\n-  }\n+    }\n \n-  private TSLValidationJob createTslValidationJob(TSLRepository repository) {\n+    private TSLValidationJob createTslValidationJob(TSLRepository repository) {\n     TSLValidationJob job = new TSLValidationJob();\n     job.setDataLoader(this.createDataLoader());\n     job.setOjContentKeyStore(this.getKeyStore());\n@@ -92,72 +97,76 @@ public class TslLoader implements Serializable {\n     job.setOjUrl(\"\");\n     job.setFilterTerritories(this.configuration.getTrustedTerritories());\n     return job;\n-  }\n+    }\n \n-  private DataLoader createDataLoader() {\n+    private DataLoader createDataLoader() {\n     CommonsDataLoader commonsDataLoader = new CommonsDataLoader();\n     if (Protocol.isHttpUrl(this.configuration.getTslLocation())) {\n-      DataLoaderDecorator.decorateWithProxySettings(commonsDataLoader, configuration);\n-      DataLoaderDecorator.decorateWithSslSettings(commonsDataLoader, configuration);\n-      commonsDataLoader.setTimeoutConnection(this.configuration.getConnectionTimeout());\n-      commonsDataLoader.setTimeoutSocket(this.configuration.getSocketTimeout());\n-      FileCacheDataLoader fileCacheDataLoader = new FileCacheDataLoader(commonsDataLoader);\n-      fileCacheDataLoader.setCacheExpirationTime(this.configuration.getTslCacheExpirationTime());\n-      fileCacheDataLoader.setFileCacheDirectory(this.fileCacheDirectory);\n-      logger.debug(\"Using file cache directory for storing TSL: {}\", this.fileCacheDirectory);\n-      return fileCacheDataLoader;\n+        DataLoaderDecorator.decorateWithProxySettings(commonsDataLoader, configuration);\n+        DataLoaderDecorator.decorateWithSslSettings(commonsDataLoader, configuration);\n+        commonsDataLoader.setTimeoutConnection(this.configuration.getConnectionTimeout());\n+        commonsDataLoader.setTimeoutSocket(this.configuration.getSocketTimeout());\n+        FileCacheDataLoader fileCacheDataLoader = new FileCacheDataLoader(commonsDataLoader);\n+        fileCacheDataLoader.setCacheExpirationTime(this.configuration.getTslCacheExpirationTime());\n+        fileCacheDataLoader.setFileCacheDirectory(this.fileCacheDirectory);\n+        logger.debug(\"Using file cache directory for storing TSL: {}\", this.fileCacheDirectory);\n+        return fileCacheDataLoader;\n     } else {\n       return commonsDataLoader;\n     }\n-  }\n+    }\n \n-  private KeyStoreCertificateSource getKeyStore() {\n+    private KeyStoreCertificateSource getKeyStore() {\n     File tslKeystoreFile = this.getTslKeystoreFile();\n     try {\n-      return new KeyStoreCertificateSource(tslKeystoreFile, DEFAULT_KEYSTORE_TYPE,\n-          this.configuration.getTslKeyStorePassword());\n+        return new KeyStoreCertificateSource(tslKeystoreFile,\n+            DEFAULT_KEYSTORE_TYPE,\n+            this.configuration.getTslKeyStorePassword());\n     } catch (IOException e) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve keystore\", e);\n     }\n-  }\n+    }\n \n-  private File getTslKeystoreFile() throws TslKeyStoreNotFoundException {\n+    private File getTslKeystoreFile() throws TslKeyStoreNotFoundException {\n     try {\n-      String keystoreLocation = this.configuration.getTslKeyStoreLocation();\n-      if (Files.exists(Paths.get(keystoreLocation))) {\n+        String keystoreLocation = this.configuration.getTslKeyStoreLocation();\n+        if (Files.exists(Paths.get(keystoreLocation))) {\n         return new File(keystoreLocation);\n-      }\n-      File tempFile = File.createTempFile(\"temp-tsl-keystore\", \".jks\");\n-      InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n-      if (in == null) {\n-        throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-            (\"Keystore not found by location <%s>\", keystoreLocation)));\n-      }\n-      FileUtils.copyInputStreamToFile(in, tempFile);\n-      return tempFile;\n+        }\n+        File tempFile = File.createTempFile(\"temp-tsl-keystore\", \".jks\");\n+        InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n+        if (in == null) {\n+        throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format(\"Keystore not found by location <%s>\", keystoreLocation)));\n+        }\n+        FileUtils.copyInputStreamToFile(in, tempFile);\n+        return tempFile;\n     } catch (IOException e) {\n       throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", e);\n     }\n-  }\n+    }\n \n   /*\n    * ACCESSORS\n    */\n \n-  public void setCheckSignature(boolean checkSignature) {\n+\n+    public void setCheckSignature(boolean checkSignature) {\n     this.checkSignature = checkSignature;\n-  }\n+    }\n+\n \n-  public TSLCertificateSourceImpl getTslCertificateSource() {\n+    public TSLCertificateSourceImpl getTslCertificateSource() {\n     return tslCertificateSource;\n-  }\n+    }\n+\n \n-  public TSLValidationJob getTslValidationJob() {\n+    public TSLValidationJob getTslValidationJob() {\n     return tslValidationJob;\n-  }\n+    }\n \n-  public TSLRepository getTslRepository() {\n+\n+    public TSLRepository getTslRepository() {\n     return tslRepository;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 76
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "134",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "column": "118",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/38/TslLoader.java\nindex af5eca1d52..363ac0e95a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/38/TslLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/38/TslLoader.java\n@@ -130,34 +130,33 @@ public class TslLoader implements Serializable {\n       File tempFile = File.createTempFile(\"temp-tsl-keystore\", \".jks\");\n       InputStream in = getClass().getClassLoader().getResourceAsStream(keystoreLocation);\n       if (in == null) {\n-        throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format\n-            (\"Keystore not found by location <%s>\", keystoreLocation)));\n-      }\n-      FileUtils.copyInputStreamToFile(in, tempFile);\n-      return tempFile;\n-    } catch (IOException e) {\n-      throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", e);\n-    }\n+        throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", new RuntimeException(String.format (\"Keystore not found by location <%s>\", keystoreLocation)));\n   }\n+  FileUtils.copyInputStreamToFile(in, tempFile);\n+  return tempFile;\n+} catch (IOException e) {\n+  throw new TslKeyStoreNotFoundException(\"Unable to retrieve TSL keystore\", e);\n+}\n+}\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  public void setCheckSignature(boolean checkSignature) {\n-    this.checkSignature = checkSignature;\n-  }\n+public void setCheckSignature(boolean checkSignature) {\n+  this.checkSignature = checkSignature;\n+}\n \n-  public TSLCertificateSourceImpl getTslCertificateSource() {\n-    return tslCertificateSource;\n-  }\n+public TSLCertificateSourceImpl getTslCertificateSource() {\n+  return tslCertificateSource;\n+}\n \n-  public TSLValidationJob getTslValidationJob() {\n-    return tslValidationJob;\n-  }\n+public TSLValidationJob getTslValidationJob() {\n+  return tslValidationJob;\n+}\n \n-  public TSLRepository getTslRepository() {\n-    return tslRepository;\n-  }\n+public TSLRepository getTslRepository() {\n+  return tslRepository;\n+}\n \n }\n",
            "diff_size": 27
        }
    ]
}