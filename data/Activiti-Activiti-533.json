{
    "error_id": "533",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport java.util.List;\nimport java.util.Map;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/533/ProcessAdminRuntimeImpl.java\nindex 0d8687d700..aceb8dc9cf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/533/ProcessAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/533/ProcessAdminRuntimeImpl.java\nindex 0d8687d700..eaabb88fdb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/533/ProcessAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n@@ -208,7 +209,7 @@ public class ProcessAdminRuntimeImpl implements ProcessAdminRuntime {\n     @Transactional\n     public void signal(SignalPayload signalPayload) {\n         processVariablesValidator.checkSignalPayloadVariables(signalPayload,\n-                                                              null);\n+                null);\n \n         eventPublisher.publishEvent(signalPayload);\n     }\n@@ -243,7 +244,7 @@ public class ProcessAdminRuntimeImpl implements ProcessAdminRuntime {\n         ProcessInstanceImpl processInstance = (ProcessInstanceImpl) processInstance(setProcessVariablesPayload.getProcessInstanceId());\n \n         processVariablesValidator.checkPayloadVariables(setProcessVariablesPayload,\n-                                                        processInstance.getProcessDefinitionId());\n+                processInstance.getProcessDefinitionId());\n \n         runtimeService.setVariables(setProcessVariablesPayload.getProcessInstanceId(),\n                 setProcessVariablesPayload.getVariables());\n@@ -260,7 +261,7 @@ public class ProcessAdminRuntimeImpl implements ProcessAdminRuntime {\n     @Transactional\n     public void receive(ReceiveMessagePayload messagePayload) {\n         processVariablesValidator.checkReceiveMessagePayloadVariables(messagePayload,\n-                                                                      null);\n+                null);\n         eventPublisher.publishEvent(messagePayload);\n     }\n \n@@ -271,11 +272,11 @@ public class ProcessAdminRuntimeImpl implements ProcessAdminRuntime {\n         Map<String, Object> variables = messagePayload.getVariables();\n \n         processVariablesValidator.checkStartMessagePayloadVariables(messagePayload,\n-                                                                    null);\n+                null);\n \n         ProcessInstance processInstance = processInstanceConverter.from(runtimeService.startProcessInstanceByMessage(messageName,\n-                                                                                                                     businessKey,\n-                                                                                                                     variables));\n+                businessKey,\n+                variables));\n         return processInstance;\n     }\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 318).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 78.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 324).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/533/ProcessAdminRuntimeImpl.java\nindex 0d8687d700..bccd676ea8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/533/ProcessAdminRuntimeImpl.java\n@@ -17,7 +17,6 @@ package org.activiti.runtime.api.impl;\n \n import java.util.List;\n import java.util.Map;\n-\n import org.activiti.api.process.model.ProcessDefinition;\n import org.activiti.api.process.model.ProcessInstance;\n import org.activiti.api.process.model.builders.ProcessPayloadBuilder;\n@@ -63,167 +62,137 @@ public class ProcessAdminRuntimeImpl implements ProcessAdminRuntime {\n \n     private final ProcessVariablesPayloadValidator processVariablesValidator;\n \n-    public ProcessAdminRuntimeImpl(RepositoryService repositoryService,\n-                                   APIProcessDefinitionConverter processDefinitionConverter,\n-                                   RuntimeService runtimeService,\n-                                   APIProcessInstanceConverter processInstanceConverter,\n-                                   ApplicationEventPublisher eventPublisher,\n-                                   ProcessVariablesPayloadValidator processVariablesValidator) {\n-        this.repositoryService = repositoryService;\n-        this.processDefinitionConverter = processDefinitionConverter;\n-        this.runtimeService = runtimeService;\n-        this.processInstanceConverter = processInstanceConverter;\n-        this.eventPublisher = eventPublisher;\n-        this.processVariablesValidator = processVariablesValidator;\n+    public ProcessAdminRuntimeImpl(RepositoryService repositoryService, APIProcessDefinitionConverter processDefinitionConverter, RuntimeService runtimeService, APIProcessInstanceConverter processInstanceConverter, ApplicationEventPublisher eventPublisher, ProcessVariablesPayloadValidator processVariablesValidator) {\n+    this.repositoryService = repositoryService;\n+    this.processDefinitionConverter = processDefinitionConverter;\n+    this.runtimeService = runtimeService;\n+    this.processInstanceConverter = processInstanceConverter;\n+    this.eventPublisher = eventPublisher;\n+    this.processVariablesValidator = processVariablesValidator;\n     }\n \n     @Override\n     public ProcessDefinition processDefinition(String processDefinitionId) {\n-        org.activiti.engine.repository.ProcessDefinition processDefinition;\n+    org.activiti.engine.repository.ProcessDefinition processDefinition;\n         // try searching by Key if there is no matching by Id\n-        List<org.activiti.engine.repository.ProcessDefinition> list = repositoryService\n-                .createProcessDefinitionQuery()\n-                .processDefinitionKey(processDefinitionId)\n-                .orderByProcessDefinitionVersion()\n-                .asc()\n-                .list();\n-        if (!list.isEmpty()) {\n-            processDefinition = list.get(0);\n-        } else {\n-            processDefinition = repositoryService.getProcessDefinition(processDefinitionId);\n-        }\n-        return processDefinitionConverter.from(processDefinition);\n+    List<org.activiti.engine.repository.ProcessDefinition> list = repositoryService.createProcessDefinitionQuery().processDefinitionKey(processDefinitionId).orderByProcessDefinitionVersion().asc().list();\n+    if (!list.isEmpty()) {\n+        processDefinition = list.get(0);\n+    } else {\n+        processDefinition = repositoryService.getProcessDefinition(processDefinitionId);\n+    }\n+    return processDefinitionConverter.from(processDefinition);\n     }\n \n     @Override\n     public Page<ProcessDefinition> processDefinitions(Pageable pageable) {\n         return processDefinitions(pageable,\n-                ProcessPayloadBuilder.processDefinitions().build());\n+                                  ProcessPayloadBuilder.processDefinitions().build());\n     }\n \n     @Override\n-    public Page<ProcessDefinition> processDefinitions(Pageable pageable,\n-                                                      GetProcessDefinitionsPayload getProcessDefinitionsPayload) {\n+    public Page<ProcessDefinition> processDefinitions(Pageable pageable, GetProcessDefinitionsPayload getProcessDefinitionsPayload) {\n         if (getProcessDefinitionsPayload == null) {\n-            throw new IllegalStateException(\"payload cannot be null\");\n+        throw new IllegalStateException(\"payload cannot be null\");\n         }\n-        ProcessDefinitionQuery processDefinitionQuery = repositoryService\n-                .createProcessDefinitionQuery();\n+\n+        ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery();\n         if (getProcessDefinitionsPayload.hasDefinitionKeys()) {\n             processDefinitionQuery.processDefinitionKeys(getProcessDefinitionsPayload.getProcessDefinitionKeys());\n         }\n-        return new PageImpl<>(processDefinitionConverter.from(processDefinitionQuery.list()),\n-                Math.toIntExact(processDefinitionQuery.count()));\n+        return new PageImpl<>(processDefinitionConverter.from(processDefinitionQuery.list()), Math.toIntExact(processDefinitionQuery.count()));\n     }\n \n     @Override\n     public ProcessInstance start(StartProcessPayload startProcessPayload) {\n-        ProcessDefinition processDefinition = null;\n-        if (startProcessPayload.getProcessDefinitionId() != null) {\n-            processDefinition = processDefinition(startProcessPayload.getProcessDefinitionId());\n-        }\n-        if (processDefinition == null && startProcessPayload.getProcessDefinitionKey() != null) {\n-            processDefinition = processDefinition(startProcessPayload.getProcessDefinitionKey());\n-        }\n-        if (processDefinition == null) {\n-            throw new IllegalStateException(\"At least Process Definition Id or Key needs to be provided to start a process\");\n-        }\n+    ProcessDefinition processDefinition = null;\n+    if (startProcessPayload.getProcessDefinitionId() != null) {\n+        processDefinition = processDefinition(startProcessPayload.getProcessDefinitionId());\n+    }\n \n-        processVariablesValidator.checkStartProcessPayloadVariables(startProcessPayload, processDefinition.getId());\n+    if (processDefinition == null && startProcessPayload.getProcessDefinitionKey() != null) {\n+        processDefinition = processDefinition(startProcessPayload.getProcessDefinitionKey());\n+    }\n \n-        return processInstanceConverter.from(runtimeService\n-                .createProcessInstanceBuilder()\n-                .processDefinitionId(processDefinition.getId())\n-                .processDefinitionKey(processDefinition.getKey())\n-                .businessKey(startProcessPayload.getBusinessKey())\n-                .variables(startProcessPayload.getVariables())\n-                .name(startProcessPayload.getName())\n-                .start());\n+    if (processDefinition == null) {\n+        throw new IllegalStateException(\"At least Process Definition Id or Key needs to be provided to start a process\");\n+    }\n+    processVariablesValidator.checkStartProcessPayloadVariables(startProcessPayload,\n+                                                                processDefinition.getId());\n+    return processInstanceConverter.from(runtimeService.createProcessInstanceBuilder().processDefinitionId(processDefinition.getId()).processDefinitionKey(processDefinition.getKey()).businessKey(startProcessPayload.getBusinessKey()).variables(startProcessPayload.getVariables()).name(startProcessPayload.getName()).start());\n     }\n \n     @Override\n     public Page<ProcessInstance> processInstances(Pageable pageable) {\n-        return processInstances(pageable,\n-                null);\n+        return processInstances(pageable, null);\n     }\n \n     @Override\n     public ProcessInstance processInstance(String processInstanceId) {\n-        org.activiti.engine.runtime.ProcessInstance internalProcessInstance = runtimeService\n-                .createProcessInstanceQuery()\n-                .processInstanceId(processInstanceId)\n-                .singleResult();\n-        if (internalProcessInstance == null) {\n-            throw new NotFoundException(\"Unable to find process instance for the given id:'\" + processInstanceId + \"'\");\n-        }\n-        return processInstanceConverter.from(internalProcessInstance);\n+    org.activiti.engine.runtime.ProcessInstance internalProcessInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).singleResult();\n+    if (internalProcessInstance == null) {\n+        throw new NotFoundException(\"Unable to find process instance for the given id:'\" + processInstanceId + \"'\");\n+    }\n+    return processInstanceConverter.from(internalProcessInstance);\n     }\n \n     @Override\n-    public Page<ProcessInstance> processInstances(Pageable pageable,\n-                                                  GetProcessInstancesPayload getProcessInstancesPayload) {\n-\n-        org.activiti.engine.runtime.ProcessInstanceQuery internalQuery = runtimeService.createProcessInstanceQuery();\n-\n-        if (getProcessInstancesPayload != null) {\n-\n-            if (getProcessInstancesPayload.getProcessDefinitionKeys() != null &&\n-                    !getProcessInstancesPayload.getProcessDefinitionKeys().isEmpty()) {\n-                internalQuery.processDefinitionKeys(getProcessInstancesPayload.getProcessDefinitionKeys());\n-            }\n-            if (getProcessInstancesPayload.getBusinessKey() != null &&\n-                    !getProcessInstancesPayload.getBusinessKey().isEmpty()) {\n-                internalQuery.processInstanceBusinessKey(getProcessInstancesPayload.getBusinessKey());\n-            }\n-\n-            if (getProcessInstancesPayload.isSuspendedOnly()) {\n-                internalQuery.suspended();\n-            }\n-\n-            if (getProcessInstancesPayload.isActiveOnly()) {\n-                internalQuery.active();\n-            }\n-            if (getProcessInstancesPayload.getParentProcessInstanceId() != null) {\n-                internalQuery.superProcessInstanceId(getProcessInstancesPayload.getParentProcessInstanceId());\n-            }\n+    public Page<ProcessInstance> processInstances(Pageable pageable, GetProcessInstancesPayload getProcessInstancesPayload) {\n+    org.activiti.engine.runtime.ProcessInstanceQuery internalQuery = runtimeService.createProcessInstanceQuery();\n+    if (getProcessInstancesPayload != null) {\n+        if (getProcessInstancesPayload.getProcessDefinitionKeys() != null && !getProcessInstancesPayload.getProcessDefinitionKeys().isEmpty()) {\n+            internalQuery.processDefinitionKeys(getProcessInstancesPayload.getProcessDefinitionKeys());\n+        }\n+\n+        if (getProcessInstancesPayload.getBusinessKey() != null && !getProcessInstancesPayload.getBusinessKey().isEmpty()) {\n+            internalQuery.processInstanceBusinessKey(getProcessInstancesPayload.getBusinessKey());\n+        }\n+\n+        if (getProcessInstancesPayload.isSuspendedOnly()) {\n+            internalQuery.suspended();\n+        }\n+\n+        if (getProcessInstancesPayload.isActiveOnly()) {\n+            internalQuery.active();\n+        }\n+\n+        if (getProcessInstancesPayload.getParentProcessInstanceId() != null) {\n+            internalQuery.superProcessInstanceId(getProcessInstancesPayload.getParentProcessInstanceId());\n         }\n-        return new PageImpl<>(processInstanceConverter.from(internalQuery.listPage(pageable.getStartIndex(),\n-                pageable.getMaxItems())),\n-                Math.toIntExact(internalQuery.count()));\n+    }\n+    return new PageImpl<>(processInstanceConverter.from(internalQuery.listPage(pageable.getStartIndex(),\n+                                                                               pageable.getMaxItems())), Math.toIntExact(internalQuery.count()));\n     }\n \n     @Override\n     public ProcessInstance delete(DeleteProcessPayload deleteProcessPayload) {\n-        ProcessInstanceImpl processInstance = (ProcessInstanceImpl) processInstance(deleteProcessPayload.getProcessInstanceId());\n-        runtimeService.deleteProcessInstance(deleteProcessPayload.getProcessInstanceId(),\n-                deleteProcessPayload.getReason());\n-        if (processInstance != null) {\n-            processInstance.setStatus(ProcessInstance.ProcessInstanceStatus.CANCELLED);\n-            return processInstance;\n-        }\n-        return null;\n+    ProcessInstanceImpl processInstance = (ProcessInstanceImpl) processInstance(deleteProcessPayload.getProcessInstanceId());\n+    runtimeService.deleteProcessInstance(deleteProcessPayload.getProcessInstanceId(),\n+                                         deleteProcessPayload.getReason());\n+    if (processInstance != null) {\n+        processInstance.setStatus(ProcessInstance.ProcessInstanceStatus.CANCELLED);\n+        return processInstance;\n+    }\n+    return null;\n     }\n \n     @Override\n     @Transactional\n     public void signal(SignalPayload signalPayload) {\n-        processVariablesValidator.checkSignalPayloadVariables(signalPayload,\n-                                                              null);\n-\n+        processVariablesValidator.checkSignalPayloadVariables(signalPayload, null);\n         eventPublisher.publishEvent(signalPayload);\n     }\n \n     @Override\n     public ProcessInstance suspend(SuspendProcessPayload suspendProcessPayload) {\n-        runtimeService.suspendProcessInstanceById(suspendProcessPayload.getProcessInstanceId());\n-        return processInstanceConverter.from(runtimeService.createProcessInstanceQuery().processInstanceId(suspendProcessPayload.getProcessInstanceId()).singleResult());\n+    runtimeService.suspendProcessInstanceById(suspendProcessPayload.getProcessInstanceId());\n+    return processInstanceConverter.from(runtimeService.createProcessInstanceQuery().processInstanceId(suspendProcessPayload.getProcessInstanceId()).singleResult());\n     }\n \n     @Override\n     public ProcessInstance resume(ResumeProcessPayload resumeProcessPayload) {\n-        runtimeService.activateProcessInstanceById(resumeProcessPayload.getProcessInstanceId());\n-        return processInstanceConverter.from(runtimeService.createProcessInstanceQuery()\n-                .processInstanceId(resumeProcessPayload.getProcessInstanceId()).singleResult());\n+    runtimeService.activateProcessInstanceById(resumeProcessPayload.getProcessInstanceId());\n+    return processInstanceConverter.from(runtimeService.createProcessInstanceQuery().processInstanceId(resumeProcessPayload.getProcessInstanceId()).singleResult());\n     }\n \n     @Override\n@@ -231,52 +200,43 @@ public class ProcessAdminRuntimeImpl implements ProcessAdminRuntime {\n         if (updateProcessPayload.getBusinessKey() != null) {\n             runtimeService.updateBusinessKey(updateProcessPayload.getProcessInstanceId(), updateProcessPayload.getBusinessKey());\n         }\n+\n         if (updateProcessPayload.getName() != null) {\n-            runtimeService.setProcessInstanceName(updateProcessPayload.getProcessInstanceId(), updateProcessPayload.getName());\n+            runtimeService.setProcessInstanceName(updateProcessPayload.getProcessInstanceId(),\n+                                                  updateProcessPayload.getName());\n         }\n-        return processInstanceConverter.from(runtimeService.createProcessInstanceQuery()\n-                .processInstanceId(updateProcessPayload.getProcessInstanceId()).singleResult());\n+        return processInstanceConverter.from(runtimeService.createProcessInstanceQuery().processInstanceId(updateProcessPayload.getProcessInstanceId()).singleResult());\n     }\n \n     @Override\n     public void setVariables(SetProcessVariablesPayload setProcessVariablesPayload) {\n-        ProcessInstanceImpl processInstance = (ProcessInstanceImpl) processInstance(setProcessVariablesPayload.getProcessInstanceId());\n-\n-        processVariablesValidator.checkPayloadVariables(setProcessVariablesPayload,\n-                                                        processInstance.getProcessDefinitionId());\n-\n-        runtimeService.setVariables(setProcessVariablesPayload.getProcessInstanceId(),\n-                setProcessVariablesPayload.getVariables());\n-\n+    ProcessInstanceImpl processInstance = (ProcessInstanceImpl) processInstance(setProcessVariablesPayload.getProcessInstanceId());\n+    processVariablesValidator.checkPayloadVariables(setProcessVariablesPayload,\n+                                                    processInstance.getProcessDefinitionId());\n+    runtimeService.setVariables(setProcessVariablesPayload.getProcessInstanceId(), setProcessVariablesPayload.getVariables());\n     }\n \n     @Override\n     public void removeVariables(RemoveProcessVariablesPayload removeProcessVariablesPayload) {\n-        runtimeService.removeVariables(removeProcessVariablesPayload.getProcessInstanceId(),\n-                removeProcessVariablesPayload.getVariableNames());\n+    runtimeService.removeVariables(removeProcessVariablesPayload.getProcessInstanceId(), removeProcessVariablesPayload.getVariableNames());\n     }\n \n     @Override\n     @Transactional\n     public void receive(ReceiveMessagePayload messagePayload) {\n-        processVariablesValidator.checkReceiveMessagePayloadVariables(messagePayload,\n-                                                                      null);\n+        processVariablesValidator.checkReceiveMessagePayloadVariables(messagePayload, null);\n         eventPublisher.publishEvent(messagePayload);\n     }\n \n     @Override\n     public ProcessInstance start(StartMessagePayload messagePayload) {\n-        String messageName = messagePayload.getName();\n-        String businessKey = messagePayload.getBusinessKey();\n-        Map<String, Object> variables = messagePayload.getVariables();\n+    String messageName = messagePayload.getName();\n+    String businessKey = messagePayload.getBusinessKey();\n+    Map<String, Object> variables = messagePayload.getVariables();\n+    processVariablesValidator.checkStartMessagePayloadVariables(messagePayload, null);\n \n-        processVariablesValidator.checkStartMessagePayloadVariables(messagePayload,\n-                                                                    null);\n \n-        ProcessInstance processInstance = processInstanceConverter.from(runtimeService.startProcessInstanceByMessage(messageName,\n-                                                                                                                     businessKey,\n-                                                                                                                     variables));\n-        return processInstance;\n+    ProcessInstance processInstance = processInstanceConverter.from(runtimeService.startProcessInstanceByMessage(messageName, businessKey, variables));\n+    return processInstance;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 139
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/533/ProcessAdminRuntimeImpl.java\nindex 0d8687d700..aceb8dc9cf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/533/ProcessAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/533/ProcessAdminRuntimeImpl.java\nindex 0d8687d700..aceb8dc9cf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/533/ProcessAdminRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/533/ProcessAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ]
}