{
    "error_id": "362",
    "information": {
        "errors": [
            {
                "line": "138",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(\n          swaggerMethod.getGenericReturnType(),\n          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(), consumerMethod.getGenericReturnType()));\n\n      SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n      op.setName(swaggerMethodName);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/362/SwaggerEnvironment.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/362/SwaggerEnvironment.java\nindex b3a2d55786..1fb6f594f0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/362/SwaggerEnvironment.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/362/SwaggerEnvironment.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.swagger.engine;\n \n import java.lang.reflect.Method;\n@@ -135,7 +136,8 @@ public class SwaggerEnvironment {\n           consumerArgumentsFactory.createArgumentsMapper(config);\n       ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(\n           swaggerMethod.getGenericReturnType(),\n-          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(), consumerMethod.getGenericReturnType()));\n+          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(),\n+              consumerMethod.getGenericReturnType()));\n \n       SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n       op.setName(swaggerMethodName);\n@@ -160,7 +162,7 @@ public class SwaggerEnvironment {\n   }\n \n   public SwaggerProducer createProducer(Object producerInstance, Class<?> swaggerIntf,\n-      Map<String, Operation> swaggerOperationMap) {\n+                                        Map<String, Operation> swaggerOperationMap) {\n     Class<?> producerCls = BeanUtils.getImplClassFromBean(producerInstance);\n     Map<String, Method> visibleProducerMethods = retrieveVisibleMethods(producerCls);\n \n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/362/SwaggerEnvironment.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/362/SwaggerEnvironment.java\nindex b3a2d55786..51146c03c5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/362/SwaggerEnvironment.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/362/SwaggerEnvironment.java\n@@ -123,7 +123,7 @@ public class SwaggerEnvironment {\n         LOGGER.warn(\"consumer method {}:{} not exist in contract.\",\n             consumerIntf.getName(),\n             consumerMethod.getName());\n-        continue;\n+continue;\n       }\n \n       ArgumentsMapperConfig config = new ArgumentsMapperConfig();\n@@ -240,4 +240,4 @@ public class SwaggerEnvironment {\n     }\n     return visibleMethods;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "138",
                    "column": "58",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "139",
                    "column": "50",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "140",
                    "column": "19",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/362/SwaggerEnvironment.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/362/SwaggerEnvironment.java\nindex b3a2d55786..2f4afed93c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/362/SwaggerEnvironment.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/362/SwaggerEnvironment.java\n@@ -135,109 +135,110 @@ public class SwaggerEnvironment {\n           consumerArgumentsFactory.createArgumentsMapper(config);\n       ConsumerResponseMapper responseMapper = consumerResponseMapperFactorys.createResponseMapper(\n           swaggerMethod.getGenericReturnType(),\n-          ParamUtils.getGenericParameterType(consumerIntf, consumerMethod.getDeclaringClass(), consumerMethod.getGenericReturnType()));\n-\n-      SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n-      op.setName(swaggerMethodName);\n-      op.setConsumerMethod(consumerMethod);\n-      op.setSwaggerMethod(swaggerMethod);\n-      op.setArgumentsMapper(argsMapper);\n-      op.setResponseMapper(responseMapper);\n-\n-      consumer.addOperation(op);\n-    }\n-\n-    return consumer;\n-  }\n-\n-  protected String findSwaggerMethodName(Method consumerMethod) {\n-    ApiOperation apiOperationAnnotation = consumerMethod.getAnnotation(ApiOperation.class);\n-    if (apiOperationAnnotation == null || StringUtils.isEmpty(apiOperationAnnotation.nickname())) {\n-      return consumerMethod.getName();\n-    }\n-\n-    return apiOperationAnnotation.nickname();\n-  }\n-\n-  public SwaggerProducer createProducer(Object producerInstance, Class<?> swaggerIntf,\n-      Map<String, Operation> swaggerOperationMap) {\n-    Class<?> producerCls = BeanUtils.getImplClassFromBean(producerInstance);\n-    Map<String, Method> visibleProducerMethods = retrieveVisibleMethods(producerCls);\n-\n-    SwaggerProducer producer = new SwaggerProducer();\n-    producer.setProducerCls(producerCls);\n-    producer.setSwaggerIntf(swaggerIntf);\n-    for (Method swaggerMethod : swaggerIntf.getMethods()) {\n-      String methodName = swaggerMethod.getName();\n-      // producer\u53c2\u6570\u4e0d\u4e00\u5b9a\u7b49\u4e8eswagger\u53c2\u6570\n-      Method producerMethod = visibleProducerMethods.getOrDefault(methodName, null);\n-      if (producerMethod == null) {\n-        // producer\u672a\u5b9e\u73b0\u5951\u7ea6\uff0c\u975e\u6cd5\n-        String msg = String.format(\"swagger method %s not exist in producer %s.\",\n-            methodName,\n-            producerInstance.getClass().getName());\n-        throw new Error(msg);\n-      }\n-\n-      ArgumentsMapperConfig config = new ArgumentsMapperConfig();\n-      config.setSwaggerMethod(swaggerMethod);\n-      config.setProviderMethod(producerMethod);\n-      config.setClz(producerCls);\n-      config.setSwaggerOperation(swaggerOperationMap.get(methodName));\n-      config.setSwaggerGeneratorContext(compositeSwaggerGeneratorContext.selectContext(producerCls));\n-\n-      ProducerArgumentsMapperFactory argumentsMapperFactory = selectProducerArgumentsMapperFactory(config);\n-      ProducerArgumentsMapper argsMapper = argumentsMapperFactory.createArgumentsMapper(config);\n-      ProducerResponseMapper responseMapper = producerResponseMapperFactorys.createResponseMapper(\n-          swaggerMethod.getGenericReturnType(),\n-          producerMethod.getGenericReturnType());\n-\n-      SwaggerProducerOperation op = new SwaggerProducerOperation();\n-      op.setName(methodName);\n-      op.setProducerClass(producerCls);\n-      op.setProducerInstance(producerInstance);\n-      op.setProducerMethod(producerMethod);\n-      op.setSwaggerMethod(swaggerMethod);\n-      op.setArgumentsMapper(argsMapper);\n-      op.setResponseMapper(responseMapper);\n-\n-      producer.addOperation(op);\n-    }\n-\n-    return producer;\n-  }\n-\n-  ProducerArgumentsMapperFactory selectProducerArgumentsMapperFactory(ArgumentsMapperConfig config) {\n-    ProducerArgumentsMapperFactory argumentsMapperFactory = null;\n-    for (ProducerArgumentsMapperFactory producerArgumentsMapperFactory : this.producerArgumentsMapperFactoryList) {\n-      if (producerArgumentsMapperFactory.canProcess(config)) {\n-        argumentsMapperFactory = producerArgumentsMapperFactory;\n-        break;\n-      }\n-    }\n-    if (null == argumentsMapperFactory) {\n-      argumentsMapperFactory = this.producerArgumentsFactory;\n-    }\n-    return argumentsMapperFactory;\n-  }\n-\n-  private Map<String, Method> retrieveVisibleMethods(Class<?> clazz) {\n-    Map<String, Method> visibleMethods = new HashMap<>();\n-    for (Method method : clazz.getMethods()) {\n-      String methodName = method.getName();\n-      ApiOperation apiOperationAnnotation = method.getAnnotation(ApiOperation.class);\n-      if (apiOperationAnnotation != null) {\n-        if (apiOperationAnnotation.hidden()) {\n-          continue;\n-        }\n-\n-        if (StringUtils.isNotEmpty(apiOperationAnnotation.nickname())) {\n-          methodName = apiOperationAnnotation.nickname();\n-        }\n-      }\n-\n-      visibleMethods.put(methodName, method);\n-    }\n-    return visibleMethods;\n-  }\n-}\n+          ParamUtils.getGenericParameterType(consumerIntf ,\n+              consumerMethod.getDeclaringClass(),consumerMethod.getGenericReturnType(\n+              )));SwaggerConsumerOperation op = new SwaggerConsumerOperation();\n+           op.setName(swaggerMethodName);\n+           op.setConsumerMethod(consumerMethod);\n+           op.setSwaggerMethod(swaggerMethod);\n+           op.setArgumentsMapper(argsMapper);\n+           op.setResponseMapper(responseMapper);\n+\n+           consumer.addOperation(op);\n+         }\n+\n+         return consumer;\n+       }\n+\n+       protected String findSwaggerMethodName(Method consumerMethod) {\n+         ApiOperation apiOperationAnnotation = consumerMethod.getAnnotation(ApiOperation.class);\n+         if (apiOperationAnnotation == null || StringUtils.isEmpty(apiOperationAnnotation.nickname())) {\n+           return consumerMethod.getName();\n+         }\n+\n+         return apiOperationAnnotation.nickname();\n+       }\n+\n+       public SwaggerProducer createProducer(Object producerInstance, Class<?> swaggerIntf,\n+           Map<String, Operation> swaggerOperationMap) {\n+         Class<?> producerCls = BeanUtils.getImplClassFromBean(producerInstance);\n+         Map<String, Method> visibleProducerMethods = retrieveVisibleMethods(producerCls);\n+\n+         SwaggerProducer producer = new SwaggerProducer();\n+         producer.setProducerCls(producerCls);\n+         producer.setSwaggerIntf(swaggerIntf);\n+         for (Method swaggerMethod : swaggerIntf.getMethods()) {\n+           String methodName = swaggerMethod.getName();\n+           // producer\u53c2\u6570\u4e0d\u4e00\u5b9a\u7b49\u4e8eswagger\u53c2\u6570\n+           Method producerMethod = visibleProducerMethods.getOrDefault(methodName, null);\n+           if (producerMethod == null) {\n+             // producer\u672a\u5b9e\u73b0\u5951\u7ea6\uff0c\u975e\u6cd5\n+             String msg = String.format(\"swagger method %s not exist in producer %s.\",\n+                 methodName,\n+                 producerInstance.getClass().getName());\n+             throw new Error(msg);\n+           }\n+\n+           ArgumentsMapperConfig config = new ArgumentsMapperConfig();\n+           config.setSwaggerMethod(swaggerMethod);\n+           config.setProviderMethod(producerMethod);\n+           config.setClz(producerCls);\n+           config.setSwaggerOperation(swaggerOperationMap.get(methodName));\n+           config.setSwaggerGeneratorContext(compositeSwaggerGeneratorContext.selectContext(producerCls));\n+\n+           ProducerArgumentsMapperFactory argumentsMapperFactory = selectProducerArgumentsMapperFactory(config);\n+           ProducerArgumentsMapper argsMapper = argumentsMapperFactory.createArgumentsMapper(config);\n+           ProducerResponseMapper responseMapper = producerResponseMapperFactorys.createResponseMapper(\n+               swaggerMethod.getGenericReturnType(),\n+               producerMethod.getGenericReturnType());\n+\n+           SwaggerProducerOperation op = new SwaggerProducerOperation();\n+           op.setName(methodName);\n+           op.setProducerClass(producerCls);\n+           op.setProducerInstance(producerInstance);\n+           op.setProducerMethod(producerMethod);\n+           op.setSwaggerMethod(swaggerMethod);\n+           op.setArgumentsMapper(argsMapper);\n+           op.setResponseMapper(responseMapper);\n+\n+           producer.addOperation(op);\n+         }\n+\n+         return producer;\n+       }\n+\n+       ProducerArgumentsMapperFactory selectProducerArgumentsMapperFactory(ArgumentsMapperConfig config) {\n+         ProducerArgumentsMapperFactory argumentsMapperFactory = null;\n+         for (ProducerArgumentsMapperFactory producerArgumentsMapperFactory : this.producerArgumentsMapperFactoryList) {\n+           if (producerArgumentsMapperFactory.canProcess(config)) {\n+             argumentsMapperFactory = producerArgumentsMapperFactory;\n+             break;\n+           }\n+         }\n+         if (null == argumentsMapperFactory) {\n+           argumentsMapperFactory = this.producerArgumentsFactory;\n+         }\n+         return argumentsMapperFactory;\n+       }\n+\n+       private Map<String, Method> retrieveVisibleMethods(Class<?> clazz) {\n+         Map<String, Method> visibleMethods = new HashMap<>();\n+         for (Method method : clazz.getMethods()) {\n+           String methodName = method.getName();\n+           ApiOperation apiOperationAnnotation = method.getAnnotation(ApiOperation.class);\n+           if (apiOperationAnnotation != null) {\n+             if (apiOperationAnnotation.hidden()) {\n+               continue;\n+             }\n+\n+             if (StringUtils.isNotEmpty(apiOperationAnnotation.nickname())) {\n+               methodName = apiOperationAnnotation.nickname();\n+             }\n+           }\n+\n+           visibleMethods.put(methodName, method);\n+         }\n+         return visibleMethods;\n+       }\n+     }\n+     \n\\ No newline at end of file\n",
            "diff_size": 107
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}