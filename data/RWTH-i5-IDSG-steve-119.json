{
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "79",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Autowired private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n\n    private final UnidentifiedIncomingObjectService unknownChargePointService = new UnidentifiedIncomingObjectService(100);\n\n    @Override\n    public Optional<RegistrationStatus> getRegistrationStatus(String chargeBoxId) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/119/ChargePointHelperServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/119/ChargePointHelperServiceImpl.java\nindex 8577972e94..cd59e93a58 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/119/ChargePointHelperServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/119/ChargePointHelperServiceImpl.java\n@@ -16,6 +16,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n+\n package de.rwth.idsg.steve.service;\n \n import com.google.common.util.concurrent.Striped;\n@@ -66,17 +67,23 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n     private final boolean autoRegisterUnknownStations = CONFIG.getOcpp().isAutoRegisterUnknownStations();\n     private final Striped<Lock> isRegisteredLocks = Striped.lock(16);\n \n-    @Autowired private GenericRepository genericRepository;\n+    @Autowired\n+    private GenericRepository genericRepository;\n \n     // SOAP-based charge points are stored in DB with an endpoint address\n-    @Autowired private ChargePointRepository chargePointRepository;\n+    @Autowired\n+    private ChargePointRepository chargePointRepository;\n \n     // For WebSocket-based charge points, the active sessions are stored in memory\n-    @Autowired private Ocpp12WebSocketEndpoint ocpp12WebSocketEndpoint;\n-    @Autowired private Ocpp15WebSocketEndpoint ocpp15WebSocketEndpoint;\n-    @Autowired private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n+    @Autowired\n+    private Ocpp12WebSocketEndpoint ocpp12WebSocketEndpoint;\n+    @Autowired\n+    private Ocpp15WebSocketEndpoint ocpp15WebSocketEndpoint;\n+    @Autowired\n+    private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n \n-    private final UnidentifiedIncomingObjectService unknownChargePointService = new UnidentifiedIncomingObjectService(100);\n+    private final UnidentifiedIncomingObjectService unknownChargePointService =\n+        new UnidentifiedIncomingObjectService(100);\n \n     @Override\n     public Optional<RegistrationStatus> getRegistrationStatus(String chargeBoxId) {\n@@ -189,8 +196,8 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n     private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter,\n                                                     AbstractWebSocketEndpoint jsonEndpoint) {\n         List<String> statusFilter = inStatusFilter.stream()\n-                                                  .map(RegistrationStatus::value)\n-                                                  .collect(Collectors.toList());\n+            .map(RegistrationStatus::value)\n+            .collect(Collectors.toList());\n \n         List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n         for (String chargeBoxId : jsonEndpoint.getChargeBoxIdList()) {\n@@ -201,9 +208,9 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n \n     private static List<String> extractIds(List<Map<String, Deque<SessionContext>>> ocppMaps) {\n         return ocppMaps.stream()\n-                       .map(Map::keySet)\n-                       .flatMap(Collection::stream)\n-                       .collect(Collectors.toList());\n+            .map(Map::keySet)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n     }\n \n     private static void appendList(Map<String, Deque<SessionContext>> map, List<OcppJsonStatus> returnList,\n@@ -217,13 +224,13 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n                 DateTime openSince = ctx.getOpenSince();\n \n                 OcppJsonStatus status = OcppJsonStatus.builder()\n-                                                      .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n-                                                      .chargeBoxId(chargeBoxId)\n-                                                      .connectedSinceDT(openSince)\n-                                                      .connectedSince(DateTimeUtils.humanize(openSince))\n-                                                      .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n-                                                      .version(version)\n-                                                      .build();\n+                    .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n+                    .chargeBoxId(chargeBoxId)\n+                    .connectedSinceDT(openSince)\n+                    .connectedSince(DateTimeUtils.humanize(openSince))\n+                    .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n+                    .version(version)\n+                    .build();\n \n                 returnList.add(status);\n             }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/119/ChargePointHelperServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/119/ChargePointHelperServiceImpl.java\nindex 8577972e94..dd1b1c3f09 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/119/ChargePointHelperServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/119/ChargePointHelperServiceImpl.java\n@@ -15,8 +15,7 @@\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n- */\n-package de.rwth.idsg.steve.service;\n+ */package de.rwth.idsg.steve.service;\n \n import com.google.common.util.concurrent.Striped;\n import de.rwth.idsg.steve.ocpp.OcppProtocol;\n@@ -179,20 +178,18 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         try {\n             chargePointRepository.addChargePointList(Collections.singletonList(chargeBoxId));\n             log.warn(\"Auto-registered unknown chargebox '{}'\", chargeBoxId);\n-            return Optional.of(RegistrationStatus.ACCEPTED); // default db value is accepted\n+            return Optional.of(RegistrationStatus.ACCEPTED);\n+// default db value is accepted\n         } catch (Exception e) {\n             log.error(\"Failed to auto-register unknown chargebox '\" + chargeBoxId + \"'\", e);\n             return Optional.empty();\n         }\n     }\n \n-    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter,\n-                                                    AbstractWebSocketEndpoint jsonEndpoint) {\n-        List<String> statusFilter = inStatusFilter.stream()\n-                                                  .map(RegistrationStatus::value)\n+    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter, AbstractWebSocketEndpoint jsonEndpoint) {\n+    List<String> statusFilter = inStatusFilter.stream().map(RegistrationStatus::value)\n                                                   .collect(Collectors.toList());\n-\n-        List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n+List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n         for (String chargeBoxId : jsonEndpoint.getChargeBoxIdList()) {\n             returnList.add(new ChargePointSelect(OcppTransport.JSON, chargeBoxId));\n         }\n@@ -200,33 +197,29 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n     }\n \n     private static List<String> extractIds(List<Map<String, Deque<SessionContext>>> ocppMaps) {\n-        return ocppMaps.stream()\n-                       .map(Map::keySet)\n+        return ocppMaps.stream().map(Map::keySet)\n                        .flatMap(Collection::stream)\n                        .collect(Collectors.toList());\n     }\n \n     private static void appendList(Map<String, Deque<SessionContext>> map, List<OcppJsonStatus> returnList,\n                                    DateTime now, OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n-\n-        for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n+    for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n             String chargeBoxId = entry.getKey();\n             Deque<SessionContext> endpointDeque = entry.getValue();\n \n             for (SessionContext ctx : endpointDeque) {\n                 DateTime openSince = ctx.getOpenSince();\n \n-                OcppJsonStatus status = OcppJsonStatus.builder()\n-                                                      .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n+                OcppJsonStatus status = OcppJsonStatus.builder().chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n                                                       .chargeBoxId(chargeBoxId)\n                                                       .connectedSinceDT(openSince)\n                                                       .connectedSince(DateTimeUtils.humanize(openSince))\n                                                       .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n                                                       .version(version)\n                                                       .build();\n-\n-                returnList.add(status);\n+returnList.add(status);\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/119/ChargePointHelperServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/119/ChargePointHelperServiceImpl.java\nindex 8577972e94..1e21a52105 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/119/ChargePointHelperServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/119/ChargePointHelperServiceImpl.java\n@@ -41,7 +41,6 @@ import ocpp.cs._2015._10.RegistrationStatus;\n import org.joda.time.DateTime;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -59,13 +58,13 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 24.03.2015\n  */\n+\n+\n @Slf4j\n @Service\n public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n-\n     private final boolean autoRegisterUnknownStations = CONFIG.getOcpp().isAutoRegisterUnknownStations();\n     private final Striped<Lock> isRegisteredLocks = Striped.lock(16);\n-\n     @Autowired private GenericRepository genericRepository;\n \n     // SOAP-based charge points are stored in DB with an endpoint address\n@@ -75,9 +74,7 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n     @Autowired private Ocpp12WebSocketEndpoint ocpp12WebSocketEndpoint;\n     @Autowired private Ocpp15WebSocketEndpoint ocpp15WebSocketEndpoint;\n     @Autowired private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n-\n     private final UnidentifiedIncomingObjectService unknownChargePointService = new UnidentifiedIncomingObjectService(100);\n-\n     @Override\n     public Optional<RegistrationStatus> getRegistrationStatus(String chargeBoxId) {\n         Lock l = isRegisteredLocks.get(chargeBoxId);\n@@ -89,7 +86,7 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n             }\n             return status;\n         } finally {\n-            l.unlock();\n+                  l.unlock();\n         }\n     }\n \n@@ -102,7 +99,6 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n \n         List<ConnectorStatus> latestList = chargePointRepository.getChargePointConnectorStatus();\n         stats.setStatusCountMap(ConnectorStatusCountFilter.getStatusCountMap(latestList));\n-\n         return stats;\n     }\n \n@@ -111,13 +107,10 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         Map<String, Deque<SessionContext>> ocpp12Map = ocpp12WebSocketEndpoint.getACopy();\n         Map<String, Deque<SessionContext>> ocpp15Map = ocpp15WebSocketEndpoint.getACopy();\n         Map<String, Deque<SessionContext>> ocpp16Map = ocpp16WebSocketEndpoint.getACopy();\n-\n         List<String> idList = extractIds(Arrays.asList(ocpp12Map, ocpp15Map, ocpp16Map));\n         Map<String, Integer> primaryKeyLookup = chargePointRepository.getChargeBoxIdPkPair(idList);\n-\n         DateTime now = DateTime.now();\n         List<OcppJsonStatus> returnList = new ArrayList<>();\n-\n         appendList(ocpp12Map, returnList, now, OcppVersion.V_12, primaryKeyLookup);\n         appendList(ocpp15Map, returnList, now, OcppVersion.V_15, primaryKeyLookup);\n         appendList(ocpp16Map, returnList, now, OcppVersion.V_16, primaryKeyLookup);\n@@ -129,10 +122,13 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         switch (version) {\n             case V_12:\n                 return getChargePoints(OcppProtocol.V_12_SOAP, inStatusFilter, ocpp12WebSocketEndpoint);\n+\n             case V_15:\n                 return getChargePoints(OcppProtocol.V_15_SOAP, inStatusFilter, ocpp15WebSocketEndpoint);\n+\n             case V_16:\n                 return getChargePoints(OcppProtocol.V_16_SOAP, inStatusFilter, ocpp16WebSocketEndpoint);\n+\n             default:\n                 throw new IllegalArgumentException(\"Unknown OCPP version: \" + version);\n         }\n@@ -171,11 +167,13 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         }\n \n         // 2. ok, this chargeBoxId is unknown. exit if auto-register is disabled\n+\n         if (!autoRegisterUnknownStations) {\n             return Optional.empty();\n         }\n \n         // 3. chargeBoxId is unknown and auto-register is enabled. insert chargeBoxId\n+\n         try {\n             chargePointRepository.addChargePointList(Collections.singletonList(chargeBoxId));\n             log.warn(\"Auto-registered unknown chargebox '{}'\", chargeBoxId);\n@@ -186,13 +184,11 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         }\n     }\n \n-    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter,\n-                                                    AbstractWebSocketEndpoint jsonEndpoint) {\n-        List<String> statusFilter = inStatusFilter.stream()\n-                                                  .map(RegistrationStatus::value)\n-                                                  .collect(Collectors.toList());\n-\n+    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter, AbstractWebSocketEndpoint jsonEndpoint) {\n+        List<String> statusFilter = inStatusFilter.stream().map(RegistrationStatus::value)\n+                                                           .collect(Collectors.toList());\n         List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n+\n         for (String chargeBoxId : jsonEndpoint.getChargeBoxIdList()) {\n             returnList.add(new ChargePointSelect(OcppTransport.JSON, chargeBoxId));\n         }\n@@ -200,33 +196,30 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n     }\n \n     private static List<String> extractIds(List<Map<String, Deque<SessionContext>>> ocppMaps) {\n-        return ocppMaps.stream()\n-                       .map(Map::keySet)\n-                       .flatMap(Collection::stream)\n-                       .collect(Collectors.toList());\n+        return ocppMaps.stream().map(Map::keySet)\n+                                .flatMap(Collection::stream)\n+                                .collect(Collectors.toList());\n     }\n \n-    private static void appendList(Map<String, Deque<SessionContext>> map, List<OcppJsonStatus> returnList,\n-                                   DateTime now, OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n-\n+    private static void appendList(Map<String, Deque<SessionContext>> map,\n+                                   List<OcppJsonStatus> returnList,\n+                                   DateTime now,\n+                                   OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n         for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n             String chargeBoxId = entry.getKey();\n             Deque<SessionContext> endpointDeque = entry.getValue();\n \n             for (SessionContext ctx : endpointDeque) {\n                 DateTime openSince = ctx.getOpenSince();\n-\n-                OcppJsonStatus status = OcppJsonStatus.builder()\n-                                                      .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n-                                                      .chargeBoxId(chargeBoxId)\n-                                                      .connectedSinceDT(openSince)\n-                                                      .connectedSince(DateTimeUtils.humanize(openSince))\n-                                                      .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n-                                                      .version(version)\n-                                                      .build();\n-\n+                OcppJsonStatus status = OcppJsonStatus.builder().chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n+                                                                .chargeBoxId(chargeBoxId)\n+                                                                .connectedSinceDT(openSince)\n+                                                                .connectedSince(DateTimeUtils.humanize(openSince))\n+                                                                .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n+                                                                .version(version)\n+                                                                .build();\n                 returnList.add(status);\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}