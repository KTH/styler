{
    "error_id": "139",
    "information": {
        "errors": [
            {
                "line": "271",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n        } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n            select = new String[] { CouchbaseOperationService.DN };\n        } else {\n            boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/139/CouchbaseOperationsServiceImpl.java\nindex 04667da88c..828c4a99f6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/139/CouchbaseOperationsServiceImpl.java\n@@ -268,8 +268,8 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         if (select == null) {\n             select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n-            select = new String[] { CouchbaseOperationService.DN };\n+        // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+        select = new String[] { CouchbaseOperationService.DN };\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n             if (!hasDn) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/139/CouchbaseOperationsServiceImpl.java\nindex 04667da88c..f32e7972a7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/139/CouchbaseOperationsServiceImpl.java\n@@ -122,7 +122,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n             String attributeName = attrEntry.getKey();\n             Object attributeValue = attrEntry.getValue();\n             if (attributeName.equalsIgnoreCase(CouchbaseOperationService.OBJECT_CLASS) || attributeName.equalsIgnoreCase(CouchbaseOperationService.DN)\n-                    || attributeName.equalsIgnoreCase(CouchbaseOperationService.USER_PASSWORD)) {\n+                || attributeName.equalsIgnoreCase(CouchbaseOperationService.USER_PASSWORD)) {\n                 continue;\n             } else {\n                 if (attributeValue != null) {\n@@ -189,12 +189,12 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         try {\n             BucketMapping bucketMapping = connectionProvider.getBucketMappingByKey(key);\n             MutateLimitPath deleteQuery = Delete.deleteFrom(Expression.i(bucketMapping.getBucketName()))\n-                    .where(Expression.path(\"META().id\").like(Expression.s(key + \"%\")));\n+                .where(Expression.path(\"META().id\").like(Expression.s(key + \"%\")));\n \n             N1qlQueryResult result = bucketMapping.getBucket().query(deleteQuery);\n             if (!result.finalSuccess()) {\n                 throw new SearchException(String.format(\"Failed to delete entries. Query: '%s'. Errors: %s\", bucketMapping, result.errors()),\n-                        result.info().errorCount());\n+                    result.info().errorCount());\n             }\n \n             return true;\n@@ -215,7 +215,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n             } else {\n                 N1qlQuery query = N1qlQuery\n-                        .simple(Select.select(attributes).from(Expression.i(bucketMapping.getBucketName())).useKeys(Expression.s(key)).limit(1));\n+                    .simple(Select.select(attributes).from(Expression.i(bucketMapping.getBucketName())).useKeys(Expression.s(key)).limit(1));\n                 N1qlQueryResult result = bucketMapping.getBucket().query(query);\n                 if (!result.finalSuccess()) {\n                     throw new SearchException(String.format(\"Failed to lookup entry. Errors: %s\", result.errors()), result.info().errorCount());\n@@ -234,7 +234,8 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n     @Override\n     public <O> PagedResult<JsonObject> search(String key, Expression expression, SearchScope scope, String[] attributes, Sort[] orderBy,\n-            CouchbaseBatchOperationWraper<O> batchOperationWraper, boolean returnCount, int start, int count, int pageSize) throws SearchException {\n+                                              CouchbaseBatchOperationWraper<O> batchOperationWraper, boolean returnCount, int start, int count,\n+                                              int pageSize) throws SearchException {\n         BucketMapping bucketMapping = connectionProvider.getBucketMappingByKey(key);\n         Bucket bucket = bucketMapping.getBucket();\n \n@@ -266,14 +267,14 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n         String[] select = attributes;\n         if (select == null) {\n-            select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n+            select = new String[] {\"gluu_doc.*\", CouchbaseOperationService.DN};\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n-            select = new String[] { CouchbaseOperationService.DN };\n+            // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+            select = new String[] {CouchbaseOperationService.DN};\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n             if (!hasDn) {\n-                select = ArrayHelper.arrayMerge(select, new String[] { CouchbaseOperationService.DN });\n+                select = ArrayHelper.arrayMerge(select, new String[] {CouchbaseOperationService.DN});\n             }\n         }\n         GroupByPath selectQuery = Select.select(select).from(Expression.i(bucketMapping.getBucketName())).as(\"gluu_doc\").where(finalExpression);\n@@ -307,7 +308,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                     lastResult = bucket.query(query);\n                     if (!lastResult.finalSuccess()) {\n                         throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", query, lastResult.errors()),\n-                                lastResult.info().errorCount());\n+                            lastResult.info().errorCount());\n                     }\n \n                     lastSearchResultList = lastResult.allRows();\n@@ -347,7 +348,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                 lastResult = bucket.query(query);\n                 if (!lastResult.finalSuccess()) {\n                     throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", baseQuery, lastResult.errors()),\n-                            lastResult.info().errorCount());\n+                        lastResult.info().errorCount());\n                 }\n \n                 searchResultList.addAll(lastResult.allRows());\n@@ -368,14 +369,14 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n         if (returnCount) {\n             GroupByPath selectCountQuery = Select.select(\"COUNT(*) as TOTAL\").from(Expression.i(bucketMapping.getBucketName()))\n-                    .where(finalExpression);\n+                .where(finalExpression);\n             try {\n                 LOG.debug(\"Calculating count. Execution query: '\" + selectCountQuery + \"'\");\n                 N1qlQueryResult countResult = bucket.query(selectCountQuery);\n                 if (!countResult.finalSuccess() || (countResult.info().resultCount() != 1)) {\n                     throw new SearchException(\n-                            String.format(\"Failed to calculate count entries. Query: '%s'. Error: \", selectCountQuery, countResult.errors()),\n-                            countResult.info().errorCount());\n+                        String.format(\"Failed to calculate count entries. Query: '%s'. Error: \", selectCountQuery, countResult.errors()),\n+                        countResult.info().errorCount());\n                 }\n                 result.setTotalEntriesCount(countResult.allRows().get(0).value().getInt(\"TOTAL\"));\n             } catch (CouchbaseException ex) {\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/139/CouchbaseOperationsServiceImpl.java\nindex 04667da88c..828c4a99f6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/139/CouchbaseOperationsServiceImpl.java\n@@ -268,8 +268,8 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         if (select == null) {\n             select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n-            select = new String[] { CouchbaseOperationService.DN };\n+        // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+        select = new String[] { CouchbaseOperationService.DN };\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n             if (!hasDn) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/139/CouchbaseOperationsServiceImpl.java\nindex 04667da88c..ea49f1ef86 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/139/CouchbaseOperationsServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/139/CouchbaseOperationsServiceImpl.java\n@@ -267,167 +267,165 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         String[] select = attributes;\n         if (select == null) {\n             select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n-        } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n-            select = new String[] { CouchbaseOperationService.DN };\n-        } else {\n-            boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n-            if (!hasDn) {\n-                select = ArrayHelper.arrayMerge(select, new String[] { CouchbaseOperationService.DN });\n-            }\n+        } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) { // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" } select = new String[] { CouchbaseOperationService.DN };\n+    } else {\n+        boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n+        if (!hasDn) {\n+            select = ArrayHelper.arrayMerge(select, new String[] { CouchbaseOperationService.DN });\n         }\n-        GroupByPath selectQuery = Select.select(select).from(Expression.i(bucketMapping.getBucketName())).as(\"gluu_doc\").where(finalExpression);\n+    }\n+    GroupByPath selectQuery = Select.select(select).from(Expression.i(bucketMapping.getBucketName())).as(\"gluu_doc\").where(finalExpression);\n \n-        LimitPath baseQuery = selectQuery;\n-        if (orderBy != null) {\n-            baseQuery = selectQuery.orderBy(orderBy);\n-        }\n+    LimitPath baseQuery = selectQuery;\n+    if (orderBy != null) {\n+        baseQuery = selectQuery.orderBy(orderBy);\n+    }\n \n-        List<N1qlQueryRow> searchResultList = new ArrayList<N1qlQueryRow>();\n-\n-        N1qlQueryResult lastResult;\n-        if (pageSize > 0) {\n-            boolean collectSearchResult;\n-\n-            Statement query = null;\n-            int currentLimit;\n-            try {\n-                List<N1qlQueryRow> lastSearchResultList;\n-                int resultCount = 0;\n-                do {\n-                    collectSearchResult = true;\n-\n-                    currentLimit = pageSize;\n-                    if (count > 0) {\n-                        currentLimit = Math.min(pageSize, count - resultCount);\n-                    }\n-\n-                    query = baseQuery.limit(currentLimit).offset(start + resultCount);\n-                    LOG.debug(\"Execution query: '\" + query + \"'\");\n-                    lastResult = bucket.query(query);\n-                    if (!lastResult.finalSuccess()) {\n-                        throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", query, lastResult.errors()),\n-                                lastResult.info().errorCount());\n-                    }\n-\n-                    lastSearchResultList = lastResult.allRows();\n-\n-                    if (ldapBatchOperation != null) {\n-                        collectSearchResult = ldapBatchOperation.collectSearchResult(lastSearchResultList.size());\n-                    }\n-                    if (collectSearchResult) {\n-                        searchResultList.addAll(lastSearchResultList);\n-                    }\n-\n-                    if (ldapBatchOperation != null) {\n-                        List<O> entries = batchOperationWraper.createEntities(lastSearchResultList);\n-                        ldapBatchOperation.performAction(entries);\n-                    }\n-\n-                    resultCount += lastSearchResultList.size();\n-\n-                    if ((count > 0) && (resultCount >= count)) {\n-                        break;\n-                    }\n-                } while ((lastSearchResultList.size() > 0) && (lastSearchResultList.size() > 0));\n-            } catch (CouchbaseException ex) {\n-                throw new SearchException(\"Failed to search entries. Query: '\" + query + \"'\", ex);\n-            }\n-        } else {\n-            try {\n-                Statement query = baseQuery;\n+    List<N1qlQueryRow> searchResultList = new ArrayList<N1qlQueryRow>();\n+\n+    N1qlQueryResult lastResult;\n+    if (pageSize > 0) {\n+        boolean collectSearchResult;\n+\n+        Statement query = null;\n+        int currentLimit;\n+        try {\n+            List<N1qlQueryRow> lastSearchResultList;\n+            int resultCount = 0;\n+            do {\n+                collectSearchResult = true;\n+\n+                currentLimit = pageSize;\n                 if (count > 0) {\n-                    query = ((LimitPath) query).limit(count);\n-                }\n-                if (start > 0) {\n-                    query = ((OffsetPath) query).offset(start);\n+                    currentLimit = Math.min(pageSize, count - resultCount);\n                 }\n \n+                query = baseQuery.limit(currentLimit).offset(start + resultCount);\n                 LOG.debug(\"Execution query: '\" + query + \"'\");\n                 lastResult = bucket.query(query);\n                 if (!lastResult.finalSuccess()) {\n-                    throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", baseQuery, lastResult.errors()),\n+                    throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", query, lastResult.errors()),\n                             lastResult.info().errorCount());\n                 }\n \n-                searchResultList.addAll(lastResult.allRows());\n-            } catch (CouchbaseException ex) {\n-                throw new SearchException(\"Failed to search entries. Query: '\" + baseQuery.toString() + \"'\", ex);\n-            }\n-        }\n+                lastSearchResultList = lastResult.allRows();\n \n-        List<JsonObject> resultRows = new ArrayList<JsonObject>(searchResultList.size());\n-        for (N1qlQueryRow row : searchResultList) {\n-            resultRows.add(row.value());\n-        }\n+                if (ldapBatchOperation != null) {\n+                    collectSearchResult = ldapBatchOperation.collectSearchResult(lastSearchResultList.size());\n+                }\n+                if (collectSearchResult) {\n+                    searchResultList.addAll(lastSearchResultList);\n+                }\n \n-        PagedResult<JsonObject> result = new PagedResult<JsonObject>();\n-        result.setEntries(resultRows);\n-        result.setEntriesCount(resultRows.size());\n-        result.setStart(start);\n-\n-        if (returnCount) {\n-            GroupByPath selectCountQuery = Select.select(\"COUNT(*) as TOTAL\").from(Expression.i(bucketMapping.getBucketName()))\n-                    .where(finalExpression);\n-            try {\n-                LOG.debug(\"Calculating count. Execution query: '\" + selectCountQuery + \"'\");\n-                N1qlQueryResult countResult = bucket.query(selectCountQuery);\n-                if (!countResult.finalSuccess() || (countResult.info().resultCount() != 1)) {\n-                    throw new SearchException(\n-                            String.format(\"Failed to calculate count entries. Query: '%s'. Error: \", selectCountQuery, countResult.errors()),\n-                            countResult.info().errorCount());\n+                if (ldapBatchOperation != null) {\n+                    List<O> entries = batchOperationWraper.createEntities(lastSearchResultList);\n+                    ldapBatchOperation.performAction(entries);\n                 }\n-                result.setTotalEntriesCount(countResult.allRows().get(0).value().getInt(\"TOTAL\"));\n-            } catch (CouchbaseException ex) {\n-                throw new SearchException(\"Failed to calculate count entries. Query: '\" + selectCountQuery.toString() + \"'\", ex);\n-            }\n-        }\n \n-        return result;\n-    }\n+                resultCount += lastSearchResultList.size();\n \n-    public String[] createStoragePassword(String[] passwords) {\n-        if (ArrayHelper.isEmpty(passwords)) {\n-            return passwords;\n+                if ((count > 0) && (resultCount >= count)) {\n+                    break;\n+                }\n+            } while ((lastSearchResultList.size() > 0) && (lastSearchResultList.size() > 0));\n+        } catch (CouchbaseException ex) {\n+            throw new SearchException(\"Failed to search entries. Query: '\" + query + \"'\", ex);\n         }\n+    } else {\n+        try {\n+            Statement query = baseQuery;\n+            if (count > 0) {\n+                query = ((LimitPath) query).limit(count);\n+            }\n+            if (start > 0) {\n+                query = ((OffsetPath) query).offset(start);\n+            }\n \n-        String[] results = new String[passwords.length];\n-        for (int i = 0; i < passwords.length; i++) {\n-            results[i] = PasswordEncryptionHelper.createStoragePassword(passwords[i], connectionProvider.getPasswordEncryptionMethod());\n-        }\n+            LOG.debug(\"Execution query: '\" + query + \"'\");\n+            lastResult = bucket.query(query);\n+            if (!lastResult.finalSuccess()) {\n+                throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", baseQuery, lastResult.errors()),\n+                        lastResult.info().errorCount());\n+            }\n \n-        return results;\n+            searchResultList.addAll(lastResult.allRows());\n+        } catch (CouchbaseException ex) {\n+            throw new SearchException(\"Failed to search entries. Query: '\" + baseQuery.toString() + \"'\", ex);\n+        }\n     }\n \n-    @Override\n-    public boolean isBinaryAttribute(String attribute) {\n-        return this.connectionProvider.isBinaryAttribute(attribute);\n+    List<JsonObject> resultRows = new ArrayList<JsonObject>(searchResultList.size());\n+    for (N1qlQueryRow row : searchResultList) {\n+        resultRows.add(row.value());\n     }\n \n-    @Override\n-    public boolean isCertificateAttribute(String attribute) {\n-        return this.connectionProvider.isCertificateAttribute(attribute);\n-    }\n+    PagedResult<JsonObject> result = new PagedResult<JsonObject>();\n+    result.setEntries(resultRows);\n+    result.setEntriesCount(resultRows.size());\n+    result.setStart(start);\n \n-    @Override\n-    public boolean destroy() {\n-        boolean result = true;\n-\n-        if (connectionProvider != null) {\n-            try {\n-                connectionProvider.destory();\n-            } catch (Exception ex) {\n-                LOG.error(\"Failed to destory provider correctly\");\n-                result = false;\n+    if (returnCount) {\n+        GroupByPath selectCountQuery = Select.select(\"COUNT(*) as TOTAL\").from(Expression.i(bucketMapping.getBucketName()))\n+                .where(finalExpression);\n+        try {\n+            LOG.debug(\"Calculating count. Execution query: '\" + selectCountQuery + \"'\");\n+            N1qlQueryResult countResult = bucket.query(selectCountQuery);\n+            if (!countResult.finalSuccess() || (countResult.info().resultCount() != 1)) {\n+                throw new SearchException(\n+                        String.format(\"Failed to calculate count entries. Query: '%s'. Error: \", selectCountQuery, countResult.errors()),\n+                        countResult.info().errorCount());\n             }\n+            result.setTotalEntriesCount(countResult.allRows().get(0).value().getInt(\"TOTAL\"));\n+        } catch (CouchbaseException ex) {\n+            throw new SearchException(\"Failed to calculate count entries. Query: '\" + selectCountQuery.toString() + \"'\", ex);\n         }\n+    }\n+\n+    return result;\n+}\n \n-        return result;\n+public String[] createStoragePassword(String[] passwords) {\n+    if (ArrayHelper.isEmpty(passwords)) {\n+        return passwords;\n     }\n \n-    @Override\n-    public boolean isConnected() {\n-        return connectionProvider.isConnected();\n+    String[] results = new String[passwords.length];\n+    for (int i = 0; i < passwords.length; i++) {\n+        results[i] = PasswordEncryptionHelper.createStoragePassword(passwords[i], connectionProvider.getPasswordEncryptionMethod());\n     }\n \n+    return results;\n+}\n+\n+@Override\n+public boolean isBinaryAttribute(String attribute) {\n+    return this.connectionProvider.isBinaryAttribute(attribute);\n+}\n+\n+@Override\n+public boolean isCertificateAttribute(String attribute) {\n+    return this.connectionProvider.isCertificateAttribute(attribute);\n+}\n+\n+@Override\n+public boolean destroy() {\n+    boolean result = true;\n+\n+    if (connectionProvider != null) {\n+        try {\n+            connectionProvider.destory();\n+        } catch (Exception ex) {\n+            LOG.error(\"Failed to destory provider correctly\");\n+            result = false;\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+@Override\n+public boolean isConnected() {\n+    return connectionProvider.isConnected();\n+}\n+\n }\n",
            "diff_size": 195
        }
    ]
}