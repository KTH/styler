{
    "error_id": "207",
    "information": {
        "errors": [
            {
                "line": "159",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "     */\n    public String edit(User user) {\n    \tconversation.begin();\n        clear();\n        this.user = user;\n        initSelectionModel();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "171",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/207/UserEdit.java\nindex 3c9864c91d..a2bf91912f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/207/UserEdit.java\n@@ -66,7 +66,7 @@ public class UserEdit implements Serializable {\n \n     @Inject\n     private Messages messages;\n-    \n+\n     @Inject\n     private Conversation conversation;\n \n@@ -105,7 +105,7 @@ public class UserEdit implements Serializable {\n     public void setSelectionModel(DualListModel<String> selectionModel) {\n         this.selectionModel = selectionModel;\n     }\n-    \n+\n     public void generateApiToken() {\n         if (user.getApiToken() == null) {\n             user.generateApiToken();\n@@ -156,7 +156,7 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String edit(User user) {\n-    \tconversation.begin();\n+    conversation.begin();\n         clear();\n         this.user = user;\n         initSelectionModel();\n@@ -168,7 +168,7 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String newUser() {\n-    \tconversation.begin();\n+\t\t\t\t\tconversation.begin();\n         clear();\n         this.user = new User();\n         initSelectionModel();\n@@ -233,7 +233,7 @@ public class UserEdit implements Serializable {\n     }\n \n     public String cancel() {\n-    \tconversation.end();\n+\t\t\t\t\tconversation.end();\n         clear();\n         return \"success\";\n     }\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/207/UserEdit.java\nindex 3c9864c91d..76e2c9f72e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/207/UserEdit.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.admin;\n \n /*\n@@ -45,196 +46,190 @@ import com.intuit.tank.vm.settings.TankConfig;\n \n /**\n  * UserEdit\n- * \n+ *\n  * @author dangleton\n- * \n  */\n @Named\n @ConversationScoped\n public class UserEdit implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    private static final Logger LOG = Logger.getLogger(UserEdit.class);\n+  private static final long serialVersionUID = 1L;\n+  private static final Logger LOG = Logger.getLogger(UserEdit.class);\n \n-    private String password;\n+  private String password;\n \n-    private String passwordConfirm;\n+  private String passwordConfirm;\n \n-    @Inject\n-    @Modified\n-    private Event<ModifiedUserMessage> userEvent;\n+  @Inject\n+  @Modified\n+  private Event<ModifiedUserMessage> userEvent;\n \n-    @Inject\n-    private Messages messages;\n-    \n-    @Inject\n-    private Conversation conversation;\n+  @Inject\n+  private Messages messages;\n \n-    @Inject\n-    private TsConversationManager tsConversationManager;\n+  @Inject\n+  private Conversation conversation;\n \n-    private User user;\n+  @Inject\n+  private TsConversationManager tsConversationManager;\n \n-    private DualListModel<String> selectionModel;\n+  private User user;\n \n-    /**\n-     * @return the current\n-     */\n-    public User getUser() {\n-        return user;\n-    }\n+  private DualListModel<String> selectionModel;\n \n-    /**\n-     * @return the password\n-     */\n-    public String getPassword() {\n-        return password;\n-    }\n+  /**\n+   * @return the current\n+   */\n+  public User getUser() {\n+    return user;\n+  }\n \n-    /**\n-     * @return the selectionModel\n-     */\n-    public DualListModel<String> getSelectionModel() {\n-        return selectionModel;\n-    }\n+  /**\n+   * @return the password\n+   */\n+  public String getPassword() {\n+    return password;\n+  }\n \n-    /**\n-     * @param selectionModel\n-     *            the selectionModel to set\n-     */\n-    public void setSelectionModel(DualListModel<String> selectionModel) {\n-        this.selectionModel = selectionModel;\n-    }\n-    \n-    public void generateApiToken() {\n-        if (user.getApiToken() == null) {\n-            user.generateApiToken();\n-            user = new UserDao().saveOrUpdate(user);\n-        }\n-    }\n+  /**\n+   * @return the selectionModel\n+   */\n+  public DualListModel<String> getSelectionModel() {\n+    return selectionModel;\n+  }\n \n-    private void initSelectionModel() {\n-        GroupDao groupDao = new GroupDao();\n-        selectionModel = new DualListModel<String>();\n-        Set<Group> groups = user.getGroups();\n-        if (groups.isEmpty()) {\n-            Set<String> defaultGroups = new TankConfig().getSecurityConfig().getDefaultGroups();\n-            for (String s : defaultGroups) {\n-                Group g = groupDao.getOrCreateGroup(s);\n-                selectionModel.getTarget().add(g.getName());\n-            }\n-        } else {\n-            for (Group g : groups) {\n-                selectionModel.getTarget().add(g.getName());\n-            }\n-        }\n-        Set<String> allGroups = new TankConfig().getSecurityConfig().getGroups();\n-        for (String s : allGroups) {\n-            if (!selectionModel.getTarget().contains(s)) {\n-                Group g = groupDao.getOrCreateGroup(s);\n-                selectionModel.getSource().add(g.getName());\n-            }\n-        }\n-\n-        List<SelectItem> ret = new ArrayList<SelectItem>();\n-        for (Group g : groups) {\n-            ret.add(new SelectItem(g.getName()));\n-        }\n-    }\n+  /**\n+   * @param selectionModel the selectionModel to set\n+   */\n+  public void setSelectionModel(DualListModel<String> selectionModel) {\n+    this.selectionModel = selectionModel;\n+  }\n \n-    /**\n-     * @param password\n-     *            the password to set\n-     */\n-    public void setPassword(String password) {\n-        this.password = password.trim();\n+  public void generateApiToken() {\n+    if (user.getApiToken() == null) {\n+      user.generateApiToken();\n+      user = new UserDao().saveOrUpdate(user);\n     }\n-\n-    /**\n-     * \n-     * @param user\n-     * @return\n-     */\n-    public String edit(User user) {\n-    \tconversation.begin();\n-        clear();\n-        this.user = user;\n-        initSelectionModel();\n-        return \"success\";\n+  }\n+\n+  private void initSelectionModel() {\n+    GroupDao groupDao = new GroupDao();\n+    selectionModel = new DualListModel<String>();\n+    Set<Group> groups = user.getGroups();\n+    if (groups.isEmpty()) {\n+      Set<String> defaultGroups = new TankConfig().getSecurityConfig().getDefaultGroups();\n+      for (String s : defaultGroups) {\n+        Group g = groupDao.getOrCreateGroup(s);\n+        selectionModel.getTarget().add(g.getName());\n+      }\n+    } else {\n+      for (Group g : groups) {\n+        selectionModel.getTarget().add(g.getName());\n+      }\n     }\n-\n-    /**\n-     * \n-     * @return\n-     */\n-    public String newUser() {\n-    \tconversation.begin();\n-        clear();\n-        this.user = new User();\n-        initSelectionModel();\n-        return \"success\";\n-    }\n-\n-    /**\n-     * @return the passwordConfirm\n-     */\n-    public String getPasswordConfirm() {\n-        return passwordConfirm;\n+    Set<String> allGroups = new TankConfig().getSecurityConfig().getGroups();\n+    for (String s : allGroups) {\n+      if (!selectionModel.getTarget().contains(s)) {\n+        Group g = groupDao.getOrCreateGroup(s);\n+        selectionModel.getSource().add(g.getName());\n+      }\n     }\n \n-    /**\n-     * @param passwordConfirm\n-     *            the passwordConfirm to set\n-     */\n-    public void setPasswordConfirm(String passwordConfirm) {\n-        this.passwordConfirm = passwordConfirm.trim();\n+    List<SelectItem> ret = new ArrayList<SelectItem>();\n+    for (Group g : groups) {\n+      ret.add(new SelectItem(g.getName()));\n     }\n-\n-    /**\n-     * Saves the user\n-     * \n-     * @return\n-     */\n-    public String save() {\n-        boolean isNew = user.getId() == 0;\n-        if (!StringUtils.isBlank(password)) {\n-            if (!password.equals(passwordConfirm)) {\n-                LOG.warn(\"Password '\" + password + \"' does not match '\" + passwordConfirm + \"'\");\n-                messages.error(\"Passwords do not match.\");\n-                return null;\n-            }\n-            user.setPassword(PasswordEncoder.encodePassword(password));\n-        } else if (isNew) {\n-            messages.error(\"Passwords is Required.\");\n-            return null;\n-        }\n-        UserDao userDao = new UserDao();\n-        user = userDao.saveOrUpdate(user);\n-        user.getGroups().clear();\n-        for (String g : selectionModel.getTarget()) {\n-            user.addGroup(new GroupDao().getOrCreateGroup(g));\n-        }\n-        user = userDao.saveOrUpdate(user);\n-        userEvent.fire(new ModifiedUserMessage(user, this));\n-        messages.info(\"User \" + user.getName() + \" has been \" + (isNew ? \"created\" : \"modified\") + \".\");\n-        tsConversationManager.end();\n-        clear();\n-        return \"success\";\n+  }\n+\n+  /**\n+   * @param password the password to set\n+   */\n+  public void setPassword(String password) {\n+    this.password = password.trim();\n+  }\n+\n+  /**\n+   * @param user\n+   * @return\n+   */\n+  public String edit(User user) {\n+    conversation.begin();\n+    clear();\n+    this.user = user;\n+    initSelectionModel();\n+    return \"success\";\n+  }\n+\n+  /**\n+   * @return\n+   */\n+  public String newUser() {\n+    conversation.begin();\n+    clear();\n+    this.user = new User();\n+    initSelectionModel();\n+    return \"success\";\n+  }\n+\n+  /**\n+   * @return the passwordConfirm\n+   */\n+  public String getPasswordConfirm() {\n+    return passwordConfirm;\n+  }\n+\n+  /**\n+   * @param passwordConfirm the passwordConfirm to set\n+   */\n+  public void setPasswordConfirm(String passwordConfirm) {\n+    this.passwordConfirm = passwordConfirm.trim();\n+  }\n+\n+  /**\n+   * Saves the user\n+   *\n+   * @return\n+   */\n+  public String save() {\n+    boolean isNew = user.getId() == 0;\n+    if (!StringUtils.isBlank(password)) {\n+      if (!password.equals(passwordConfirm)) {\n+        LOG.warn(\"Password '\" + password + \"' does not match '\" + passwordConfirm + \"'\");\n+        messages.error(\"Passwords do not match.\");\n+        return null;\n+      }\n+      user.setPassword(PasswordEncoder.encodePassword(password));\n+    } else if (isNew) {\n+      messages.error(\"Passwords is Required.\");\n+      return null;\n     }\n-\n-    /**\n-     * \n-     */\n-    private void clear() {\n-        user = null;\n-        password = null;\n-        passwordConfirm = null;\n-        selectionModel = null;\n-    }\n-\n-    public String cancel() {\n-    \tconversation.end();\n-        clear();\n-        return \"success\";\n+    UserDao userDao = new UserDao();\n+    user = userDao.saveOrUpdate(user);\n+    user.getGroups().clear();\n+    for (String g : selectionModel.getTarget()) {\n+      user.addGroup(new GroupDao().getOrCreateGroup(g));\n     }\n+    user = userDao.saveOrUpdate(user);\n+    userEvent.fire(new ModifiedUserMessage(user, this));\n+    messages.info(\"User \" + user.getName() + \" has been \" + (isNew ? \"created\" : \"modified\") + \".\");\n+    tsConversationManager.end();\n+    clear();\n+    return \"success\";\n+  }\n+\n+  /**\n+   *\n+   */\n+  private void clear() {\n+    user = null;\n+    password = null;\n+    passwordConfirm = null;\n+    selectionModel = null;\n+  }\n+\n+  public String cancel() {\n+    conversation.end();\n+    clear();\n+    return \"success\";\n+  }\n }\n",
            "diff_size": 227
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/207/UserEdit.java\nindex 3c9864c91d..9db2e5a78b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/207/UserEdit.java\n@@ -68,7 +68,7 @@ public class UserEdit implements Serializable {\n     private Messages messages;\n     \n     @Inject\n-    private Conversation conversation;\n+private Conversation conversation;\n \n     @Inject\n     private TsConversationManager tsConversationManager;\n@@ -156,8 +156,8 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String edit(User user) {\n-    \tconversation.begin();\n-        clear();\n+    conversation.begin();\n+clear();\n         this.user = user;\n         initSelectionModel();\n         return \"success\";\n@@ -168,8 +168,8 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String newUser() {\n-    \tconversation.begin();\n-        clear();\n+    conversation.begin();\n+clear();\n         this.user = new User();\n         initSelectionModel();\n         return \"success\";\n@@ -233,8 +233,8 @@ public class UserEdit implements Serializable {\n     }\n \n     public String cancel() {\n-    \tconversation.end();\n-        clear();\n+    conversation.end();\n+clear();\n         return \"success\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/207/UserEdit.java\nindex 3c9864c91d..03c079fc3f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/207/UserEdit.java\n@@ -16,23 +16,22 @@ package com.intuit.tank.admin;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-\n import javax.enterprise.context.Conversation;\n import javax.enterprise.context.ConversationScoped;\n import javax.enterprise.event.Event;\n import javax.faces.model.SelectItem;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.log4j.Logger;\n import org.jboss.seam.international.status.Messages;\n import org.primefaces.model.DualListModel;\n-\n import com.intuit.tank.ModifiedUserMessage;\n import com.intuit.tank.dao.GroupDao;\n import com.intuit.tank.dao.UserDao;\n@@ -49,15 +48,14 @@ import com.intuit.tank.vm.settings.TankConfig;\n  * @author dangleton\n  * \n  */\n+\n @Named\n @ConversationScoped\n public class UserEdit implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n     private static final Logger LOG = Logger.getLogger(UserEdit.class);\n-\n     private String password;\n-\n     private String passwordConfirm;\n \n     @Inject\n@@ -66,15 +64,13 @@ public class UserEdit implements Serializable {\n \n     @Inject\n     private Messages messages;\n-    \n+\n     @Inject\n     private Conversation conversation;\n \n     @Inject\n     private TsConversationManager tsConversationManager;\n-\n     private User user;\n-\n     private DualListModel<String> selectionModel;\n \n     /**\n@@ -87,6 +83,8 @@ public class UserEdit implements Serializable {\n     /**\n      * @return the password\n      */\n+\n+\n     public String getPassword() {\n         return password;\n     }\n@@ -94,6 +92,8 @@ public class UserEdit implements Serializable {\n     /**\n      * @return the selectionModel\n      */\n+\n+\n     public DualListModel<String> getSelectionModel() {\n         return selectionModel;\n     }\n@@ -102,10 +102,13 @@ public class UserEdit implements Serializable {\n      * @param selectionModel\n      *            the selectionModel to set\n      */\n+\n+\n     public void setSelectionModel(DualListModel<String> selectionModel) {\n         this.selectionModel = selectionModel;\n     }\n-    \n+\n+\n     public void generateApiToken() {\n         if (user.getApiToken() == null) {\n             user.generateApiToken();\n@@ -135,7 +138,6 @@ public class UserEdit implements Serializable {\n                 selectionModel.getSource().add(g.getName());\n             }\n         }\n-\n         List<SelectItem> ret = new ArrayList<SelectItem>();\n         for (Group g : groups) {\n             ret.add(new SelectItem(g.getName()));\n@@ -146,6 +148,8 @@ public class UserEdit implements Serializable {\n      * @param password\n      *            the password to set\n      */\n+\n+\n     public void setPassword(String password) {\n         this.password = password.trim();\n     }\n@@ -155,8 +159,10 @@ public class UserEdit implements Serializable {\n      * @param user\n      * @return\n      */\n+\n+\n     public String edit(User user) {\n-    \tconversation.begin();\n+        conversation.begin();\n         clear();\n         this.user = user;\n         initSelectionModel();\n@@ -167,8 +173,10 @@ public class UserEdit implements Serializable {\n      * \n      * @return\n      */\n+\n+\n     public String newUser() {\n-    \tconversation.begin();\n+        conversation.begin();\n         clear();\n         this.user = new User();\n         initSelectionModel();\n@@ -178,6 +186,8 @@ public class UserEdit implements Serializable {\n     /**\n      * @return the passwordConfirm\n      */\n+\n+\n     public String getPasswordConfirm() {\n         return passwordConfirm;\n     }\n@@ -186,6 +196,8 @@ public class UserEdit implements Serializable {\n      * @param passwordConfirm\n      *            the passwordConfirm to set\n      */\n+\n+\n     public void setPasswordConfirm(String passwordConfirm) {\n         this.passwordConfirm = passwordConfirm.trim();\n     }\n@@ -195,6 +207,8 @@ public class UserEdit implements Serializable {\n      * \n      * @return\n      */\n+\n+\n     public String save() {\n         boolean isNew = user.getId() == 0;\n         if (!StringUtils.isBlank(password)) {\n@@ -225,6 +239,7 @@ public class UserEdit implements Serializable {\n     /**\n      * \n      */\n+\n     private void clear() {\n         user = null;\n         password = null;\n@@ -232,9 +247,11 @@ public class UserEdit implements Serializable {\n         selectionModel = null;\n     }\n \n+\n     public String cancel() {\n-    \tconversation.end();\n+        conversation.end();\n         clear();\n         return \"success\";\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "171",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/207/UserEdit.java\nindex 3c9864c91d..a2bf91912f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/207/UserEdit.java\n@@ -66,7 +66,7 @@ public class UserEdit implements Serializable {\n \n     @Inject\n     private Messages messages;\n-    \n+\n     @Inject\n     private Conversation conversation;\n \n@@ -105,7 +105,7 @@ public class UserEdit implements Serializable {\n     public void setSelectionModel(DualListModel<String> selectionModel) {\n         this.selectionModel = selectionModel;\n     }\n-    \n+\n     public void generateApiToken() {\n         if (user.getApiToken() == null) {\n             user.generateApiToken();\n@@ -156,7 +156,7 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String edit(User user) {\n-    \tconversation.begin();\n+    conversation.begin();\n         clear();\n         this.user = user;\n         initSelectionModel();\n@@ -168,7 +168,7 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String newUser() {\n-    \tconversation.begin();\n+\t\t\t\t\tconversation.begin();\n         clear();\n         this.user = new User();\n         initSelectionModel();\n@@ -233,7 +233,7 @@ public class UserEdit implements Serializable {\n     }\n \n     public String cancel() {\n-    \tconversation.end();\n+\t\t\t\t\tconversation.end();\n         clear();\n         return \"success\";\n     }\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "171",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/207/UserEdit.java\nindex 3c9864c91d..ea940fb085 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/207/UserEdit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/207/UserEdit.java\n@@ -66,7 +66,7 @@ public class UserEdit implements Serializable {\n \n     @Inject\n     private Messages messages;\n-    \n+\n     @Inject\n     private Conversation conversation;\n \n@@ -105,7 +105,7 @@ public class UserEdit implements Serializable {\n     public void setSelectionModel(DualListModel<String> selectionModel) {\n         this.selectionModel = selectionModel;\n     }\n-    \n+\n     public void generateApiToken() {\n         if (user.getApiToken() == null) {\n             user.generateApiToken();\n@@ -156,7 +156,7 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String edit(User user) {\n-    \tconversation.begin();\n+        conversation.begin();\n         clear();\n         this.user = user;\n         initSelectionModel();\n@@ -168,7 +168,7 @@ public class UserEdit implements Serializable {\n      * @return\n      */\n     public String newUser() {\n-    \tconversation.begin();\n+\t\t\t\t\tconversation.begin();\n         clear();\n         this.user = new User();\n         initSelectionModel();\n@@ -233,7 +233,7 @@ public class UserEdit implements Serializable {\n     }\n \n     public String cancel() {\n-    \tconversation.end();\n+\t\t\t\t\tconversation.end();\n         clear();\n         return \"success\";\n     }\n",
            "diff_size": 5
        }
    ]
}