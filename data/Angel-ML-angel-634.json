{
    "error_id": "634",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/634/PSAgentClientTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/634/PSAgentClientTest.java\nindex b8e91215d3..8db3037d14 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/634/PSAgentClientTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/634/PSAgentClientTest.java\n@@ -27,96 +27,96 @@ import java.util.concurrent.CountDownLatch;\n \n \n public class PSAgentClientTest {\n-  private static final Log LOG = LogFactory.getLog(AngelClient.class);\n-  private static final String matrixPrefix = \"w_\";\n+    private static final Log LOG = LogFactory.getLog(AngelClient.class);\n+    private static final String matrixPrefix = \"w_\";\n \n-  public static void main(String[] args) {\n-    String masterIp = args[0];\n-    int masterPort = Integer.valueOf(args[1]);\n-    int matrixNum = Integer.valueOf(args[2]);\n-    int matrixDim = Integer.valueOf(args[3]);\n-    int taskNum = Integer.valueOf(args[4]);\n-    int iteration = Integer.valueOf(args[5]);\n-    LOG.debug(\"master ip=\" + masterIp + \", master port=\" + masterPort + \", matrix number=\"\n-        + matrixNum + \", matrix dimension=\" + matrixDim + \", task number=\" + taskNum\n-        + \", iteration=\" + iteration);\n-    PSAgent psAgent = new PSAgent(masterIp, masterPort, 0);\n-    try {\n-      psAgent.initAndStart();\n-    } catch (Exception e) {\n-      LOG.debug(\"init psAgent faliled, \", e);\n-      return;\n-    }\n-    CountDownLatch counter = new CountDownLatch(taskNum);\n-    Task[] tasks = new Task[taskNum];\n-    for (int i = 0; i < taskNum; i++) {\n-      tasks[i] = new Task(matrixNum, matrixDim, iteration, psAgent, i);\n-      tasks[i].setName(\"usertask-\" + i);\n-      tasks[i].start();\n-    }\n+    public static void main(String[] args) {\n+        String masterIp = args[0];\n+        int masterPort = Integer.valueOf(args[1]);\n+        int matrixNum = Integer.valueOf(args[2]);\n+        int matrixDim = Integer.valueOf(args[3]);\n+        int taskNum = Integer.valueOf(args[4]);\n+        int iteration = Integer.valueOf(args[5]);\n+        LOG.debug(\"master ip=\" + masterIp + \", master port=\" + masterPort + \", matrix number=\"\n+                + matrixNum + \", matrix dimension=\" + matrixDim + \", task number=\" + taskNum\n+                + \", iteration=\" + iteration);\n+        PSAgent psAgent = new PSAgent(masterIp, masterPort, 0);\n+        try {\n+            psAgent.initAndStart();\n+        } catch (Exception e) {\n+            LOG.debug(\"init psAgent faliled, \", e);\n+            return;\n+        }\n+        CountDownLatch counter = new CountDownLatch(taskNum);\n+        Task[] tasks = new Task[taskNum];\n+        for (int i = 0; i < taskNum; i++) {\n+            tasks[i] = new Task(matrixNum, matrixDim, iteration, psAgent, i);\n+            tasks[i].setName(\"usertask-\" + i);\n+            tasks[i].start();\n+        }\n \n-    try {\n-      counter.await();\n-    } catch (InterruptedException e) {\n-      // TODO Auto-generated catch block\n-      e.printStackTrace();\n+        try {\n+            counter.await();\n+        } catch (InterruptedException e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+        LOG.info(\"all task run over\");\n+        psAgent.stop();\n+        psAgent = null;\n     }\n-    LOG.info(\"all task run over\");\n-    psAgent.stop();\n-    psAgent = null;\n-  }\n \n-  public static class Task extends Thread {\n-    private final int matrixNum;\n-    private final int matrixDim;\n-    private final int iteration;\n-    private final PSAgent psAgent;\n-    private final int index;\n+    public static class Task extends Thread {\n+        private final int matrixNum;\n+        private final int matrixDim;\n+        private final int iteration;\n+        private final PSAgent psAgent;\n+        private final int index;\n \n-    public Task(int matrixNum, int matrixDim, int iteration, PSAgent psAgent, int index) {\n-      this.matrixNum = matrixNum;\n-      this.matrixDim = matrixDim;\n-      this.iteration = iteration;\n-      this.psAgent = psAgent;\n-      this.index = index;\n-    }\n+        public Task(int matrixNum, int matrixDim, int iteration, PSAgent psAgent, int index) {\n+            this.matrixNum = matrixNum;\n+            this.matrixDim = matrixDim;\n+            this.iteration = iteration;\n+            this.psAgent = psAgent;\n+            this.index = index;\n+        }\n \n-    @Override\n-    public void run() {\n-      double[] delta = new double[matrixDim];\n-      for (int i = 0; i < matrixDim; i++) {\n-        delta[i] = 1;\n-      }\n+        @Override\n+        public void run() {\n+            double[] delta = new double[matrixDim];\n+            for (int i = 0; i < matrixDim; i++) {\n+                delta[i] = 1;\n+            }\n \n-      for (int i = 0; i < iteration; i++) {\n-        LOG.info(\"task-\" + index + \" start to run iteration \" + i);\n-        for (int j = 0; j < matrixNum; j++) {\n-          try {\n-            MatrixClient client = psAgent.getMatrixClient(matrixPrefix + j, index);\n-            DenseDoubleVector row = (DenseDoubleVector) client.getRow(0);\n-            LOG.info(\"matrix name=\" + matrixPrefix + j + \", rowIndex=0, length=\"\n-                + row.getValues().length + \" sum=\" + sum(row.getValues()));\n+            for (int i = 0; i < iteration; i++) {\n+                LOG.info(\"task-\" + index + \" start to run iteration \" + i);\n+                for (int j = 0; j < matrixNum; j++) {\n+                    try {\n+                        MatrixClient client = psAgent.getMatrixClient(matrixPrefix + j, index);\n+                        DenseDoubleVector row = (DenseDoubleVector) client.getRow(0);\n+                        LOG.info(\"matrix name=\" + matrixPrefix + j + \", rowIndex=0, length=\"\n+                                + row.getValues().length + \" sum=\" + sum(row.getValues()));\n \n-            DenseDoubleVector deltaRow = new DenseDoubleVector(matrixDim, delta);\n-            deltaRow.setRowId(0);\n-            client.increment(deltaRow);\n-            client.clock();\n-            LOG.info(\"matrix name=\" + matrixPrefix + j + \" clocked!\");\n-          } catch (Exception e) {\n-            // TODO Auto-generated catch block\n-            e.printStackTrace();\n-          }\n-        }\n+                        DenseDoubleVector deltaRow = new DenseDoubleVector(matrixDim, delta);\n+                        deltaRow.setRowId(0);\n+                        client.increment(deltaRow);\n+                        client.clock();\n+                        LOG.info(\"matrix name=\" + matrixPrefix + j + \" clocked!\");\n+                    } catch (Exception e) {\n+                        // TODO Auto-generated catch block\n+                        e.printStackTrace();\n+                    }\n+                }\n \n-      }\n-    }\n+            }\n+        }\n \n-    public double sum(double[] args) {\n-      double sum = 0.0;\n-      for (int i = 0; i < args.length; i++) {\n-        sum += args[i];\n-      }\n-      return sum;\n+        public double sum(double[] args) {\n+            double sum = 0.0;\n+            for (int i = 0; i < args.length; i++) {\n+                sum += args[i];\n+            }\n+            return sum;\n+        }\n     }\n-  }\n }\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/634/PSAgentClientTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/634/PSAgentClientTest.java\nindex b8e91215d3..ba02b83a7e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/634/PSAgentClientTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/634/PSAgentClientTest.java\n@@ -96,8 +96,7 @@ public class PSAgentClientTest {\n             DenseDoubleVector row = (DenseDoubleVector) client.getRow(0);\n             LOG.info(\"matrix name=\" + matrixPrefix + j + \", rowIndex=0, length=\"\n                 + row.getValues().length + \" sum=\" + sum(row.getValues()));\n-\n-            DenseDoubleVector deltaRow = new DenseDoubleVector(matrixDim, delta);\n+DenseDoubleVector deltaRow = new DenseDoubleVector(matrixDim, delta);\n             deltaRow.setRowId(0);\n             client.increment(deltaRow);\n             client.clock();\n@@ -119,4 +118,4 @@ public class PSAgentClientTest {\n       return sum;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 50, indentation should be the same level as line 101.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/634/PSAgentClientTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/634/PSAgentClientTest.java\nindex b8e91215d3..ecef2ba305 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/634/PSAgentClientTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/634/PSAgentClientTest.java\n@@ -22,41 +22,37 @@ import com.tencent.angel.psagent.PSAgent;\n import com.tencent.angel.psagent.matrix.MatrixClient;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.util.concurrent.CountDownLatch;\n \n-\n public class PSAgentClientTest {\n-  private static final Log LOG = LogFactory.getLog(AngelClient.class);\n-  private static final String matrixPrefix = \"w_\";\n+    private static final Log LOG = LogFactory.getLog(AngelClient.class);\n+    private static final String matrixPrefix = \"w_\";\n \n-  public static void main(String[] args) {\n+    public static void main(String[] args) {\n     String masterIp = args[0];\n     int masterPort = Integer.valueOf(args[1]);\n     int matrixNum = Integer.valueOf(args[2]);\n     int matrixDim = Integer.valueOf(args[3]);\n     int taskNum = Integer.valueOf(args[4]);\n     int iteration = Integer.valueOf(args[5]);\n-    LOG.debug(\"master ip=\" + masterIp + \", master port=\" + masterPort + \", matrix number=\"\n-        + matrixNum + \", matrix dimension=\" + matrixDim + \", task number=\" + taskNum\n-        + \", iteration=\" + iteration);\n+    LOG.debug(\"master ip=\" + masterIp + \", master port=\" + masterPort + \", matrix number=\" + matrixNum + \", matrix dimension=\" + matrixDim + \", task number=\" + taskNum + \", iteration=\" + iteration);\n     PSAgent psAgent = new PSAgent(masterIp, masterPort, 0);\n     try {\n-      psAgent.initAndStart();\n+        psAgent.initAndStart();\n     } catch (Exception e) {\n       LOG.debug(\"init psAgent faliled, \", e);\n       return;\n     }\n+\n     CountDownLatch counter = new CountDownLatch(taskNum);\n     Task[] tasks = new Task[taskNum];\n     for (int i = 0; i < taskNum; i++) {\n-      tasks[i] = new Task(matrixNum, matrixDim, iteration, psAgent, i);\n-      tasks[i].setName(\"usertask-\" + i);\n-      tasks[i].start();\n+        tasks[i] = new Task(matrixNum, matrixDim, iteration, psAgent, i);\n+        tasks[i].setName(\"usertask-\" + i);\n+        tasks[i].start();\n     }\n-\n     try {\n-      counter.await();\n+        counter.await();\n     } catch (InterruptedException e) {\n       // TODO Auto-generated catch block\n       e.printStackTrace();\n@@ -64,9 +60,9 @@ public class PSAgentClientTest {\n     LOG.info(\"all task run over\");\n     psAgent.stop();\n     psAgent = null;\n-  }\n+    }\n \n-  public static class Task extends Thread {\n+    public static class Task extends Thread {\n     private final int matrixNum;\n     private final int matrixDim;\n     private final int iteration;\n@@ -74,49 +70,47 @@ public class PSAgentClientTest {\n     private final int index;\n \n     public Task(int matrixNum, int matrixDim, int iteration, PSAgent psAgent, int index) {\n-      this.matrixNum = matrixNum;\n-      this.matrixDim = matrixDim;\n-      this.iteration = iteration;\n-      this.psAgent = psAgent;\n-      this.index = index;\n+        this.matrixNum = matrixNum;\n+        this.matrixDim = matrixDim;\n+        this.iteration = iteration;\n+        this.psAgent = psAgent;\n+        this.index = index;\n     }\n \n     @Override\n     public void run() {\n-      double[] delta = new double[matrixDim];\n-      for (int i = 0; i < matrixDim; i++) {\n+        double[] delta = new double[matrixDim];\n+        for (int i = 0; i < matrixDim; i++) {\n         delta[i] = 1;\n-      }\n+        }\n \n-      for (int i = 0; i < iteration; i++) {\n+        for (int i = 0; i < iteration; i++) {\n         LOG.info(\"task-\" + index + \" start to run iteration \" + i);\n         for (int j = 0; j < matrixNum; j++) {\n-          try {\n-            MatrixClient client = psAgent.getMatrixClient(matrixPrefix + j, index);\n-            DenseDoubleVector row = (DenseDoubleVector) client.getRow(0);\n-            LOG.info(\"matrix name=\" + matrixPrefix + j + \", rowIndex=0, length=\"\n-                + row.getValues().length + \" sum=\" + sum(row.getValues()));\n-\n-            DenseDoubleVector deltaRow = new DenseDoubleVector(matrixDim, delta);\n-            deltaRow.setRowId(0);\n-            client.increment(deltaRow);\n-            client.clock();\n-            LOG.info(\"matrix name=\" + matrixPrefix + j + \" clocked!\");\n-          } catch (Exception e) {\n+                                                try {\n+                                                MatrixClient client = psAgent.getMatrixClient(matrixPrefix + j, index);\n+                                                DenseDoubleVector row = (DenseDoubleVector) client.getRow(0);\n+                                                LOG.info(\"matrix name=\" + matrixPrefix + j + \", rowIndex=0, length=\" + row.getValues().length + \" sum=\" + sum(row.getValues()));\n+                                                DenseDoubleVector deltaRow = new DenseDoubleVector(matrixDim, delta);\n+                                                deltaRow.setRowId(0);\n+                                                client.increment(deltaRow);\n+                                                client.clock();\n+                                                LOG.info(\"matrix name=\" + matrixPrefix + j + \" clocked!\");\n+                                                } catch (Exception e) {\n             // TODO Auto-generated catch block\n-            e.printStackTrace();\n-          }\n+                                                  e.printStackTrace();\n+                                                }\n+        }\n         }\n-\n-      }\n     }\n \n     public double sum(double[] args) {\n-      double sum = 0.0;\n-      for (int i = 0; i < args.length; i++) {\n+        double sum = 0.0;\n+        for (int i = 0; i < args.length; i++) {\n         sum += args[i];\n-      }\n-      return sum;\n+        }\n+        return sum;\n+    }\n     }\n-  }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}