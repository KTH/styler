{
    "error_id": "162",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/162/AdaGradThreshold.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/162/AdaGradThreshold.java\nindex fc107f0bd1..5591beaeff 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/162/AdaGradThreshold.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/162/AdaGradThreshold.java\n@@ -14,146 +14,147 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.ufuncs.expression;\n \n import com.tencent.angel.ml.math2.utils.Constant;\n \n public class AdaGradThreshold extends Binary {\n \n-  private double lambda1;\n-  private double lambda2;\n-  private double eta;\n-\n-  public AdaGradThreshold(boolean inplace, double lambda1, double lambda2, double eta) {\n-    setInplace(inplace);\n-    setKeepStorage(Constant.keepStorage);\n-    this.lambda1 = lambda1;\n-    this.lambda2 = lambda2;\n-    this.eta = eta;\n-  }\n-\n-  @Override\n-  public OpType getOpType() {\n-    return OpType.INTERSECTION;\n-  }\n-\n-  @Override\n-  public double apply(double ele1, double ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return ele1 - threshold;\n-    } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n-    } else {\n-      return 0;\n+    private double lambda1;\n+    private double lambda2;\n+    private double eta;\n+\n+    public AdaGradThreshold(boolean inplace, double lambda1, double lambda2, double eta) {\n+        setInplace(inplace);\n+        setKeepStorage(Constant.keepStorage);\n+        this.lambda1 = lambda1;\n+        this.lambda2 = lambda2;\n+        this.eta = eta;\n     }\n-  }\n-\n-  @Override\n-  public double apply(double ele1, float ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return ele1 - threshold;\n-    } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public OpType getOpType() {\n+        return OpType.INTERSECTION;\n     }\n-  }\n-\n-  @Override\n-  public double apply(double ele1, long ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return ele1 - threshold;\n-    } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public double apply(double ele1, double ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return ele1 - threshold;\n+        } else if (ele1 < -threshold) {\n+            return ele1 + threshold;\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public double apply(double ele1, int ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return ele1 - threshold;\n-    } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public double apply(double ele1, float ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return ele1 - threshold;\n+        } else if (ele1 < -threshold) {\n+            return ele1 + threshold;\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public float apply(float ele1, float ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return (float) (ele1 - threshold);\n-    } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public double apply(double ele1, long ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return ele1 - threshold;\n+        } else if (ele1 < -threshold) {\n+            return ele1 + threshold;\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public float apply(float ele1, long ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return (float) (ele1 - threshold);\n-    } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public double apply(double ele1, int ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return ele1 - threshold;\n+        } else if (ele1 < -threshold) {\n+            return ele1 + threshold;\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public float apply(float ele1, int ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return (float) (ele1 - threshold);\n-    } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public float apply(float ele1, float ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return (float) (ele1 - threshold);\n+        } else if (ele1 < -threshold) {\n+            return (float) (ele1 + threshold);\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public long apply(long ele1, long ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return (long) (ele1 - threshold);\n-    } else if (ele1 < -threshold) {\n-      return (long) (ele1 + threshold);\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public float apply(float ele1, long ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return (float) (ele1 - threshold);\n+        } else if (ele1 < -threshold) {\n+            return (float) (ele1 + threshold);\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public float apply(float ele1, int ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return (float) (ele1 - threshold);\n+        } else if (ele1 < -threshold) {\n+            return (float) (ele1 + threshold);\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public long apply(long ele1, int ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return (long) (ele1 - threshold);\n-    } else if (ele1 < -threshold) {\n-      return (long) (ele1 + threshold);\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public long apply(long ele1, long ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return (long) (ele1 - threshold);\n+        } else if (ele1 < -threshold) {\n+            return (long) (ele1 + threshold);\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public int apply(int ele1, int ele2) {\n-    double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n-    if (ele1 > threshold) {\n-      return (int) (ele1 - threshold);\n-    } else if (ele1 < -threshold) {\n-      return (int) (ele1 + threshold);\n-    } else {\n-      return 0;\n+\n+    @Override\n+    public long apply(long ele1, int ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return (long) (ele1 - threshold);\n+        } else if (ele1 < -threshold) {\n+            return (long) (ele1 + threshold);\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    @Override\n+    public int apply(int ele1, int ele2) {\n+        double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n+        if (ele1 > threshold) {\n+            return (int) (ele1 - threshold);\n+        } else if (ele1 < -threshold) {\n+            return (int) (ele1 + threshold);\n+        } else {\n+            return 0;\n+        }\n     }\n-  }\n }\n",
            "diff_size": 151
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/162/AdaGradThreshold.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/162/AdaGradThreshold.java\nindex fc107f0bd1..584639ccdf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/162/AdaGradThreshold.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/162/AdaGradThreshold.java\n@@ -156,4 +156,4 @@ public class AdaGradThreshold extends Binary {\n       return 0;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/162/AdaGradThreshold.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/162/AdaGradThreshold.java\nindex fc107f0bd1..36f3f44e6b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/162/AdaGradThreshold.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/162/AdaGradThreshold.java\n@@ -19,141 +19,141 @@ package com.tencent.angel.ml.math2.ufuncs.expression;\n import com.tencent.angel.ml.math2.utils.Constant;\n \n public class AdaGradThreshold extends Binary {\n+    private double lambda1;\n+    private double lambda2;\n+    private double eta;\n \n-  private double lambda1;\n-  private double lambda2;\n-  private double eta;\n-\n-  public AdaGradThreshold(boolean inplace, double lambda1, double lambda2, double eta) {\n+    public AdaGradThreshold(boolean inplace, double lambda1, double lambda2, double eta) {\n     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n     this.lambda1 = lambda1;\n     this.lambda2 = lambda2;\n     this.eta = eta;\n-  }\n+    }\n \n-  @Override\n-  public OpType getOpType() {\n+    @Override\n+    public OpType getOpType() {\n     return OpType.INTERSECTION;\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, double ele2) {\n+    @Override\n+    public double apply(double ele1, double ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return ele1 - threshold;\n+        return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+                                                      return ele1 + threshold;\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, float ele2) {\n+    @Override\n+    public double apply(double ele1, float ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return ele1 - threshold;\n+        return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+                                                     return ele1 + threshold;\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, long ele2) {\n+    @Override\n+    public double apply(double ele1, long ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return ele1 - threshold;\n+        return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+                                                    return ele1 + threshold;\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public double apply(double ele1, int ele2) {\n+    @Override\n+    public double apply(double ele1, int ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return ele1 - threshold;\n+        return ele1 - threshold;\n     } else if (ele1 < -threshold) {\n-      return ele1 + threshold;\n+                                                   return ele1 + threshold;\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public float apply(float ele1, float ele2) {\n+    @Override\n+    public float apply(float ele1, float ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return (float) (ele1 - threshold);\n+        return (float) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n+                                                   return (float) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public float apply(float ele1, long ele2) {\n+    @Override\n+    public float apply(float ele1, long ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return (float) (ele1 - threshold);\n+        return (float) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n+                                                  return (float) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public float apply(float ele1, int ele2) {\n+    @Override\n+    public float apply(float ele1, int ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return (float) (ele1 - threshold);\n+        return (float) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (float) (ele1 + threshold);\n+                                                 return (float) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public long apply(long ele1, long ele2) {\n+    @Override\n+    public long apply(long ele1, long ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return (long) (ele1 - threshold);\n+        return (long) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (long) (ele1 + threshold);\n+                                                return (long) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public long apply(long ele1, int ele2) {\n+    @Override\n+    public long apply(long ele1, int ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return (long) (ele1 - threshold);\n+        return (long) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (long) (ele1 + threshold);\n+                                               return (long) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n-  }\n+    }\n \n-  @Override\n-  public int apply(int ele1, int ele2) {\n+    @Override\n+    public int apply(int ele1, int ele2) {\n     double threshold = (lambda1 * eta) / (Math.sqrt(ele2) + lambda2 * eta);\n     if (ele1 > threshold) {\n-      return (int) (ele1 - threshold);\n+        return (int) (ele1 - threshold);\n     } else if (ele1 < -threshold) {\n-      return (int) (ele1 + threshold);\n+                                             return (int) (ele1 + threshold);\n     } else {\n       return 0;\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}