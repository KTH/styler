{
    "error_id": "218",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/218/ServerLongFloatRow.java\nindex b225bfe509..69e23271bf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/218/ServerLongFloatRow.java\n@@ -39,707 +39,724 @@ import java.io.IOException;\n  */\n public class ServerLongFloatRow extends ServerFloatRow {\n \n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      FloatVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-  }\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a new ServerLongFloatRow\n-   *\n-   * @param rowType row type\n-   */\n-  public ServerLongFloatRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-   * Get a element value with out lock operation\n-   *\n-   * @param index element index\n-   * @return element value\n-   */\n-  public float get(long index) {\n-    if (useIntKey) {\n-      return ((IntFloatVector) row).get((int) (index - startCol));\n-    } else {\n-      return ((LongFloatVector) row).get(index - startCol);\n-    }\n-  }\n-\n-  /**\n-   * Set a element value without lock operation\n-   *\n-   * @param index element index\n-   * @param value element new value\n-   */\n-  public void set(long index, float value) {\n-    if (useIntKey) {\n-      ((IntFloatVector) row).set((int) (index - startCol), value);\n-    } else {\n-      ((LongFloatVector) row).set(index - startCol, value);\n-    }\n-  }\n-\n-  /**\n-   * Get a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @return elements values\n-   */\n-  public float[] get(long[] indices) {\n-    float[] values = new float[indices.length];\n-    if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((IntFloatVector) row).get((int) (indices[i] - startCol));\n-      }\n-    } else {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((LongFloatVector) row).get(indices[i] - startCol);\n-      }\n-    }\n-\n-    return values;\n-  }\n-\n-  /**\n-   * Set a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements values\n-   */\n-  public void set(long[] indices, float[] values) {\n-    assert indices.length == values.length;\n-    if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((IntFloatVector) row).set((int) (indices[i] - startCol), values[i]);\n-      }\n-    } else {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((LongFloatVector) row).set(indices[i] - startCol, values[i]);\n-      }\n-    }\n-  }\n-\n-  /**\n-   * Add a element value without lock\n-   *\n-   * @param index element index\n-   * @param value element plus value\n-   */\n-  public void addTo(long index, float value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  /**\n-   * Add a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements plus values\n-   */\n-  public void addTo(long[] indices, float[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n-    }\n-  }\n-\n-  /**\n-   * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n-   *\n-   * @return all element values\n-   */\n-  private float[] getValues() {\n-    if (useIntKey) {\n-      return ((IntFloatVector) row).getStorage().getValues();\n-    } else {\n-      return ((LongFloatVector) row).getStorage().getValues();\n-    }\n-  }\n-\n-  /**\n-   * Get all element indices and values without lock, you must check the storage is sparse first use\n-   * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n-   *\n-   * @return all element values\n-   */\n-  //public ObjectIterator<Long2FloatMap.Entry> getIter() {\n-  //  return ((LongFloatVector) row).getStorage().entryIterator();\n-  //}\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    startWrite();\n-    try {\n-      switch (updateType) {\n-        case T_FLOAT_SPARSE_LONGKEY:\n-        case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongFloatSparse(buf, op);\n-          break;\n-\n-        case T_LONG_SPARSE_LONGKEY:\n-        case T_LONG_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongLongSparse(buf, op);\n-          break;\n-\n-        case T_INT_SPARSE_LONGKEY:\n-        case T_INT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongIntSparse(buf, op);\n-          break;\n-\n-        case T_FLOAT_SPARSE:\n-        case T_FLOAT_SPARSE_COMPONENT:\n-          updateUseIntFloatSparse(buf, op);\n-          break;\n-\n-        case T_LONG_SPARSE:\n-        case T_LONG_SPARSE_COMPONENT:\n-          updateUseIntLongSparse(buf, op);\n-          break;\n-\n-        case T_INT_SPARSE:\n-        case T_INT_SPARSE_COMPONENT:\n-          updateUseIntIntSparse(buf, op);\n-          break;\n-\n-        case T_FLOAT_DENSE:\n-        case T_FLOAT_DENSE_COMPONENT:\n-          updateUseIntFloatDense(buf, op);\n-          break;\n-\n-        case T_LONG_DENSE:\n-        case T_LONG_DENSE_COMPONENT:\n-          updateUseIntLongDense(buf, op);\n-          break;\n-\n-        case T_INT_DENSE:\n-        case T_INT_DENSE_COMPONENT:\n-          updateUseIntIntDense(buf, op);\n-          break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n-        }\n-      }\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n+                              int estElemNum,\n+                              FloatVector innerRow) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n+    }\n \n-      updateRowVersion();\n-    } finally {\n-      endWrite();\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n+                              int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n     }\n-  }\n \n-  private void updateUseLongFloatSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, buf.readFloat());\n-        }\n-      }\n+    /**\n+     * Create a new ServerLongFloatRow\n+     *\n+     * @param rowType row type\n+     */\n+    public ServerLongFloatRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n     }\n-  }\n \n-  private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, buf.readLong());\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Get a element value with out lock operation\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public float get(long index) {\n+        if (useIntKey) {\n+            return ((IntFloatVector) row).get((int) (index - startCol));\n+        } else {\n+            return ((LongFloatVector) row).get(index - startCol);\n         }\n-      }\n     }\n-  }\n \n-  private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, buf.readInt());\n+    /**\n+     * Set a element value without lock operation\n+     *\n+     * @param index element index\n+     * @param value element new value\n+     */\n+    public void set(long index, float value) {\n+        if (useIntKey) {\n+            ((IntFloatVector) row).set((int) (index - startCol), value);\n+        } else {\n+            ((LongFloatVector) row).set(index - startCol, value);\n         }\n-      }\n     }\n-  }\n \n-  private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, buf.readFloat());\n+    /**\n+     * Get a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @return elements values\n+     */\n+    public float[] get(long[] indices) {\n+        float[] values = new float[indices.length];\n+        if (useIntKey) {\n+            for (int i = 0; i < indices.length; i++) {\n+                values[i] = ((IntFloatVector) row).get((int) (indices[i] - startCol));\n+            }\n+        } else {\n+            for (int i = 0; i < indices.length; i++) {\n+                values[i] = ((LongFloatVector) row).get(indices[i] - startCol);\n+            }\n         }\n-      }\n+\n+        return values;\n     }\n-  }\n \n-  private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, buf.readLong());\n+    /**\n+     * Set a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements values\n+     */\n+    public void set(long[] indices, float[] values) {\n+        assert indices.length == values.length;\n+        if (useIntKey) {\n+            for (int i = 0; i < indices.length; i++) {\n+                ((IntFloatVector) row).set((int) (indices[i] - startCol), values[i]);\n+            }\n+        } else {\n+            for (int i = 0; i < indices.length; i++) {\n+                ((LongFloatVector) row).set(indices[i] - startCol, values[i]);\n+            }\n         }\n-      }\n     }\n-  }\n \n-  private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, buf.readInt());\n-        }\n-      }\n+    /**\n+     * Add a element value without lock\n+     *\n+     * @param index element index\n+     * @param value element plus value\n+     */\n+    public void addTo(long index, float value) {\n+        set(index, get(index) + value);\n     }\n-  }\n \n-  private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readFloat());\n+    /**\n+     * Add a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements plus values\n+     */\n+    public void addTo(long[] indices, float[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], get(indices[i]) + values[i]);\n         }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, buf.readFloat());\n+    }\n+\n+    /**\n+     * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n+     *\n+     * @return all element values\n+     */\n+    private float[] getValues() {\n+        if (useIntKey) {\n+            return ((IntFloatVector) row).getStorage().getValues();\n+        } else {\n+            return ((LongFloatVector) row).getStorage().getValues();\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, buf.readFloat());\n+    }\n+\n+    /**\n+     * Get all element indices and values without lock, you must check the storage is sparse first use\n+     * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n+     *\n+     * @return all element values\n+     */\n+    //public ObjectIterator<Long2FloatMap.Entry> getIter() {\n+    //  return ((LongFloatVector) row).getStorage().entryIterator();\n+    //}\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        startWrite();\n+        try {\n+            switch (updateType) {\n+                case T_FLOAT_SPARSE_LONGKEY:\n+                case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseLongFloatSparse(buf, op);\n+                    break;\n+\n+                case T_LONG_SPARSE_LONGKEY:\n+                case T_LONG_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseLongLongSparse(buf, op);\n+                    break;\n+\n+                case T_INT_SPARSE_LONGKEY:\n+                case T_INT_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseLongIntSparse(buf, op);\n+                    break;\n+\n+                case T_FLOAT_SPARSE:\n+                case T_FLOAT_SPARSE_COMPONENT:\n+                    updateUseIntFloatSparse(buf, op);\n+                    break;\n+\n+                case T_LONG_SPARSE:\n+                case T_LONG_SPARSE_COMPONENT:\n+                    updateUseIntLongSparse(buf, op);\n+                    break;\n+\n+                case T_INT_SPARSE:\n+                case T_INT_SPARSE_COMPONENT:\n+                    updateUseIntIntSparse(buf, op);\n+                    break;\n+\n+                case T_FLOAT_DENSE:\n+                case T_FLOAT_DENSE_COMPONENT:\n+                    updateUseIntFloatDense(buf, op);\n+                    break;\n+\n+                case T_LONG_DENSE:\n+                case T_LONG_DENSE_COMPONENT:\n+                    updateUseIntLongDense(buf, op);\n+                    break;\n+\n+                case T_INT_DENSE:\n+                case T_INT_DENSE_COMPONENT:\n+                    updateUseIntIntDense(buf, op);\n+                    break;\n+\n+                default: {\n+                    throw new UnsupportedOperationException(\n+                            \"Unsupport operation: update \" + updateType + \" to \" +\n+                                    this.getClass().getName());\n+                }\n+            }\n+\n+            updateRowVersion();\n+        } finally {\n+            endWrite();\n         }\n-      }\n     }\n-  }\n \n-  private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readLong());\n+    private void updateUseLongFloatSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntFloatVector) row)\n+                            .set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongFloatVector) row)\n+                            .set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntFloatVector) row).set(index, buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongFloatVector) row).set(index, buf.readFloat());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readLong());\n+    }\n+\n+    private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntFloatVector) row)\n+                            .set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongFloatVector) row)\n+                            .set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntFloatVector) row).set(index, buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongFloatVector) row).set(index, buf.readLong());\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, buf.readLong());\n+    }\n+\n+    private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntFloatVector) row)\n+                            .set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongFloatVector) row)\n+                            .set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntFloatVector) row).set(index, buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongFloatVector) row).set(index, buf.readInt());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, buf.readLong());\n+    }\n+\n+    private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntFloatVector) row)\n+                            .set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongFloatVector) row)\n+                            .set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntFloatVector) row).set(index, buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongFloatVector) row).set(index, buf.readFloat());\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n \n-  private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readInt());\n+    private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntFloatVector) row)\n+                            .set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongFloatVector) row)\n+                            .set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntFloatVector) row).set(index, buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongFloatVector) row).set(index, buf.readLong());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readInt());\n+    }\n+\n+    private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntFloatVector) row)\n+                            .set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongFloatVector) row)\n+                            .set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntFloatVector) row).set(index, buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongFloatVector) row).set(index, buf.readInt());\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, buf.readInt());\n+    }\n+\n+    private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongFloatVector) row)\n+                            .set(i, ((LongFloatVector) row).get(i) + buf.readFloat());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntFloatVector) row).set(i, buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongFloatVector) row).set(i, buf.readFloat());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, buf.readInt());\n+    }\n+\n+    private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readLong());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntFloatVector) row).set(i, buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongFloatVector) row).set(i, buf.readLong());\n+                }\n+            }\n         }\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public int size() {\n-    if (useIntKey) {\n-      return ((IntFloatVector) row).size();\n-    } else {\n-      return (int) ((LongFloatVector) row).size();\n-    }\n-  }\n-\n-  public void mergeTo(LongFloatVector mergedRow) {\n-    startRead();\n-    try {\n-      if (isDense()) {\n-        float[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startCol, values[i]);\n+    }\n+\n+    private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readInt());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntFloatVector) row).set(i, buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongFloatVector) row).set(i, buf.readInt());\n+                }\n+            }\n         }\n-      } else {\n+    }\n+\n+    @Override\n+    public int size() {\n         if (useIntKey) {\n-          ObjectIterator<Int2FloatMap.Entry> iter =\n-              ((IntFloatVector) row).getStorage().entryIterator();\n-          Int2FloatMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getIntKey() + startCol, entry.getFloatValue());\n-          }\n+            return ((IntFloatVector) row).size();\n         } else {\n-          ObjectIterator<Long2FloatMap.Entry> iter =\n-              ((LongFloatVector) row).getStorage().entryIterator();\n-          Long2FloatMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getLongKey() + startCol, entry.getFloatValue());\n-          }\n-        }\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n-    if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        float[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          buf.writeFloat(values[i]);\n+            return (int) ((LongFloatVector) row).size();\n         }\n-      } else {\n-        ObjectIterator<Int2FloatMap.Entry> iter =\n-            ((IntFloatVector) row).getStorage().entryIterator();\n-        Int2FloatMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeFloat(entry.getFloatValue());\n+    }\n+\n+    public void mergeTo(LongFloatVector mergedRow) {\n+        startRead();\n+        try {\n+            if (isDense()) {\n+                float[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    mergedRow.set(i + startCol, values[i]);\n+                }\n+            } else {\n+                if (useIntKey) {\n+                    ObjectIterator<Int2FloatMap.Entry> iter =\n+                            ((IntFloatVector) row).getStorage().entryIterator();\n+                    Int2FloatMap.Entry entry;\n+                    while (iter.hasNext()) {\n+                        entry = iter.next();\n+                        mergedRow.set(entry.getIntKey() + startCol, entry.getFloatValue());\n+                    }\n+                } else {\n+                    ObjectIterator<Long2FloatMap.Entry> iter =\n+                            ((LongFloatVector) row).getStorage().entryIterator();\n+                    Long2FloatMap.Entry entry;\n+                    while (iter.hasNext()) {\n+                        entry = iter.next();\n+                        mergedRow.set(entry.getLongKey() + startCol, entry.getFloatValue());\n+                    }\n+                }\n+            }\n+        } finally {\n+            endRead();\n         }\n-      }\n-    } else {\n-      ObjectIterator<Long2FloatMap.Entry> iter =\n-          ((LongFloatVector) row).getStorage().entryIterator();\n-      Long2FloatMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeLong(entry.getLongKey());\n-        buf.writeFloat(entry.getFloatValue());\n-      }\n-    }\n-  }\n-\n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n-    if (useIntKeySerialize()) {\n-      IntFloatVector IntFloatRow = (IntFloatVector) row;\n-      if (useDenseSerialize()) {\n-        for (int i = 0; i < size; i++) {\n-          IntFloatRow.set(i, buf.readFloat());\n+    }\n+\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n+        if (useIntKeySerialize()) {\n+            if (useDenseSerialize()) {\n+                float[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    buf.writeFloat(values[i]);\n+                }\n+            } else {\n+                ObjectIterator<Int2FloatMap.Entry> iter =\n+                        ((IntFloatVector) row).getStorage().entryIterator();\n+                Int2FloatMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeInt(entry.getIntKey());\n+                    buf.writeFloat(entry.getFloatValue());\n+                }\n+            }\n+        } else {\n+            ObjectIterator<Long2FloatMap.Entry> iter =\n+                    ((LongFloatVector) row).getStorage().entryIterator();\n+            Long2FloatMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                buf.writeLong(entry.getLongKey());\n+                buf.writeFloat(entry.getFloatValue());\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          IntFloatRow.set(buf.readInt(), buf.readFloat());\n+    }\n+\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n+        if (useIntKeySerialize()) {\n+            IntFloatVector IntFloatRow = (IntFloatVector) row;\n+            if (useDenseSerialize()) {\n+                for (int i = 0; i < size; i++) {\n+                    IntFloatRow.set(i, buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    IntFloatRow.set(buf.readInt(), buf.readFloat());\n+                }\n+            }\n+        } else {\n+            LongFloatVector longFloatRow = (LongFloatVector) row;\n+            for (int i = 0; i < size; i++) {\n+                longFloatRow.set(buf.readLong(), buf.readFloat());\n+            }\n         }\n-      }\n-    } else {\n-      LongFloatVector longFloatRow = (LongFloatVector) row;\n-      for (int i = 0; i < size; i++) {\n-        longFloatRow.set(buf.readLong(), buf.readFloat());\n-      }\n-    }\n-  }\n-\n-  @Override\n-  protected int getRowSpace() {\n-    if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        return size * 4;\n-      } else {\n-        return size * 8;\n-      }\n-    } else {\n-      return size * 12;\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow clone() {\n-    startRead();\n-    try {\n-      if (useIntKey) {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntFloatVector) row).clone());\n-      } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongFloatVector) row).clone());\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n-    try {\n-      if (useIntKey) {\n-        if (row.isSparse()) {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedFloatVector((int) (endCol - startCol),\n-                  ((IntFloatVector) row).getStorage().getIndices(),\n-                  ((IntFloatVector) row).getStorage().getValues()));\n+    }\n+\n+    @Override\n+    protected int getRowSpace() {\n+        if (useIntKeySerialize()) {\n+            if (useDenseSerialize()) {\n+                return size * 4;\n+            } else {\n+                return size * 8;\n+            }\n         } else {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              ((IntFloatVector) row));\n+            return size * 12;\n         }\n-      } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyFloatVector(endCol - startCol,\n-                ((LongFloatVector) row).getStorage().getIndices(),\n-                ((LongFloatVector) row).getStorage().getValues()));\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(long index) {\n-    if (useIntKey) {\n-      if (row.isSparse()) {\n-        return ((IntFloatVector) row).getStorage().hasKey((int) (index - startCol));\n-      } else {\n-        return ((IntFloatVector) row).getStorage().get((int) (index - startCol)) != 0.0f;\n-      }\n-    } else {\n-      if (row.isSparse()) {\n-        return ((LongFloatVector) row).getStorage().hasKey(index - startCol);\n-      } else {\n-        return ((LongFloatVector) row).getStorage().get(index - startCol) != 0.0f;\n-      }\n-    }\n-  }\n-\n-  public float initAndGet(long index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      float value = (float) func.action();\n-      set(index, value);\n-      return value;\n-    }\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n-    if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(initAndGet(in.readInt(), func));\n+    }\n+\n+    @Override\n+    public ServerRow clone() {\n+        startRead();\n+        try {\n+            if (useIntKey) {\n+                return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        ((IntFloatVector) row).clone());\n+            } else {\n+                return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        ((LongFloatVector) row).clone());\n+            }\n+        } finally {\n+            endRead();\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(initAndGet(in.readLong(), func));\n+    }\n+\n+    @Override\n+    public ServerRow\n+    adaptiveClone() {\n+        startRead();\n+        try {\n+            if (useIntKey) {\n+                if (row.isSparse()) {\n+                    return new ServerLongFloatRow(rowId, rowType, startCol, endCol,\n+                            (int) estElemNum,\n+                            VFactory.sortedFloatVector((int) (endCol - startCol),\n+                                    ((IntFloatVector) row).getStorage().getIndices(),\n+                                    ((IntFloatVector) row).getStorage().getValues()));\n+                } else {\n+                    return new ServerLongFloatRow(rowId, rowType, startCol, endCol,\n+                            (int) estElemNum,\n+                            ((IntFloatVector) row));\n+                }\n+            } else {\n+                return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        VFactory.sortedLongKeyFloatVector(endCol - startCol,\n+                                ((LongFloatVector) row).getStorage().getIndices(),\n+                                ((LongFloatVector) row).getStorage().getValues()));\n+            }\n+        } finally {\n+            endRead();\n         }\n-      }\n-    } else {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(get(in.readInt()));\n+    }\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(long index) {\n+        if (useIntKey) {\n+            if (row.isSparse()) {\n+                return ((IntFloatVector) row).getStorage().hasKey((int) (index - startCol));\n+            } else {\n+                return ((IntFloatVector) row).getStorage().get((int) (index - startCol)) != 0.0f;\n+            }\n+        } else {\n+            if (row.isSparse()) {\n+                return ((LongFloatVector) row).getStorage().hasKey(index - startCol);\n+            } else {\n+                return ((LongFloatVector) row).getStorage().get(index - startCol) != 0.0f;\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(get(in.readLong()));\n+    }\n+\n+    public float initAndGet(long index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            float value = (float) func.action();\n+            set(index, value);\n+            return value;\n         }\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public void setSplit(Vector row) {\n-    super.setSplit(row);\n-  }\n-\n-  @Override\n-  public void elemUpdate(FloatElemUpdateFunc func) {\n-    if (isDense()) {\n-      float[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n-    } else {\n-      if (useIntKey) {\n-        ObjectIterator<Int2FloatMap.Entry> iter =\n-            ((IntFloatVector) row).getStorage().entryIterator();\n-        Int2FloatMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+    }\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n+            throws IOException {\n+        if (func != null) {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeFloat(initAndGet(in.readInt(), func));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeFloat(initAndGet(in.readLong(), func));\n+                }\n+            }\n+        } else {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeFloat(get(in.readInt()));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeFloat(get(in.readLong()));\n+                }\n+            }\n         }\n-      } else {\n-        ObjectIterator<Long2FloatMap.Entry> iter =\n-            ((LongFloatVector) row).getStorage().entryIterator();\n-        Long2FloatMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+    }\n+\n+    @Override\n+    public void setSplit(Vector row) {\n+        super.setSplit(row);\n+    }\n+\n+    @Override\n+    public void elemUpdate(FloatElemUpdateFunc func) {\n+        if (isDense()) {\n+            float[] values = getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                values[i] = func.update();\n+            }\n+        } else {\n+            if (useIntKey) {\n+                ObjectIterator<Int2FloatMap.Entry> iter =\n+                        ((IntFloatVector) row).getStorage().entryIterator();\n+                Int2FloatMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+            } else {\n+                ObjectIterator<Long2FloatMap.Entry> iter =\n+                        ((LongFloatVector) row).getStorage().entryIterator();\n+                Long2FloatMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n }\n",
            "diff_size": 1057
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "606",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "608",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "622",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "624",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "628",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/218/ServerLongFloatRow.java\nindex b225bfe509..56073a8b54 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/218/ServerLongFloatRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -62,9 +61,8 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n+  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n+  this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n@@ -203,50 +201,40 @@ public class ServerLongFloatRow extends ServerFloatRow {\n         case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE_LONGKEY:\n+  case T_LONG_SPARSE_LONGKEY:\n         case T_LONG_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE_LONGKEY:\n+  case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongIntSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -615,11 +603,9 @@ public class ServerLongFloatRow extends ServerFloatRow {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntFloatVector) row).clone());\n-      } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongFloatVector) row).clone());\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row).clone());\n+  } else {\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongFloatVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -627,25 +613,19 @@ public class ServerLongFloatRow extends ServerFloatRow {\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (useIntKey) {\n         if (row.isSparse()) {\n           return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedFloatVector((int) (endCol - startCol),\n-                  ((IntFloatVector) row).getStorage().getIndices(),\n-                  ((IntFloatVector) row).getStorage().getValues()));\n-        } else {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              ((IntFloatVector) row));\n+              VFactory.sortedFloatVector((int) (endCol - startCol), ((IntFloatVector) row).getStorage().getIndices(), ((IntFloatVector) row).getStorage().getValues()));\n+  } else {\n+          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row));\n         }\n       } else {\n         return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyFloatVector(endCol - startCol,\n-                ((LongFloatVector) row).getStorage().getIndices(),\n-                ((LongFloatVector) row).getStorage().getValues()));\n+            VFactory.sortedLongKeyFloatVector(endCol - startCol, ((LongFloatVector) row).getStorage().getIndices(), ((LongFloatVector) row).getStorage().getValues()));\n       }\n     } finally {\n       endRead();\n@@ -687,7 +667,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeFloat(initAndGet(in.readInt(), func));\n@@ -742,4 +722,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 53.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 67.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 77.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 93.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 108.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 123.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 144.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 164.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 175.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 188.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 206.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "263",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "292",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "297",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "321",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "326",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "350",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "379",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "384",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "408",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "413",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "436",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "461",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "486",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "525",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "532",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "554",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "563",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "612",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "614",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "627",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 263).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "629",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "632",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "639",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 646.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "673",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "711",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "718",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/218/ServerLongFloatRow.java\nindex b225bfe509..5b96c95d1d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/218/ServerLongFloatRow.java\n@@ -37,6 +37,7 @@ import java.io.IOException;\n /**\n  * The row with \"long\" index type and \"float\" value type in PS\n  */\n+\n public class ServerLongFloatRow extends ServerFloatRow {\n \n   /**\n@@ -48,10 +49,10 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      FloatVector innerRow) {\n+\n+    public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, FloatVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-  }\n+    }\n \n   /**\n    * Create a new ServerIntDoubleRow\n@@ -62,19 +63,20 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n+\n+    public ServerLongFloatRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n+    }\n \n   /**\n    * Create a new ServerLongFloatRow\n    *\n    * @param rowType row type\n    */\n-  public ServerLongFloatRow(RowType rowType) {\n+\n+    public ServerLongFloatRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n-  }\n+    }\n \n   //////////////////////////////////////////////////////////////////////////////////////////////////\n   //Methods with out lock operation, you must call startWrite/startRead before using these methods\n@@ -87,13 +89,14 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @return element value\n    */\n-  public float get(long index) {\n+\n+    public float get(long index) {\n     if (useIntKey) {\n-      return ((IntFloatVector) row).get((int) (index - startCol));\n+        return ((IntFloatVector) row).get((int) (index - startCol));\n     } else {\n       return ((LongFloatVector) row).get(index - startCol);\n     }\n-  }\n+    }\n \n   /**\n    * Set a element value without lock operation\n@@ -101,13 +104,14 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element new value\n    */\n-  public void set(long index, float value) {\n+\n+    public void set(long index, float value) {\n     if (useIntKey) {\n-      ((IntFloatVector) row).set((int) (index - startCol), value);\n+        ((IntFloatVector) row).set((int) (index - startCol), value);\n     } else {\n       ((LongFloatVector) row).set(index - startCol, value);\n     }\n-  }\n+    }\n \n   /**\n    * Get a batch elements values without lock\n@@ -115,20 +119,20 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n-  public float[] get(long[] indices) {\n+\n+    public float[] get(long[] indices) {\n     float[] values = new float[indices.length];\n     if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((IntFloatVector) row).get((int) (indices[i] - startCol));\n-      }\n+        for (int i = 0; i < indices.length; i++) {\n+                       values[i] = ((IntFloatVector) row).get((int) (indices[i] - startCol));\n+        }\n     } else {\n       for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((LongFloatVector) row).get(indices[i] - startCol);\n+               values[i] = ((LongFloatVector) row).get(indices[i] - startCol);\n       }\n     }\n-\n     return values;\n-  }\n+    }\n \n   /**\n    * Set a batch elements values without lock\n@@ -136,18 +140,19 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n-  public void set(long[] indices, float[] values) {\n+\n+    public void set(long[] indices, float[] values) {\n     assert indices.length == values.length;\n     if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((IntFloatVector) row).set((int) (indices[i] - startCol), values[i]);\n-      }\n+        for (int i = 0; i < indices.length; i++) {\n+                       ((IntFloatVector) row).set((int) (indices[i] - startCol), values[i]);\n+        }\n     } else {\n       for (int i = 0; i < indices.length; i++) {\n-        ((LongFloatVector) row).set(indices[i] - startCol, values[i]);\n+               ((LongFloatVector) row).set(indices[i] - startCol, values[i]);\n       }\n     }\n-  }\n+    }\n \n   /**\n    * Add a element value without lock\n@@ -155,9 +160,10 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element plus value\n    */\n-  public void addTo(long index, float value) {\n+\n+    public void addTo(long index, float value) {\n     set(index, get(index) + value);\n-  }\n+    }\n \n   /**\n    * Add a batch elements values without lock\n@@ -165,25 +171,27 @@ public class ServerLongFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n-  public void addTo(long[] indices, float[] values) {\n+\n+    public void addTo(long[] indices, float[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+        set(indices[i], get(indices[i]) + values[i]);\n+    }\n     }\n-  }\n \n   /**\n    * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n    *\n    * @return all element values\n    */\n-  private float[] getValues() {\n+\n+    private float[] getValues() {\n     if (useIntKey) {\n-      return ((IntFloatVector) row).getStorage().getValues();\n+        return ((IntFloatVector) row).getStorage().getValues();\n     } else {\n       return ((LongFloatVector) row).getStorage().getValues();\n     }\n-  }\n+    }\n \n   /**\n    * Get all element indices and values without lock, you must check the storage is sparse first use\n@@ -194,463 +202,439 @@ public class ServerLongFloatRow extends ServerFloatRow {\n   //public ObjectIterator<Long2FloatMap.Entry> getIter() {\n   //  return ((LongFloatVector) row).getStorage().entryIterator();\n   //}\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n-      switch (updateType) {\n+        switch (updateType) {\n         case T_FLOAT_SPARSE_LONGKEY:\n         case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongFloatSparse(buf, op);\n-          break;\n-\n+            updateUseLongFloatSparse(buf, op);\n+            break;\n         case T_LONG_SPARSE_LONGKEY:\n         case T_LONG_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongLongSparse(buf, op);\n-          break;\n-\n+            updateUseLongLongSparse(buf, op);\n+            break;\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongIntSparse(buf, op);\n-          break;\n-\n+            updateUseLongIntSparse(buf, op);\n+            break;\n         case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n-          updateUseIntFloatSparse(buf, op);\n-          break;\n-\n+            updateUseIntFloatSparse(buf, op);\n+            break;\n         case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n-          updateUseIntLongSparse(buf, op);\n-          break;\n-\n+            updateUseIntLongSparse(buf, op);\n+            break;\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n-          updateUseIntIntSparse(buf, op);\n-          break;\n-\n+            updateUseIntIntSparse(buf, op);\n+            break;\n         case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n-          updateUseIntFloatDense(buf, op);\n-          break;\n-\n+            updateUseIntFloatDense(buf, op);\n+            break;\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n-          updateUseIntLongDense(buf, op);\n-          break;\n-\n+            updateUseIntLongDense(buf, op);\n+            break;\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n-          updateUseIntIntDense(buf, op);\n-          break;\n-\n+            updateUseIntIntDense(buf, op);\n+            break;\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+            throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n-      }\n-\n-      updateRowVersion();\n+        }\n+        updateRowVersion();\n     } finally {\n       endWrite();\n     }\n-  }\n+    }\n \n-  private void updateUseLongFloatSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseLongFloatSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           int index = (int) buf.readLong();\n+                           ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   long index = buf.readLong();\n+                   ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, buf.readFloat());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         int index = (int) buf.readLong();\n+                         ((IntFloatVector) row).set(index, buf.readFloat());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, buf.readFloat());\n+                 long index = buf.readLong();\n+                 ((LongFloatVector) row).set(index, buf.readFloat());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           int index = (int) buf.readLong();\n+                           ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   long index = buf.readLong();\n+                   ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, buf.readLong());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         int index = (int) buf.readLong();\n+                         ((IntFloatVector) row).set(index, buf.readLong());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, buf.readLong());\n+                 long index = buf.readLong();\n+                 ((LongFloatVector) row).set(index, buf.readLong());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           int index = (int) buf.readLong();\n+                           ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   long index = buf.readLong();\n+                   ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntFloatVector) row).set(index, buf.readInt());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         int index = (int) buf.readLong();\n+                         ((IntFloatVector) row).set(index, buf.readInt());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongFloatVector) row).set(index, buf.readInt());\n+                 long index = buf.readLong();\n+                 ((LongFloatVector) row).set(index, buf.readInt());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           int index = buf.readInt();\n+                           ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readFloat());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   long index = buf.readInt();\n+                   ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readFloat());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, buf.readFloat());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         int index = buf.readInt();\n+                         ((IntFloatVector) row).set(index, buf.readFloat());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, buf.readFloat());\n+                 long index = buf.readInt();\n+                 ((LongFloatVector) row).set(index, buf.readFloat());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           int index = buf.readInt();\n+                           ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readLong());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   long index = buf.readInt();\n+                   ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readLong());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, buf.readLong());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         int index = buf.readInt();\n+                         ((IntFloatVector) row).set(index, buf.readLong());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, buf.readLong());\n+                 long index = buf.readInt();\n+                 ((LongFloatVector) row).set(index, buf.readLong());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           int index = buf.readInt();\n+                           ((IntFloatVector) row).set(index, ((IntFloatVector) row).get(index) + buf.readInt());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   long index = buf.readInt();\n+                   ((LongFloatVector) row).set(index, ((LongFloatVector) row).get(index) + buf.readInt());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntFloatVector) row).set(index, buf.readInt());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         int index = buf.readInt();\n+                         ((IntFloatVector) row).set(index, buf.readInt());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongFloatVector) row).set(index, buf.readInt());\n+                 long index = buf.readInt();\n+                 ((LongFloatVector) row).set(index, buf.readInt());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readFloat());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readFloat());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readFloat());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, buf.readFloat());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         ((IntFloatVector) row).set(i, buf.readFloat());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, buf.readFloat());\n+                 ((LongFloatVector) row).set(i, buf.readFloat());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readLong());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readLong());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readLong());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, buf.readLong());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         ((IntFloatVector) row).set(i, buf.readLong());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, buf.readLong());\n+                 ((LongFloatVector) row).set(i, buf.readLong());\n         }\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readInt());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           ((IntFloatVector) row).set(i, ((IntFloatVector) row).get(i) + buf.readInt());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   ((LongFloatVector) row).set(i, ((LongFloatVector) row).get(i) + buf.readInt());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntFloatVector) row).set(i, buf.readInt());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         ((IntFloatVector) row).set(i, buf.readInt());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongFloatVector) row).set(i, buf.readInt());\n+                 ((LongFloatVector) row).set(i, buf.readInt());\n         }\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  public int size() {\n+    @Override\n+    public int size() {\n     if (useIntKey) {\n-      return ((IntFloatVector) row).size();\n+        return ((IntFloatVector) row).size();\n     } else {\n       return (int) ((LongFloatVector) row).size();\n     }\n-  }\n+    }\n \n-  public void mergeTo(LongFloatVector mergedRow) {\n+    public void mergeTo(LongFloatVector mergedRow) {\n     startRead();\n     try {\n-      if (isDense()) {\n+        if (isDense()) {\n         float[] values = getValues();\n         for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startCol, values[i]);\n+                           mergedRow.set(i + startCol, values[i]);\n         }\n-      } else {\n-        if (useIntKey) {\n-          ObjectIterator<Int2FloatMap.Entry> iter =\n-              ((IntFloatVector) row).getStorage().entryIterator();\n-          Int2FloatMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getIntKey() + startCol, entry.getFloatValue());\n-          }\n         } else {\n-          ObjectIterator<Long2FloatMap.Entry> iter =\n-              ((LongFloatVector) row).getStorage().entryIterator();\n-          Long2FloatMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getLongKey() + startCol, entry.getFloatValue());\n+          if (useIntKey) {\n+            ObjectIterator<Int2FloatMap.Entry> iter = ((IntFloatVector) row).getStorage().entryIterator();\n+            Int2FloatMap.Entry entry;\n+            while (iter.hasNext()) {\n+                             entry = iter.next();\n+                             mergedRow.set(entry.getIntKey() + startCol, entry.getFloatValue());\n+            }\n+          } else {\n+            ObjectIterator<Long2FloatMap.Entry> iter = ((LongFloatVector) row).getStorage().entryIterator();\n+            Long2FloatMap.Entry entry;\n+            while (iter.hasNext()) {\n+                     entry = iter.next();\n+                     mergedRow.set(entry.getLongKey() + startCol, entry.getFloatValue());\n+            }\n           }\n         }\n-      }\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        float[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          buf.writeFloat(values[i]);\n-        }\n-      } else {\n-        ObjectIterator<Int2FloatMap.Entry> iter =\n-            ((IntFloatVector) row).getStorage().entryIterator();\n-        Int2FloatMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeFloat(entry.getFloatValue());\n+        if (useDenseSerialize()) {\n+                                  float[] values = getValues();\n+                                  for (int i = 0; i < values.length; i++) {\n+                                     buf.writeFloat(values[i]);\n+                                  }\n+        } else {\n+          ObjectIterator<Int2FloatMap.Entry> iter = ((IntFloatVector) row).getStorage().entryIterator();\n+          Int2FloatMap.Entry entry;\n+          while (iter.hasNext()) {\n+                   entry = iter.next();\n+                   buf.writeInt(entry.getIntKey());\n+                   buf.writeFloat(entry.getFloatValue());\n+          }\n         }\n-      }\n     } else {\n-      ObjectIterator<Long2FloatMap.Entry> iter =\n-          ((LongFloatVector) row).getStorage().entryIterator();\n+      ObjectIterator<Long2FloatMap.Entry> iter = ((LongFloatVector) row).getStorage().entryIterator();\n       Long2FloatMap.Entry entry;\n       while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeLong(entry.getLongKey());\n-        buf.writeFloat(entry.getFloatValue());\n+               entry = iter.next();\n+               buf.writeLong(entry.getLongKey());\n+               buf.writeFloat(entry.getFloatValue());\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n-      IntFloatVector IntFloatRow = (IntFloatVector) row;\n-      if (useDenseSerialize()) {\n-        for (int i = 0; i < size; i++) {\n-          IntFloatRow.set(i, buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          IntFloatRow.set(buf.readInt(), buf.readFloat());\n+        IntFloatVector IntFloatRow = (IntFloatVector) row;\n+        if (useDenseSerialize()) {\n+                                  for (int i = 0; i < size; i++) {\n+                                     IntFloatRow.set(i, buf.readFloat());\n+                                  }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   IntFloatRow.set(buf.readInt(), buf.readFloat());\n+          }\n         }\n-      }\n     } else {\n       LongFloatVector longFloatRow = (LongFloatVector) row;\n       for (int i = 0; i < size; i++) {\n-        longFloatRow.set(buf.readLong(), buf.readFloat());\n+               longFloatRow.set(buf.readLong(), buf.readFloat());\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  protected int getRowSpace() {\n+    @Override\n+    protected int getRowSpace() {\n     if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        return size * 4;\n-      } else {\n-        return size * 8;\n-      }\n+        if (useDenseSerialize()) {\n+                                  return size * 4;\n+        } else {\n+          return size * 8;\n+        }\n     } else {\n       return size * 12;\n     }\n-  }\n+    }\n \n-  @Override\n-  public ServerRow clone() {\n+    @Override\n+    public ServerRow clone() {\n     startRead();\n     try {\n-      if (useIntKey) {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntFloatVector) row).clone());\n-      } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongFloatVector) row).clone());\n-      }\n+        if (useIntKey) {\n+        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row).clone());\n+        } else {\n+          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongFloatVector) row).clone());\n+        }\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n+    @Override\n+    public ServerRow adaptiveClone() {\n     startRead();\n     try {\n-      if (useIntKey) {\n+        if (useIntKey) {\n         if (row.isSparse()) {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedFloatVector((int) (endCol - startCol),\n-                  ((IntFloatVector) row).getStorage().getIndices(),\n-                  ((IntFloatVector) row).getStorage().getValues()));\n+                           return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedFloatVector((int) (endCol - startCol), ((IntFloatVector) row).getStorage().getIndices(), ((IntFloatVector) row).getStorage().getValues()));\n         } else {\n-          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              ((IntFloatVector) row));\n+          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntFloatVector) row));\n+        }\n+        } else {\n+          return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedLongKeyFloatVector(endCol - startCol, ((LongFloatVector) row).getStorage().getIndices(), ((LongFloatVector) row).getStorage().getValues()));\n         }\n-      } else {\n-        return new ServerLongFloatRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyFloatVector(endCol - startCol,\n-                ((LongFloatVector) row).getStorage().getIndices(),\n-                ((LongFloatVector) row).getStorage().getValues()));\n-      }\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n   /**\n    * Check the vector contains the index or not\n@@ -658,88 +642,87 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n-  public boolean exist(long index) {\n+\n+    public boolean exist(long index) {\n     if (useIntKey) {\n-      if (row.isSparse()) {\n-        return ((IntFloatVector) row).getStorage().hasKey((int) (index - startCol));\n-      } else {\n-        return ((IntFloatVector) row).getStorage().get((int) (index - startCol)) != 0.0f;\n-      }\n+        if (row.isSparse()) {\n+                       return ((IntFloatVector) row).getStorage().hasKey((int) (index - startCol));\n+        } else {\n+          return ((IntFloatVector) row).getStorage().get((int) (index - startCol)) != 0.0f;\n+        }\n     } else {\n       if (row.isSparse()) {\n-        return ((LongFloatVector) row).getStorage().hasKey(index - startCol);\n+               return ((LongFloatVector) row).getStorage().hasKey(index - startCol);\n       } else {\n         return ((LongFloatVector) row).getStorage().get(index - startCol) != 0.0f;\n       }\n     }\n-  }\n+    }\n \n-  public float initAndGet(long index, InitFunc func) {\n+    public float initAndGet(long index, InitFunc func) {\n     if (exist(index)) {\n-      return get(index);\n+        return get(index);\n     } else {\n       float value = (float) func.action();\n       set(index, value);\n       return value;\n     }\n-  }\n+    }\n \n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(initAndGet(in.readInt(), func));\n-        }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(initAndGet(in.readLong(), func));\n+        if (indexType == IndexType.INT) {\n+                          for (int i = 0; i < indexSize; i++) {\n+                                            out.writeFloat(initAndGet(in.readInt(), func));\n+                          }\n+        } else {\n+          for (int i = 0; i < indexSize; i++) {\n+                   out.writeFloat(initAndGet(in.readLong(), func));\n+          }\n         }\n-      }\n     } else {\n       if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(get(in.readInt()));\n-        }\n+               for (int i = 0; i < indexSize; i++) {\n+                                          out.writeFloat(get(in.readInt()));\n+               }\n       } else {\n         for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(get(in.readLong()));\n+                 out.writeFloat(get(in.readLong()));\n         }\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  public void setSplit(Vector row) {\n+    @Override\n+    public void setSplit(Vector row) {\n     super.setSplit(row);\n-  }\n+    }\n \n-  @Override\n-  public void elemUpdate(FloatElemUpdateFunc func) {\n+    @Override\n+    public void elemUpdate(FloatElemUpdateFunc func) {\n     if (isDense()) {\n-      float[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n+        float[] values = getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                       values[i] = func.update();\n+        }\n     } else {\n       if (useIntKey) {\n-        ObjectIterator<Int2FloatMap.Entry> iter =\n-            ((IntFloatVector) row).getStorage().entryIterator();\n+        ObjectIterator<Int2FloatMap.Entry> iter = ((IntFloatVector) row).getStorage().entryIterator();\n         Int2FloatMap.Entry entry;\n         while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+                         entry = iter.next();\n+                         entry.setValue(func.update());\n         }\n       } else {\n-        ObjectIterator<Long2FloatMap.Entry> iter =\n-            ((LongFloatVector) row).getStorage().entryIterator();\n+        ObjectIterator<Long2FloatMap.Entry> iter = ((LongFloatVector) row).getStorage().entryIterator();\n         Long2FloatMap.Entry entry;\n         while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+                 entry = iter.next();\n+                 entry.setValue(func.update());\n         }\n       }\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 395
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/218/ServerLongFloatRow.java\nindex b225bfe509..b8deb78c4e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/218/ServerLongFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/218/ServerLongFloatRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n",
            "diff_size": 1
        }
    ]
}