{
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "45",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        ResponseStatus status) throws Exception {\n        if (!TranscoderUtils.hasStringFlags(flags)) {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \"\n                + \"id \" + id + \", could not decode.\");\n        }\n        return newDocument(id, expiry, content.toString(CharsetUtil.UTF_8), cas);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/15/StringTranscoder.java\nindex 5bffc727f2..6e91c04b57 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/15/StringTranscoder.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -40,10 +41,11 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n \n     @Override\n     protected StringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                      ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasStringFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \"\n-                + \"id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\n+                \"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \"\n+                    + \"id \" + id + \", could not decode.\");\n         }\n         return newDocument(id, expiry, content.toString(CharsetUtil.UTF_8), cas);\n     }\n@@ -63,7 +65,7 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n \n     @Override\n     public StringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+                                      MutationToken mutationToken) {\n         return StringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/15/StringTranscoder.java\nindex 5bffc727f2..13ef9aaf53 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/15/StringTranscoder.java\n@@ -39,12 +39,11 @@ import com.couchbase.client.java.error.TranscodingException;\n public class StringTranscoder extends AbstractTranscoder<StringDocument, String> {\n \n     @Override\n-    protected StringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected StringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasStringFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \"\n                 + \"id \" + id + \", could not decode.\");\n-        }\n+    }\n         return newDocument(id, expiry, content.toString(CharsetUtil.UTF_8), cas);\n     }\n \n@@ -52,8 +51,7 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n     protected Tuple2<ByteBuf, Integer> doEncode(StringDocument document) throws Exception {\n         return Tuple.create(\n             TranscoderUtils.encodeStringAsUtf8(document.content()),\n-            TranscoderUtils.STRING_COMMON_FLAGS\n-        );\n+            TranscoderUtils.STRING_COMMON_FLAGS);\n     }\n \n     @Override\n@@ -62,8 +60,7 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n     }\n \n     @Override\n-    public StringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public StringDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return StringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -71,4 +68,4 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n     public Class<StringDocument> documentType() {\n         return StringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/15/StringTranscoder.java\nindex 5bffc727f2..17ab7d85e4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/15/StringTranscoder.java\n@@ -36,14 +36,13 @@ import com.couchbase.client.java.error.TranscodingException;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class StringTranscoder extends AbstractTranscoder<StringDocument, String> {\n \n+\n+public class StringTranscoder extends AbstractTranscoder<StringDocument, String> {\n     @Override\n-    protected StringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected StringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasStringFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \"\n-                + \"id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \" + \"id \" + id + \", could not decode.\");\n         }\n         return newDocument(id, expiry, content.toString(CharsetUtil.UTF_8), cas);\n     }\n@@ -62,8 +61,7 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n     }\n \n     @Override\n-    public StringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public StringDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return StringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -71,4 +69,4 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n     public Class<StringDocument> documentType() {\n         return StringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "column": "53",
                    "severity": "warning",
                    "message": "'{' at column 53 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/15/StringTranscoder.java\nindex 5bffc727f2..5075bfea98 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/15/StringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/15/StringTranscoder.java\n@@ -41,34 +41,34 @@ public class StringTranscoder extends AbstractTranscoder<StringDocument, String>\n     @Override\n     protected StringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n-        if (!TranscoderUtils.hasStringFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \"\n-                + \"id \" + id + \", could not decode.\");\n-        }\n-        return newDocument(id, expiry, content.toString(CharsetUtil.UTF_8), cas);\n-    }\n+        if (!TranscoderUtils.hasStringFlags(flags)) { throw\n+        new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-String document for \"\n+             + \"id \" + id + \", could not decode.\");\n+     }\n+     return newDocument(id, expiry, content.toString(CharsetUtil.UTF_8), cas);\n+ }\n \n-    @Override\n-    protected Tuple2<ByteBuf, Integer> doEncode(StringDocument document) throws Exception {\n-        return Tuple.create(\n-            TranscoderUtils.encodeStringAsUtf8(document.content()),\n-            TranscoderUtils.STRING_COMMON_FLAGS\n-        );\n-    }\n+ @Override\n+ protected Tuple2<ByteBuf, Integer> doEncode(StringDocument document) throws Exception {\n+     return Tuple.create(\n+         TranscoderUtils.encodeStringAsUtf8(document.content()),\n+         TranscoderUtils.STRING_COMMON_FLAGS\n+     );\n+ }\n \n-    @Override\n-    public StringDocument newDocument(String id, int expiry, String content, long cas) {\n-        return StringDocument.create(id, expiry, content, cas);\n-    }\n+ @Override\n+ public StringDocument newDocument(String id, int expiry, String content, long cas) {\n+     return StringDocument.create(id, expiry, content, cas);\n+ }\n \n-    @Override\n-    public StringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n-        return StringDocument.create(id, expiry, content, cas, mutationToken);\n-    }\n+ @Override\n+ public StringDocument newDocument(String id, int expiry, String content, long cas,\n+     MutationToken mutationToken) {\n+     return StringDocument.create(id, expiry, content, cas, mutationToken);\n+ }\n \n-    @Override\n-    public Class<StringDocument> documentType() {\n-        return StringDocument.class;\n-    }\n+ @Override\n+ public Class<StringDocument> documentType() {\n+     return StringDocument.class;\n+ }\n }\n",
            "diff_size": 26
        }
    ]
}