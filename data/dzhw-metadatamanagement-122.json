{
    "error_id": "122",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "77",
                "severity": "error",
                "message": "'}' at column 77 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidUniqueInstrumentNumber constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "column": "77",
                    "severity": "error",
                    "message": "'}' at column 77 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/122/ValidUniqueInstrumentNumberValidator.java\nindex 11233e216d..2abc0c2af6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/122/ValidUniqueInstrumentNumberValidator.java\n@@ -17,7 +17,7 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.repository.Instrument\n  */\n public class ValidUniqueInstrumentNumberValidator\n     implements ConstraintValidator<ValidUniqueInstrumentNumber, Instrument> {\n-  \n+\n   @Autowired\n   private InstrumentRepository instrumentRepository;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/122/ValidUniqueInstrumentNumberValidator.java\nindex 11233e216d..b31fd042d8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/122/ValidUniqueInstrumentNumberValidator.java\n@@ -17,21 +17,22 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.repository.Instrument\n  */\n public class ValidUniqueInstrumentNumberValidator\n     implements ConstraintValidator<ValidUniqueInstrumentNumber, Instrument> {\n-  \n+\n   @Autowired\n   private InstrumentRepository instrumentRepository;\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidUniqueInstrumentNumber constraintAnnotation) {}\n+  public void initialize(ValidUniqueInstrumentNumber constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "column": "77",
                    "severity": "error",
                    "message": "'}' at column 77 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/122/ValidUniqueInstrumentNumberValidator.java\nindex 11233e216d..ef33312922 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/122/ValidUniqueInstrumentNumberValidator.java\n@@ -44,7 +44,7 @@ public class ValidUniqueInstrumentNumberValidator\n     List<IdAndVersionProjection> instruments = instrumentRepository\n         .findIdsByNumberAndDataAcquisitionProjectId(instrument.getNumber(),\n             instrument.getDataAcquisitionProjectId());\n-    if (instruments.size() > 1) {\n+if (instruments.size() > 1) {\n       return false;\n     }\n     if (instruments.size() == 1) {\n@@ -52,4 +52,4 @@ public class ValidUniqueInstrumentNumberValidator\n     }\n     return true;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/122/ValidUniqueInstrumentNumberValidator.java\nindex 11233e216d..5784f68a36 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/122/ValidUniqueInstrumentNumberValidator.java\n@@ -1,13 +1,10 @@\n package eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.validation;\n \n import java.util.List;\n-\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.util.StringUtils;\n-\n import eu.dzhw.fdz.metadatamanagement.common.domain.projections.IdAndVersionProjection;\n import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.Instrument;\n import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.repository.InstrumentRepository;\n@@ -15,19 +12,23 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.repository.Instrument\n /**\n  * Validates the uniqueness of number.\n  */\n-public class ValidUniqueInstrumentNumberValidator\n-    implements ConstraintValidator<ValidUniqueInstrumentNumber, Instrument> {\n-  \n-  @Autowired\n-  private InstrumentRepository instrumentRepository;\n+\n+\n+public class ValidUniqueInstrumentNumberValidator implements ConstraintValidator<ValidUniqueInstrumentNumber, Instrument> {\n+\n+    @Autowired\n+    private InstrumentRepository instrumentRepository;\n \n   /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n-  @Override\n-  public void initialize(ValidUniqueInstrumentNumber constraintAnnotation) {}\n+\n+    @Override\n+    public void initialize(ValidUniqueInstrumentNumber constraintAnnotation) {\n+\n+    }\n \n   /*\n    * (non-Javadoc)\n@@ -35,21 +36,24 @@ public class ValidUniqueInstrumentNumberValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n-  @Override\n-  public boolean isValid(Instrument instrument, ConstraintValidatorContext context) {\n+\n+\n+    @Override\n+    public boolean isValid(Instrument instrument,\n+        ConstraintValidatorContext context) {\n     if (instrument.getNumber() == null\n         || StringUtils.isEmpty(instrument.getDataAcquisitionProjectId())) {\n-      return true;\n+        return true;\n     }\n-    List<IdAndVersionProjection> instruments = instrumentRepository\n-        .findIdsByNumberAndDataAcquisitionProjectId(instrument.getNumber(),\n-            instrument.getDataAcquisitionProjectId());\n+    List<IdAndVersionProjection> instruments = instrumentRepository.findIdsByNumberAndDataAcquisitionProjectId(instrument.getNumber(), instrument.getDataAcquisitionProjectId());\n     if (instruments.size() > 1) {\n-      return false;\n+        return false;\n     }\n     if (instruments.size() == 1) {\n-      return instruments.get(0).getId().equals(instrument.getId());\n+        return instruments.get(0).getId()\n+                                 .equals(instrument.getId());\n     }\n+\n     return true;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "column": "77",
                    "severity": "error",
                    "message": "'}' at column 77 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/122/ValidUniqueInstrumentNumberValidator.java\nindex 11233e216d..2abc0c2af6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/122/ValidUniqueInstrumentNumberValidator.java\n@@ -17,7 +17,7 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.repository.Instrument\n  */\n public class ValidUniqueInstrumentNumberValidator\n     implements ConstraintValidator<ValidUniqueInstrumentNumber, Instrument> {\n-  \n+\n   @Autowired\n   private InstrumentRepository instrumentRepository;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "column": "78",
                    "severity": "error",
                    "message": "'}' at column 78 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/122/ValidUniqueInstrumentNumberValidator.java\nindex 11233e216d..8d34e13459 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/122/ValidUniqueInstrumentNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/122/ValidUniqueInstrumentNumberValidator.java\n@@ -17,7 +17,7 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.repository.Instrument\n  */\n public class ValidUniqueInstrumentNumberValidator\n     implements ConstraintValidator<ValidUniqueInstrumentNumber, Instrument> {\n-  \n+\n   @Autowired\n   private InstrumentRepository instrumentRepository;\n \n@@ -27,9 +27,7 @@ public class ValidUniqueInstrumentNumberValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidUniqueInstrumentNumber constraintAnnotation) {}\n-\n-  /*\n+  public void initialize(ValidUniqueInstrumentNumber constraintAnnotation) { }/*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n",
            "diff_size": 4
        }
    ]
}