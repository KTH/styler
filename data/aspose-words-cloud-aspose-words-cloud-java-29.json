{
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "141",
                "column": "64",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n    return\n        Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n        Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/29/CsvDataLoadOptions.java\nindex 90cdf521cb..c42efabdd4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/29/CsvDataLoadOptions.java\n@@ -138,7 +138,7 @@ public class CsvDataLoadOptions {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n+    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions) o;\n     return\n         Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n         Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/29/CsvDataLoadOptions.java\nindex 90cdf521cb..73a861ba81 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/29/CsvDataLoadOptions.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,103 +50,108 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Represents options for parsing CSV data.\")\n public class CsvDataLoadOptions {\n-    @SerializedName(\"CommentChar\")\n-    private String commentChar = null;\n+  @SerializedName(\"CommentChar\")\n+  private String commentChar = null;\n \n-    @SerializedName(\"Delimiter\")\n-    private String delimiter = null;\n+  @SerializedName(\"Delimiter\")\n+  private String delimiter = null;\n \n-    @SerializedName(\"HasHeaders\")\n-    private Boolean hasHeaders = null;\n+  @SerializedName(\"HasHeaders\")\n+  private Boolean hasHeaders = null;\n \n-    @SerializedName(\"QuoteChar\")\n-    private String quoteChar = null;\n-    public CsvDataLoadOptions commentChar(String commentChar) {\n-        this.commentChar = commentChar;\n-        return this;\n-    }\n+  @SerializedName(\"QuoteChar\")\n+  private String quoteChar = null;\n \n-    /**\n-     * Gets or sets the character that is used to comment lines of CSV data.\n-    * @return commentChar\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the character that is used to comment lines of CSV data.\")\n-    public String getCommentChar() {\n-        return commentChar;\n-    }\n+  public CsvDataLoadOptions commentChar(String commentChar) {\n+    this.commentChar = commentChar;\n+    return this;\n+  }\n \n-    public void setCommentChar(String commentChar) {\n-        this.commentChar = commentChar;\n-    }\n+  /**\n+   * Gets or sets the character that is used to comment lines of CSV data.\n+   *\n+   * @return commentChar\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the character that is used to comment lines of CSV data.\")\n+  public String getCommentChar() {\n+    return commentChar;\n+  }\n \n-    public CsvDataLoadOptions delimiter(String delimiter) {\n-        this.delimiter = delimiter;\n-        return this;\n-    }\n+  public void setCommentChar(String commentChar) {\n+    this.commentChar = commentChar;\n+  }\n \n-    /**\n-     * Gets or sets the character to be used as a column delimiter.\n-    * @return delimiter\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the character to be used as a column delimiter.\")\n-    public String getDelimiter() {\n-        return delimiter;\n-    }\n+  public CsvDataLoadOptions delimiter(String delimiter) {\n+    this.delimiter = delimiter;\n+    return this;\n+  }\n \n-    public void setDelimiter(String delimiter) {\n-        this.delimiter = delimiter;\n-    }\n+  /**\n+   * Gets or sets the character to be used as a column delimiter.\n+   *\n+   * @return delimiter\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the character to be used as a column delimiter.\")\n+  public String getDelimiter() {\n+    return delimiter;\n+  }\n \n-    public CsvDataLoadOptions hasHeaders(Boolean hasHeaders) {\n-        this.hasHeaders = hasHeaders;\n-        return this;\n-    }\n+  public void setDelimiter(String delimiter) {\n+    this.delimiter = delimiter;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether the first record of CSV data contains column names.\n-    * @return hasHeaders\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether the first record of CSV data contains column names.\")\n-    public Boolean getHasHeaders() {\n-        return hasHeaders;\n-    }\n+  public CsvDataLoadOptions hasHeaders(Boolean hasHeaders) {\n+    this.hasHeaders = hasHeaders;\n+    return this;\n+  }\n \n-    public void setHasHeaders(Boolean hasHeaders) {\n-        this.hasHeaders = hasHeaders;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether the first record of CSV data contains column names.\n+   *\n+   * @return hasHeaders\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether the first record of CSV data contains column names.\")\n+  public Boolean getHasHeaders() {\n+    return hasHeaders;\n+  }\n \n-    public CsvDataLoadOptions quoteChar(String quoteChar) {\n-        this.quoteChar = quoteChar;\n-        return this;\n-    }\n+  public void setHasHeaders(Boolean hasHeaders) {\n+    this.hasHeaders = hasHeaders;\n+  }\n \n-    /**\n-     * Gets or sets the character that is used to quote field values.\n-    * @return quoteChar\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the character that is used to quote field values.\")\n-    public String getQuoteChar() {\n-        return quoteChar;\n-    }\n+  public CsvDataLoadOptions quoteChar(String quoteChar) {\n+    this.quoteChar = quoteChar;\n+    return this;\n+  }\n \n-    public void setQuoteChar(String quoteChar) {\n-        this.quoteChar = quoteChar;\n-    }\n+  /**\n+   * Gets or sets the character that is used to quote field values.\n+   *\n+   * @return quoteChar\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the character that is used to quote field values.\")\n+  public String getQuoteChar() {\n+    return quoteChar;\n+  }\n+\n+  public void setQuoteChar(String quoteChar) {\n+    this.quoteChar = quoteChar;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions) o;\n     return\n         Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n-        Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&\n-        Objects.equals(this.hasHeaders, csvDataLoadOptions.hasHeaders) &&\n-        Objects.equals(this.quoteChar, csvDataLoadOptions.quoteChar);\n+            Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&\n+            Objects.equals(this.hasHeaders, csvDataLoadOptions.hasHeaders) &&\n+            Objects.equals(this.quoteChar, csvDataLoadOptions.quoteChar);\n   }\n \n   @Override\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "143",
                    "column": "60",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/29/CsvDataLoadOptions.java\nindex 90cdf521cb..de5b2023a6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/29/CsvDataLoadOptions.java\n@@ -58,7 +58,8 @@ public class CsvDataLoadOptions {\n \n     @SerializedName(\"QuoteChar\")\n     private String quoteChar = null;\n-    public CsvDataLoadOptions commentChar(String commentChar) {\n+\n+public CsvDataLoadOptions commentChar(String commentChar) {\n         this.commentChar = commentChar;\n         return this;\n     }\n@@ -134,13 +135,13 @@ public class CsvDataLoadOptions {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n-    return\n-        Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n+\n+CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n+    return Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n         Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&\n         Objects.equals(this.hasHeaders, csvDataLoadOptions.hasHeaders) &&\n         Objects.equals(this.quoteChar, csvDataLoadOptions.quoteChar);\n@@ -173,4 +174,4 @@ public class CsvDataLoadOptions {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/29/CsvDataLoadOptions.java\nindex 90cdf521cb..3809f2b51c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/29/CsvDataLoadOptions.java\n@@ -45,7 +45,10 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Represents options for parsing CSV data.\n  */\n+\n+\n @ApiModel(description = \"Represents options for parsing CSV data.\")\n+\n public class CsvDataLoadOptions {\n     @SerializedName(\"CommentChar\")\n     private String commentChar = null;\n@@ -58,101 +61,122 @@ public class CsvDataLoadOptions {\n \n     @SerializedName(\"QuoteChar\")\n     private String quoteChar = null;\n+\n     public CsvDataLoadOptions commentChar(String commentChar) {\n-        this.commentChar = commentChar;\n-        return this;\n+    this.commentChar = commentChar;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the character that is used to comment lines of CSV data.\n     * @return commentChar\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the character that is used to comment lines of CSV data.\")\n     public String getCommentChar() {\n-        return commentChar;\n+    return commentChar;\n     }\n \n+\n     public void setCommentChar(String commentChar) {\n-        this.commentChar = commentChar;\n+    this.commentChar = commentChar;\n     }\n \n+\n     public CsvDataLoadOptions delimiter(String delimiter) {\n-        this.delimiter = delimiter;\n-        return this;\n+    this.delimiter = delimiter;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the character to be used as a column delimiter.\n     * @return delimiter\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the character to be used as a column delimiter.\")\n     public String getDelimiter() {\n-        return delimiter;\n+    return delimiter;\n     }\n \n+\n     public void setDelimiter(String delimiter) {\n-        this.delimiter = delimiter;\n+    this.delimiter = delimiter;\n     }\n \n+\n     public CsvDataLoadOptions hasHeaders(Boolean hasHeaders) {\n-        this.hasHeaders = hasHeaders;\n-        return this;\n+    this.hasHeaders = hasHeaders;\n+    return this;\n     }\n \n     /**\n      * Gets or sets a value indicating whether the first record of CSV data contains column names.\n     * @return hasHeaders\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether the first record of CSV data contains column names.\")\n     public Boolean getHasHeaders() {\n-        return hasHeaders;\n+    return hasHeaders;\n     }\n \n+\n     public void setHasHeaders(Boolean hasHeaders) {\n-        this.hasHeaders = hasHeaders;\n+    this.hasHeaders = hasHeaders;\n     }\n \n+\n     public CsvDataLoadOptions quoteChar(String quoteChar) {\n-        this.quoteChar = quoteChar;\n-        return this;\n+    this.quoteChar = quoteChar;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the character that is used to quote field values.\n     * @return quoteChar\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the character that is used to quote field values.\")\n     public String getQuoteChar() {\n-        return quoteChar;\n+    return quoteChar;\n     }\n \n+\n     public void setQuoteChar(String quoteChar) {\n-        this.quoteChar = quoteChar;\n+    this.quoteChar = quoteChar;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n-    return\n-        Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n+\n+        CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions) o;\n+        return Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n         Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&\n-        Objects.equals(this.hasHeaders, csvDataLoadOptions.hasHeaders) &&\n-        Objects.equals(this.quoteChar, csvDataLoadOptions.quoteChar);\n-  }\n+            Objects.equals(this.hasHeaders, csvDataLoadOptions.hasHeaders) &&\n+            Objects.equals(this.quoteChar, csvDataLoadOptions.quoteChar);\n+    }\n \n-  @Override\n-  public int hashCode() {\n+\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(commentChar, delimiter, hasHeaders, quoteChar);\n-  }\n+    }\n+\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class CsvDataLoadOptions {\\n\");\n     sb.append(\"    commentChar: \").append(toIndentedString(commentChar)).append(\"\\n\");\n@@ -161,16 +185,19 @@ public class CsvDataLoadOptions {\n     sb.append(\"    quoteChar: \").append(toIndentedString(quoteChar)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/29/CsvDataLoadOptions.java\nindex 90cdf521cb..c42efabdd4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/29/CsvDataLoadOptions.java\n@@ -138,7 +138,7 @@ public class CsvDataLoadOptions {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n+    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions) o;\n     return\n         Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n         Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/29/CsvDataLoadOptions.java\nindex 90cdf521cb..3e7923bb4c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/29/CsvDataLoadOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/29/CsvDataLoadOptions.java\n@@ -138,7 +138,8 @@ public class CsvDataLoadOptions {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions)o;\n+    CsvDataLoadOptions csvDataLoadOptions = (CsvDataLoadOptions\n+) o;\n     return\n         Objects.equals(this.commentChar, csvDataLoadOptions.commentChar) &&\n         Objects.equals(this.delimiter, csvDataLoadOptions.delimiter) &&\n",
            "diff_size": 2
        }
    ]
}