{
    "error_id": "143",
    "information": {
        "errors": [
            {
                "line": "154",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 11, expected level should be 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                throw new ApiException(\"Server Error, no content\");\n            }\n           throw new ApiException(restException);\n        }\n\n        return Page.fromJson(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/143/ReservationReader.java\nindex f3947f87c3..5280cb2795 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/143/ReservationReader.java\n@@ -151,7 +151,7 @@ public class ReservationReader extends Reader<Reservation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/143/ReservationReader.java\nindex f3947f87c3..5e10db5d21 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/143/ReservationReader.java\n@@ -1,8 +1,8 @@\n /**\n  * This code was generated by\n  * \\ / _    _  _|   _  _\n- *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n- *       /       /\n+ * | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n+ * /       /\n  */\n \n package com.twilio.rest.taskrouter.v1.workspace.worker;\n@@ -151,7 +151,7 @@ public class ReservationReader extends Reader<Reservation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/143/ReservationReader.java\nindex f3947f87c3..bea13ed242 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/143/ReservationReader.java\n@@ -32,6 +32,8 @@ public class ReservationReader extends Reader<Reservation> {\n      * @param pathWorkerSid The SID of the reserved Worker resource with the\n      *                      WorkerReservation resources to read\n      */\n+\n+\n     public ReservationReader(final String pathWorkspaceSid,\n                              final String pathWorkerSid) {\n         this.pathWorkspaceSid = pathWorkspaceSid;\n@@ -47,6 +49,8 @@ public class ReservationReader extends Reader<Reservation> {\n      *                          a specified ReservationStatus\n      * @return this\n      */\n+\n+\n     public ReservationReader setReservationStatus(final Reservation.Status reservationStatus) {\n         this.reservationStatus = reservationStatus;\n         return this;\n@@ -58,6 +62,8 @@ public class ReservationReader extends Reader<Reservation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Reservation ResourceSet\n      */\n+\n+\n     @Override\n     public ResourceSet<Reservation> read(final TwilioRestClient client) {\n         return new ResourceSet<>(this, client, firstPage(client));\n@@ -69,6 +75,8 @@ public class ReservationReader extends Reader<Reservation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Reservation ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n     public Page<Reservation> firstPage(final TwilioRestClient client) {\n@@ -76,7 +84,7 @@ public class ReservationReader extends Reader<Reservation> {\n             HttpMethod.GET,\n             Domains.TASKROUTER.toString(),\n             \"/v1/Workspaces/\" + this.pathWorkspaceSid + \"/Workers/\" + this.pathWorkerSid + \"/Reservations\"\n-        );\n+                          );\n \n         addQueryParams(request);\n         return pageForRequest(client, request);\n@@ -89,14 +97,13 @@ public class ReservationReader extends Reader<Reservation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Reservation ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n-    public Page<Reservation> getPage(final String targetUrl, final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            targetUrl\n-        );\n-\n+    public Page<Reservation> getPage(final String targetUrl,\n+                                     final TwilioRestClient client) {\n+        Request request = new Request(HttpMethod.GET, targetUrl);\n         return pageForRequest(client, request);\n     }\n \n@@ -107,13 +114,12 @@ public class ReservationReader extends Reader<Reservation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Next Page\n      */\n+\n+\n     @Override\n     public Page<Reservation> nextPage(final Page<Reservation> page,\n                                       final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getNextPageUrl(Domains.TASKROUTER.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getNextPageUrl(Domains.TASKROUTER.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -124,13 +130,12 @@ public class ReservationReader extends Reader<Reservation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Previous Page\n      */\n+\n+\n     @Override\n     public Page<Reservation> previousPage(final Page<Reservation> page,\n                                           final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getPreviousPageUrl(Domains.TASKROUTER.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getPreviousPageUrl(Domains.TASKROUTER.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -141,9 +146,11 @@ public class ReservationReader extends Reader<Reservation> {\n      * @param request Request to generate a page for\n      * @return Page for the Request\n      */\n-    private Page<Reservation> pageForRequest(final TwilioRestClient client, final Request request) {\n-        Response response = client.request(request);\n \n+\n+    private Page<Reservation> pageForRequest(final TwilioRestClient client,\n+                                             final Request request) {\n+        Response response = client.request(request);\n         if (response == null) {\n             throw new ApiConnectionException(\"Reservation read failed: Unable to connect to server\");\n         } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {\n@@ -151,7 +158,8 @@ public class ReservationReader extends Reader<Reservation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n@@ -159,7 +167,7 @@ public class ReservationReader extends Reader<Reservation> {\n             response.getContent(),\n             Reservation.class,\n             client.getObjectMapper()\n-        );\n+               );\n     }\n \n     /**\n@@ -167,6 +175,8 @@ public class ReservationReader extends Reader<Reservation> {\n      *\n      * @param request Request to add query string arguments to\n      */\n+\n+\n     private void addQueryParams(final Request request) {\n         if (reservationStatus != null) {\n             request.addQueryParam(\"ReservationStatus\", reservationStatus.toString());\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/143/ReservationReader.java\nindex f3947f87c3..5280cb2795 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/143/ReservationReader.java\n@@ -151,7 +151,7 @@ public class ReservationReader extends Reader<Reservation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/143/ReservationReader.java\nindex f3947f87c3..4eeb9de0d4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/143/ReservationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/143/ReservationReader.java\n@@ -151,7 +151,8 @@ public class ReservationReader extends Reader<Reservation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 2
        }
    ]
}