{
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "61",
                "severity": "error",
                "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        } catch (InterruptedException e) {\n            //don't care\n            e.printStackTrace();\n        }\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/7/MPDStandAloneMonitorIT.java\nindex 3171b2ba70..25a24f8aed 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/7/MPDStandAloneMonitorIT.java\n@@ -58,7 +58,7 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n             Thread.sleep(MONITOR_DELAY * multiplier);\n         } catch (InterruptedException e) {\n             //don't care\n-            e.printStackTrace();\n+        e .printStackTrace();\n         }\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/naturalize/7/MPDStandAloneMonitorIT.java\nindex 3171b2ba70..bfe124a520 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/naturalize/7/MPDStandAloneMonitorIT.java\n@@ -215,9 +215,7 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n                     break;\n             }\n         });\n-\n-\n-        success = false;\n+success = false;\n         loadSeveralSongs();\n         player.play();\n         delay(2);\n@@ -292,4 +290,4 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n         playlist.addSong(MPDSongs.getSongs().get(8));\n         playlist.addSong(MPDSongs.getSongs().get(9));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/7/MPDStandAloneMonitorIT.java\nindex 3171b2ba70..31514c7433 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/7/MPDStandAloneMonitorIT.java\n@@ -11,7 +11,6 @@ import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n-\n import java.util.ArrayList;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -21,8 +20,8 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     /**\n      * Delay for various monitor actions\n      */\n-    private static final int MONITOR_DELAY = 1500;\n \n+    private static final int MONITOR_DELAY = 1500;\n     private Player player;\n     private Playlist playlist;\n     private Admin admin;\n@@ -34,10 +33,11 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n         this.playlist = getMpd().getPlaylist();\n         this.admin = getMpd().getAdmin();\n         this.monitor = getMpd().getMonitor();\n-\n         playlist.clearPlaylist();\n         player.stop();\n+\n         MPDOutput output = new ArrayList<>(admin.getOutputs()).get(0);\n+\n         admin.enableOutput(output);\n         monitor.start();\n         delay();\n@@ -67,82 +67,67 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     @Test\n     public void testAddSong() {\n         success = false;\n-\n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case SONG_ADDED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n-\n+        monitor.addPlaylistChangeListener(event-> {\n+                                              switch (event.getEvent()) {\n+                                                  case SONG_ADDED:\n+                                                      success = true;\n+                                                      break;\n+                                              }\n+                                          });\n         playlist.addSong(MPDSongs.getSongs().get(0));\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testPlaylistChanged() {\n         success = false;\n-\n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case PLAYLIST_CHANGED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n-\n+        monitor.addPlaylistChangeListener(event-> {\n+                                              switch (event.getEvent()) {\n+                                                  case PLAYLIST_CHANGED:\n+                                                      success = true;\n+                                                      break;\n+                                              }\n+                                          });\n         playlist.addSong(MPDSongs.getSongs().get(0));\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testRemoveSong() {\n         success = false;\n-\n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case SONG_DELETED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n+        monitor.addPlaylistChangeListener(event-> {\n+                                              switch (event.getEvent()) {\n+                                                  case SONG_DELETED:\n+                                                      success = true;\n+                                                      break;\n+                                              }\n+                                          });\n \n         MPDSong song = MPDSongs.getSongs().get(0);\n \n         playlist.addSong(song);\n         delay(2);\n         playlist.removeSong(playlist.getSongList().get(0));\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testSongChanged() {\n         success = false;\n-\n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case SONG_CHANGED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n+        monitor.addPlaylistChangeListener(event-> {\n+                                              switch (event.getEvent()) {\n+                                                  case SONG_CHANGED:\n+                                                      success = true;\n+                                                      break;\n+                                              }\n+                                          });\n         playlist.addSong(MPDSongs.getSongs().get(0));\n         playlist.addSong(MPDSongs.getSongs().get(1));\n-\n         player.play();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n@@ -160,87 +145,68 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     @Test\n     public void testPlayerStarted() {\n         success = false;\n-\n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_STARTED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n-\n+        monitor.addPlayerChangeListener(event-> {\n+                                            switch (event.getStatus()) {\n+                                                case PLAYER_STARTED:\n+                                                    success = true;\n+                                                    break;\n+                                            }\n+                                        });\n         player.stop();\n         delay();\n-\n         success = false;\n         loadSeveralSongs();\n         player.play();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testPlayerStopped() {\n         success = false;\n-\n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_STOPPED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n-\n+        monitor.addPlayerChangeListener(event-> {\n+                                            switch (event.getStatus()) {\n+                                                case PLAYER_STOPPED:\n+                                                    success = true;\n+                                                    break;\n+                                            }\n+                                        });\n         success = false;\n         loadSeveralSongs();\n         player.play();\n         delay(5);\n         player.stop();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testPlayerPaused() {\n         success = false;\n-\n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_PAUSED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n-\n-\n+        monitor.addPlayerChangeListener(event-> {\n+                                            switch (event.getStatus()) {\n+                                                case PLAYER_PAUSED:\n+                                                    success = true;\n+                                                    break;\n+                                            }\n+                                        });\n         success = false;\n         loadSeveralSongs();\n         player.play();\n         delay(2);\n         player.pause();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testVolumeChanged() {\n         success = false;\n-\n         player.setVolume(0);\n-\n         delay(2);\n-\n-        monitor.addVolumeChangeListener(event -> success = true);\n-\n+        monitor.addVolumeChangeListener(event->success = true);\n         loadSeveralSongs();\n         player.play();\n-\n         player.setVolume(5);\n         waitForSuccess();\n         Assert.assertTrue(success);\n@@ -249,32 +215,30 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     @Test\n     public void testPlayerUnPaused() {\n         success = false;\n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_UNPAUSED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n+        monitor.addPlayerChangeListener(event-> {\n+                                            switch (event.getStatus()) {\n+                                                case PLAYER_UNPAUSED:\n+                                                    success = true;\n+                                                    break;\n+                                            }\n+                                        });\n         success = false;\n         loadSeveralSongs();\n         player.play();\n         player.pause();\n         delay();\n         player.pause();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testOutputChanged() {\n         success = false;\n-\n-        monitor.addOutputChangeListener(event -> success = true);\n+        monitor.addOutputChangeListener(event->success = true);\n \n         MPDOutput output = new ArrayList<>(admin.getOutputs()).get(0);\n+\n         admin.disableOutput(output);\n         waitForSuccess();\n         Assert.assertTrue(success);\n@@ -292,4 +256,4 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n         playlist.addSong(MPDSongs.getSongs().get(8));\n         playlist.addSong(MPDSongs.getSongs().get(9));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 103
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "column": "34",
                    "severity": "error",
                    "message": "'}' at column 34 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/7/MPDStandAloneMonitorIT.java\nindex 3171b2ba70..de62b0d632 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/7/MPDStandAloneMonitorIT.java\n@@ -58,238 +58,236 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n             Thread.sleep(MONITOR_DELAY * multiplier);\n         } catch (InterruptedException e) {\n             //don't care\n-            e.printStackTrace();\n-        }\n-    }\n+                e\n+            .printStackTrace( ) ;}}private boolean success;\n \n-    private boolean success;\n+            @Test\n+            public void testAddSong() {\n+                success = false;\n \n-    @Test\n-    public void testAddSong() {\n-        success = false;\n+                monitor.addPlaylistChangeListener(event -> {\n+                    switch (event.getEvent()) {\n+                        case SONG_ADDED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n \n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case SONG_ADDED:\n-                    success = true;\n-                    break;\n-            }\n-        });\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n \n-        playlist.addSong(MPDSongs.getSongs().get(0));\n+                waitForSuccess();\n \n-        waitForSuccess();\n-\n-        Assert.assertTrue(success);\n-    }\n-\n-    @Test\n-    public void testPlaylistChanged() {\n-        success = false;\n-\n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case PLAYLIST_CHANGED:\n-                    success = true;\n-                    break;\n+                Assert.assertTrue(success);\n             }\n-        });\n \n-        playlist.addSong(MPDSongs.getSongs().get(0));\n+            @Test\n+            public void testPlaylistChanged() {\n+                success = false;\n \n-        waitForSuccess();\n+                monitor.addPlaylistChangeListener(event -> {\n+                    switch (event.getEvent()) {\n+                        case PLAYLIST_CHANGED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n \n-        Assert.assertTrue(success);\n-    }\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n \n-    @Test\n-    public void testRemoveSong() {\n-        success = false;\n+                waitForSuccess();\n \n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case SONG_DELETED:\n-                    success = true;\n-                    break;\n+                Assert.assertTrue(success);\n             }\n-        });\n \n-        MPDSong song = MPDSongs.getSongs().get(0);\n+            @Test\n+            public void testRemoveSong() {\n+                success = false;\n \n-        playlist.addSong(song);\n-        delay(2);\n-        playlist.removeSong(playlist.getSongList().get(0));\n+                monitor.addPlaylistChangeListener(event -> {\n+                    switch (event.getEvent()) {\n+                        case SONG_DELETED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n \n-        waitForSuccess();\n+                MPDSong song = MPDSongs.getSongs().get(0);\n \n-        Assert.assertTrue(success);\n-    }\n+                playlist.addSong(song);\n+                delay(2);\n+                playlist.removeSong(playlist.getSongList().get(0));\n \n-    @Test\n-    public void testSongChanged() {\n-        success = false;\n+                waitForSuccess();\n \n-        monitor.addPlaylistChangeListener(event -> {\n-            switch (event.getEvent()) {\n-                case SONG_CHANGED:\n-                    success = true;\n-                    break;\n+                Assert.assertTrue(success);\n             }\n-        });\n-        playlist.addSong(MPDSongs.getSongs().get(0));\n-        playlist.addSong(MPDSongs.getSongs().get(1));\n \n-        player.play();\n+            @Test\n+            public void testSongChanged() {\n+                success = false;\n \n-        waitForSuccess();\n+                monitor.addPlaylistChangeListener(event -> {\n+                    switch (event.getEvent()) {\n+                        case SONG_CHANGED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n+                playlist.addSong(MPDSongs.getSongs().get(1));\n \n-        Assert.assertTrue(success);\n-    }\n+                player.play();\n \n-    private void waitForSuccess() {\n-        int count = 0;\n-        while (!success && count++ < 100) {\n-            try {\n-                Thread.sleep(100);\n-            } catch (InterruptedException ex) {\n-                Logger.getLogger(MPDStandAloneMonitorIT.class.getName()).log(Level.SEVERE, null, ex);\n-            }\n-        }\n-    }\n+                waitForSuccess();\n \n-    @Test\n-    public void testPlayerStarted() {\n-        success = false;\n+                Assert.assertTrue(success);\n+            }\n \n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_STARTED:\n-                    success = true;\n-                    break;\n+            private void waitForSuccess() {\n+                int count = 0;\n+                while (!success && count++ < 100) {\n+                    try {\n+                        Thread.sleep(100);\n+                    } catch (InterruptedException ex) {\n+                        Logger.getLogger(MPDStandAloneMonitorIT.class.getName()).log(Level.SEVERE, null, ex);\n+                    }\n+                }\n             }\n-        });\n \n-        player.stop();\n-        delay();\n+            @Test\n+            public void testPlayerStarted() {\n+                success = false;\n \n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n+                monitor.addPlayerChangeListener(event -> {\n+                    switch (event.getStatus()) {\n+                        case PLAYER_STARTED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n \n-        waitForSuccess();\n+                player.stop();\n+                delay();\n \n-        Assert.assertTrue(success);\n-    }\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n \n-    @Test\n-    public void testPlayerStopped() {\n-        success = false;\n+                waitForSuccess();\n \n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_STOPPED:\n-                    success = true;\n-                    break;\n+                Assert.assertTrue(success);\n             }\n-        });\n \n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n-        delay(5);\n-        player.stop();\n+            @Test\n+            public void testPlayerStopped() {\n+                success = false;\n \n-        waitForSuccess();\n+                monitor.addPlayerChangeListener(event -> {\n+                    switch (event.getStatus()) {\n+                        case PLAYER_STOPPED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n \n-        Assert.assertTrue(success);\n-    }\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n+                delay(5);\n+                player.stop();\n \n-    @Test\n-    public void testPlayerPaused() {\n-        success = false;\n+                waitForSuccess();\n \n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_PAUSED:\n-                    success = true;\n-                    break;\n+                Assert.assertTrue(success);\n             }\n-        });\n \n+            @Test\n+            public void testPlayerPaused() {\n+                success = false;\n \n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n-        delay(2);\n-        player.pause();\n+                monitor.addPlayerChangeListener(event -> {\n+                    switch (event.getStatus()) {\n+                        case PLAYER_PAUSED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n \n-        waitForSuccess();\n \n-        Assert.assertTrue(success);\n-    }\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n+                delay(2);\n+                player.pause();\n+\n+                waitForSuccess();\n \n-    @Test\n-    public void testVolumeChanged() {\n-        success = false;\n+                Assert.assertTrue(success);\n+            }\n \n-        player.setVolume(0);\n+            @Test\n+            public void testVolumeChanged() {\n+                success = false;\n \n-        delay(2);\n+                player.setVolume(0);\n \n-        monitor.addVolumeChangeListener(event -> success = true);\n+                delay(2);\n \n-        loadSeveralSongs();\n-        player.play();\n+                monitor.addVolumeChangeListener(event -> success = true);\n \n-        player.setVolume(5);\n-        waitForSuccess();\n-        Assert.assertTrue(success);\n-    }\n+                loadSeveralSongs();\n+                player.play();\n \n-    @Test\n-    public void testPlayerUnPaused() {\n-        success = false;\n-        monitor.addPlayerChangeListener(event -> {\n-            switch (event.getStatus()) {\n-                case PLAYER_UNPAUSED:\n-                    success = true;\n-                    break;\n+                player.setVolume(5);\n+                waitForSuccess();\n+                Assert.assertTrue(success);\n             }\n-        });\n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n-        player.pause();\n-        delay();\n-        player.pause();\n-\n-        waitForSuccess();\n \n-        Assert.assertTrue(success);\n-    }\n+            @Test\n+            public void testPlayerUnPaused() {\n+                success = false;\n+                monitor.addPlayerChangeListener(event -> {\n+                    switch (event.getStatus()) {\n+                        case PLAYER_UNPAUSED:\n+                            success = true;\n+                            break;\n+                    }\n+                });\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n+                player.pause();\n+                delay();\n+                player.pause();\n+\n+                waitForSuccess();\n+\n+                Assert.assertTrue(success);\n+            }\n \n-    @Test\n-    public void testOutputChanged() {\n-        success = false;\n+            @Test\n+            public void testOutputChanged() {\n+                success = false;\n \n-        monitor.addOutputChangeListener(event -> success = true);\n+                monitor.addOutputChangeListener(event -> success = true);\n \n-        MPDOutput output = new ArrayList<>(admin.getOutputs()).get(0);\n-        admin.disableOutput(output);\n-        waitForSuccess();\n-        Assert.assertTrue(success);\n-    }\n+                MPDOutput output = new ArrayList<>(admin.getOutputs()).get(0);\n+                admin.disableOutput(output);\n+                waitForSuccess();\n+                Assert.assertTrue(success);\n+            }\n \n-    private void loadSeveralSongs() {\n-        playlist.addSong(MPDSongs.getSongs().get(0));\n-        playlist.addSong(MPDSongs.getSongs().get(1));\n-        playlist.addSong(MPDSongs.getSongs().get(2));\n-        playlist.addSong(MPDSongs.getSongs().get(3));\n-        playlist.addSong(MPDSongs.getSongs().get(4));\n-        playlist.addSong(MPDSongs.getSongs().get(5));\n-        playlist.addSong(MPDSongs.getSongs().get(6));\n-        playlist.addSong(MPDSongs.getSongs().get(7));\n-        playlist.addSong(MPDSongs.getSongs().get(8));\n-        playlist.addSong(MPDSongs.getSongs().get(9));\n-    }\n-}\n+            private void loadSeveralSongs() {\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n+                playlist.addSong(MPDSongs.getSongs().get(1));\n+                playlist.addSong(MPDSongs.getSongs().get(2));\n+                playlist.addSong(MPDSongs.getSongs().get(3));\n+                playlist.addSong(MPDSongs.getSongs().get(4));\n+                playlist.addSong(MPDSongs.getSongs().get(5));\n+                playlist.addSong(MPDSongs.getSongs().get(6));\n+                playlist.addSong(MPDSongs.getSongs().get(7));\n+                playlist.addSong(MPDSongs.getSongs().get(8));\n+                playlist.addSong(MPDSongs.getSongs().get(9));\n+            }\n+        }\n+        \n\\ No newline at end of file\n",
            "diff_size": 262
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/7/MPDStandAloneMonitorIT.java\nindex 3171b2ba70..25a24f8aed 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/7/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/7/MPDStandAloneMonitorIT.java\n@@ -58,7 +58,7 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n             Thread.sleep(MONITOR_DELAY * multiplier);\n         } catch (InterruptedException e) {\n             //don't care\n-            e.printStackTrace();\n+        e .printStackTrace();\n         }\n     }\n \n",
            "diff_size": 1
        }
    ]
}