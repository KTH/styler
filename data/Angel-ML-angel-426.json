{
    "error_id": "426",
    "information": {
        "errors": [
            {
                "line": "47",
                "severity": "error",
                "message": "No trailing whitespace allowed.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "   * Get split value of each feature of a node in a tree. currently, we generate all the features\n   * Todo: generate sampled features\n   * \n   * @param dataMeta the data meta info\n   * @param treeMaker the tree maker\n   * @param nid the node id in the tree",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/426/TDensitySplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/426/TDensitySplit.java\nindex 2575c1f3b3..fffdda9634 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/426/TDensitySplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/426/TDensitySplit.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.tree;\n \n import com.tencent.angel.ml.RegTree.DataMeta;\n@@ -32,109 +33,110 @@ import java.util.List;\n \n public class TDensitySplit implements TSplitValueHelper {\n \n-  private static final Log LOG = LogFactory.getLog(TDensitySplit.class);\n-  private int splitCandidNum;\n-  private int splitNum;\n-\n-  public TDensitySplit(int splitCandidNum, int splitNum) {\n-    this.splitCandidNum = splitCandidNum;\n-    this.splitNum = splitNum;\n-  }\n-\n-  /**\n-   * Get split value of each feature of a node in a tree. currently, we generate all the features\n-   * Todo: generate sampled features\n-   * \n-   * @param dataMeta the data meta info\n-   * @param treeMaker the tree maker\n-   * @param nid the node id in the tree\n-   * @return the float[][] split value, one row for one feature\n-   */\n-  @Override\n-  public float[][] getSplitValue(DataMeta dataMeta, RegTMaker treeMaker, int nid) {\n-    int numFeature = dataMeta.featureMeta.numFeature;\n-    float[][] splitSet = new float[numFeature][splitNum];\n-    int[][] counts = new int[numFeature][splitCandidNum];\n-\n-    double[] binWidths = new double[numFeature];\n-\n-    for (int i = 0; i < numFeature; i++) {\n-      int fid = i;\n-      binWidths[i] =\n-          (dataMeta.featureMeta.maxFeatures[fid] - dataMeta.featureMeta.minFeatures[fid])\n-              / (splitCandidNum + 1);\n+    private static final Log LOG = LogFactory.getLog(TDensitySplit.class);\n+    private int splitCandidNum;\n+    private int splitNum;\n+\n+    public TDensitySplit(int splitCandidNum, int splitNum) {\n+        this.splitCandidNum = splitCandidNum;\n+        this.splitNum = splitNum;\n     }\n \n-    // insIdx is the index of instances\n-    for (int insIdx = 0; insIdx < dataMeta.numRow; insIdx++) {\n-      if (treeMaker.ins2Node.get(insIdx) == nid) {\n-        int[] indices = dataMeta.instances.get(insIdx).getIndices();\n-        double[] values = dataMeta.instances.get(insIdx).getValues();\n-        for (int i = 0; i < indices.length; i++) {\n-          int findex = indices[i]; // feature index\n-          double binWidth = binWidths[findex]; // bin width\n-          double fvalue = (float) values[i]; // feature value\n-          int binIndex =\n-              (int) Math.floor((fvalue - dataMeta.featureMeta.minFeatures[findex]) / binWidth);\n-          counts[findex][binIndex]++;\n+    /**\n+     * Get split value of each feature of a node in a tree. currently, we generate all the features\n+     * Todo: generate sampled features\n+     *\n+     * @param dataMeta  the data meta info\n+     * @param treeMaker the tree maker\n+     * @param nid       the node id in the tree\n+     * @return the float[][] split value, one row for one feature\n+     */\n+    @Override\n+    public float[][] getSplitValue(DataMeta dataMeta, RegTMaker treeMaker, int nid) {\n+        int numFeature = dataMeta.featureMeta.numFeature;\n+        float[][] splitSet = new float[numFeature][splitNum];\n+        int[][] counts = new int[numFeature][splitCandidNum];\n+\n+        double[] binWidths = new double[numFeature];\n+\n+        for (int i = 0; i < numFeature; i++) {\n+            int fid = i;\n+            binWidths[i] =\n+                    (dataMeta.featureMeta.maxFeatures[fid] - dataMeta.featureMeta.minFeatures[fid])\n+                            / (splitCandidNum + 1);\n+        }\n+\n+        // insIdx is the index of instances\n+        for (int insIdx = 0; insIdx < dataMeta.numRow; insIdx++) {\n+            if (treeMaker.ins2Node.get(insIdx) == nid) {\n+                int[] indices = dataMeta.instances.get(insIdx).getIndices();\n+                double[] values = dataMeta.instances.get(insIdx).getValues();\n+                for (int i = 0; i < indices.length; i++) {\n+                    int findex = indices[i]; // feature index\n+                    double binWidth = binWidths[findex]; // bin width\n+                    double fvalue = (float) values[i]; // feature value\n+                    int binIndex =\n+                            (int) Math.floor((fvalue - dataMeta.featureMeta.minFeatures[findex]) /\n+                                    binWidth);\n+                    counts[findex][binIndex]++;\n+                }\n+            }\n+        }\n+\n+        // loop over features\n+        for (int fid = 0; fid < numFeature; fid++) {\n+            int[] minCandid = findMinCandid(counts[fid], splitNum);\n+            for (int i = 0; i < minCandid.length; i++) {\n+                splitSet[fid][i] = minCandid[i];\n+            }\n         }\n-      }\n-    }\n \n-    // loop over features\n-    for (int fid = 0; fid < numFeature; fid++) {\n-      int[] minCandid = findMinCandid(counts[fid], splitNum);\n-      for (int i = 0; i < minCandid.length; i++) {\n-        splitSet[fid][i] = minCandid[i];\n-      }\n+        return splitSet;\n     }\n \n-    return splitSet;\n-  }\n-\n-  public static int[] findMinCandid(int[] counts, int splitNum) {\n-\n-    int[] nzzIdxes = findNzzIndex(counts);\n-\n-\n-    if (nzzIdxes.length <= splitNum) {\n-      int[] minCandid = new int[nzzIdxes.length - 1];\n-      int[] nzzCounts = new int[nzzIdxes.length];\n-      for (int i = 0; i < nzzCounts.length; i++) {\n-        nzzCounts[i] = counts[nzzIdxes[i]];\n-      }\n-      Sort.quickSort(nzzCounts, nzzIdxes, 0, nzzCounts.length - 1);\n-      System.arraycopy(nzzIdxes, 0, minCandid, 0, nzzIdxes.length - 1);\n-      return minCandid;\n-    } else {\n-      int[] minCandid = new int[splitNum];\n-      int[] idxes = new int[counts.length];\n-      for (int i = 0; i < counts.length; i++) {\n-        idxes[i] = i + 1;\n-      }\n-      Sort.quickSort(counts, idxes, 0, counts.length - 1);\n-      System.arraycopy(idxes, 0, minCandid, 0, splitNum);\n-      return minCandid;\n+    public static int[] findMinCandid(int[] counts, int splitNum) {\n+\n+        int[] nzzIdxes = findNzzIndex(counts);\n+\n+\n+        if (nzzIdxes.length <= splitNum) {\n+            int[] minCandid = new int[nzzIdxes.length - 1];\n+            int[] nzzCounts = new int[nzzIdxes.length];\n+            for (int i = 0; i < nzzCounts.length; i++) {\n+                nzzCounts[i] = counts[nzzIdxes[i]];\n+            }\n+            Sort.quickSort(nzzCounts, nzzIdxes, 0, nzzCounts.length - 1);\n+            System.arraycopy(nzzIdxes, 0, minCandid, 0, nzzIdxes.length - 1);\n+            return minCandid;\n+        } else {\n+            int[] minCandid = new int[splitNum];\n+            int[] idxes = new int[counts.length];\n+            for (int i = 0; i < counts.length; i++) {\n+                idxes[i] = i + 1;\n+            }\n+            Sort.quickSort(counts, idxes, 0, counts.length - 1);\n+            System.arraycopy(idxes, 0, minCandid, 0, splitNum);\n+            return minCandid;\n+        }\n     }\n-  }\n-\n-  public static int[] findNzzIndex(int[] counts) {\n-    List<Integer> nzzIdxes = new ArrayList<Integer>();\n-    for (int i = 0; i < counts.length; i++) {\n-      if (counts[i] > 0) {\n-        nzzIdxes.add(i);\n-      }\n+\n+    public static int[] findNzzIndex(int[] counts) {\n+        List<Integer> nzzIdxes = new ArrayList<Integer>();\n+        for (int i = 0; i < counts.length; i++) {\n+            if (counts[i] > 0) {\n+                nzzIdxes.add(i);\n+            }\n+        }\n+        return MathUtils.intList2Arr(nzzIdxes);\n     }\n-    return MathUtils.intList2Arr(nzzIdxes);\n-  }\n-\n-  public static void main(String[] argv) {\n-    int[] counts = {10, 11, 2, 21, 8, 3, 13, 5};\n-    // int[] counts = {10, 2, 1, 2, 0, 3, 0, 5};\n-    int splitNum = 3;\n-    int[] idxes = findMinCandid(counts, splitNum);\n-    for (int idx : idxes) {\n-      System.out.println(idx);\n+\n+    public static void main(String[] argv) {\n+        int[] counts = {10, 11, 2, 21, 8, 3, 13, 5};\n+        // int[] counts = {10, 2, 1, 2, 0, 3, 0, 5};\n+        int splitNum = 3;\n+        int[] idxes = findMinCandid(counts, splitNum);\n+        for (int idx : idxes) {\n+            System.out.println(idx);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 10, indentation should be the same level as line 75.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 10, indentation should be the same level as line 77.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/426/TDensitySplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/426/TDensitySplit.java\nindex 2575c1f3b3..b13657af40 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/426/TDensitySplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/426/TDensitySplit.java\n@@ -61,9 +61,8 @@ public class TDensitySplit implements TSplitValueHelper {\n     for (int i = 0; i < numFeature; i++) {\n       int fid = i;\n       binWidths[i] =\n-          (dataMeta.featureMeta.maxFeatures[fid] - dataMeta.featureMeta.minFeatures[fid])\n-              / (splitCandidNum + 1);\n-    }\n+          (dataMeta.featureMeta.maxFeatures[fid] - dataMeta.featureMeta.minFeatures[fid]) / (splitCandidNum + 1);\n+  }\n \n     // insIdx is the index of instances\n     for (int insIdx = 0; insIdx < dataMeta.numRow; insIdx++) {\n@@ -71,12 +70,14 @@ public class TDensitySplit implements TSplitValueHelper {\n         int[] indices = dataMeta.instances.get(insIdx).getIndices();\n         double[] values = dataMeta.instances.get(insIdx).getValues();\n         for (int i = 0; i < indices.length; i++) {\n-          int findex = indices[i]; // feature index\n-          double binWidth = binWidths[findex]; // bin width\n+          int findex = indices[i];\n+// feature index\n+          double binWidth = binWidths[findex];\n+// bin width\n           double fvalue = (float) values[i]; // feature value\n           int binIndex =\n               (int) Math.floor((fvalue - dataMeta.featureMeta.minFeatures[findex]) / binWidth);\n-          counts[findex][binIndex]++;\n+counts[findex][binIndex]++;\n         }\n       }\n     }\n@@ -93,11 +94,8 @@ public class TDensitySplit implements TSplitValueHelper {\n   }\n \n   public static int[] findMinCandid(int[] counts, int splitNum) {\n-\n-    int[] nzzIdxes = findNzzIndex(counts);\n-\n-\n-    if (nzzIdxes.length <= splitNum) {\n+  int[] nzzIdxes = findNzzIndex(counts);\n+if (nzzIdxes.length <= splitNum) {\n       int[] minCandid = new int[nzzIdxes.length - 1];\n       int[] nzzCounts = new int[nzzIdxes.length];\n       for (int i = 0; i < nzzCounts.length; i++) {\n@@ -137,4 +135,4 @@ public class TDensitySplit implements TSplitValueHelper {\n       System.out.println(idx);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/426/TDensitySplit.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/426/TDensitySplit.java\nindex 2575c1f3b3..12b7fc0c88 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/426/TDensitySplit.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/426/TDensitySplit.java\n@@ -22,7 +22,6 @@ import com.tencent.angel.ml.utils.MathUtils;\n import com.tencent.angel.utils.Sort;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -31,15 +30,14 @@ import java.util.List;\n  */\n \n public class TDensitySplit implements TSplitValueHelper {\n+    private static final Log LOG = LogFactory.getLog(TDensitySplit.class);\n+    private int splitCandidNum;\n+    private int splitNum;\n \n-  private static final Log LOG = LogFactory.getLog(TDensitySplit.class);\n-  private int splitCandidNum;\n-  private int splitNum;\n-\n-  public TDensitySplit(int splitCandidNum, int splitNum) {\n+    public TDensitySplit(int splitCandidNum, int splitNum) {\n     this.splitCandidNum = splitCandidNum;\n     this.splitNum = splitNum;\n-  }\n+    }\n \n   /**\n    * Get split value of each feature of a node in a tree. currently, we generate all the features\n@@ -50,91 +48,85 @@ public class TDensitySplit implements TSplitValueHelper {\n    * @param nid the node id in the tree\n    * @return the float[][] split value, one row for one feature\n    */\n-  @Override\n-  public float[][] getSplitValue(DataMeta dataMeta, RegTMaker treeMaker, int nid) {\n+\n+    @Override\n+    public float[][] getSplitValue(DataMeta dataMeta, RegTMaker treeMaker, int nid) {\n     int numFeature = dataMeta.featureMeta.numFeature;\n     float[][] splitSet = new float[numFeature][splitNum];\n     int[][] counts = new int[numFeature][splitCandidNum];\n-\n     double[] binWidths = new double[numFeature];\n-\n     for (int i = 0; i < numFeature; i++) {\n-      int fid = i;\n-      binWidths[i] =\n-          (dataMeta.featureMeta.maxFeatures[fid] - dataMeta.featureMeta.minFeatures[fid])\n-              / (splitCandidNum + 1);\n+        int fid = i;\n+        binWidths[i] = (dataMeta.featureMeta.maxFeatures[fid] - dataMeta.featureMeta.minFeatures[fid]) / (splitCandidNum + 1);\n     }\n \n     // insIdx is the index of instances\n+\n     for (int insIdx = 0; insIdx < dataMeta.numRow; insIdx++) {\n-      if (treeMaker.ins2Node.get(insIdx) == nid) {\n-        int[] indices = dataMeta.instances.get(insIdx).getIndices();\n-        double[] values = dataMeta.instances.get(insIdx).getValues();\n-        for (int i = 0; i < indices.length; i++) {\n-          int findex = indices[i]; // feature index\n-          double binWidth = binWidths[findex]; // bin width\n-          double fvalue = (float) values[i]; // feature value\n-          int binIndex =\n-              (int) Math.floor((fvalue - dataMeta.featureMeta.minFeatures[findex]) / binWidth);\n-          counts[findex][binIndex]++;\n+        if (treeMaker.ins2Node.get(insIdx) == nid) {\n+                                                                 int[] indices = dataMeta.instances.get(insIdx).getIndices();\n+                                                                 double[] values = dataMeta.instances.get(insIdx).getValues();\n+                                                                 for (int i = 0; i < indices.length; i++) {\n+                                                       int findex = indices[i]; // feature index\n+                                                       double binWidth = binWidths[findex]; // bin width\n+                                                       double fvalue = (float) values[i]; // feature value\n+                                                       int binIndex = (int) Math.floor((fvalue - dataMeta.featureMeta.minFeatures[findex]) / binWidth);\n+                                                       counts[findex][binIndex]++;\n+                                                                 }\n         }\n-      }\n     }\n \n     // loop over features\n+\n     for (int fid = 0; fid < numFeature; fid++) {\n-      int[] minCandid = findMinCandid(counts[fid], splitNum);\n-      for (int i = 0; i < minCandid.length; i++) {\n-        splitSet[fid][i] = minCandid[i];\n-      }\n+        int[] minCandid = findMinCandid(counts[fid], splitNum);\n+        for (int i = 0; i < minCandid.length; i++) {\n+                                                   splitSet[fid][i] = minCandid[i];\n+        }\n     }\n-\n     return splitSet;\n-  }\n-\n-  public static int[] findMinCandid(int[] counts, int splitNum) {\n+    }\n \n+    public static int[] findMinCandid(int[] counts, int splitNum) {\n     int[] nzzIdxes = findNzzIndex(counts);\n-\n-\n     if (nzzIdxes.length <= splitNum) {\n-      int[] minCandid = new int[nzzIdxes.length - 1];\n-      int[] nzzCounts = new int[nzzIdxes.length];\n-      for (int i = 0; i < nzzCounts.length; i++) {\n-        nzzCounts[i] = counts[nzzIdxes[i]];\n-      }\n-      Sort.quickSort(nzzCounts, nzzIdxes, 0, nzzCounts.length - 1);\n-      System.arraycopy(nzzIdxes, 0, minCandid, 0, nzzIdxes.length - 1);\n-      return minCandid;\n+        int[] minCandid = new int[nzzIdxes.length - 1];\n+        int[] nzzCounts = new int[nzzIdxes.length];\n+        for (int i = 0; i < nzzCounts.length; i++) {\n+                                         nzzCounts[i] = counts[nzzIdxes[i]];\n+        }\n+        Sort.quickSort(nzzCounts, nzzIdxes, 0, nzzCounts.length - 1);\n+        System.arraycopy(nzzIdxes, 0, minCandid, 0, nzzIdxes.length - 1);\n+        return minCandid;\n     } else {\n       int[] minCandid = new int[splitNum];\n       int[] idxes = new int[counts.length];\n       for (int i = 0; i < counts.length; i++) {\n-        idxes[i] = i + 1;\n+               idxes[i] = i + 1;\n       }\n       Sort.quickSort(counts, idxes, 0, counts.length - 1);\n       System.arraycopy(idxes, 0, minCandid, 0, splitNum);\n       return minCandid;\n     }\n-  }\n+    }\n \n-  public static int[] findNzzIndex(int[] counts) {\n+    public static int[] findNzzIndex(int[] counts) {\n     List<Integer> nzzIdxes = new ArrayList<Integer>();\n     for (int i = 0; i < counts.length; i++) {\n-      if (counts[i] > 0) {\n+        if (counts[i] > 0) {\n         nzzIdxes.add(i);\n-      }\n+        }\n     }\n     return MathUtils.intList2Arr(nzzIdxes);\n-  }\n+    }\n \n-  public static void main(String[] argv) {\n+    public static void main(String[] argv) {\n     int[] counts = {10, 11, 2, 21, 8, 3, 13, 5};\n     // int[] counts = {10, 2, 1, 2, 0, 3, 0, 5};\n     int splitNum = 3;\n     int[] idxes = findMinCandid(counts, splitNum);\n     for (int idx : idxes) {\n-      System.out.println(idx);\n+        System.out.println(idx);\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}