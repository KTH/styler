{
    "error_id": "33",
    "information": {
        "errors": [
            {
                "line": "55",
                "severity": "error",
                "message": "'CTOR_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param spec object\n     */\n    public CCTSpec(CommonG spec) {\n        this.commonspec = spec;\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/33/CCTSpec.java\nindex 9a43576fa9..dcdca3c705 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/33/CCTSpec.java\n@@ -52,6 +52,7 @@ public class CCTSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public CCTSpec(CommonG spec) {\n         this.commonspec = spec;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/33/CCTSpec.java\nindex 9a43576fa9..81086dbc14 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/33/CCTSpec.java\n@@ -47,6 +47,7 @@ import static org.testng.Assert.fail;\n public class CCTSpec extends BaseGSpec {\n \n     private final Logger logger = LoggerFactory.getLogger(CCTSpec.class);\n+\n     /**\n      * Generic constructor.\n      *\n@@ -58,29 +59,41 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Download last lines from logs of a service/framework\n+     *\n      * @param logType\n      * @param service\n      * @param taskType\n      * @throws Exception\n      */\n     @Given(\"^I want to download '(stdout|stderr)' last '(\\\\d+)' lines of service '(.+?)'( with task type '(.+?)')?\")\n-    public void downLoadLogsFromService(String logType, Integer lastLinesToRead, String service, String taskType) throws Exception {\n+    public void downLoadLogsFromService(String logType, Integer lastLinesToRead,\n+                                        String service, String taskType)\n+        throws Exception {\n         String fileOutputName = service.replace('/', '_') + taskType + logType;\n         String endPoint;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \" /deployments/service?instanceName=\" + service;\n+            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \" /deployments/service?instanceName=\" + service;\n         } else {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n         Future<Response> response = null;\n-        commonspec.getLogger().debug(\"Trying to send http request to: \" + endPoint);\n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+        commonspec.getLogger()\n+            .debug(\"Trying to send http request to: \" + endPoint);\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(endPoint, response.get());\n-        ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null, \"id\");\n-        ArrayList<String> mesosTaskName = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null, \"name\");\n+        ArrayList<String> mesosTaskId =\n+            obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null,\n+                \"id\");\n+        ArrayList<String> mesosTaskName =\n+            obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null,\n+                \"name\");\n         boolean contained = false;\n         if (mesosTaskId.size() > 1) {\n             for (int i = 0; i < mesosTaskName.size() && !contained; i++) {\n@@ -99,24 +112,36 @@ public class CCTSpec extends BaseGSpec {\n \n         String endpointTask;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endpointTask = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deployments/logs/\" + taskType;\n+            endpointTask = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/deployments/logs/\" + taskType;\n         } else {\n-            endpointTask = \"/service/cct-marathon-services/v1/services/tasks/\" + taskType + \"/logs\";\n-        }\n-        commonspec.getLogger().debug(\"Trying to send http request to: \" + endpointTask);\n-        response = commonspec.generateRequest(\"GET\", false, null, null, endpointTask, \"\", null);\n+            endpointTask =\n+                \"/service/cct-marathon-services/v1/services/tasks/\" + taskType +\n+                    \"/logs\";\n+        }\n+        commonspec.getLogger()\n+            .debug(\"Trying to send http request to: \" + endpointTask);\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endpointTask, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(\"GET\", response.get());\n         commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-        String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+        String path =\n+            obtainLogsPath(commonspec.getResponse().getResponse(), logType,\n+                \"READ\") + \"/\" + logType;\n         String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n-        Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName), logOfTask.getBytes());\n+        Files.write(Paths.get(\n+            System.getProperty(\"user.dir\") + \"/target/test-classes/\" +\n+                fileOutputName), logOfTask.getBytes());\n     }\n \n-     /**\n+    /**\n      * Read last lines from logs of a service/framework\n+     *\n      * @param logType\n      * @param service\n      * @param taskType\n@@ -125,40 +150,62 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^The '(stdout|stderr)' of service '(.+?)'( with task type '(.+?)')? contains '(.+?)' in the last '(\\\\d+)' lines$\")\n-    public void readLogsFromService(String logType, String service, String taskType, String logToCheck, Integer lastLinesToRead) throws Exception {\n-        commonspec.getLogger().debug(\"Start process of read \" + lastLinesToRead + \" from the mesos log\");\n+    public void readLogsFromService(String logType, String service,\n+                                    String taskType, String logToCheck,\n+                                    Integer lastLinesToRead) throws Exception {\n+        commonspec.getLogger().debug(\n+            \"Start process of read \" + lastLinesToRead + \" from the mesos log\");\n         String endPoint;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \" /deployments/service?instanceName=\" + service;\n+            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \" /deployments/service?instanceName=\" + service;\n         } else {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n         Future<Response> response = null;\n-        commonspec.getLogger().debug(\"Trying to send http request to: \" + endPoint);\n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+        commonspec.getLogger()\n+            .debug(\"Trying to send http request to: \" + endPoint);\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(endPoint, response.get());\n-        ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), taskType, \"id\");\n+        ArrayList<String> mesosTaskId =\n+            obtainMesosTaskInfo(commonspec.getResponse().getResponse(),\n+                taskType, \"id\");\n         commonspec.getLogger().info(\"Mesos Task Ids obtained successfully\");\n-        commonspec.getLogger().debug(\"Mesos task ids: \"  + Arrays.toString(mesosTaskId.toArray()));\n+        commonspec.getLogger()\n+            .debug(\"Mesos task ids: \" + Arrays.toString(mesosTaskId.toArray()));\n         boolean contained = false;\n         for (int i = 0; i < mesosTaskId.size() && !contained; i++) {\n             String endpointTask;\n             if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-                endpointTask = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deployments/logs/\" + taskType;\n+                endpointTask =\n+                    \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                        \"/deployments/logs/\" + taskType;\n             } else {\n-                endpointTask = \"/service/cct-marathon-services/v1/services/tasks/\" + taskType + \"/logs\";\n+                endpointTask =\n+                    \"/service/cct-marathon-services/v1/services/tasks/\" +\n+                        taskType + \"/logs\";\n             }\n-            commonspec.getLogger().debug(\"Trying to send http request to: \" + endpointTask);\n-            response = commonspec.generateRequest(\"GET\", false, null, null, endpointTask, \"\", null);\n+            commonspec.getLogger()\n+                .debug(\"Trying to send http request to: \" + endpointTask);\n+            response = commonspec\n+                .generateRequest(\"GET\", false, null, null, endpointTask, \"\",\n+                    null);\n             if (response.get().getStatusCode() != 200) {\n-                throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+                throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                    \" with status code: \" +\n+                    commonspec.getResponse().getStatusCode());\n             }\n             commonspec.setResponse(\"GET\", response.get());\n             commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-            String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+            String path =\n+                obtainLogsPath(commonspec.getResponse().getResponse(), logType,\n+                    \"READ\") + \"/\" + logType;\n             commonspec.getLogger().debug(\"Trying to read mesos logs\");\n             String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n             if (logOfTask.contains(logToCheck)) {\n@@ -166,42 +213,54 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (!contained) {\n-            fail(\"The log \" + logToCheck + \" is not contaided in the task logs\");\n+            fail(\n+                \"The log \" + logToCheck + \" is not contaided in the task logs\");\n         }\n     }\n \n     /**\n      * Read log from mesos\n+     *\n      * @param path\n      * @param lastLines\n      * @return\n      * @throws Exception\n      */\n-    public String readLogsFromMesos(String path, Integer lastLines) throws Exception {\n+    public String readLogsFromMesos(String path, Integer lastLines)\n+        throws Exception {\n         //obtain last offset\n         Future<Response> response = null;\n-        response = commonspec.generateRequest(\"GET\", false, null, null, path, \"\", null);\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, path, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\n+                \"Request failed to endpoint: \" + path + \" with status code: \" +\n+                    commonspec.getResponse().getStatusCode());\n         }\n-        JSONObject offSetJson = new JSONObject(response.get().getResponseBody());\n+        JSONObject offSetJson =\n+            new JSONObject(response.get().getResponseBody());\n \n         Integer offSet = offSetJson.getInt(\"offset\");\n         //Read 1000 bytes\n         String logs = \"\";\n         Integer lineCount = 0;\n-        for (int i = offSet; (i >= 0) && (lineCount <= lastLines); i = i - 1000) {\n+        for (int i = offSet; (i >= 0) && (lineCount <= lastLines);\n+             i = i - 1000) {\n             String endPoint = path + \"&offset=\" + (i - 1000) + \"&length=\" + i;\n             if (i < 1000) {\n                 endPoint = path + \"&offset=0&length=\" + i;\n \n             }\n-            response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+            response = commonspec\n+                .generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n             if (response.get().getStatusCode() != 200) {\n-                throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+                throw new Exception(\"Request failed to endpoint: \" + path +\n+                    \" with status code: \" +\n+                    commonspec.getResponse().getStatusCode());\n             }\n             commonspec.setResponse(\"GET\", response.get());\n-            JSONObject cctJsonResponse = new JSONObject(commonspec.getResponse().getResponse());\n+            JSONObject cctJsonResponse =\n+                new JSONObject(commonspec.getResponse().getResponse());\n             logs = cctJsonResponse.getString(\"data\") + logs;\n             lineCount = logs.split(\"\\n\").length + lineCount;\n         }\n@@ -210,17 +269,22 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Obtain logs path from JSON\n+     *\n      * @param response\n      * @param logType\n      * @param action\n      * @return path\n      */\n-    public String obtainLogsPath(String response, String logType, String action) {\n+    public String obtainLogsPath(String response, String logType,\n+                                 String action) {\n         String path = null;\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfPaths = (JSONArray) cctJsonResponse.get(\"content\");\n         for (int i = 0; i < arrayOfPaths.length(); i++) {\n-            if (arrayOfPaths.getJSONObject(i).getString(\"name\").equalsIgnoreCase(logType) && arrayOfPaths.getJSONObject(i).getString(\"action\").equalsIgnoreCase(action)) {\n+            if (arrayOfPaths.getJSONObject(i).getString(\"name\")\n+                .equalsIgnoreCase(logType) &&\n+                arrayOfPaths.getJSONObject(i).getString(\"action\")\n+                    .equalsIgnoreCase(action)) {\n                 path = arrayOfPaths.getJSONObject(i).getString(\"path\");\n             }\n         }\n@@ -229,12 +293,14 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Obtain info about task type from json\n+     *\n      * @param response\n      * @param taskType\n      * @param info\n      * @return\n      */\n-    public ArrayList<String> obtainMesosTaskInfo (String response, String taskType, String info) {\n+    public ArrayList<String> obtainMesosTaskInfo(String response,\n+                                                 String taskType, String info) {\n         ArrayList<String> result = new ArrayList<String>();\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfTasks = (JSONArray) cctJsonResponse.get(\"tasks\");\n@@ -257,21 +323,34 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * TearDown a service with deploy-api\n+     *\n      * @param service\n      * @throws Exception\n      */\n     @Given(\"^I teardown the service '(.+?)' of tenant '(.+?)'\")\n-    public void tearDownService(String service, String tenant) throws Exception {\n+    public void tearDownService(String service, String tenant)\n+        throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/teardown?frameworkName=\" + service;\n+        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+            \"/deploy/teardown?frameworkName=\" + service;\n         Future<Response> response;\n-        response = commonspec.generateRequest(\"DELETE\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"DELETE\", false, null, null, endPoint, \"\", null,\n+                \"\");\n         commonspec.setResponse(\"DELETE\", response.get());\n-        if (commonspec.getResponse().getStatusCode() != 200 || commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 ||\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n         // Check service has disappeared\n         RestSpec restSpec = new RestSpec(commonspec);\n@@ -279,10 +358,13 @@ public class CCTSpec extends BaseGSpec {\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/deploy/status/all\";\n             key = \"\\\"serviceName\\\"\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                    \"/v1/services?tenant=\" + tenant;\n             key = \"\\\"key\\\"\";\n         }\n \n@@ -290,7 +372,8 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + service;\n         }\n-        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\", key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n+        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\",\n+            key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n \n         // Check all resources have been freed\n         DcosSpec dcosSpec = new DcosSpec(commonspec);\n@@ -299,29 +382,42 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Scale service from deploy-api\n+     *\n      * @param service\n      * @param instances\n      * @throws Exception\n      */\n     @Given(\"^I scale service '(.+?)' to '(\\\\d+)' instances\")\n-    public void scaleService(String service, Integer instances) throws Exception {\n+    public void scaleService(String service, Integer instances)\n+        throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/scale?instances=\" + instances + \"&serviceName=\" + service;\n+        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+            \"/deploy/scale?instances=\" + instances + \"&serviceName=\" + service;\n         Future<Response> response;\n-        response = commonspec.generateRequest(\"PUT\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"PUT\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"PUT\", response.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n \n     /**\n      * Checks in Command Center service status\n+     *\n      * @param timeout\n      * @param wait\n      * @param service\n@@ -331,38 +427,50 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check that the service '(.+?)' in CCT with '(\\\\d+)' tasks of type '(.+?)' is in '(healthy|unhealthy|running|stopped)' status\")\n-    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String taskType, String expectedStatus) throws Exception {\n-        String endPoint = \"/service/deploy-api/deployments/service?instanceName=\" + service;\n+    public void checkServiceStatus(Integer timeout, Integer wait,\n+                                   String service, Integer numTasks,\n+                                   String taskType, String expectedStatus)\n+        throws Exception {\n+        String endPoint =\n+            \"/service/deploy-api/deployments/service?instanceName=\" + service;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") != null) {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n-        boolean  statusService = false;\n+        boolean statusService = false;\n         for (int i = 0; (i <= timeout) && (!statusService); i += wait) {\n             try {\n-                Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+                Future<Response> response = commonspec\n+                    .generateRequest(\"GET\", false, null, null, endPoint, \"\",\n+                        null);\n                 commonspec.setResponse(endPoint, response.get());\n-                statusService = checkServiceStatusInResponse(expectedStatus, commonspec.getResponse().getResponse(), numTasks, taskType);\n+                statusService = checkServiceStatusInResponse(expectedStatus,\n+                    commonspec.getResponse().getResponse(), numTasks, taskType);\n             } catch (Exception e) {\n-                commonspec.getLogger().debug(\"Error in request \" + endPoint + \" - \" + e.toString());\n+                commonspec.getLogger().debug(\n+                    \"Error in request \" + endPoint + \" - \" + e.toString());\n             }\n             if (i < timeout) {\n                 Thread.sleep(wait * 1000);\n             }\n         }\n         if (!statusService) {\n-            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n+            fail(expectedStatus + \" status not found after \" + timeout +\n+                \" seconds for service \" + service);\n         }\n     }\n \n     /**\n      * Check status of a task in response of the CCT\n+     *\n      * @param expectedStatus\n      * @param response\n      * @param tasks\n      * @param name\n      * @return\n      */\n-    public boolean checkServiceStatusInResponse(String expectedStatus, String response, Integer tasks, String name) {\n+    public boolean checkServiceStatusInResponse(String expectedStatus,\n+                                                String response, Integer tasks,\n+                                                String name) {\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfTasks = (JSONArray) cctJsonResponse.get(\"tasks\");\n         int task_counter = 0;\n@@ -383,10 +491,15 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (arrayOfTasks.length() == 1 || tasks == null) {\n-            boolean res = (arrayOfTasks.getJSONObject(0).getString(key).equalsIgnoreCase(expectedStatus));\n+            boolean res = (arrayOfTasks.getJSONObject(0).getString(key)\n+                .equalsIgnoreCase(expectedStatus));\n             if (!res) {\n-                commonspec.getLogger().warn(\"The status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" + arrayOfTasks.getJSONObject(0).getString(key));\n-                commonspec.getLogger().warn(\"Expected status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" + expectedStatus);\n+                commonspec.getLogger().warn(\"The status of \" +\n+                    arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" +\n+                    arrayOfTasks.getJSONObject(0).getString(key));\n+                commonspec.getLogger().warn(\"Expected status of \" +\n+                    arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" +\n+                    expectedStatus);\n             }\n             return res;\n         }\n@@ -396,8 +509,12 @@ public class CCTSpec extends BaseGSpec {\n             if (task.getString(\"name\").matches(regex_name)) {\n                 task_counter++;\n                 if (!task.getString(key).equalsIgnoreCase(expectedStatus)) {\n-                    commonspec.getLogger().warn(\"The status of \" + task.getString(\"name\") + \" is \" + task.getString(key));\n-                    commonspec.getLogger().warn(\" Expected status of \" + task.getString(\"name\") + \" is \" + expectedStatus);\n+                    commonspec.getLogger().warn(\n+                        \"The status of \" + task.getString(\"name\") + \" is \" +\n+                            task.getString(key));\n+                    commonspec.getLogger().warn(\n+                        \" Expected status of \" + task.getString(\"name\") +\n+                            \" is \" + expectedStatus);\n                     return false;\n                 }\n             }\n@@ -405,7 +522,9 @@ public class CCTSpec extends BaseGSpec {\n         if (task_counter == tasks) {\n             return true;\n         }\n-        commonspec.getLogger().error(\"The number of tasks deployed: \" + task_counter + \" are not the expected ones: \" + tasks);\n+        commonspec.getLogger().error(\n+            \"The number of tasks deployed: \" + task_counter +\n+                \" are not the expected ones: \" + tasks);\n         return false;\n     }\n \n@@ -420,8 +539,11 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check in CCT that the service '(.+?)'( with number of tasks '(\\\\d+)')? is in '(healthy|unhealthy|running|stopped)' status$\")\n-    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String expectedStatus) throws Exception {\n-        String endPoint = \"/service/deploy-api/deployments/service?instanceName=\" + service;\n+    public void checkServiceStatus(Integer timeout, Integer wait,\n+                                   String service, Integer numTasks,\n+                                   String expectedStatus) throws Exception {\n+        String endPoint =\n+            \"/service/deploy-api/deployments/service?instanceName=\" + service;\n         boolean useMarathonServices = false;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") != null) {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n@@ -432,22 +554,34 @@ public class CCTSpec extends BaseGSpec {\n \n         for (int i = 0; (i <= timeout); i += wait) {\n             try {\n-                Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+                Future<Response> response = commonspec\n+                    .generateRequest(\"GET\", false, null, null, endPoint, \"\",\n+                        null);\n                 commonspec.setResponse(endPoint, response.get());\n-                found = checkServiceStatusInResponse(expectedStatus, commonspec.getResponse().getResponse(), useMarathonServices);\n+                found = checkServiceStatusInResponse(expectedStatus,\n+                    commonspec.getResponse().getResponse(),\n+                    useMarathonServices);\n                 if (numTasks != null) {\n-                    isDeployed = checkServiceDeployed(commonspec.getResponse().getResponse(), numTasks, useMarathonServices);\n+                    isDeployed = checkServiceDeployed(\n+                        commonspec.getResponse().getResponse(), numTasks,\n+                        useMarathonServices);\n                 }\n             } catch (Exception e) {\n-                commonspec.getLogger().debug(\"Error in request \" + endPoint + \" - \" + e.toString());\n+                commonspec.getLogger().debug(\n+                    \"Error in request \" + endPoint + \" - \" + e.toString());\n             }\n-            if ((found && (numTasks == null)) || (found && (numTasks != null) && isDeployed)) {\n+            if ((found && (numTasks == null)) ||\n+                (found && (numTasks != null) && isDeployed)) {\n                 break;\n             } else {\n                 if (!found) {\n-                    commonspec.getLogger().info(expectedStatus + \" status or tasks not found after \" + i + \" seconds for service \" + service);\n+                    commonspec.getLogger().info(\n+                        expectedStatus + \" status or tasks not found after \" +\n+                            i + \" seconds for service \" + service);\n                 } else if (numTasks != null && !isDeployed) {\n-                    commonspec.getLogger().info(\"Tasks have not been deployed successfully after \" + i + \" seconds for service \" + service);\n+                    commonspec.getLogger().info(\n+                        \"Tasks have not been deployed successfully after \" + i +\n+                            \" seconds for service \" + service);\n                 }\n                 if (i < timeout) {\n                     Thread.sleep(wait * 1000);\n@@ -455,22 +589,26 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (!found) {\n-            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n+            fail(expectedStatus + \" status not found after \" + timeout +\n+                \" seconds for service \" + service);\n         }\n         if ((numTasks != null) && !isDeployed) {\n-            fail(\"Tasks have not been deployed successfully after \" + timeout + \" seconds for service \" + service);\n+            fail(\"Tasks have not been deployed successfully after \" + timeout +\n+                \" seconds for service \" + service);\n         }\n     }\n \n     /**\n      * Checks in Command Center response if the service has the expected status\n      *\n-     * @param expectedStatus Expected status (healthy|unhealthy)\n-     * @param response Command center response\n+     * @param expectedStatus      Expected status (healthy|unhealthy)\n+     * @param response            Command center response\n      * @param useMarathonServices True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n-    private boolean checkServiceStatusInResponse(String expectedStatus, String response, boolean useMarathonServices) {\n+    private boolean checkServiceStatusInResponse(String expectedStatus,\n+                                                 String response,\n+                                                 boolean useMarathonServices) {\n         if (useMarathonServices) {\n             JSONObject cctJsonResponse = new JSONObject(response);\n             String status = cctJsonResponse.getString(\"status\");\n@@ -479,16 +617,22 @@ public class CCTSpec extends BaseGSpec {\n                 case \"healthy\":\n                 case \"unhealthy\":\n                     return healthiness.equalsIgnoreCase(expectedStatus);\n-                case \"running\":     return status.equalsIgnoreCase(\"RUNNING\");\n-                case \"stopped\":     return status.equalsIgnoreCase(\"SUSPENDED\");\n+                case \"running\":\n+                    return status.equalsIgnoreCase(\"RUNNING\");\n+                case \"stopped\":\n+                    return status.equalsIgnoreCase(\"SUSPENDED\");\n                 default:\n             }\n         } else {\n             switch (expectedStatus) {\n-                case \"healthy\":     return response.contains(\"\\\"healthy\\\":1\");\n-                case \"unhealthy\":   return response.contains(\"\\\"healthy\\\":2\");\n-                case \"running\":     return response.contains(\"\\\"status\\\":2\");\n-                case \"stopped\":     return response.contains(\"\\\"status\\\":1\");\n+                case \"healthy\":\n+                    return response.contains(\"\\\"healthy\\\":1\");\n+                case \"unhealthy\":\n+                    return response.contains(\"\\\"healthy\\\":2\");\n+                case \"running\":\n+                    return response.contains(\"\\\"status\\\":2\");\n+                case \"stopped\":\n+                    return response.contains(\"\\\"status\\\":1\");\n                 default:\n             }\n         }\n@@ -499,12 +643,13 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Checks in Command Center response if the service tasks are deployed successfully\n      *\n-     * @param response Command center response\n-     * @param numTasks Command center response\n+     * @param response            Command center response\n+     * @param numTasks            Command center response\n      * @param useMarathonServices True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n-    private boolean checkServiceDeployed(String response, int numTasks, boolean useMarathonServices) {\n+    private boolean checkServiceDeployed(String response, int numTasks,\n+                                         boolean useMarathonServices) {\n \n         JSONObject deployment = new JSONObject(response);\n         JSONArray tasks = (JSONArray) deployment.get(\"tasks\");\n@@ -512,9 +657,13 @@ public class CCTSpec extends BaseGSpec {\n \n         for (int i = 0; i < tasks.length(); i++) {\n             if (useMarathonServices) {\n-                numTasksRunning = tasks.getJSONObject(i).get(\"status\").equals(\"RUNNING\") ? (numTasksRunning + 1) : numTasksRunning;\n+                numTasksRunning =\n+                    tasks.getJSONObject(i).get(\"status\").equals(\"RUNNING\") ?\n+                        (numTasksRunning + 1) : numTasksRunning;\n             } else {\n-                numTasksRunning = tasks.getJSONObject(i).get(\"state\").equals(\"TASK_RUNNING\") ? (numTasksRunning + 1) : numTasksRunning;\n+                numTasksRunning =\n+                    tasks.getJSONObject(i).get(\"state\").equals(\"TASK_RUNNING\") ?\n+                        (numTasksRunning + 1) : numTasksRunning;\n             }\n         }\n         return numTasksRunning == numTasks;\n@@ -529,20 +678,30 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get info from global config with path '(.*?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void infoFromGlobalConfig(String path, String envVar, String fileName) throws Exception {\n+    public void infoFromGlobalConfig(String path, String envVar,\n+                                     String fileName) throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/central\";\n         Future<Response> response;\n \n         String pathEndpoint = \"?path=\" + path.replaceAll(\"/\", \"%2F\");\n         endPoint = endPoint.concat(pathEndpoint);\n \n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -564,17 +723,27 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get global configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getGlobalConfig(String envVar, String fileName) throws Exception {\n+    public void getGlobalConfig(String envVar, String fileName)\n+        throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/config\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/central/config\";\n         Future<Response> response;\n \n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -596,17 +765,27 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get schema from global configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getSchemaGlobalConfig(String envVar, String fileName) throws Exception {\n+    public void getSchemaGlobalConfig(String envVar, String fileName)\n+        throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/schema\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/central/schema\";\n         Future<Response> response;\n \n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -629,17 +808,27 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get network '(.*?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getNetworkById(String networkId, String envVar, String fileName) throws Exception {\n+    public void getNetworkById(String networkId, String envVar, String fileName)\n+        throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/network/\" + networkId;\n         Future<Response> response;\n \n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -661,17 +850,27 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get all networks( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getAllNetworks(String envVar, String fileName) throws Exception {\n+    public void getAllNetworks(String envVar, String fileName)\n+        throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/all\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/network/all\";\n         Future<Response> response;\n \n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -694,20 +893,29 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get path '(.*?)' from Mesos configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getMesosConfiguration(String path, String envVar, String fileName) throws Exception {\n+    public void getMesosConfiguration(String path, String envVar,\n+                                      String fileName) throws Exception {\n \n         Future<Response> response;\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/mesos\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/mesos\";\n         String pathEndpoint = \"?path=\" + path.replaceAll(\"/\", \"%2F\");\n         endPoint = endPoint.concat(pathEndpoint);\n \n-        response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -746,16 +954,24 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I (create|update) calico network '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string|gov)')? with:$\")\n-    public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation, String networkId, String contains, String responseVal, String baseData, String type, DataTable modifications) throws Exception {\n+    public void calicoNetworkTimeout(Integer timeout, Integer wait,\n+                                     String operation, String networkId,\n+                                     String contains, String responseVal,\n+                                     String baseData, String type,\n+                                     DataTable modifications) throws Exception {\n \n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n-        commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n-        String modifiedData = commonspec.modifyData(retrievedData, type, modifications);\n-\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network\";\n+        commonspec.getLogger()\n+            .debug(\"Modifying data {} as {}\", retrievedData, type);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, type, modifications);\n+\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/network\";\n         String requestType = operation.equals(\"create\") ? \"PUT\" : \"POST\";\n \n         Boolean searchUntilContains;\n@@ -781,26 +997,34 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n             try {\n-                commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n+                commonspec.getLogger()\n+                    .debug(\"Generating request {} to {} with data {} as {}\",\n+                        requestType, endPoint, modifiedData, type);\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint,\n+                        modifiedData, type);\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n \n                 if (searchUntilContains) {\n-                    assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n+                    assertThat(commonspec.getResponse().getResponse())\n+                        .containsPattern(pattern);\n                     found = true;\n                     timeout = i;\n                 } else {\n-                    assertThat(commonspec.getResponse().getResponse()).doesNotContain(responseVal);\n+                    assertThat(commonspec.getResponse().getResponse())\n+                        .doesNotContain(responseVal);\n                     found = false;\n                     timeout = i;\n                 }\n             } catch (AssertionError | Exception e) {\n                 if (!found) {\n-                    commonspec.getLogger().info(\"Response value not found after \" + i + \" seconds\");\n+                    commonspec.getLogger().info(\n+                        \"Response value not found after \" + i + \" seconds\");\n                 } else {\n-                    commonspec.getLogger().info(\"Response value found after \" + i + \" seconds\");\n+                    commonspec.getLogger()\n+                        .info(\"Response value found after \" + i + \" seconds\");\n                 }\n                 Thread.sleep(wait * 1000);\n                 if (e instanceof AssertionError) {\n@@ -811,13 +1035,17 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n         }\n-        if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n+        if ((!found && searchUntilContains) ||\n+            (found && !searchUntilContains)) {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger().info(\n+                \"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger().info(\n+                \"Success! Response value not found after \" + timeout +\n+                    \" seconds\");\n         }\n     }\n \n@@ -830,12 +1058,21 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I( force to)? delete calico network '(.+?)' so that the response( does not)? contains '(.+?)'$\")\n-    public void deleteCalicoNetworkTimeout(Integer timeout, Integer wait, String force, String networkId, String contains, String responseVal) throws Exception {\n-\n-        if (force == null && (networkId.equals(\"logs\") || networkId.equals(\"stratio\") || networkId.equals(\"metrics\") || networkId.equals(\"stratio-shared\"))) {\n-            throw new Exception(\"It is not possible deleting networks stratio, metrics, logs or stratio-shared\");\n-        }\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n+    public void deleteCalicoNetworkTimeout(Integer timeout, Integer wait,\n+                                           String force, String networkId,\n+                                           String contains, String responseVal)\n+        throws Exception {\n+\n+        if (force == null &&\n+            (networkId.equals(\"logs\") || networkId.equals(\"stratio\") ||\n+                networkId.equals(\"metrics\") ||\n+                networkId.equals(\"stratio-shared\"))) {\n+            throw new Exception(\n+                \"It is not possible deleting networks stratio, metrics, logs or stratio-shared\");\n+        }\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/network/\" + networkId;\n         String requestType = \"DELETE\";\n \n         if (wait == null || timeout == null) {\n@@ -861,26 +1098,34 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n             try {\n-                commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, null, null);\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, null, null);\n+                commonspec.getLogger()\n+                    .debug(\"Generating request {} to {} with data {} as {}\",\n+                        requestType, endPoint, null, null);\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint,\n+                        null, null);\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n \n                 if (searchUntilContains) {\n-                    assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n+                    assertThat(commonspec.getResponse().getResponse())\n+                        .containsPattern(pattern);\n                     found = true;\n                     timeout = i;\n                 } else {\n-                    assertThat(commonspec.getResponse().getResponse()).doesNotContain(responseVal);\n+                    assertThat(commonspec.getResponse().getResponse())\n+                        .doesNotContain(responseVal);\n                     found = false;\n                     timeout = i;\n                 }\n             } catch (AssertionError | Exception e) {\n                 if (!found) {\n-                    commonspec.getLogger().info(\"Response value not found after \" + i + \" seconds\");\n+                    commonspec.getLogger().info(\n+                        \"Response value not found after \" + i + \" seconds\");\n                 } else {\n-                    commonspec.getLogger().info(\"Response value found after \" + i + \" seconds\");\n+                    commonspec.getLogger()\n+                        .info(\"Response value found after \" + i + \" seconds\");\n                 }\n                 Thread.sleep(wait * 1000);\n                 if (e instanceof AssertionError) {\n@@ -891,41 +1136,57 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n         }\n-        if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n+        if ((!found && searchUntilContains) ||\n+            (found && !searchUntilContains)) {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger().info(\n+                \"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger().info(\n+                \"Success! Response value not found after \" + timeout +\n+                    \" seconds\");\n         }\n     }\n \n     /**\n      * Get service schema\n      *\n-     * @param level     schema level\n-     * @param service   service name\n-     * @param model     service model\n-     * @param version   service version\n-     * @param envVar    environment variable to save response in\n-     * @param fileName  file name where response is saved\n+     * @param level    schema level\n+     * @param service  service name\n+     * @param model    service model\n+     * @param version  service version\n+     * @param envVar   environment variable to save response in\n+     * @param fileName file name where response is saved\n      * @throws Exception\n      */\n     @Given(\"^I get schema( with level '(\\\\d+)')? from service '(.+?)' with model '(.+?)' and version '(.+?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getServiceSchema(Integer level, String service, String model, String version, String envVar, String fileName) throws Exception {\n+    public void getServiceSchema(Integer level, String service, String model,\n+                                 String version, String envVar, String fileName)\n+        throws Exception {\n \n         if (level == null) {\n             level = 1;\n         }\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?enriched=true&level=\" + level;\n-        Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" +\n+                service + \"/\" + model + \"/\" + version +\n+                \"/schema?enriched=true&level=\" + level;\n+        Future<Response> response = commonspec\n+            .generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint +\n+                \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -940,15 +1201,23 @@ public class CCTSpec extends BaseGSpec {\n     private void writeInFile(String json, String fileName) throws Exception {\n \n         // Create file (temporary) and set path to be accessible within test\n-        File tempDirectory = new File(System.getProperty(\"user.dir\") + \"/target/test-classes/\");\n-        String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n-        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n+        File tempDirectory =\n+            new File(System.getProperty(\"user.dir\") + \"/target/test-classes/\");\n+        String absolutePathFile =\n+            tempDirectory.getAbsolutePath() + \"/\" + fileName;\n+        commonspec.getLogger()\n+            .debug(\"Creating file {} in 'target/test-classes'\",\n+                absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), StandardCharsets.UTF_8));\n+        Writer out = new BufferedWriter(\n+            new OutputStreamWriter(new FileOutputStream(absolutePathFile),\n+                StandardCharsets.UTF_8));\n         try {\n             out.write(json);\n         } catch (Exception e) {\n-            commonspec.getLogger().error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n+            commonspec.getLogger()\n+                .error(\"Custom file {} hasn't been created:\\n{}\",\n+                    absolutePathFile, e.toString());\n         } finally {\n             out.close();\n         }\n@@ -958,26 +1227,41 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Install service\n-     * @param service   service name\n-     * @param folder    folder where service are going to be installed\n-     * @param model     service model\n-     * @param version   service version\n-     * @param name      service instance name\n-     * @param tenant    tenant where to install service in\n-     * @param jsonFile  marathon json to deploy\n+     *\n+     * @param service  service name\n+     * @param folder   folder where service are going to be installed\n+     * @param model    service model\n+     * @param version  service version\n+     * @param name     service instance name\n+     * @param tenant   tenant where to install service in\n+     * @param jsonFile marathon json to deploy\n      * @throws Exception\n      */\n     @Given(\"^I install service '(.+?)'( in folder '(.+?)')? with model '(.+?)' and version '(.+?)' and instance name '(.+?)' in tenant '(.+?)' using json '(.+?)'$\")\n-    public void installServiceFromMarathonJson(String service, String folder, String model, String version, String name, String tenant, String jsonFile) throws Exception {\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?tenantId=\" + tenant;\n+    public void installServiceFromMarathonJson(String service, String folder,\n+                                               String model, String version,\n+                                               String name, String tenant,\n+                                               String jsonFile)\n+        throws Exception {\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" +\n+                service + \"/\" + model + \"/\" + version + \"/schema?tenantId=\" +\n+                tenant;\n         String data = this.commonspec.retrieveData(jsonFile, \"json\");\n \n-        Future<Response> response = commonspec.generateRequest(\"POST\", true, null, null, endPoint, data, \"json\");\n+        Future<Response> response = commonspec\n+            .generateRequest(\"POST\", true, null, null, endPoint, data, \"json\");\n         commonspec.setResponse(\"POST\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 202) {\n-            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request to endpoint: \" + endPoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         // Check Application in API\n@@ -985,9 +1269,12 @@ public class CCTSpec extends BaseGSpec {\n \n         String endPointStatus;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/deploy/status/all\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                    \"/v1/services?tenant=\" + tenant;\n         }\n \n         if (folder != null && folder.startsWith(\"/\")) {\n@@ -1004,22 +1291,25 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + name;\n             if (folder != null) {\n-                serviceName =  \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n+                serviceName =\n+                    \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n             }\n         }\n \n-        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, null, serviceName);\n+        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, null,\n+            serviceName);\n     }\n \n     /**\n      * Uninstall service from tenant\n      *\n-     * @param service   service name\n-     * @param tenant    tenant where service is installed\n+     * @param service service name\n+     * @param tenant  tenant where service is installed\n      * @throws Exception\n      */\n     @Given(\"^I uninstall service '(.+?)'( in folder '(.+?)')? from tenant '(.+?)'$\")\n-    public void uninstallService(String service, String folder, String tenant) throws Exception {\n+    public void uninstallService(String service, String folder, String tenant)\n+        throws Exception {\n         if (folder != null && folder.startsWith(\"/\")) {\n             folder = folder.substring(1);\n         }\n@@ -1034,17 +1324,27 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = tenant + \"/\" + tenant + \"-\" + service;\n             if (folder != null) {\n-                serviceName =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n+                serviceName =\n+                    tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n             }\n         }\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/uninstall?app=\" + serviceName;\n-        Future<Response> response = commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, \"\", \"json\");\n+        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+            \"/deploy/uninstall?app=\" + serviceName;\n+        Future<Response> response = commonspec\n+            .generateRequest(\"DELETE\", true, null, null, endPoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", response.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 202 && commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 202 &&\n+            commonspec.getResponse().getStatusCode() != 200) {\n+            logger.error(\"Request to endpoint: \" + endPoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         // Check service has disappeared\n@@ -1053,14 +1353,18 @@ public class CCTSpec extends BaseGSpec {\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/deploy/status/all\";\n             key = \"\\\"serviceName\\\"\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                    \"/v1/services?tenant=\" + tenant;\n             key = \"\\\"id\\\"\";\n         }\n \n-        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\", key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n+        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\",\n+            key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n         // Check all resources have been freed\n         DcosSpec dcosSpec = new DcosSpec(commonspec);\n         dcosSpec.checkResources(serviceName);\n@@ -1069,82 +1373,104 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Upload rules\n      *\n-     * @param rulesPath   path to rules zip file\n-     * @param priority    (optional) priority to assign to the rules\n-     * @param version     (optional) version to use for rules\n+     * @param rulesPath path to rules zip file\n+     * @param priority  (optional) priority to assign to the rules\n+     * @param version   (optional) version to use for rules\n      * @throws Exception\n      */\n     @Given(\"^I upload rules file '(.+?)'( with priority '(.+?)')?( overriding version to '(.+?)')?\")\n-    public void uploadRules(String rulesPath, String priority, String version) throws Exception {\n+    public void uploadRules(String rulesPath, String priority, String version)\n+        throws Exception {\n         // Check file exists\n         File rules = new File(rulesPath);\n-        Assertions.assertThat(rules.exists()).as(\"File: \" + rulesPath + \" does not exist.\").isTrue();\n+        Assertions.assertThat(rules.exists())\n+            .as(\"File: \" + rulesPath + \" does not exist.\").isTrue();\n \n         // Obtain endpoint\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n-        String endPointUpload = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/knowledge/upload\";\n+        String endPointUpload =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/knowledge/upload\";\n \n         // Obtain URL\n-        String restURL = \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n+        String restURL =\n+            \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() +\n+                endPointUpload;\n \n         // Form query parameters\n-        String headers = \"-H \\\"accept: */*\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n+        String headers =\n+            \"-H \\\"accept: */*\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n         String forms = \"-F \\\"file=@\" + rulesPath + \";type=application/zip\\\"\";\n \n         if (priority == null) {\n             priority = \"0\";\n         }\n-        forms = forms + \" -F \\\"priority=\" + priority  + \"\\\"\";\n+        forms = forms + \" -F \\\"priority=\" + priority + \"\\\"\";\n \n         if (version != null) {\n             forms = forms + \" -F \\\"version=\" + version + \"\\\"\";\n         }\n \n-        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n-        String command = \"curl -X POST -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n+        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" +\n+            ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n+        String command =\n+            \"curl -X POST -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers +\n+                \" \" + forms;\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n \n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(0);\n-        Assertions.assertThat(commonspec.getCommandResult()).as(\"Not possible to upload rules: \" + commonspec.getCommandResult()).doesNotContain(\"Error\");\n+        Assertions.assertThat(commonspec.getCommandResult())\n+            .as(\"Not possible to upload rules: \" +\n+                commonspec.getCommandResult()).doesNotContain(\"Error\");\n     }\n \n     /**\n      * Upload descriptors\n      *\n-     * @param descriptorsPath   path to descriptors zip file\n-     * @param version     (optional) version to use for rules\n+     * @param descriptorsPath path to descriptors zip file\n+     * @param version         (optional) version to use for rules\n      * @throws Exception\n      */\n     @Given(\"^I upload descriptors file '(.+?)'( overriding version to '(.+?)')?\")\n-    public void uploadDescriptors(String descriptorsPath, String version) throws Exception {\n+    public void uploadDescriptors(String descriptorsPath, String version)\n+        throws Exception {\n         String headers = \"\";\n         String forms = \"\";\n         String op = \"\";\n \n         // Check file exists\n         File descriptors = new File(descriptorsPath);\n-        Assertions.assertThat(descriptors.exists()).as(\"File: \" + descriptorsPath + \" does not exist.\").isTrue();\n+        Assertions.assertThat(descriptors.exists())\n+            .as(\"File: \" + descriptorsPath + \" does not exist.\").isTrue();\n \n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         // Obtain cookie\n-        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n+        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" +\n+            ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n \n         String endPointUpload = \"\";\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endPointUpload = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors\";\n-            headers = \"-H \\\"accept: application/json\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n+            endPointUpload =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") +\n+                    \"/v1/descriptors\";\n+            headers =\n+                \"-H \\\"accept: application/json\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n             forms = \"-F \\\"file=@\" + descriptorsPath + \";type=application/zip\\\"\";\n             op = \"PUT\";\n         } else {\n-            endPointUpload = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/upload\";\n+            endPointUpload = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/universe/upload\";\n             headers = \"-H \\\"Content-Type: multipart/form-data\\\"\";\n             forms = \"-F \\\"file=@\" + descriptorsPath + \"\\\"\";\n \n@@ -1155,10 +1481,14 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Obtain URL\n-        String restURL = \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n+        String restURL =\n+            \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() +\n+                endPointUpload;\n \n         // Form query\n-        String command = \"curl -X \" + op + \" -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n+        String command =\n+            \"curl -X \" + op + \" -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" +\n+                headers + \" \" + forms;\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n@@ -1168,27 +1498,34 @@ public class CCTSpec extends BaseGSpec {\n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(0);\n \n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            String accepted = commonspec.getJSONPathString(result, \"$.accepted\", null);\n-            String rejected = commonspec.getJSONPathString(result, \"$.rejected\", null);\n+            String accepted =\n+                commonspec.getJSONPathString(result, \"$.accepted\", null);\n+            String rejected =\n+                commonspec.getJSONPathString(result, \"$.rejected\", null);\n \n             if (\"[]\".equals(accepted)) {\n                 fail(\"No descriptors have been uploaded correctly: \" + result);\n             }\n \n             if (!\"[]\".equals(rejected)) {\n-                fail(\"There are descriptors that have been rejected: \" + rejected);\n+                fail(\"There are descriptors that have been rejected: \" +\n+                    rejected);\n             }\n         } else {\n-            String added = commonspec.getJSONPathString(result, \"$.added\", null);\n-            String error = commonspec.getJSONPathString(result, \"$.error\", null);\n-            String existing = commonspec.getJSONPathString(result, \"$.existing\", null);\n+            String added =\n+                commonspec.getJSONPathString(result, \"$.added\", null);\n+            String error =\n+                commonspec.getJSONPathString(result, \"$.error\", null);\n+            String existing =\n+                commonspec.getJSONPathString(result, \"$.existing\", null);\n \n             if (\"[]\".equals(added)) {\n                 fail(\"No descriptors have been uploaded correctly: \" + result);\n             }\n \n             if (!\"[]\".equals(error)) {\n-                fail(\"There are descriptors that have been rejected: \" + result);\n+                fail(\n+                    \"There are descriptors that have been rejected: \" + result);\n             }\n \n             if (!\"[]\".equals(existing)) {\n@@ -1200,17 +1537,20 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Update a deployed service\n      *\n-     * @param serviceName       name of the service to be updated\n-     * @param folder            (optional) name of the folder where service is deployed\n-     * @param tenant            tenant where service is deployed\n-     * @param version           version of the deployed service\n-     * @param modifications     modifications to perform in the deployed json\n+     * @param serviceName   name of the service to be updated\n+     * @param folder        (optional) name of the folder where service is deployed\n+     * @param tenant        tenant where service is deployed\n+     * @param version       version of the deployed service\n+     * @param modifications modifications to perform in the deployed json\n      * @throws Exception\n      */\n     @Given(\"^I update service '(.+?)'( in folder '(.+?)')? in tenant '(.+?)'( based on version '(.+?)')?( based on json '(.+?)')? with:$\")\n-    public void updateCCTService(String serviceName, String folder, String tenant, String version, String jsonFile, DataTable modifications) throws Exception {\n+    public void updateCCTService(String serviceName, String folder,\n+                                 String tenant, String version, String jsonFile,\n+                                 DataTable modifications) throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n \n         // obtain service name\n@@ -1228,7 +1568,8 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             service = tenant + \"/\" + tenant + \"-\" + serviceName;\n             if (folder != null) {\n-                service =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n+                service =\n+                    tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n             }\n         }\n \n@@ -1236,25 +1577,38 @@ public class CCTSpec extends BaseGSpec {\n         try {\n             checkServiceStatus(10, 1, service, null, \"running\");\n         } catch (Exception e) {\n-            logger.error(\"Service: \" + service + \" is not deployed in cluster.\");\n+            logger\n+                .error(\"Service: \" + service + \" is not deployed in cluster.\");\n             throw e;\n         }\n \n         String deployedJson = \"\";\n \n-        if (version == null && jsonFile == null || version != null && jsonFile != null) {\n-            throw new Exception(\"Version or json file must be defined (but NOT both)\");\n+        if (version == null && jsonFile == null ||\n+            version != null && jsonFile != null) {\n+            throw new Exception(\n+                \"Version or json file must be defined (but NOT both)\");\n         }\n \n         if (version != null) {\n             // Obtain deployed service json\n-            String endpointJson = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service + \"?version=\" + version;\n-            Future<Response> responseJson = commonspec.generateRequest(\"GET\", true, null, null, endpointJson, \"\", \"json\");\n+            String endpointJson =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" +\n+                    service + \"?version=\" + version;\n+            Future<Response> responseJson = commonspec\n+                .generateRequest(\"GET\", true, null, null, endpointJson, \"\",\n+                    \"json\");\n             commonspec.setResponse(\"GET\", responseJson.get());\n \n             if (commonspec.getResponse().getStatusCode() != 200) {\n-                logger.error(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-                throw new Exception(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+                logger.error(\"Request to endpoint: \" + endpointJson +\n+                    \" failed with status code: \" +\n+                    commonspec.getResponse().getStatusCode() +\n+                    \" and response: \" + commonspec.getResponse().getResponse());\n+                throw new Exception(\"Request to endpoint: \" + endpointJson +\n+                    \" failed with status code: \" +\n+                    commonspec.getResponse().getStatusCode() +\n+                    \" and response: \" + commonspec.getResponse().getResponse());\n             }\n \n             // Modify json according to provided changes\n@@ -1268,33 +1622,46 @@ public class CCTSpec extends BaseGSpec {\n \n         String modifiedData;\n         if (modifications != null) {\n-            modifiedData = commonspec.modifyData(deployedJson, \"json\", modifications);\n+            modifiedData =\n+                commonspec.modifyData(deployedJson, \"json\", modifications);\n         } else {\n             modifiedData = deployedJson;\n         }\n \n         // Deploy new json\n-        String endpointUpdate = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service;\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpointUpdate, modifiedData, \"json\");\n+        String endpointUpdate =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" +\n+                service;\n+        Future<Response> responseUpdate = commonspec\n+            .generateRequest(\"PUT\", true, null, null, endpointUpdate,\n+                modifiedData, \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n \n         if (commonspec.getResponse().getStatusCode() != 202) {\n-            logger.error(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request to endpoint: \" + endpointUpdate +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endpointUpdate +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n     /**\n      * Update a deployed service\n      *\n-     * @param serviceName       name of the service to be updated\n-     * @param folder            (optional) name of the folder where service is deployed\n-     * @param tenant            tenant where service is deployed\n-     * @param version           version of the deployed service\n+     * @param serviceName name of the service to be updated\n+     * @param folder      (optional) name of the folder where service is deployed\n+     * @param tenant      tenant where service is deployed\n+     * @param version     version of the deployed service\n      * @throws Exception\n      */\n     @Given(\"^I update service '(.+?)'( in folder '(.+?)')? in tenant '(.+?)'( based on version '(.+?)')?( based on json '(.+?)')?$\")\n-    public void updateCCTService(String serviceName, String folder, String tenant, String version, String jsonFile) throws Exception {\n+    public void updateCCTService(String serviceName, String folder,\n+                                 String tenant, String version, String jsonFile)\n+        throws Exception {\n         updateCCTService(serviceName, folder, tenant, version, jsonFile, null);\n     }\n \n@@ -1302,146 +1669,210 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Upload a descriptor\n      *\n-     * @param service           name of the descriptor to be updated\n-     * @param model             model of the descriptor\n-     * @param version           version of the descriptor\n-     * @param originalJson      base descriptor json\n-     * @param modifications     modifications to perform in the descriptor json\n+     * @param service       name of the descriptor to be updated\n+     * @param model         model of the descriptor\n+     * @param version       version of the descriptor\n+     * @param originalJson  base descriptor json\n+     * @param modifications modifications to perform in the descriptor json\n      * @throws Exception\n      */\n     @Given(\"^I upload descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n-    public void uploadCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n+    public void uploadCCTDescriptor(String service, String model,\n+                                    String version, String originalJson,\n+                                    DataTable modifications) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         String endpoint;\n         String op;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") +\n+                \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n             op = \"PUT\";\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/universe/\" + service + \"/\" + model + \"/\" + version +\n+                \"/descriptor\";\n             op = \"POST\";\n         }\n \n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(originalJson, \"json\");\n         // Modify json\n-        String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, \"json\", modifications);\n \n         // Upload new descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(op, true, null, null, endpoint, modifiedData, \"json\");\n+        Future<Response> responseUpdate = commonspec\n+            .generateRequest(op, true, null, null, endpoint, modifiedData,\n+                \"json\");\n         commonspec.setResponse(op, responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Upload descriptor: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Upload descriptor: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n     /**\n      * Update a descriptor\n      *\n-     * @param service           name of the descriptor to be updated\n-     * @param model             model of the descriptor\n-     * @param version           version of the descriptor\n-     * @param originalJson      base descriptor json\n-     * @param modifications     modifications to perform in the descriptor json\n+     * @param service       name of the descriptor to be updated\n+     * @param model         model of the descriptor\n+     * @param version       version of the descriptor\n+     * @param originalJson  base descriptor json\n+     * @param modifications modifications to perform in the descriptor json\n      * @throws Exception\n      */\n     @Given(\"^I update descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n-    public void updateCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n+    public void updateCCTDescriptor(String service, String model,\n+                                    String version, String originalJson,\n+                                    DataTable modifications) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         String endpoint;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") +\n+                \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/universe/\" + service + \"/\" + model + \"/\" + version +\n+                \"/descriptor\";\n         }\n \n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(originalJson, \"json\");\n         // Modify json\n-        String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n+        String modifiedData =\n+            commonspec.modifyData(retrievedData, \"json\", modifications);\n \n         // Update descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpoint, modifiedData, \"json\");\n+        Future<Response> responseUpdate = commonspec\n+            .generateRequest(\"PUT\", true, null, null, endpoint, modifiedData,\n+                \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Update descriptor: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Update descriptor: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n     /**\n      * Delete a descriptor\n      *\n-     * @param service           name of the descriptor to be updated\n-     * @param model             model of the descriptor\n-     * @param version           version of the descriptor\n+     * @param service name of the descriptor to be updated\n+     * @param model   model of the descriptor\n+     * @param version version of the descriptor\n      * @throws Exception\n      */\n     @Given(\"^I delete descriptor for service '(.+?)', model '(.+?)' version '(.+?)'$\")\n-    public void deleteCCTDescriptor(String service, String model, String version) throws Exception {\n+    public void deleteCCTDescriptor(String service, String model,\n+                                    String version) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         String endpoint;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") +\n+                \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/universe/\" + service + \"/\" + model + \"/\" + version +\n+                \"/descriptor\";\n         }\n \n         // Delete descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"DELETE\", true, null, null, endpoint, \"\", \"json\");\n+        Future<Response> responseUpdate = commonspec\n+            .generateRequest(\"DELETE\", true, null, null, endpoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201 && commonspec.getResponse().getStatusCode() != 204) {\n-            logger.error(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201 &&\n+            commonspec.getResponse().getStatusCode() != 204) {\n+            logger.error(\"Delete descriptor: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Delete descriptor: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n     /**\n      * Read value from centralized configuration path\n      *\n-     * @param path      path to read value from (separated with '/')\n-     * @param envVar    environment variable where to store the read value\n+     * @param path   path to read value from (separated with '/')\n+     * @param envVar environment variable where to store the read value\n      * @throws Exception\n      */\n     @When(\"^I read value in path '(.+?)' from central configuration and save it in environment variable '(.+?)'$\")\n-    public void readValueCentralConfig(String path, String envVar) throws Exception {\n+    public void readValueCentralConfig(String path, String envVar)\n+        throws Exception {\n         if (ThreadProperty.get(\"configuration_api_id\") == null) {\n-            fail(\"configuration_api_id variable is not set. Check configuratio-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"configuration_api_id variable is not set. Check configuratio-api is installed and @dcos annotation is working properly.\");\n         }\n \n         // Set sso token\n         DcosSpec dcosSpec = new DcosSpec(commonspec);\n-        dcosSpec.setGoSecSSOCookie(null, null, ThreadProperty.get(\"EOS_ACCESS_POINT\"), ThreadProperty.get(\"DCOS_USER\"), System.getProperty(\"DCOS_PASSWORD\"), ThreadProperty.get(\"DCOS_TENANT\"), null);\n+        dcosSpec.setGoSecSSOCookie(null, null,\n+            ThreadProperty.get(\"EOS_ACCESS_POINT\"),\n+            ThreadProperty.get(\"DCOS_USER\"),\n+            System.getProperty(\"DCOS_PASSWORD\"),\n+            ThreadProperty.get(\"DCOS_TENANT\"), null);\n         // Securely send requests\n         commonspec.setRestProtocol(\"https://\");\n         commonspec.setRestHost(ThreadProperty.get(\"EOS_ACCESS_POINT\"));\n         commonspec.setRestPort(\":443\");\n \n         String fullPath = \"/dcs/v1/fabric\" + path;\n-        String endpoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/etcd?path=\" + fullPath;\n+        String endpoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") +\n+                \"/etcd?path=\" + fullPath;\n \n-        Future<Response> responseETCD = commonspec.generateRequest(\"GET\", false, null, null, endpoint, \"\", null);\n+        Future<Response> responseETCD = commonspec\n+            .generateRequest(\"GET\", false, null, null, endpoint, \"\", null);\n         commonspec.setResponse(\"GET\", responseETCD.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Obtain info from ETCD: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Obtain info from ETCD: \" + endpoint +\n+                \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         ThreadProperty.set(envVar, commonspec.getResponse().getResponse());\n",
            "diff_size": 740
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "484",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "486",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "487",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "492",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "494",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "496",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "498",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "499",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/33/CCTSpec.java\nindex 9a43576fa9..56d978debe 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/33/CCTSpec.java\n@@ -47,7 +47,8 @@ import static org.testng.Assert.fail;\n public class CCTSpec extends BaseGSpec {\n \n     private final Logger logger = LoggerFactory.getLogger(CCTSpec.class);\n-    /**\n+\n+/**\n      * Generic constructor.\n      *\n      * @param spec object\n@@ -110,12 +111,12 @@ public class CCTSpec extends BaseGSpec {\n         }\n         commonspec.setResponse(\"GET\", response.get());\n         commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-        String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+        String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" + logType;\n         String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n         Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName), logOfTask.getBytes());\n     }\n \n-     /**\n+/**\n      * Read last lines from logs of a service/framework\n      * @param logType\n      * @param service\n@@ -124,7 +125,7 @@ public class CCTSpec extends BaseGSpec {\n      * @param lastLinesToRead\n      * @throws Exception\n      */\n-    @Given(\"^The '(stdout|stderr)' of service '(.+?)'( with task type '(.+?)')? contains '(.+?)' in the last '(\\\\d+)' lines$\")\n+@Given(\"^The '(stdout|stderr)' of service '(.+?)'( with task type '(.+?)')? contains '(.+?)' in the last '(\\\\d+)' lines$\")\n     public void readLogsFromService(String logType, String service, String taskType, String logToCheck, Integer lastLinesToRead) throws Exception {\n         commonspec.getLogger().debug(\"Start process of read \" + lastLinesToRead + \" from the mesos log\");\n         String endPoint;\n@@ -142,7 +143,7 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(endPoint, response.get());\n         ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), taskType, \"id\");\n         commonspec.getLogger().info(\"Mesos Task Ids obtained successfully\");\n-        commonspec.getLogger().debug(\"Mesos task ids: \"  + Arrays.toString(mesosTaskId.toArray()));\n+        commonspec.getLogger().debug(\"Mesos task ids: \" + Arrays.toString(mesosTaskId.toArray()));\n         boolean contained = false;\n         for (int i = 0; i < mesosTaskId.size() && !contained; i++) {\n             String endpointTask;\n@@ -158,7 +159,7 @@ public class CCTSpec extends BaseGSpec {\n             }\n             commonspec.setResponse(\"GET\", response.get());\n             commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-            String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+            String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" + logType;\n             commonspec.getLogger().debug(\"Trying to read mesos logs\");\n             String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n             if (logOfTask.contains(logToCheck)) {\n@@ -336,7 +337,7 @@ public class CCTSpec extends BaseGSpec {\n         if (ThreadProperty.get(\"cct-marathon-services_id\") != null) {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n-        boolean  statusService = false;\n+        boolean statusService = false;\n         for (int i = 0; (i <= timeout) && (!statusService); i += wait) {\n             try {\n                 Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n@@ -479,17 +480,23 @@ public class CCTSpec extends BaseGSpec {\n                 case \"healthy\":\n                 case \"unhealthy\":\n                     return healthiness.equalsIgnoreCase(expectedStatus);\n-                case \"running\":     return status.equalsIgnoreCase(\"RUNNING\");\n-                case \"stopped\":     return status.equalsIgnoreCase(\"SUSPENDED\");\n-                default:\n+                case \"running\":\n+    return status.equalsIgnoreCase(\"RUNNING\");\n+                case \"stopped\":\n+    return status.equalsIgnoreCase(\"SUSPENDED\");\n+    default:\n             }\n         } else {\n             switch (expectedStatus) {\n-                case \"healthy\":     return response.contains(\"\\\"healthy\\\":1\");\n-                case \"unhealthy\":   return response.contains(\"\\\"healthy\\\":2\");\n-                case \"running\":     return response.contains(\"\\\"status\\\":2\");\n-                case \"stopped\":     return response.contains(\"\\\"status\\\":1\");\n-                default:\n+                case \"healthy\":\n+    return response.contains(\"\\\"healthy\\\":1\");\n+                case \"unhealthy\":\n+    return response.contains(\"\\\"healthy\\\":2\");\n+                case \"running\":\n+    return response.contains(\"\\\"status\\\":2\");\n+                case \"stopped\":\n+    return response.contains(\"\\\"status\\\":1\");\n+    default:\n             }\n         }\n         return false;\n@@ -747,8 +754,7 @@ public class CCTSpec extends BaseGSpec {\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I (create|update) calico network '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string|gov)')? with:$\")\n     public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation, String networkId, String contains, String responseVal, String baseData, String type, DataTable modifications) throws Exception {\n-\n-        // Retrieve data\n+    // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n@@ -938,8 +944,7 @@ public class CCTSpec extends BaseGSpec {\n     }\n \n     private void writeInFile(String json, String fileName) throws Exception {\n-\n-        // Create file (temporary) and set path to be accessible within test\n+    // Create file (temporary) and set path to be accessible within test\n         File tempDirectory = new File(System.getProperty(\"user.dir\") + \"/target/test-classes/\");\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n         commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n@@ -1004,7 +1009,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + name;\n             if (folder != null) {\n-                serviceName =  \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n+                serviceName = \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n             }\n         }\n \n@@ -1034,7 +1039,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = tenant + \"/\" + tenant + \"-\" + service;\n             if (folder != null) {\n-                serviceName =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n+                serviceName = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n             }\n         }\n \n@@ -1096,7 +1101,7 @@ public class CCTSpec extends BaseGSpec {\n         if (priority == null) {\n             priority = \"0\";\n         }\n-        forms = forms + \" -F \\\"priority=\" + priority  + \"\\\"\";\n+        forms = forms + \" -F \\\"priority=\" + priority + \"\\\"\";\n \n         if (version != null) {\n             forms = forms + \" -F \\\"version=\" + version + \"\\\"\";\n@@ -1228,7 +1233,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             service = tenant + \"/\" + tenant + \"-\" + serviceName;\n             if (folder != null) {\n-                service =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n+                service = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n             }\n         }\n \n@@ -1447,4 +1452,4 @@ public class CCTSpec extends BaseGSpec {\n         ThreadProperty.set(envVar, commonspec.getResponse().getResponse());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/33/CCTSpec.java\nindex 9a43576fa9..ee8ce61426 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/33/CCTSpec.java\n@@ -26,7 +26,6 @@ import org.json.JSONArray;\n import org.json.JSONObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.*;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n@@ -37,6 +36,7 @@ import java.util.concurrent.Future;\n import java.util.regex.Pattern;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+\n import static org.testng.Assert.fail;\n \n /**\n@@ -44,6 +44,8 @@ import static org.testng.Assert.fail;\n  *\n  * @see <a href=\"CCTSpec-annotations.html\">Command Center Steps</a>\n  */\n+\n+\n public class CCTSpec extends BaseGSpec {\n \n     private final Logger logger = LoggerFactory.getLogger(CCTSpec.class);\n@@ -52,6 +54,8 @@ public class CCTSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n+\n     public CCTSpec(CommonG spec) {\n         this.commonspec = spec;\n     }\n@@ -63,6 +67,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param taskType\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I want to download '(stdout|stderr)' last '(\\\\d+)' lines of service '(.+?)'( with task type '(.+?)')?\")\n     public void downLoadLogsFromService(String logType, Integer lastLinesToRead, String service, String taskType) throws Exception {\n         String fileOutputName = service.replace('/', '_') + taskType + logType;\n@@ -72,6 +78,7 @@ public class CCTSpec extends BaseGSpec {\n         } else {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n+\n         Future<Response> response = null;\n         commonspec.getLogger().debug(\"Trying to send http request to: \" + endPoint);\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n@@ -93,6 +100,7 @@ public class CCTSpec extends BaseGSpec {\n             contained = true;\n             taskType = mesosTaskId.get(0);\n         }\n+\n         if (!contained) {\n             fail(\"The mesos task type does not exists\");\n         }\n@@ -110,7 +118,9 @@ public class CCTSpec extends BaseGSpec {\n         }\n         commonspec.setResponse(\"GET\", response.get());\n         commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-        String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+        String path = obtainLogsPath(commonspec.getResponse().getResponse(),\n+            logType,\n+                \"READ\") + \"/\" + logType;\n         String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n         Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName), logOfTask.getBytes());\n     }\n@@ -124,6 +134,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param lastLinesToRead\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^The '(stdout|stderr)' of service '(.+?)'( with task type '(.+?)')? contains '(.+?)' in the last '(\\\\d+)' lines$\")\n     public void readLogsFromService(String logType, String service, String taskType, String logToCheck, Integer lastLinesToRead) throws Exception {\n         commonspec.getLogger().debug(\"Start process of read \" + lastLinesToRead + \" from the mesos log\");\n@@ -133,6 +145,7 @@ public class CCTSpec extends BaseGSpec {\n         } else {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n+\n         Future<Response> response = null;\n         commonspec.getLogger().debug(\"Trying to send http request to: \" + endPoint);\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n@@ -140,9 +153,11 @@ public class CCTSpec extends BaseGSpec {\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(endPoint, response.get());\n-        ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), taskType, \"id\");\n+        ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(),\n+            taskType,\n+                \"id\");\n         commonspec.getLogger().info(\"Mesos Task Ids obtained successfully\");\n-        commonspec.getLogger().debug(\"Mesos task ids: \"  + Arrays.toString(mesosTaskId.toArray()));\n+        commonspec.getLogger().debug(\"Mesos task ids: \" + Arrays.toString(mesosTaskId.toArray()));\n         boolean contained = false;\n         for (int i = 0; i < mesosTaskId.size() && !contained; i++) {\n             String endpointTask;\n@@ -158,13 +173,16 @@ public class CCTSpec extends BaseGSpec {\n             }\n             commonspec.setResponse(\"GET\", response.get());\n             commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-            String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+            String path = obtainLogsPath(commonspec.getResponse().getResponse(),\n+                logType,\n+                    \"READ\") + \"/\" + logType;\n             commonspec.getLogger().debug(\"Trying to read mesos logs\");\n             String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n             if (logOfTask.contains(logToCheck)) {\n                 contained = true;\n             }\n         }\n+\n         if (!contained) {\n             fail(\"The log \" + logToCheck + \" is not contaided in the task logs\");\n         }\n@@ -177,6 +195,8 @@ public class CCTSpec extends BaseGSpec {\n      * @return\n      * @throws Exception\n      */\n+\n+\n     public String readLogsFromMesos(String path, Integer lastLines) throws Exception {\n         //obtain last offset\n         Future<Response> response = null;\n@@ -184,8 +204,8 @@ public class CCTSpec extends BaseGSpec {\n         if (response.get().getStatusCode() != 200) {\n             throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" + commonspec.getResponse().getStatusCode());\n         }\n-        JSONObject offSetJson = new JSONObject(response.get().getResponseBody());\n \n+        JSONObject offSetJson = new JSONObject(response.get().getResponseBody());\n         Integer offSet = offSetJson.getInt(\"offset\");\n         //Read 1000 bytes\n         String logs = \"\";\n@@ -194,7 +214,6 @@ public class CCTSpec extends BaseGSpec {\n             String endPoint = path + \"&offset=\" + (i - 1000) + \"&length=\" + i;\n             if (i < 1000) {\n                 endPoint = path + \"&offset=0&length=\" + i;\n-\n             }\n             response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n             if (response.get().getStatusCode() != 200) {\n@@ -215,6 +234,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param action\n      * @return path\n      */\n+\n+\n     public String obtainLogsPath(String response, String logType, String action) {\n         String path = null;\n         JSONObject cctJsonResponse = new JSONObject(response);\n@@ -234,13 +255,16 @@ public class CCTSpec extends BaseGSpec {\n      * @param info\n      * @return\n      */\n-    public ArrayList<String> obtainMesosTaskInfo (String response, String taskType, String info) {\n+\n+\n+    public ArrayList<String> obtainMesosTaskInfo(String response, String taskType, String info) {\n         ArrayList<String> result = new ArrayList<String>();\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfTasks = (JSONArray) cctJsonResponse.get(\"tasks\");\n         if (arrayOfTasks.length() == 1 || taskType == null) {\n             result.add((arrayOfTasks.getJSONObject(0).getString(info)));\n         }\n+\n         String regex_name = \".*\";\n         if (taskType != null) {\n             regex_name = \".[\" + taskType + \"]*\";\n@@ -260,11 +284,14 @@ public class CCTSpec extends BaseGSpec {\n      * @param service\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I teardown the service '(.+?)' of tenant '(.+?)'\")\n     public void tearDownService(String service, String tenant) throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n             fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n+\n         String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/teardown?frameworkName=\" + service;\n         Future<Response> response;\n         response = commonspec.generateRequest(\"DELETE\", false, null, null, endPoint, \"\", null, \"\");\n@@ -274,8 +301,8 @@ public class CCTSpec extends BaseGSpec {\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n         // Check service has disappeared\n-        RestSpec restSpec = new RestSpec(commonspec);\n \n+        RestSpec restSpec = new RestSpec(commonspec);\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n@@ -303,16 +330,18 @@ public class CCTSpec extends BaseGSpec {\n      * @param instances\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I scale service '(.+?)' to '(\\\\d+)' instances\")\n     public void scaleService(String service, Integer instances) throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n             fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n+\n         String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/scale?instances=\" + instances + \"&serviceName=\" + service;\n         Future<Response> response;\n         response = commonspec.generateRequest(\"PUT\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"PUT\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n@@ -330,13 +359,15 @@ public class CCTSpec extends BaseGSpec {\n      * @param expectedStatus Expected status (healthy|unhealthy|running|stopped)\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check that the service '(.+?)' in CCT with '(\\\\d+)' tasks of type '(.+?)' is in '(healthy|unhealthy|running|stopped)' status\")\n     public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String taskType, String expectedStatus) throws Exception {\n         String endPoint = \"/service/deploy-api/deployments/service?instanceName=\" + service;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") != null) {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n-        boolean  statusService = false;\n+        boolean statusService = false;\n         for (int i = 0; (i <= timeout) && (!statusService); i += wait) {\n             try {\n                 Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n@@ -345,10 +376,12 @@ public class CCTSpec extends BaseGSpec {\n             } catch (Exception e) {\n                 commonspec.getLogger().debug(\"Error in request \" + endPoint + \" - \" + e.toString());\n             }\n+\n             if (i < timeout) {\n                 Thread.sleep(wait * 1000);\n             }\n         }\n+\n         if (!statusService) {\n             fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n         }\n@@ -362,6 +395,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param name\n      * @return\n      */\n+\n+\n     public boolean checkServiceStatusInResponse(String expectedStatus, String response, Integer tasks, String name) {\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfTasks = (JSONArray) cctJsonResponse.get(\"tasks\");\n@@ -382,6 +417,7 @@ public class CCTSpec extends BaseGSpec {\n                     return false;\n             }\n         }\n+\n         if (arrayOfTasks.length() == 1 || tasks == null) {\n             boolean res = (arrayOfTasks.getJSONObject(0).getString(key).equalsIgnoreCase(expectedStatus));\n             if (!res) {\n@@ -390,6 +426,7 @@ public class CCTSpec extends BaseGSpec {\n             }\n             return res;\n         }\n+\n         String regex_name = \".[\" + name + \"]*\";\n         for (int i = 0; i < arrayOfTasks.length(); i++) {\n             JSONObject task = arrayOfTasks.getJSONObject(i);\n@@ -402,6 +439,7 @@ public class CCTSpec extends BaseGSpec {\n                 }\n             }\n         }\n+\n         if (task_counter == tasks) {\n             return true;\n         }\n@@ -419,6 +457,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param expectedStatus Expected status (healthy|unhealthy|running|stopped)\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check in CCT that the service '(.+?)'( with number of tasks '(\\\\d+)')? is in '(healthy|unhealthy|running|stopped)' status$\")\n     public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String expectedStatus) throws Exception {\n         String endPoint = \"/service/deploy-api/deployments/service?instanceName=\" + service;\n@@ -429,7 +469,6 @@ public class CCTSpec extends BaseGSpec {\n         }\n         boolean found = false;\n         boolean isDeployed = false;\n-\n         for (int i = 0; (i <= timeout); i += wait) {\n             try {\n                 Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n@@ -441,6 +480,7 @@ public class CCTSpec extends BaseGSpec {\n             } catch (Exception e) {\n                 commonspec.getLogger().debug(\"Error in request \" + endPoint + \" - \" + e.toString());\n             }\n+\n             if ((found && (numTasks == null)) || (found && (numTasks != null) && isDeployed)) {\n                 break;\n             } else {\n@@ -449,14 +489,17 @@ public class CCTSpec extends BaseGSpec {\n                 } else if (numTasks != null && !isDeployed) {\n                     commonspec.getLogger().info(\"Tasks have not been deployed successfully after \" + i + \" seconds for service \" + service);\n                 }\n+\n                 if (i < timeout) {\n                     Thread.sleep(wait * 1000);\n                 }\n             }\n         }\n+\n         if (!found) {\n             fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n         }\n+\n         if ((numTasks != null) && !isDeployed) {\n             fail(\"Tasks have not been deployed successfully after \" + timeout + \" seconds for service \" + service);\n         }\n@@ -470,6 +513,7 @@ public class CCTSpec extends BaseGSpec {\n      * @param useMarathonServices True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n+\n     private boolean checkServiceStatusInResponse(String expectedStatus, String response, boolean useMarathonServices) {\n         if (useMarathonServices) {\n             JSONObject cctJsonResponse = new JSONObject(response);\n@@ -479,16 +523,22 @@ public class CCTSpec extends BaseGSpec {\n                 case \"healthy\":\n                 case \"unhealthy\":\n                     return healthiness.equalsIgnoreCase(expectedStatus);\n-                case \"running\":     return status.equalsIgnoreCase(\"RUNNING\");\n-                case \"stopped\":     return status.equalsIgnoreCase(\"SUSPENDED\");\n+                case \"running\":\n+                    return status.equalsIgnoreCase(\"RUNNING\");\n+                case \"stopped\":\n+                    return status.equalsIgnoreCase(\"SUSPENDED\");\n                 default:\n             }\n         } else {\n             switch (expectedStatus) {\n-                case \"healthy\":     return response.contains(\"\\\"healthy\\\":1\");\n-                case \"unhealthy\":   return response.contains(\"\\\"healthy\\\":2\");\n-                case \"running\":     return response.contains(\"\\\"status\\\":2\");\n-                case \"stopped\":     return response.contains(\"\\\"status\\\":1\");\n+                case \"healthy\":\n+                    return response.contains(\"\\\"healthy\\\":1\");\n+                case \"unhealthy\":\n+                    return response.contains(\"\\\"healthy\\\":2\");\n+                case \"running\":\n+                    return response.contains(\"\\\"status\\\":2\");\n+                case \"stopped\":\n+                    return response.contains(\"\\\"status\\\":1\");\n                 default:\n             }\n         }\n@@ -504,12 +554,11 @@ public class CCTSpec extends BaseGSpec {\n      * @param useMarathonServices True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n-    private boolean checkServiceDeployed(String response, int numTasks, boolean useMarathonServices) {\n \n+    private boolean checkServiceDeployed(String response, int numTasks, boolean useMarathonServices) {\n         JSONObject deployment = new JSONObject(response);\n         JSONArray tasks = (JSONArray) deployment.get(\"tasks\");\n         int numTasksRunning = 0;\n-\n         for (int i = 0; i < tasks.length(); i++) {\n             if (useMarathonServices) {\n                 numTasksRunning = tasks.getJSONObject(i).get(\"status\").equals(\"RUNNING\") ? (numTasksRunning + 1) : numTasksRunning;\n@@ -528,25 +577,22 @@ public class CCTSpec extends BaseGSpec {\n      * @param fileName\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I get info from global config with path '(.*?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void infoFromGlobalConfig(String path, String envVar, String fileName) throws Exception {\n-\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central\";\n         Future<Response> response;\n-\n         String pathEndpoint = \"?path=\" + path.replaceAll(\"/\", \"%2F\");\n         endPoint = endPoint.concat(pathEndpoint);\n-\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n-\n         if (envVar != null) {\n             ThreadProperty.set(envVar, json);\n         }\n@@ -563,22 +609,20 @@ public class CCTSpec extends BaseGSpec {\n      * @param fileName\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I get global configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getGlobalConfig(String envVar, String fileName) throws Exception {\n-\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/config\";\n         Future<Response> response;\n-\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n-\n         if (envVar != null) {\n             ThreadProperty.set(envVar, json);\n         }\n@@ -595,22 +639,20 @@ public class CCTSpec extends BaseGSpec {\n      * @param fileName\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I get schema from global configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getSchemaGlobalConfig(String envVar, String fileName) throws Exception {\n-\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/schema\";\n         Future<Response> response;\n-\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n-\n         if (envVar != null) {\n             ThreadProperty.set(envVar, json);\n         }\n@@ -628,22 +670,20 @@ public class CCTSpec extends BaseGSpec {\n      * @param fileName\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I get network '(.*?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getNetworkById(String networkId, String envVar, String fileName) throws Exception {\n-\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n         Future<Response> response;\n-\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n-\n         if (envVar != null) {\n             ThreadProperty.set(envVar, json);\n         }\n@@ -660,22 +700,20 @@ public class CCTSpec extends BaseGSpec {\n      * @param fileName\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I get all networks( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getAllNetworks(String envVar, String fileName) throws Exception {\n-\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/all\";\n         Future<Response> response;\n-\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n-\n         if (envVar != null) {\n             ThreadProperty.set(envVar, json);\n         }\n@@ -693,25 +731,22 @@ public class CCTSpec extends BaseGSpec {\n      * @param fileName\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I get path '(.*?)' from Mesos configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getMesosConfiguration(String path, String envVar, String fileName) throws Exception {\n-\n         Future<Response> response;\n-\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/mesos\";\n         String pathEndpoint = \"?path=\" + path.replaceAll(\"/\", \"%2F\");\n         endPoint = endPoint.concat(pathEndpoint);\n-\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n-\n         if (envVar != null) {\n             ThreadProperty.set(envVar, json);\n         }\n@@ -745,6 +780,8 @@ public class CCTSpec extends BaseGSpec {\n      *                      being the result of the modification: {\"key1\": \"value1\", \"key2\": {\"key3\": \"new value3\"}}\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I (create|update) calico network '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string|gov)')? with:$\")\n     public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation, String networkId, String contains, String responseVal, String baseData, String type, DataTable modifications) throws Exception {\n \n@@ -754,28 +791,23 @@ public class CCTSpec extends BaseGSpec {\n         // Modify data\n         commonspec.getLogger().debug(\"Modifying data {} as {}\", retrievedData, type);\n         String modifiedData = commonspec.modifyData(retrievedData, type, modifications);\n-\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network\";\n         String requestType = operation.equals(\"create\") ? \"PUT\" : \"POST\";\n-\n         Boolean searchUntilContains;\n         if (contains == null || contains.isEmpty()) {\n             searchUntilContains = Boolean.TRUE;\n         } else {\n             searchUntilContains = Boolean.FALSE;\n         }\n+\n         Boolean found = !searchUntilContains;\n         AssertionError ex = null;\n-\n         Future<Response> response;\n-\n         Pattern pattern = CommonG.matchesOrContains(responseVal);\n-\n         if (wait == null || timeout == null) {\n             timeout = 0;\n             wait = 0;\n         }\n-\n         for (int i = 0; (i <= timeout); i += wait) {\n             if (found && searchUntilContains) {\n                 break;\n@@ -786,7 +818,6 @@ public class CCTSpec extends BaseGSpec {\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n-\n                 if (searchUntilContains) {\n                     assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n                     found = true;\n@@ -807,13 +838,16 @@ public class CCTSpec extends BaseGSpec {\n                     ex = (AssertionError) e;\n                 }\n             }\n+\n             if (!found && !searchUntilContains) {\n                 break;\n             }\n         }\n+\n         if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n             throw (ex);\n         }\n+\n         if (searchUntilContains) {\n             commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n@@ -829,15 +863,16 @@ public class CCTSpec extends BaseGSpec {\n      * @param networkId\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I( force to)? delete calico network '(.+?)' so that the response( does not)? contains '(.+?)'$\")\n     public void deleteCalicoNetworkTimeout(Integer timeout, Integer wait, String force, String networkId, String contains, String responseVal) throws Exception {\n-\n         if (force == null && (networkId.equals(\"logs\") || networkId.equals(\"stratio\") || networkId.equals(\"metrics\") || networkId.equals(\"stratio-shared\"))) {\n             throw new Exception(\"It is not possible deleting networks stratio, metrics, logs or stratio-shared\");\n         }\n+\n         String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n         String requestType = \"DELETE\";\n-\n         if (wait == null || timeout == null) {\n             timeout = 0;\n             wait = 0;\n@@ -849,13 +884,11 @@ public class CCTSpec extends BaseGSpec {\n         } else {\n             searchUntilContains = Boolean.FALSE;\n         }\n+\n         Boolean found = !searchUntilContains;\n         AssertionError ex = null;\n-\n         Future<Response> response;\n-\n         Pattern pattern = CommonG.matchesOrContains(responseVal);\n-\n         for (int i = 0; (i <= timeout); i += wait) {\n             if (found && searchUntilContains) {\n                 break;\n@@ -866,7 +899,6 @@ public class CCTSpec extends BaseGSpec {\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n-\n                 if (searchUntilContains) {\n                     assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n                     found = true;\n@@ -887,13 +919,16 @@ public class CCTSpec extends BaseGSpec {\n                     ex = (AssertionError) e;\n                 }\n             }\n+\n             if (!found && !searchUntilContains) {\n                 break;\n             }\n         }\n+\n         if ((!found && searchUntilContains) || (found && !searchUntilContains)) {\n             throw (ex);\n         }\n+\n         if (searchUntilContains) {\n             commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n@@ -912,9 +947,10 @@ public class CCTSpec extends BaseGSpec {\n      * @param fileName  file name where response is saved\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I get schema( with level '(\\\\d+)')? from service '(.+?)' with model '(.+?)' and version '(.+?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getServiceSchema(Integer level, String service, String model, String version, String envVar, String fileName) throws Exception {\n-\n         if (level == null) {\n             level = 1;\n         }\n@@ -922,19 +958,16 @@ public class CCTSpec extends BaseGSpec {\n         String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?enriched=true&level=\" + level;\n         Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n-\n         if (envVar != null || fileName != null) {\n             DcosSpec dcosSpec = new DcosSpec(commonspec);\n             dcosSpec.convertJSONSchemaToJSON(json, envVar, fileName);\n         }\n-\n     }\n \n     private void writeInFile(String json, String fileName) throws Exception {\n@@ -942,9 +975,11 @@ public class CCTSpec extends BaseGSpec {\n         // Create file (temporary) and set path to be accessible within test\n         File tempDirectory = new File(System.getProperty(\"user.dir\") + \"/target/test-classes/\");\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n-        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n+        commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\",\n+            absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), StandardCharsets.UTF_8));\n+        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile),\n+                                                               StandardCharsets.UTF_8));\n         try {\n             out.write(json);\n         } catch (Exception e) {\n@@ -952,7 +987,6 @@ public class CCTSpec extends BaseGSpec {\n         } finally {\n             out.close();\n         }\n-\n         Assertions.assertThat(new File(absolutePathFile).isFile());\n     }\n \n@@ -967,22 +1001,22 @@ public class CCTSpec extends BaseGSpec {\n      * @param jsonFile  marathon json to deploy\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I install service '(.+?)'( in folder '(.+?)')? with model '(.+?)' and version '(.+?)' and instance name '(.+?)' in tenant '(.+?)' using json '(.+?)'$\")\n     public void installServiceFromMarathonJson(String service, String folder, String model, String version, String name, String tenant, String jsonFile) throws Exception {\n         String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?tenantId=\" + tenant;\n         String data = this.commonspec.retrieveData(jsonFile, \"json\");\n-\n         Future<Response> response = commonspec.generateRequest(\"POST\", true, null, null, endPoint, data, \"json\");\n         commonspec.setResponse(\"POST\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 202) {\n             logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         // Check Application in API\n-        RestSpec restSpec = new RestSpec(commonspec);\n \n+        RestSpec restSpec = new RestSpec(commonspec);\n         String endPointStatus;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n             endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n@@ -993,6 +1027,7 @@ public class CCTSpec extends BaseGSpec {\n         if (folder != null && folder.startsWith(\"/\")) {\n             folder = folder.substring(1);\n         }\n+\n         if (folder != null && folder.endsWith(\"/\")) {\n             folder = folder.substring(folder.length() - 1);\n         }\n@@ -1001,13 +1036,13 @@ public class CCTSpec extends BaseGSpec {\n         if (folder != null) {\n             serviceName = \"/\" + folder + \"/\" + name;\n         }\n+\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + name;\n             if (folder != null) {\n-                serviceName =  \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n+                serviceName = \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n             }\n         }\n-\n         restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, null, serviceName);\n     }\n \n@@ -1018,11 +1053,14 @@ public class CCTSpec extends BaseGSpec {\n      * @param tenant    tenant where service is installed\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I uninstall service '(.+?)'( in folder '(.+?)')? from tenant '(.+?)'$\")\n     public void uninstallService(String service, String folder, String tenant) throws Exception {\n         if (folder != null && folder.startsWith(\"/\")) {\n             folder = folder.substring(1);\n         }\n+\n         if (folder != null && folder.endsWith(\"/\")) {\n             folder = folder.substring(folder.length() - 1);\n         }\n@@ -1031,25 +1069,25 @@ public class CCTSpec extends BaseGSpec {\n         if (folder != null) {\n             serviceName = folder + \"/\" + service;\n         }\n+\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = tenant + \"/\" + tenant + \"-\" + service;\n             if (folder != null) {\n-                serviceName =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n+                serviceName = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n             }\n         }\n \n         String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/uninstall?app=\" + serviceName;\n         Future<Response> response = commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", response.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 202 && commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n \n         // Check service has disappeared\n-        RestSpec restSpec = new RestSpec(commonspec);\n \n+        RestSpec restSpec = new RestSpec(commonspec);\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n@@ -1059,7 +1097,6 @@ public class CCTSpec extends BaseGSpec {\n             endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n             key = \"\\\"id\\\"\";\n         }\n-\n         restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\", key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n         // Check all resources have been freed\n         DcosSpec dcosSpec = new DcosSpec(commonspec);\n@@ -1074,6 +1111,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param version     (optional) version to use for rules\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I upload rules file '(.+?)'( with priority '(.+?)')?( overriding version to '(.+?)')?\")\n     public void uploadRules(String rulesPath, String priority, String version) throws Exception {\n         // Check file exists\n@@ -1084,6 +1123,7 @@ public class CCTSpec extends BaseGSpec {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n             fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n+\n         String endPointUpload = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/knowledge/upload\";\n \n         // Obtain URL\n@@ -1092,12 +1132,10 @@ public class CCTSpec extends BaseGSpec {\n         // Form query parameters\n         String headers = \"-H \\\"accept: */*\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n         String forms = \"-F \\\"file=@\" + rulesPath + \";type=application/zip\\\"\";\n-\n         if (priority == null) {\n             priority = \"0\";\n         }\n-        forms = forms + \" -F \\\"priority=\" + priority  + \"\\\"\";\n-\n+        forms = forms + \" -F \\\"priority=\" + priority + \"\\\"\";\n         if (version != null) {\n             forms = forms + \" -F \\\"version=\" + version + \"\\\"\";\n         }\n@@ -1107,7 +1145,6 @@ public class CCTSpec extends BaseGSpec {\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n-\n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(0);\n         Assertions.assertThat(commonspec.getCommandResult()).as(\"Not possible to upload rules: \" + commonspec.getCommandResult()).doesNotContain(\"Error\");\n     }\n@@ -1119,6 +1156,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param version     (optional) version to use for rules\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I upload descriptors file '(.+?)'( overriding version to '(.+?)')?\")\n     public void uploadDescriptors(String descriptorsPath, String version) throws Exception {\n         String headers = \"\";\n@@ -1135,8 +1174,8 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Obtain cookie\n-        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n \n+        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n         String endPointUpload = \"\";\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n             endPointUpload = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors\";\n@@ -1147,7 +1186,6 @@ public class CCTSpec extends BaseGSpec {\n             endPointUpload = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/upload\";\n             headers = \"-H \\\"Content-Type: multipart/form-data\\\"\";\n             forms = \"-F \\\"file=@\" + descriptorsPath + \"\\\"\";\n-\n             if (version != null) {\n                 forms = forms + \" -F \\\"version=\" + version + \"\\\"\";\n             }\n@@ -1155,6 +1193,7 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Obtain URL\n+\n         String restURL = \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n \n         // Form query\n@@ -1162,15 +1201,11 @@ public class CCTSpec extends BaseGSpec {\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n-\n         String result = commonspec.getCommandResult();\n-\n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(0);\n-\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n             String accepted = commonspec.getJSONPathString(result, \"$.accepted\", null);\n             String rejected = commonspec.getJSONPathString(result, \"$.rejected\", null);\n-\n             if (\"[]\".equals(accepted)) {\n                 fail(\"No descriptors have been uploaded correctly: \" + result);\n             }\n@@ -1182,7 +1217,6 @@ public class CCTSpec extends BaseGSpec {\n             String added = commonspec.getJSONPathString(result, \"$.added\", null);\n             String error = commonspec.getJSONPathString(result, \"$.error\", null);\n             String existing = commonspec.getJSONPathString(result, \"$.existing\", null);\n-\n             if (\"[]\".equals(added)) {\n                 fail(\"No descriptors have been uploaded correctly: \" + result);\n             }\n@@ -1207,6 +1241,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param modifications     modifications to perform in the deployed json\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I update service '(.+?)'( in folder '(.+?)')? in tenant '(.+?)'( based on version '(.+?)')?( based on json '(.+?)')? with:$\")\n     public void updateCCTService(String serviceName, String folder, String tenant, String version, String jsonFile, DataTable modifications) throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n@@ -1214,9 +1250,11 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // obtain service name\n+\n         if (folder != null && folder.startsWith(\"/\")) {\n             folder = folder.substring(1);\n         }\n+\n         if (folder != null && folder.endsWith(\"/\")) {\n             folder = folder.substring(folder.length() - 1);\n         }\n@@ -1225,10 +1263,11 @@ public class CCTSpec extends BaseGSpec {\n         if (folder != null) {\n             service = folder + \"/\" + serviceName;\n         }\n+\n         if (!\"NONE\".equals(tenant)) {\n             service = tenant + \"/\" + tenant + \"-\" + serviceName;\n             if (folder != null) {\n-                service =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n+                service = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n             }\n         }\n \n@@ -1241,7 +1280,6 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         String deployedJson = \"\";\n-\n         if (version == null && jsonFile == null || version != null && jsonFile != null) {\n             throw new Exception(\"Version or json file must be defined (but NOT both)\");\n         }\n@@ -1251,7 +1289,6 @@ public class CCTSpec extends BaseGSpec {\n             String endpointJson = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service + \"?version=\" + version;\n             Future<Response> responseJson = commonspec.generateRequest(\"GET\", true, null, null, endpointJson, \"\", \"json\");\n             commonspec.setResponse(\"GET\", responseJson.get());\n-\n             if (commonspec.getResponse().getStatusCode() != 200) {\n                 logger.error(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n                 throw new Exception(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n@@ -1259,7 +1296,6 @@ public class CCTSpec extends BaseGSpec {\n \n             // Modify json according to provided changes\n             deployedJson = commonspec.getResponse().getResponse();\n-\n         }\n \n         if (jsonFile != null) {\n@@ -1274,10 +1310,10 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Deploy new json\n+\n         String endpointUpdate = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service;\n         Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpointUpdate, modifiedData, \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 202) {\n             logger.error(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n@@ -1293,6 +1329,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param version           version of the deployed service\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I update service '(.+?)'( in folder '(.+?)')? in tenant '(.+?)'( based on version '(.+?)')?( based on json '(.+?)')?$\")\n     public void updateCCTService(String serviceName, String folder, String tenant, String version, String jsonFile) throws Exception {\n         updateCCTService(serviceName, folder, tenant, version, jsonFile, null);\n@@ -1309,6 +1347,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param modifications     modifications to perform in the descriptor json\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I upload descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n     public void uploadCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n         // Obtain endpoint\n@@ -1327,6 +1367,7 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Retrieve data\n+\n         String retrievedData = commonspec.retrieveData(originalJson, \"json\");\n         // Modify json\n         String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n@@ -1334,7 +1375,6 @@ public class CCTSpec extends BaseGSpec {\n         // Upload new descriptor\n         Future<Response> responseUpdate = commonspec.generateRequest(op, true, null, null, endpoint, modifiedData, \"json\");\n         commonspec.setResponse(op, responseUpdate.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n             logger.error(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n@@ -1351,6 +1391,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param modifications     modifications to perform in the descriptor json\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I update descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n     public void updateCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n         // Obtain endpoint\n@@ -1366,6 +1408,7 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Retrieve data\n+\n         String retrievedData = commonspec.retrieveData(originalJson, \"json\");\n         // Modify json\n         String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n@@ -1373,7 +1416,6 @@ public class CCTSpec extends BaseGSpec {\n         // Update descriptor\n         Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpoint, modifiedData, \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n             logger.error(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n@@ -1388,6 +1430,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param version           version of the descriptor\n      * @throws Exception\n      */\n+\n+\n     @Given(\"^I delete descriptor for service '(.+?)', model '(.+?)' version '(.+?)'$\")\n     public void deleteCCTDescriptor(String service, String model, String version) throws Exception {\n         // Obtain endpoint\n@@ -1403,9 +1447,9 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Delete descriptor\n+\n         Future<Response> responseUpdate = commonspec.generateRequest(\"DELETE\", true, null, null, endpoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", responseUpdate.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201 && commonspec.getResponse().getStatusCode() != 204) {\n             logger.error(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n@@ -1419,6 +1463,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param envVar    environment variable where to store the read value\n      * @throws Exception\n      */\n+\n+\n     @When(\"^I read value in path '(.+?)' from central configuration and save it in environment variable '(.+?)'$\")\n     public void readValueCentralConfig(String path, String envVar) throws Exception {\n         if (ThreadProperty.get(\"configuration_api_id\") == null) {\n@@ -1426,25 +1472,21 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Set sso token\n+\n         DcosSpec dcosSpec = new DcosSpec(commonspec);\n         dcosSpec.setGoSecSSOCookie(null, null, ThreadProperty.get(\"EOS_ACCESS_POINT\"), ThreadProperty.get(\"DCOS_USER\"), System.getProperty(\"DCOS_PASSWORD\"), ThreadProperty.get(\"DCOS_TENANT\"), null);\n         // Securely send requests\n         commonspec.setRestProtocol(\"https://\");\n         commonspec.setRestHost(ThreadProperty.get(\"EOS_ACCESS_POINT\"));\n         commonspec.setRestPort(\":443\");\n-\n         String fullPath = \"/dcs/v1/fabric\" + path;\n         String endpoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/etcd?path=\" + fullPath;\n-\n         Future<Response> responseETCD = commonspec.generateRequest(\"GET\", false, null, null, endpoint, \"\", null);\n         commonspec.setResponse(\"GET\", responseETCD.get());\n-\n         if (commonspec.getResponse().getStatusCode() != 200) {\n             logger.error(\"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n             throw new Exception(\"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n         }\n-\n         ThreadProperty.set(envVar, commonspec.getResponse().getResponse());\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 223
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/33/CCTSpec.java\nindex 9a43576fa9..dcdca3c705 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/33/CCTSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/33/CCTSpec.java\n@@ -52,6 +52,7 @@ public class CCTSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public CCTSpec(CommonG spec) {\n         this.commonspec = spec;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}