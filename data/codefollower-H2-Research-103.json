{
    "error_id": "103",
    "information": {
        "errors": [
            {
                "line": "252",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "            NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n            if (networkConnectionInfo != null) {\n                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n                        .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n                String clientInfo = networkConnectionInfo.getClientInfo();\n                if (clientInfo != null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "252",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "255",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/103/DatabaseInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/103/DatabaseInfo.java\nindex 824b9e5e13..58efad3457 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/103/DatabaseInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/103/DatabaseInfo.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jmx;\n \n import java.lang.management.ManagementFactory;\n@@ -34,7 +35,9 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n \n     private static final Map<String, ObjectName> MBEANS = new HashMap<>();\n \n-    /** Database. */\n+    /**\n+     * Database.\n+     */\n     private final Database database;\n \n     private DatabaseInfo(Database database) {\n@@ -53,7 +56,7 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n      * @throws JMException if the ObjectName could not be created\n      */\n     private static ObjectName getObjectName(String name, String path)\n-            throws JMException {\n+        throws JMException {\n         name = name.replace(':', '_');\n         path = path.replace(':', '_');\n         Hashtable<String, String> map = new Hashtable<>();\n@@ -66,10 +69,10 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n      * Registers an MBean for the database.\n      *\n      * @param connectionInfo connection info\n-     * @param database database\n+     * @param database       database\n      */\n     public static void registerMBean(ConnectionInfo connectionInfo,\n-            Database database) throws JMException {\n+                                     Database database) throws JMException {\n         String path = connectionInfo.getName();\n         if (!MBEANS.containsKey(path)) {\n             MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n@@ -232,7 +235,7 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n     public String listSettings() {\n         StringBuilder buff = new StringBuilder();\n         for (Map.Entry<String, String> e :\n-                new TreeMap<>(\n+            new TreeMap<>(\n                 database.getSettings().getSettings()).entrySet()) {\n             buff.append(e.getKey()).append(\" = \").append(e.getValue()).append('\\n');\n         }\n@@ -245,28 +248,28 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n         for (Session session : database.getSessions(false)) {\n             buff.append(\"session id: \").append(session.getId());\n             buff.append(\" user: \").\n-                    append(session.getUser().getName()).\n-                    append('\\n');\n+                append(session.getUser().getName()).\n+                append('\\n');\n             NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n             if (networkConnectionInfo != null) {\n                 buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n-                        .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n+                    .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n                 String clientInfo = networkConnectionInfo.getClientInfo();\n                 if (clientInfo != null) {\n                     buff.append(\"clientInfo: \").append(clientInfo).append('\\n');\n                 }\n             }\n             buff.append(\"connected: \").\n-                    append(new Timestamp(session.getSessionStart())).\n-                    append('\\n');\n+                append(new Timestamp(session.getSessionStart())).\n+                append('\\n');\n             Command command = session.getCurrentCommand();\n             if (command != null) {\n                 buff.append(\"statement: \")\n-                        .append(command)\n-                        .append('\\n')\n-                        .append(\"started: \")\n-                        .append(session.getCurrentCommandStart().getString())\n-                        .append('\\n');\n+                    .append(command)\n+                    .append('\\n')\n+                    .append(\"started: \")\n+                    .append(session.getCurrentCommandStart().getString())\n+                    .append('\\n');\n             }\n             for (Table table : session.getLocks()) {\n                 if (table.isLockedExclusivelyBy(session)) {\n@@ -275,8 +278,8 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n                     buff.append(\"read lock on \");\n                 }\n                 buff.append(table.getSchema().getName()).\n-                        append('.').append(table.getName()).\n-                        append('\\n');\n+                    append('.').append(table.getName()).\n+                    append('\\n');\n             }\n             buff.append('\\n');\n         }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "252",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/103/DatabaseInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/103/DatabaseInfo.java\nindex 824b9e5e13..6928939377 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/103/DatabaseInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/103/DatabaseInfo.java\n@@ -283,4 +283,4 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n         return buff.toString();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "252",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/103/DatabaseInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/103/DatabaseInfo.java\nindex 824b9e5e13..cdaf1aba8f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/103/DatabaseInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/103/DatabaseInfo.java\n@@ -249,7 +249,7 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n                     append('\\n');\n             NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n             if (networkConnectionInfo != null) {\n-                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n+                    buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n                         .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n                 String clientInfo = networkConnectionInfo.getClientInfo();\n                 if (clientInfo != null) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "252",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}