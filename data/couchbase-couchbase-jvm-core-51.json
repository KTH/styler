{
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "105",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 128).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return a raw config if discovered.\n     */\n    protected abstract Observable<String> discoverConfig(String bucket, String username, String password, InetAddress hostname);\n\n    /**\n     * Initiate the config loading process.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/51/AbstractLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/51/AbstractLoader.java\nindex 035f222afe..8f9032eed4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/51/AbstractLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/51/AbstractLoader.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core.config.loader;\n \n import com.couchbase.client.core.ClusterFacade;\n@@ -36,7 +37,7 @@ import java.net.InetAddress;\n \n /**\n  * An {@link AbstractLoader} which provides common basic processing for all implementing loaders.\n- *\n+ * <p>\n  * A loader fetches configuration from a service, maybe falls back to another service and finally response with a\n  * {@link BucketConfig} or an error. There are multiple steps, like making sure that a node or service is alive before\n  * sending a request into, is abstracted in here to avoid duplication.\n@@ -72,11 +73,11 @@ public abstract class AbstractLoader implements Loader {\n      * Create a new {@link AbstractLoader}.\n      *\n      * @param serviceType the service serviceType.\n-     * @param cluster the cluster reference.\n+     * @param cluster     the cluster reference.\n      * @param environment the couchbase environment.\n      */\n     protected AbstractLoader(final LoaderType loaderType, final ServiceType serviceType, final ClusterFacade cluster,\n-        final CoreEnvironment environment) {\n+                             final CoreEnvironment environment) {\n         this.loaderType = loaderType;\n         this.serviceType = serviceType;\n         this.cluster = cluster;\n@@ -85,7 +86,7 @@ public abstract class AbstractLoader implements Loader {\n \n     /**\n      * Port to use for the {@link ServiceType}.\n-     *\n+     * <p>\n      * This method needs to be implemented by the actual loader and defines the port which should be used to\n      * connect the service to. In practice, the actual port may depend on the environment (i.e. if SSL is used or not).\n      *\n@@ -96,19 +97,20 @@ public abstract class AbstractLoader implements Loader {\n     /**\n      * Run the {@link BucketConfig} discovery process.\n      *\n-     * @param bucket the name of the bucket.\n+     * @param bucket   the name of the bucket.\n      * @param username user authorized for bucket access.\n      * @param password the password of the user.\n      * @param hostname the hostname of the seed node list.\n      * @return a raw config if discovered.\n      */\n-    protected abstract Observable<String> discoverConfig(String bucket, String username, String password, InetAddress hostname);\n+    protected abstract Observable<String> discoverConfig(String bucket, String username, String password,\n+                                                         InetAddress hostname);\n \n     /**\n      * Initiate the config loading process.\n      *\n      * @param seedNode the seed node.\n-     * @param bucket the name of the bucket.\n+     * @param bucket   the name of the bucket.\n      * @param password the password of the bucket.\n      * @return a valid {@link BucketConfig}.\n      */\n@@ -122,7 +124,7 @@ public abstract class AbstractLoader implements Loader {\n      * Initiate the config loading process.\n      *\n      * @param seedNode the seed node.\n-     * @param bucket the name of the bucket.\n+     * @param bucket   the name of the bucket.\n      * @param username the user authorized for bucket access.\n      * @param password the password of the user.\n      * @return a valid {@link BucketConfig}.\n@@ -135,13 +137,13 @@ public abstract class AbstractLoader implements Loader {\n \n     /**\n      * Helper method to load a config at a specific {@link InetAddress}.\n-     *\n+     * <p>\n      * The common path handled by this abstract implementation includes making sure that the node and service are\n      * usable by the actual implementation. Finally, the raw config string config parsing is handled in this central\n      * place.\n      *\n-     * @param node the node to grab a config from.\n-     * @param bucket the name of the bucket.\n+     * @param node     the node to grab a config from.\n+     * @param bucket   the name of the bucket.\n      * @param username the user authorized for bucket access.\n      * @param password the password of the user.\n      * @return a valid {@link BucketConfig} or an errored {@link Observable}.\n@@ -211,7 +213,7 @@ public abstract class AbstractLoader implements Loader {\n     /**\n      * Replaces the host wildcard from an incoming config with a proper hostname.\n      *\n-     * @param input the input config.\n+     * @param input    the input config.\n      * @param hostname the hostname to replace it with.\n      * @return a replaced configuration.\n      */\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/51/AbstractLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/51/AbstractLoader.java\nindex 035f222afe..9124aea4f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/51/AbstractLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/51/AbstractLoader.java\n@@ -112,9 +112,8 @@ public abstract class AbstractLoader implements Loader {\n      * @param password the password of the bucket.\n      * @return a valid {@link BucketConfig}.\n      */\n-    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket,\n-                                                                   final String password) {\n-        LOGGER.debug(\"Loading Config for bucket {}\", bucket);\n+    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket, final String password) {\n+    LOGGER.debug(\"Loading Config for bucket {}\", bucket);\n         return loadConfig(seedNode, bucket, bucket, password);\n     }\n \n@@ -127,9 +126,8 @@ public abstract class AbstractLoader implements Loader {\n      * @param password the password of the user.\n      * @return a valid {@link BucketConfig}.\n      */\n-    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket,\n-                                                                   final String username, final String password) {\n-        LOGGER.debug(\"Loading Config for bucket {}\", bucket);\n+    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket, final String username, final String password) {\n+    LOGGER.debug(\"Loading Config for bucket {}\", bucket);\n         return loadConfigAtAddr(seedNode, bucket, username, password);\n     }\n \n@@ -146,12 +144,8 @@ public abstract class AbstractLoader implements Loader {\n      * @param password the password of the user.\n      * @return a valid {@link BucketConfig} or an errored {@link Observable}.\n      */\n-    private Observable<Tuple2<LoaderType, BucketConfig>> loadConfigAtAddr(final InetAddress node,\n-                                                                          final String bucket,\n-                                                                          final String username,\n-                                                                          final String password) {\n-        return Observable\n-            .just(node)\n+    private Observable<Tuple2<LoaderType, BucketConfig>> loadConfigAtAddr(final InetAddress node, final String bucket, final String username, final String password) {\n+    return Observable.just(node)\n             .flatMap(new Func1<InetAddress, Observable<AddNodeResponse>>() {\n                 @Override\n                 public Observable<AddNodeResponse> call(final InetAddress address) {\n@@ -165,8 +159,7 @@ public abstract class AbstractLoader implements Loader {\n                     }\n                     LOGGER.debug(\"Successfully added Node {}\", response.hostname());\n                     return cluster.send(\n-                        new AddServiceRequest(serviceType, bucket, username, password, port(), response.hostname())\n-                    );\n+                        new AddServiceRequest(serviceType, bucket, username, password, port(), response.hostname()));\n                 }\n             }).flatMap(new Func1<AddServiceResponse, Observable<String>>() {\n                 @Override\n@@ -218,4 +211,4 @@ public abstract class AbstractLoader implements Loader {\n     protected String replaceHostWildcard(String input, InetAddress hostname) {\n         return input.replace(\"$HOST\", hostname.getHostName());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 41, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 45, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 41, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 36, expected level should be one of the following: 8, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 43, expected level should be one of the following: 40, 44.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 47, expected level should be one of the following: 44, 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 51, expected level should be one of the following: 48, 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 47, expected level should be one of the following: 44, 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 47, expected level should be one of the following: 44, 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 47, expected level should be one of the following: 44, 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 43, expected level should be one of the following: 40, 44.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "171",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 38, expected level should be one of the following: 36, 40.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 45, expected level should be one of the following: 42, 46.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 49, expected level should be one of the following: 46, 50.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 53, expected level should be one of the following: 50, 54.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 49, expected level should be one of the following: 46, 50.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 49, expected level should be one of the following: 46, 50.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 49, expected level should be one of the following: 46, 50.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 45, expected level should be one of the following: 42, 46.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 40, expected level should be one of the following: 38, 42.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 47, expected level should be one of the following: 44, 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 48, 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 48, 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 48, 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 48, 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 48, 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 47, expected level should be one of the following: 44, 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 42, expected level should be one of the following: 40, 44.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/51/AbstractLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/51/AbstractLoader.java\nindex 035f222afe..a0ebbc654c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/51/AbstractLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/51/AbstractLoader.java\n@@ -31,7 +31,6 @@ import com.couchbase.client.core.message.internal.AddServiceResponse;\n import com.couchbase.client.core.service.ServiceType;\n import rx.Observable;\n import rx.functions.Func1;\n-\n import java.net.InetAddress;\n \n /**\n@@ -44,11 +43,14 @@ import java.net.InetAddress;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n+\n+\n public abstract class AbstractLoader implements Loader {\n \n     /**\n      * The logger used.\n      */\n+\n     private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(Loader.class);\n \n     /**\n@@ -65,7 +67,6 @@ public abstract class AbstractLoader implements Loader {\n      * The service serviceType from the actual loader implementation.\n      */\n     private final ServiceType serviceType;\n-\n     private final LoaderType loaderType;\n \n     /**\n@@ -75,8 +76,9 @@ public abstract class AbstractLoader implements Loader {\n      * @param cluster the cluster reference.\n      * @param environment the couchbase environment.\n      */\n-    protected AbstractLoader(final LoaderType loaderType, final ServiceType serviceType, final ClusterFacade cluster,\n-        final CoreEnvironment environment) {\n+\n+\n+    protected AbstractLoader(final LoaderType loaderType, final ServiceType serviceType, final ClusterFacade cluster, final CoreEnvironment environment) {\n         this.loaderType = loaderType;\n         this.serviceType = serviceType;\n         this.cluster = cluster;\n@@ -91,6 +93,7 @@ public abstract class AbstractLoader implements Loader {\n      *\n      * @return the port for the service to enable.\n      */\n+\n     protected abstract int port();\n \n     /**\n@@ -112,8 +115,7 @@ public abstract class AbstractLoader implements Loader {\n      * @param password the password of the bucket.\n      * @return a valid {@link BucketConfig}.\n      */\n-    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket,\n-                                                                   final String password) {\n+    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket, final String password) {\n         LOGGER.debug(\"Loading Config for bucket {}\", bucket);\n         return loadConfig(seedNode, bucket, bucket, password);\n     }\n@@ -127,10 +129,13 @@ public abstract class AbstractLoader implements Loader {\n      * @param password the password of the user.\n      * @return a valid {@link BucketConfig}.\n      */\n-    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket,\n-                                                                   final String username, final String password) {\n+\n+    public Observable<Tuple2<LoaderType, BucketConfig>> loadConfig(final InetAddress seedNode, final String bucket, final String username, final String password) {\n         LOGGER.debug(\"Loading Config for bucket {}\", bucket);\n-        return loadConfigAtAddr(seedNode, bucket, username, password);\n+        return loadConfigAtAddr(seedNode,\n+            bucket,\n+            username,\n+            password);\n     }\n \n     /**\n@@ -146,48 +151,43 @@ public abstract class AbstractLoader implements Loader {\n      * @param password the password of the user.\n      * @return a valid {@link BucketConfig} or an errored {@link Observable}.\n      */\n-    private Observable<Tuple2<LoaderType, BucketConfig>> loadConfigAtAddr(final InetAddress node,\n-                                                                          final String bucket,\n-                                                                          final String username,\n-                                                                          final String password) {\n-        return Observable\n-            .just(node)\n-            .flatMap(new Func1<InetAddress, Observable<AddNodeResponse>>() {\n-                @Override\n-                public Observable<AddNodeResponse> call(final InetAddress address) {\n-                    return cluster.send(new AddNodeRequest(address));\n-                }\n-            }).flatMap(new Func1<AddNodeResponse, Observable<AddServiceResponse>>() {\n-                @Override\n-                public Observable<AddServiceResponse> call(final AddNodeResponse response) {\n-                    if (!response.status().isSuccess()) {\n-                        return Observable.error(new IllegalStateException(\"Could not add node for config loading.\"));\n-                    }\n-                    LOGGER.debug(\"Successfully added Node {}\", response.hostname());\n-                    return cluster.send(\n-                        new AddServiceRequest(serviceType, bucket, username, password, port(), response.hostname())\n-                    );\n-                }\n-            }).flatMap(new Func1<AddServiceResponse, Observable<String>>() {\n-                @Override\n-                public Observable<String> call(final AddServiceResponse response) {\n-                    if (!response.status().isSuccess()) {\n-                        return Observable.error(new IllegalStateException(\"Could not add service for config loading.\"));\n-                    }\n-                    LOGGER.debug(\"Successfully enabled Service {} on Node {}\", serviceType, response.hostname());\n-                    return discoverConfig(bucket, username, password, response.hostname());\n-                }\n-            })\n-            .map(new Func1<String, Tuple2<LoaderType, BucketConfig>>() {\n-                @Override\n-                public Tuple2<LoaderType, BucketConfig> call(final String rawConfig) {\n-                    LOGGER.debug(\"Got configuration from Service, attempting to parse.\");\n-                    BucketConfig config = BucketConfigParser.parse(rawConfig, env());\n-                    config.username(username);\n-                    config.password(password);\n-                    return Tuple.create(loaderType, config);\n-                }\n-            });\n+\n+    private Observable<Tuple2<LoaderType, BucketConfig>> loadConfigAtAddr(final InetAddress node, final String bucket, final String username, final String password) {\n+        return Observable.just(node).flatMap(new Func1<InetAddress, Observable<AddNodeResponse>>() {\n+                                         @Override\n+                                         public Observable<AddNodeResponse> call(final InetAddress address) {\n+                                             return cluster.send(new AddNodeRequest(address));\n+                                         }\n+                                    }).flatMap(new Func1<AddNodeResponse, Observable<AddServiceResponse>>() {\n+                                           @Override\n+                                           public Observable<AddServiceResponse> call(final AddNodeResponse response) {\n+                                               if (!response.status().isSuccess()) {\n+                                                   return Observable.error(new IllegalStateException(\"Could not add node for config loading.\"));\n+                                               }\n+\n+                                               LOGGER.debug(\"Successfully added Node {}\", response.hostname());\n+                                               return cluster.send(new AddServiceRequest(serviceType, bucket, username, password, port(), response.hostname()));\n+                                           }\n+                                      }).flatMap(new Func1<AddServiceResponse, Observable<String>>() {\n+                                             @Override\n+                                             public Observable<String> call(final AddServiceResponse response) {\n+                                                 if (!response.status().isSuccess()) {\n+                                                     return Observable.error(new IllegalStateException(\"Could not add service for config loading.\"));\n+                                                 }\n+\n+                                                 LOGGER.debug(\"Successfully enabled Service {} on Node {}\", serviceType, response.hostname());\n+                                                 return discoverConfig(bucket, username, password, response.hostname());\n+                                             }\n+                                        }).map(new Func1<String, Tuple2<LoaderType, BucketConfig>>() {\n+                                               @Override\n+                                               public Tuple2<LoaderType, BucketConfig> call(final String rawConfig) {\n+                                                   LOGGER.debug(\"Got configuration from Service, attempting to parse.\");\n+                                                   BucketConfig config = BucketConfigParser.parse(rawConfig, env());\n+                                                   config.username(username);\n+                                                   config.password(password);\n+                                                   return Tuple.create(loaderType, config);\n+                                               }\n+                                          });\n     }\n \n     /**\n@@ -195,6 +195,8 @@ public abstract class AbstractLoader implements Loader {\n      *\n      * @return the cluster reference.\n      */\n+\n+\n     protected ClusterFacade cluster() {\n         return cluster;\n     }\n@@ -204,6 +206,8 @@ public abstract class AbstractLoader implements Loader {\n      *\n      * @return the environment.\n      */\n+\n+\n     protected CoreEnvironment env() {\n         return environment;\n     }\n@@ -215,7 +219,10 @@ public abstract class AbstractLoader implements Loader {\n      * @param hostname the hostname to replace it with.\n      * @return a replaced configuration.\n      */\n+\n+\n     protected String replaceHostWildcard(String input, InetAddress hostname) {\n-        return input.replace(\"$HOST\", hostname.getHostName());\n+        return input.replace(\"$HOST\",\n+            hostname.getHostName());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}