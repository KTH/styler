{
    "error_id": "702",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.helper;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.delegate.event.ActivitiEvent;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/702/ErrorThrowingEventListener.java\nindex 96e95206ed..e6253c5d05 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/702/ErrorThrowingEventListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiException;\n@@ -32,7 +33,7 @@ public class ErrorThrowingEventListener extends BaseDelegateEventListener {\n   @Override\n   public void onEvent(ActivitiEvent event) {\n     if (isValidEvent(event)) {\n-      \n+\n       CommandContext commandContext = Context.getCommandContext();\n       ExecutionEntity execution = null;\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/702/ErrorThrowingEventListener.java\nindex 96e95206ed..b2c68944b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/702/ErrorThrowingEventListener.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiException;\n@@ -21,44 +22,41 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n \n /**\n  * An {@link ActivitiEventListener} that throws a error event when an event is dispatched to it.\n- * \n-\n- * \n  */\n public class ErrorThrowingEventListener extends BaseDelegateEventListener {\n \n-  protected String errorCode;\n+    protected String errorCode;\n+\n+    @Override\n+    public void onEvent(ActivitiEvent event) {\n+        if (isValidEvent(event)) {\n \n-  @Override\n-  public void onEvent(ActivitiEvent event) {\n-    if (isValidEvent(event)) {\n-      \n-      CommandContext commandContext = Context.getCommandContext();\n-      ExecutionEntity execution = null;\n+            CommandContext commandContext = Context.getCommandContext();\n+            ExecutionEntity execution = null;\n \n-      if (event.getExecutionId() != null) {\n-        // Get the execution based on the event's execution ID instead\n-        execution = Context.getCommandContext().getExecutionEntityManager().findById(event.getExecutionId());\n-      }\n+            if (event.getExecutionId() != null) {\n+                // Get the execution based on the event's execution ID instead\n+                execution = Context.getCommandContext().getExecutionEntityManager().findById(event.getExecutionId());\n+            }\n \n-      if (execution == null) {\n-        throw new ActivitiException(\"No execution context active and event is not related to an execution. No compensation event can be thrown.\");\n-      }\n+            if (execution == null) {\n+                throw new ActivitiException(\"No execution context active and event is not related to an execution. No compensation event can be thrown.\");\n+            }\n \n-      try {\n-        ErrorPropagation.propagateError(errorCode, execution);\n-      } catch (Exception e) {\n-        throw new ActivitiException(\"Error while propagating error-event\", e);\n-      }\n+            try {\n+                ErrorPropagation.propagateError(errorCode, execution);\n+            } catch (Exception e) {\n+                throw new ActivitiException(\"Error while propagating error-event\", e);\n+            }\n+        }\n     }\n-  }\n \n-  public void setErrorCode(String errorCode) {\n-    this.errorCode = errorCode;\n-  }\n+    public void setErrorCode(String errorCode) {\n+        this.errorCode = errorCode;\n+    }\n \n-  @Override\n-  public boolean isFailOnException() {\n-    return true;\n-  }\n+    @Override\n+    public boolean isFailOnException() {\n+        return true;\n+    }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 16, indentation should be the same level as line 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/702/ErrorThrowingEventListener.java\nindex 96e95206ed..e24eaf8e52 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/702/ErrorThrowingEventListener.java\n@@ -25,40 +25,40 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n \n  * \n  */\n-public class ErrorThrowingEventListener extends BaseDelegateEventListener {\n \n-  protected String errorCode;\n \n-  @Override\n-  public void onEvent(ActivitiEvent event) {\n-    if (isValidEvent(event)) {\n-      \n-      CommandContext commandContext = Context.getCommandContext();\n-      ExecutionEntity execution = null;\n+public class ErrorThrowingEventListener extends BaseDelegateEventListener {\n+\n+    protected String errorCode;\n \n-      if (event.getExecutionId() != null) {\n+    @Override\n+    public void onEvent(ActivitiEvent event) {\n+        if (isValidEvent(event)) {\n+            CommandContext commandContext = Context.getCommandContext();\n+            ExecutionEntity execution = null;\n+            if (event.getExecutionId() != null) {\n         // Get the execution based on the event's execution ID instead\n-        execution = Context.getCommandContext().getExecutionEntityManager().findById(event.getExecutionId());\n-      }\n+                execution = Context.getCommandContext().getExecutionEntityManager().findById(event.getExecutionId());\n+            }\n \n-      if (execution == null) {\n-        throw new ActivitiException(\"No execution context active and event is not related to an execution. No compensation event can be thrown.\");\n-      }\n+            if (execution == null) {\n+                                     throw new ActivitiException(\"No execution context active and event is not related to an execution. No compensation event can be thrown.\");\n+            }\n \n-      try {\n-        ErrorPropagation.propagateError(errorCode, execution);\n-      } catch (Exception e) {\n-        throw new ActivitiException(\"Error while propagating error-event\", e);\n-      }\n+            try {\n+                ErrorPropagation.propagateError(errorCode, execution);\n+            } catch (Exception e) {\n+              throw new ActivitiException(\"Error while propagating error-event\", e);\n+            }\n+        }\n     }\n-  }\n \n-  public void setErrorCode(String errorCode) {\n+    public void setErrorCode(String errorCode) {\n     this.errorCode = errorCode;\n-  }\n+    }\n \n-  @Override\n-  public boolean isFailOnException() {\n-    return true;\n-  }\n-}\n+    @Override\n+    public boolean isFailOnException() {\n+        return true;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/702/ErrorThrowingEventListener.java\nindex 96e95206ed..e6253c5d05 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/702/ErrorThrowingEventListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiException;\n@@ -32,7 +33,7 @@ public class ErrorThrowingEventListener extends BaseDelegateEventListener {\n   @Override\n   public void onEvent(ActivitiEvent event) {\n     if (isValidEvent(event)) {\n-      \n+\n       CommandContext commandContext = Context.getCommandContext();\n       ExecutionEntity execution = null;\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/702/ErrorThrowingEventListener.java\nindex 96e95206ed..e6253c5d05 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/702/ErrorThrowingEventListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/702/ErrorThrowingEventListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.helper;\n \n import org.activiti.engine.ActivitiException;\n@@ -32,7 +33,7 @@ public class ErrorThrowingEventListener extends BaseDelegateEventListener {\n   @Override\n   public void onEvent(ActivitiEvent event) {\n     if (isValidEvent(event)) {\n-      \n+\n       CommandContext commandContext = Context.getCommandContext();\n       ExecutionEntity execution = null;\n \n",
            "diff_size": 2
        }
    ]
}