{
    "error_id": "68",
    "information": {
        "errors": [
            {
                "line": "39",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    // The official JSON gherkin format doesn't have a step attribute, so we're marking this as transient\n    // to prevent it from ending up in the JSON.\n    private final transient PickleStep step;\n\n    public PickleStepDefinitionMatch(List<Argument> arguments, StepDefinition stepDefinition, String featurePath, PickleStep step) {\n        super(arguments, stepDefinition.getLocation(false));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/68/PickleStepDefinitionMatch.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/68/PickleStepDefinitionMatch.java\nindex 26189b2900..0ea06f2080 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/68/PickleStepDefinitionMatch.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/68/PickleStepDefinitionMatch.java\n@@ -36,6 +36,7 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n     private final transient String featurePath;\n     // The official JSON gherkin format doesn't have a step attribute, so we're marking this as transient\n     // to prevent it from ending up in the JSON.\n+\n     private final transient PickleStep step;\n \n     public PickleStepDefinitionMatch(List<Argument> arguments, StepDefinition stepDefinition, String featurePath, PickleStep step) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/68/PickleStepDefinitionMatch.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/68/PickleStepDefinitionMatch.java\nindex 26189b2900..5829f59df8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/68/PickleStepDefinitionMatch.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/68/PickleStepDefinitionMatch.java\n@@ -34,11 +34,14 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n     private final StepDefinition stepDefinition;\n \n     private final transient String featurePath;\n+\n     // The official JSON gherkin format doesn't have a step attribute, so we're marking this as transient\n     // to prevent it from ending up in the JSON.\n     private final transient PickleStep step;\n \n-    public PickleStepDefinitionMatch(List<Argument> arguments, StepDefinition stepDefinition, String featurePath, PickleStep step) {\n+    public PickleStepDefinitionMatch(List<Argument> arguments,\n+                                     StepDefinition stepDefinition,\n+                                     String featurePath, PickleStep step) {\n         super(arguments, stepDefinition.getLocation(false));\n         this.stepDefinition = stepDefinition;\n         this.featurePath = featurePath;\n@@ -69,26 +72,28 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n         } catch (CucumberException e) {\n             throw e;\n         } catch (Throwable t) {\n-            throw removeFrameworkFramesAndAppendStepLocation(t, getStepLocation());\n+            throw removeFrameworkFramesAndAppendStepLocation(t,\n+                getStepLocation());\n         }\n     }\n \n     private CucumberException registerTypeInConfiguration(Exception e) {\n         return new CucumberException(String.format(\"\" +\n-                        \"Could not convert arguments for step [%s] defined at '%s'.\\n\" +\n-                        \"It appears you did not register a data table type. The details are in the stacktrace below.\", //TODO: Add doc URL\n-                stepDefinition.getPattern(),\n-                stepDefinition.getLocation(true)\n+                \"Could not convert arguments for step [%s] defined at '%s'.\\n\" +\n+                \"It appears you did not register a data table type. The details are in the stacktrace below.\",\n+            //TODO: Add doc URL\n+            stepDefinition.getPattern(),\n+            stepDefinition.getLocation(true)\n         ), e);\n     }\n \n \n     private CucumberException couldNotConvertArguments(Exception e) {\n         return new CucumberException(String.format(\n-                \"Could not convert arguments for step [%s] defined at '%s'.\\n\" +\n-                        \"The details are in the stacktrace below.\",\n-                stepDefinition.getPattern(),\n-                stepDefinition.getLocation(true)\n+            \"Could not convert arguments for step [%s] defined at '%s'.\\n\" +\n+                \"The details are in the stacktrace below.\",\n+            stepDefinition.getPattern(),\n+            stepDefinition.getLocation(true)\n         ), e);\n     }\n \n@@ -100,14 +105,14 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n     private CucumberException arityMismatch(int parameterCount) {\n         List<String> arguments = createArgumentsForErrorMessage();\n         return new CucumberException(String.format(\n-                \"Step [%s] is defined with %s parameters at '%s'.\\n\" +\n-                        \"However, the gherkin step has %s arguments%sStep text: %s\",\n-                stepDefinition.getPattern(),\n-                parameterCount,\n-                stepDefinition.getLocation(true),\n-                arguments.size(),\n-                formatArguments(arguments),\n-                step.getText()\n+            \"Step [%s] is defined with %s parameters at '%s'.\\n\" +\n+                \"However, the gherkin step has %s arguments%sStep text: %s\",\n+            stepDefinition.getPattern(),\n+            parameterCount,\n+            stepDefinition.getLocation(true),\n+            arguments.size(),\n+            formatArguments(arguments),\n+            step.getText()\n         ));\n     }\n \n@@ -131,20 +136,26 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n         return arguments;\n     }\n \n-    Throwable removeFrameworkFramesAndAppendStepLocation(Throwable error, StackTraceElement stepLocation) {\n+    Throwable removeFrameworkFramesAndAppendStepLocation(Throwable error,\n+                                                         StackTraceElement stepLocation) {\n         StackTraceElement[] stackTraceElements = error.getStackTrace();\n         if (stackTraceElements.length == 0 || stepLocation == null) {\n             return error;\n         }\n \n         int newStackTraceLength;\n-        for (newStackTraceLength = 1; newStackTraceLength < stackTraceElements.length; ++newStackTraceLength) {\n-            if (stepDefinition.isDefinedAt(stackTraceElements[newStackTraceLength - 1])) {\n+        for (newStackTraceLength = 1;\n+             newStackTraceLength < stackTraceElements.length;\n+             ++newStackTraceLength) {\n+            if (stepDefinition\n+                .isDefinedAt(stackTraceElements[newStackTraceLength - 1])) {\n                 break;\n             }\n         }\n-        StackTraceElement[] newStackTrace = new StackTraceElement[newStackTraceLength + 1];\n-        System.arraycopy(stackTraceElements, 0, newStackTrace, 0, newStackTraceLength);\n+        StackTraceElement[] newStackTrace =\n+            new StackTraceElement[newStackTraceLength + 1];\n+        System.arraycopy(stackTraceElements, 0, newStackTrace, 0,\n+            newStackTraceLength);\n         newStackTrace[newStackTraceLength] = stepLocation;\n         error.setStackTrace(newStackTrace);\n         return error;\n@@ -155,7 +166,8 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n     }\n \n     StackTraceElement getStepLocation() {\n-        return new StackTraceElement(\"\u273d\", step.getText(), featurePath, getStepLine(step));\n+        return new StackTraceElement(\"\u273d\", step.getText(), featurePath,\n+            getStepLine(step));\n     }\n \n     public Match getMatch() {\n@@ -172,6 +184,7 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n     }\n \n     private static int getStepLine(PickleStep step) {\n-        return step.getLocations().get(step.getLocations().size() - 1).getLine();\n+        return step.getLocations().get(step.getLocations().size() - 1)\n+            .getLine();\n     }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/68/PickleStepDefinitionMatch.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/68/PickleStepDefinitionMatch.java\nindex 26189b2900..0ea06f2080 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/68/PickleStepDefinitionMatch.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/68/PickleStepDefinitionMatch.java\n@@ -36,6 +36,7 @@ class PickleStepDefinitionMatch extends Match implements StepDefinitionMatch {\n     private final transient String featurePath;\n     // The official JSON gherkin format doesn't have a step attribute, so we're marking this as transient\n     // to prevent it from ending up in the JSON.\n+\n     private final transient PickleStep step;\n \n     public PickleStepDefinitionMatch(List<Argument> arguments, StepDefinition stepDefinition, String featurePath, PickleStep step) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}