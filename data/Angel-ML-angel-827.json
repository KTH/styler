{
    "error_id": "827",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/827/CompLongFloatVectorSplitter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/827/CompLongFloatVectorSplitter.java\nindex a6d1b6b541..505734c9b0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/827/CompLongFloatVectorSplitter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/827/CompLongFloatVectorSplitter.java\n@@ -29,16 +29,16 @@ import java.util.Map;\n \n public class CompLongFloatVectorSplitter implements ISplitter {\n \n-  @Override\n-  public Map<PartitionKey, RowUpdateSplit> split(Vector vector, List<PartitionKey> parts) {\n-    LongFloatVector[] vecParts = ((CompLongFloatVector)vector).getPartitions();\n-    assert vecParts.length == parts.size();\n+    @Override\n+    public Map<PartitionKey, RowUpdateSplit> split(Vector vector, List<PartitionKey> parts) {\n+        LongFloatVector[] vecParts = ((CompLongFloatVector) vector).getPartitions();\n+        assert vecParts.length == parts.size();\n \n-    Map<PartitionKey, RowUpdateSplit> updateSplitMap = new HashMap<>(parts.size());\n-    for (int i = 0; i < vecParts.length; i++) {\n-      updateSplitMap.put(parts.get(i),\n-          new CompLongFloatRowUpdateSplit(vector.getRowId(), vecParts[i]));\n+        Map<PartitionKey, RowUpdateSplit> updateSplitMap = new HashMap<>(parts.size());\n+        for (int i = 0; i < vecParts.length; i++) {\n+            updateSplitMap.put(parts.get(i),\n+                    new CompLongFloatRowUpdateSplit(vector.getRowId(), vecParts[i]));\n+        }\n+        return updateSplitMap;\n     }\n-    return updateSplitMap;\n-  }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/827/CompLongFloatVectorSplitter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/827/CompLongFloatVectorSplitter.java\nindex a6d1b6b541..e74765814f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/827/CompLongFloatVectorSplitter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/827/CompLongFloatVectorSplitter.java\n@@ -28,7 +28,6 @@ import java.util.List;\n import java.util.Map;\n \n public class CompLongFloatVectorSplitter implements ISplitter {\n-\n   @Override\n   public Map<PartitionKey, RowUpdateSplit> split(Vector vector, List<PartitionKey> parts) {\n     LongFloatVector[] vecParts = ((CompLongFloatVector)vector).getPartitions();\n@@ -36,9 +35,8 @@ public class CompLongFloatVectorSplitter implements ISplitter {\n \n     Map<PartitionKey, RowUpdateSplit> updateSplitMap = new HashMap<>(parts.size());\n     for (int i = 0; i < vecParts.length; i++) {\n-      updateSplitMap.put(parts.get(i),\n-          new CompLongFloatRowUpdateSplit(vector.getRowId(), vecParts[i]));\n-    }\n+      updateSplitMap.put(parts.get(i), new CompLongFloatRowUpdateSplit(vector.getRowId(), vecParts[i]));\n+  }\n     return updateSplitMap;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/827/CompLongFloatVectorSplitter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/827/CompLongFloatVectorSplitter.java\nindex a6d1b6b541..d76de4dcf7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/827/CompLongFloatVectorSplitter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/827/CompLongFloatVectorSplitter.java\n@@ -29,16 +29,16 @@ import java.util.Map;\n \n public class CompLongFloatVectorSplitter implements ISplitter {\n \n-  @Override\n-  public Map<PartitionKey, RowUpdateSplit> split(Vector vector, List<PartitionKey> parts) {\n-    LongFloatVector[] vecParts = ((CompLongFloatVector)vector).getPartitions();\n-    assert vecParts.length == parts.size();\n \n+    @Override\n+    public Map<PartitionKey, RowUpdateSplit> split(Vector vector, List<PartitionKey> parts) {\n+    LongFloatVector[] vecParts = ((CompLongFloatVector) vector).getPartitions();\n+    assert vecParts.length == parts.size();\n     Map<PartitionKey, RowUpdateSplit> updateSplitMap = new HashMap<>(parts.size());\n     for (int i = 0; i < vecParts.length; i++) {\n-      updateSplitMap.put(parts.get(i),\n-          new CompLongFloatRowUpdateSplit(vector.getRowId(), vecParts[i]));\n+        updateSplitMap.put(parts.get(i), new CompLongFloatRowUpdateSplit(vector.getRowId(), vecParts[i]));\n     }\n     return updateSplitMap;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}