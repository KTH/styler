{
    "error_id": "629",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/629/PredictScore.java\nindex 3f83e8bb1d..3090630f8e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/629/PredictScore.java\n@@ -22,40 +22,40 @@ import com.tencent.angel.ml.math.vector.SparseDummyVector;\n \n public class PredictScore {\n \n-  public static void predict(ADMMState state, double[] model) {\n+    public static void predict(ADMMState state, double[] model) {\n \n-    for (LabeledData instance : state.instances) {\n-      SparseDummyVector features = (SparseDummyVector) instance.getX();\n+        for (LabeledData instance : state.instances) {\n+            SparseDummyVector features = (SparseDummyVector) instance.getX();\n \n-      double z = 0.0;\n+            double z = 0.0;\n \n-      int[] indices = features.getIndices();\n-      for (int i = 0; i < features.getNonzero(); i++) {\n-        int index = state.local2Global[indices[i]];\n-        z += model[index];\n-      }\n+            int[] indices = features.getIndices();\n+            for (int i = 0; i < features.getNonzero(); i++) {\n+                int index = state.local2Global[indices[i]];\n+                z += model[index];\n+            }\n \n-      double score = 1.0 / (1.0 + Math.exp(-z));\n-      instance.setScore(score);\n+            double score = 1.0 / (1.0 + Math.exp(-z));\n+            instance.setScore(score);\n+        }\n     }\n-  }\n \n-  public static void predict(ADMMState state, SparseDoubleVector model) {\n+    public static void predict(ADMMState state, SparseDoubleVector model) {\n \n-    for (LabeledData instance : state.instances) {\n-      SparseDummyVector features = (SparseDummyVector) instance.getX();\n+        for (LabeledData instance : state.instances) {\n+            SparseDummyVector features = (SparseDummyVector) instance.getX();\n \n-      double z = 0.0;\n+            double z = 0.0;\n \n-      int[] indices = features.getIndices();\n+            int[] indices = features.getIndices();\n \n-      for (int i = 0; i < features.getNonzero(); i++) {\n-        int index = state.local2Global[indices[i]];\n-        z += model.get(index);\n-      }\n+            for (int i = 0; i < features.getNonzero(); i++) {\n+                int index = state.local2Global[indices[i]];\n+                z += model.get(index);\n+            }\n \n-      double score = 1.0 / (1.0 + Math.exp(-z));\n-      instance.setScore(score);\n+            double score = 1.0 / (1.0 + Math.exp(-z));\n+            instance.setScore(score);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/629/PredictScore.java\nindex 3f83e8bb1d..1ac3058579 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/629/PredictScore.java\n@@ -58,4 +58,4 @@ public class PredictScore {\n       instance.setScore(score);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/629/PredictScore.java\nindex 3f83e8bb1d..027b36fb66 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/629/PredictScore.java\n@@ -22,40 +22,33 @@ import com.tencent.angel.ml.math.vector.SparseDummyVector;\n \n public class PredictScore {\n \n-  public static void predict(ADMMState state, double[] model) {\n-\n+    public static void predict(ADMMState state, double[] model) {\n     for (LabeledData instance : state.instances) {\n-      SparseDummyVector features = (SparseDummyVector) instance.getX();\n-\n-      double z = 0.0;\n-\n-      int[] indices = features.getIndices();\n-      for (int i = 0; i < features.getNonzero(); i++) {\n-        int index = state.local2Global[indices[i]];\n-        z += model[index];\n-      }\n-\n-      double score = 1.0 / (1.0 + Math.exp(-z));\n-      instance.setScore(score);\n+        SparseDummyVector features = (SparseDummyVector) instance.getX();\n+        double z = 0.0;\n+        int[] indices = features.getIndices();\n+        for (int i = 0; i < features.getNonzero(); i++) {\n+                                                     int index = state.local2Global[indices[i]];\n+                                                     z += model[index];\n+        }\n+\n+        double score = 1.0 / (1.0 + Math.exp(-z));\n+        instance.setScore(score);\n+    }\n     }\n-  }\n-\n-  public static void predict(ADMMState state, SparseDoubleVector model) {\n \n+    public static void predict(ADMMState state, SparseDoubleVector model) {\n     for (LabeledData instance : state.instances) {\n-      SparseDummyVector features = (SparseDummyVector) instance.getX();\n-\n-      double z = 0.0;\n-\n-      int[] indices = features.getIndices();\n-\n-      for (int i = 0; i < features.getNonzero(); i++) {\n-        int index = state.local2Global[indices[i]];\n-        z += model.get(index);\n-      }\n-\n-      double score = 1.0 / (1.0 + Math.exp(-z));\n-      instance.setScore(score);\n+        SparseDummyVector features = (SparseDummyVector) instance.getX();\n+        double z = 0.0;\n+        int[] indices = features.getIndices();\n+        for (int i = 0; i < features.getNonzero(); i++) {\n+                                                     int index = state.local2Global[indices[i]];\n+                                                     z += model.get(index);\n+        }\n+\n+        double score = 1.0 / (1.0 + Math.exp(-z));\n+        instance.setScore(score);\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 15.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/629/PredictScore.java\nindex 3f83e8bb1d..a2ac65a94c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/629/PredictScore.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/629/PredictScore.java\n@@ -12,9 +12,7 @@\n  * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n- */\n-\n-package com.tencent.angel.ml.algorithm.optimizer.admm;\n+ */ package com.tencent.angel.ml.algorithm.optimizer.admm;\n \n import com.tencent.angel.ml.feature.LabeledData;\n import com.tencent.angel.ml.math.vector.SparseDoubleVector;\n",
            "diff_size": 3
        }
    ]
}